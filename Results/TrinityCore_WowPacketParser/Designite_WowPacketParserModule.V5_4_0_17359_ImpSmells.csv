Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V5_4_0_17359.Hotfix,HotfixSerializer<T>,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Hotfix\HotfixSerializer.cs,GenerateDeserializer,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The method has 108 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The method has 106 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The method has 105 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The method has 147 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The method has 143 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The method has 102 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The method has 100 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The method has 106 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The method has 106 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The method has 100 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The method has 108 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The method has 137 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The method has 106 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The method has 131 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The method has 109 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The method has 231 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The method has 233 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The method has 175 lines of code.
Long Method,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 669 lines of code.
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,Cyclomatic complexity of the method is 17
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,Cyclomatic complexity of the method is 13
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,Cyclomatic complexity of the method is 22
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,Cyclomatic complexity of the method is 27
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,Cyclomatic complexity of the method is 15
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,Cyclomatic complexity of the method is 33
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 107
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The length of the statement  "                    PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 }; " is 145.
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipPoi,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionPoiId = gossipPOI.ID }' packet.TimeSpan); " is 190.
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The length of the statement  "            Packet pkt = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 123.
Long Statement,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Complex Conditional,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Complex Conditional,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget"  is complex.
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: const int buttonCount = 132;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: var counter = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadBits("Flags"' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 1' 5' 3' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleCriteriaUnknow,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 6' 5' 2' 1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: var bits10 = packet.ReadBits("Achievement count"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 6' 1' 5' 3' 2' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: var bits20 = packet.ReadBits("Criteria count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][5] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 2' 4);                  packet.StartBitStream(counter[i]' 1' 7);                  packet.StartBitStream(guid2[i]' 0' 1);                  counter[i][3] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    packet.StartBitStream(counter[i]' 0' 6' 4);                  packet.StartBitStream(guid2[i]' 7' 3' 6);                    counter[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadUInt32("Criteria Id"' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(counter[i]' 5);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                    packet.ReadPackedTime("Criteria Date"' i);                    packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AchievementHandler.cs,HandleAllAchievementData,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Realm Id");                    packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 2);                    packet.ReadPackedTime("Achievement Date"' i);                    packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                    packet.ReadInt32("Int14"' i);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.WriteGuid("GUID1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AccountDataHandler.cs,HandleAccountDataTimes,The following statement contains a magic number: for (var i = 0; i < 8; ++i)              {                  packet.ReadTime("[" + (AccountDataType)i + "]" + " Time");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: var bits20 = (int)packet.ReadBits(23);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits20; i++)              {                  bit3[i] = packet.ReadBit();                  usePublicKey[i] = packet.ReadBit();                    if (bit3[i])                      bits0[i] = packet.ReadBits(8);                    bit1[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits20; i++)              {                  if (bit3[i])                      packet.ReadWoWString("Addon URL File"' bits0[i]' i);                    if (usePublicKey[i])                  {                      packet.ReadBytes("Name MD5"' 256' i);                  }                    if (bit1[i])                  {                      packet.ReadByte("Byte24"' i);                      packet.ReadInt32("Int24"' i);                  }                    packet.ReadByte("Addon State"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits10; i++)              {                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                    for (var j = 0; j < 4; j++)                  {                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count2 = packet.ReadBits("RIDBIT21"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count = packet.ReadBits("Char count"' 16);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][3] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                   Vector3 pos = new Vector3();                    packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(guildGuids[c]' 7);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(charGuids[c]' 7);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var level = packet.ReadByte("Level"' c); // v4+66                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Facial Hair"' c); // v4+65                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 3);                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  packet.ReadXORByte(charGuids[c]' 4);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadByte("Skin"' c); //v4+61                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadUInt32("unk1"' i);                      packet.ReadByte("unk2"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleLevelUp,The following statement contains a magic number: for (var i = 0; i < 5; i++)                  packet.ReadInt32("Stat"' (StatType)i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleLevelUp,The following statement contains a magic number: for (var i = 0; i < 5; i++)                  packet.ReadInt32("Power"' (PowerType) i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hasWeekCap[i] = packet.ReadBit();       // 0Ch                  hasWeekCount[i] = packet.ReadBit();     // 1Ch                  hasSeasonTotal[i] = packet.ReadBit();   // 14h                  flags[i] = packet.ReadBits(5);          // 20h              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,ReadTalentInfo510,The following statement contains a magic number: var specCount = packet.ReadBits("Spec Group count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,ReadTalentInfo510,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)                  spentTalents[i] = packet.ReadBits("Spec Talent Count"' 23' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CharacterHandler.cs,ReadTalentInfo510,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)              {                  for (var j = 0; j < 6; ++j)                      packet.ReadUInt16("Glyph"' i' j);                    for (var j = 0; j < spentTalents[i]; ++j)                      packet.ReadUInt16("Talent Id"' i' j);                    packet.ReadUInt32("Spec Id"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleDefenseMessage,The following statement contains a magic number: var len = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleChannelList,The following statement contains a magic number: var length = packet.ReadBits(""' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleChannelList,The following statement contains a magic number: packet.ReadBits("HasPassword"' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var senderGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var guildGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var receiverGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var groupGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 2' 4' 0' 6' 1' 3' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 0' 4' 1' 2' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasSender)                  senderName = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 4' 0' 6' 7' 5' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasPrefix)                  prefixLen = (int)packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasText)                  textLen = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit148C)                  countBits148C = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasReceiver)                  receiverLen = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 2' 1' 4' 6' 7' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasChannel)              {                  var channelLen = (int)packet.ReadBits(7);                  packet.ReadWoWString("Channel Name"' channelLen);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 6' 7' 1' 2' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 0' 4' 1' 3' 5' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 6' 5' 4' 0' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 1' 0' 3' 7' 6' 5' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var target = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var caster = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var powerTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(caster' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(target' 5' 0' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(target' 5' 0' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(target' 5' 0' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(target' 5' 0' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(caster' 6' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(caster' 6' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(caster' 6' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.StartBitStream(powerTargetGUID' 1' 5' 7' 4' 6' 3);                  bits8C = packet.ReadBits(21);                  packet.StartBitStream(powerTargetGUID' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: target[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: caster[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: target[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.StartBitStream(caster' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(caster' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  packet.ReadXORByte(powerTargetGUID' 3);                  packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerTargetGUID' 5' 1' 7);                  for (var i = 0; i < bits8C; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadUInt32E<PowerType>("Power type"' i);                  }                    packet.ReadXORBytes(powerTargetGUID' 4' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerTargetGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerTargetGUID' 2);                  packet.WriteGuid("Power Target GUID"' powerTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(target' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(target' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(target' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(caster' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(target' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(caster' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(caster' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(target' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(caster' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(caster' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORBytes(target' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 0' 4' 6' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 1' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current health");                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 3);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORBytes(powerGUID' 0' 1' 7' 2' 4' 6' 5);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORBytes(guid2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORBytes(guid1' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORBytes(guid1' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleRandom,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 6' 7' 1' 0' 2);                  bits34 = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var bits58 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 7' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 7' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 7' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 7' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current health");                    for (var i = 0; i < bits34; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var AttackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var VictimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(VictimGUID' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(VictimGUID' 4' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(VictimGUID' 4' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(VictimGUID' 4' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var AttackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var VictimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(AttackerGUID' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: var guid = new Byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK0))              {                  packet.ReadInt32("Unk Attacker State 3 1");                  packet.ReadSingle("Unk Attacker State 3 2");                  packet.ReadSingle("Unk Attacker State 3 3");                  packet.ReadSingle("Unk Attacker State 3 4");                  packet.ReadSingle("Unk Attacker State 3 5");                  packet.ReadSingle("Unk Attacker State 3 6");                  packet.ReadSingle("Unk Attacker State 3 7");                  packet.ReadSingle("Unk Attacker State 3 8");                  packet.ReadSingle("Unk Attacker State 3 9");                  packet.ReadSingle("Unk Attacker State 3 10");                  packet.ReadSingle("Unk Attacker State 3 11");                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadSingle("Unk1 Float"' i);                      packet.ReadSingle("Unk2 Float"' i);                    }                    packet.ReadInt32("Unk Attacker State 3 12");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    packet.StartBitStream(guid' 4' 5' 6' 7' 0' 2' 3' 1);                      var counter = packet.ReadBits(21);                    packet.ReadXORByte(guid' 2);                  packet.ReadXORByte(guid' 7);                  packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 4);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14"' i);                      packet.ReadUInt32("unk6"' i);                  }                    packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 0' 2' 5);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 3);                    for (var i = 0; i < powerCount; i++)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadInt32("Attack power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 2' 5' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 0' 7' 2' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 0' 6' 5' 4' 2' 7' 1' 3);                  }                    guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 6' 0' 2' 5);                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  packet.StartBitStream(guid2[i]' 4' 7' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 4' 6' 3' 5' 0' 2' 1' 7);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadWoWString("Set Name"' bits0[i]' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadInt32("Index"' i);                  packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  name[i] = packet.ReadCString("Name"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: gameObject.Data = new int?[32];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: guid = packet.StartBitStream(2' 4' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 3' 6' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var memberCount = packet.ReadBits("Member Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  guid4[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid4[i]' 3' 0' 4' 7' 6' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)                  packet.StartBitStream(guid3' 2' 0' 3' 7' 4' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(guid4[i]' 5);                  packet.ReadByteE<GroupUpdateFlag>("Update Flags"' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(guid4[i]' 3);                  packet.ReadXORByte(guid4[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadXORByte(guid4[i]' 0);                  packet.ReadXORByte(guid4[i]' 2);                  packet.ReadByteE<GroupMemberStatusFlag>("Status"' i);                  packet.ReadXORByte(guid4[i]' 7);                  packet.ReadXORByte(guid4[i]' 1);                  packet.ReadXORByte(guid4[i]' 4);                    packet.WriteGuid("Member GUID"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit80)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 2);                  packet.ReadByte("Byte78");                  packet.ReadXORByte(guid3' 5);                  packet.ReadByteE<ItemQuality>("Loot Threshold");                  packet.ReadXORByte(guid3' 4);                  packet.WriteGuid("Looter GUID"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 2' 1' 6' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guild1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guild2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guild2' 6' 2' 0' 3' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guild2' 6' 2' 0' 3' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guild2' 6' 2' 0' 3' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guild2' 6' 2' 0' 3' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guild2' 6' 2' 0' 3' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var nameLen = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var rankCount = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankName = new int[rankCount];                  for (var j = 0; j < rankCount; j++)                      rankName[j] = (int)packet.ReadBits(7);                    packet.StartBitStream(guild1' 1' 2' 5' 3' 7' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guild2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Style");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                      packet.ReadInt32("Creation Order"' j);                  }                    packet.ReadXORByte(guild1' 1);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadInt32("Emblem Border Style");                  packet.ReadXORByte(guild1' 0);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guild1' 6);                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadXORByte(guild1' 5);                  packet.ReadXORByte(guild1' 3);                  packet.ReadXORByte(guild1' 2);                  packet.ReadXORByte(guild1' 7);                  packet.ReadXORByte(guild1' 4);                    packet.WriteGuid("Guild1"' guild1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guild2' 4' 1' 0' 3' 5' 7' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleNewText,The following statement contains a magic number: packet.ReadWoWString("Text"' (int)packet.ReadBits(10));
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRankServer434,The following statement contains a magic number: const int guildBankMaxTabs = 8;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRankServer434,The following statement contains a magic number: var count = packet.ReadBits("Count"' 17);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRankServer434,The following statement contains a magic number: for (var i = 0; i < count; ++i)                  length[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var motdLength = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var size = packet.ReadBits(17);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    packet.ReadBit("Can SoR"' i);                  packet.StartBitStream(guid[i]' 0' 7' 2);                  packet.ReadBit("Has Authenticator"' i);                  officerLength[i] = packet.ReadBits(8);                  guid[i][3] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 6' 4' 1' 5);                  publicLength[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var infoLength = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadSingle("Last online"' i);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadByte("Unk Byte"' i);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Remaining guild week Rep"' i);                    for (var j = 0; j < 2; ++j)                  {                      var rank = packet.ReadUInt32();                      var value = packet.ReadUInt32();                      var id = packet.ReadUInt32();                      packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    packet.ReadInt32("Guild Reputation"' i);                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadInt32("Total activity"' i);                    packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 2' 6' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 2' 6' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 2' 6' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 2' 6' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 2' 6' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 6' 7' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 6' 7' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 6' 7' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 6' 7' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildRequestPartyState,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 6' 7' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: var count = packet.ReadBits("Achievement count"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 4' 6' 3' 7' 0' 2' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Unk 1"' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadPackedTime("Date"' i);                  packet.ReadXORByte(guid[i]' 2);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadBit("Unk 1"' i);                  packet.ReadBit("Unk 2"' i);                  packet.ReadBit("Unk 3"' i);                  packet.ReadBit("Unk 4"' i);                  packet.ReadBit("Unk 5"' i);                  packet.ReadBit("Unk 6"' i);                  packet.ReadBit("Unk 7"' i);                  packet.ReadBit("Unk 8"' i);                  packet.ReadBit("Unk 9"' i);                  packet.ReadBit("Unk 10"' i);                  packet.ReadBit("Unk 11"' i);                  packet.ReadBit("Unk 12"' i);                  packet.ReadBit("Unk 13"' i);                  packet.ReadBit("Unk 14"' i);                  packet.ReadBit("Unk 15"' i);                  packet.ReadBit("Unk 16"' i);                  packet.ReadBit("Unk 17"' i);                  packet.ReadBit("Unk 18"' i);                  packet.ReadBit("Unk 19"' i);                  packet.ReadBit("Unk 20"' i);                  packet.ReadBit("Unk 21"' i);                  strlen[i] = packet.ReadBits("String length"' 7' i);                  packet.ReadBit("Unk 22"' i);                  packet.ReadBit("Unk 23"' i);                  packet.ReadBit("Unk 24"' i);                  packet.ReadBit("Unk 25"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var itemGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(itemGuid' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)                  packet.StartBitStream(guid' 7' 2' 1' 6' 3' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: var bits30 = packet.ReadBits(17);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: for (var i = 0; i < bits30; i++)              {                  bits7C[i] = packet.ReadBits(21);                  bits6C[i] = packet.ReadBits(21);                  bits40[i] = packet.ReadBits(19);                    bits1C[i] = new uint[bits40[i]];                  bits2C[i] = new uint[bits40[i]];                  bitsC[i] = new uint[bits40[i]];                    for (var j = 0; j < bits40[i]; j++)                  {                      bits1C[i][j] = packet.ReadBits(21);                      bits2C[i][j] = packet.ReadBits(21);                      bitsC[i][j] = packet.ReadBits(20);                  }                    bit4[i] = packet.ReadBit();                  bits5C[i] = packet.ReadBits(20);                  bit3C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: var bits20 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LfgHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LfgHandler.cs,HandleLfgPlayerLockInfoResponse,The following statement contains a magic number: if (bit18)              {                  packet.ParseBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);                  packet.WriteGuid("Guid"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: var bits34 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)                  packet.ReadBits("bitsED"' 3' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit14[i] = !packet.ReadBit();                  bit15[i] = !packet.ReadBit();                  bits18[i] = (int)packet.ReadBits(2);                  bit20b[i] = packet.ReadBit();                  bits14[i] = (int)packet.ReadBits(3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit14[i] = !packet.ReadBit();                  bit15[i] = !packet.ReadBit();                  bits18[i] = (int)packet.ReadBits(2);                  bit20b[i] = packet.ReadBit();                  bits14[i] = (int)packet.ReadBits(3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\LootHandler.cs,HandleLootReleaseResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: var bits0 = packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  bits2084[i] = packet.ReadBits(17);                    bit10[i] = packet.ReadBit();                  if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 3' 6' 4' 2' 5' 1' 0' 7);                  }                    bit1C[i] = packet.ReadBit();                  bits144[i] = packet.ReadBits(13);                  bits0F[i] = packet.ReadBits(8);                    for (var j = 0; j < bits2084[i]; ++j)                      packet.ReadBit("bit84"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  for (var j = 0; j < bits2084[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadInt32("Int14"' i' j);                      packet.ReadByte("Byte14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int0"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      var len = packet.ReadInt32("len");                        packet.ReadBytes(len);                        packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("Int14"' i);                    if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 2' 0' 4' 5' 3' 6' 1' 7);                      packet.WriteGuid("Guid"' guid[i]' i);                  }                    if (bits0F[i] > 0)                      packet.ReadWoWString("String0F"' bits0F[i]' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32("Int14"' i);                  if (bits144[i] > 0)                      packet.ReadWoWString("String144"' bits144[i]' i);                    if (bit1C[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow903,The following statement contains a magic number: uint len = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(1' 3' 4' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 2' 3' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: uint len1 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: uint len2 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleServerRealmSplit,The following statement contains a magic number: uint len = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleHotfixInfo,The following statement contains a magic number: var count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 5' 2' 1' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 3' 1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 3' 6' 1' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown425,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 0' 5' 2' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleRequestCemeteryListResponse,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: var counter = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid2[i]' 6' 3);                  packet.StartBitStream(guid1[i]' 6' 1' 2' 3);                  packet.ReadBits(4);                  packet.StartBitStream(guid1[i]' 5' 0' 7);                  packet.StartBitStream(guid2[i]' 0' 7' 5);                  guid1[i][4] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 1' 4' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknow274,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadInt32("Int3Ch"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                    packet.ReadInt32("Int40h"' i);                    packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid2[i]' 2);                    packet.ReadPackedTime("Time"' i);                  packet.ReadInt32("Int14h"' i);                    packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 3);                    packet.WriteGuid("Guid1"' guid1[i]' i);                  packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 1' 5' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 1' 5' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 1' 5' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 1' 5' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 1' 5' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ReadBits("bits0"' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1024,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 0' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 2' 4' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6775,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 0' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 0' 5' 6' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 3' 6' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1457,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 5' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 5' 4' 2' 7' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5738,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5125,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadByte("Unk 1 byte");                  packet.ReadByte("Unk 2 byte");                    packet.StartBitStream(guid' 1' 5' 7' 2' 3' 4' 0' 6);                  packet.ParseBitStream(guid' 2' 3' 7' 0' 6' 5' 1' 4);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);                  packet.ParseBitStream(guid' 2' 0' 1' 7' 4' 5);                  packet.ReadInt32("Int18");                  packet.ParseBitStream(guid' 3' 6);                    packet.WriteGuid("GUID"' guid);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown170,The following statement contains a magic number: packet.ReadBits("bits10"' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 5' 2' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5963,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 6' 3' 4' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown316,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 1' 4' 2' 5' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2048,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6418,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 6' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown443,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 0' 4' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown442,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 0' 7' 1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2093,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  guid1[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit24 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit20 = !packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid2[2] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid1[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: if (bit28)              {                  packet.ReadXORByte(guid1' 0);                    if (bit20)                      packet.ReadInt32("Int20");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 3);                    if (bit24)                      packet.ReadByte("Byte24");                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                    packet.WriteGuid("Guid2"' guid1);                  packet.WriteGuid("Guid3"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4501,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 5' 4' 6' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1194,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 0' 2' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 7' 0' 5' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1166,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 2' 0' 5' 6' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown24,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 5' 2' 1' 7' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4262,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)                  packet.ReadInt32("Int10");              else              {                  var guid1 = new byte[8];                  byte[][] guid2;                  byte[][][] guid3 = null;                  byte[][][] guid4 = null;                  byte[][][] guid5 = null;                  byte[][][] guid6 = null;                    packet.StartBitStream(guid1' 6' 5' 7' 3' 1' 4);                    var bits10 = packet.ReadBits(19);                    var bits44 = new uint[bits10];                  var bit90 = new bool[bits10];                  var bits14 = new uint[bits10];                  var bits24 = new uint[bits10];                  var bits7C = new uint[bits10];                  var bits34 = new uint[bits10];                  var bits54 = new uint[bits10];                  var bits4 = new uint[bits10];                    guid2 = new byte[bits10][];                  guid3 = new byte[bits10][][];                  guid4 = new byte[bits10][][];                  guid5 = new byte[bits10][][];                  guid6 = new byte[bits10][][];                    for (var i = 0; i < bits10; ++i)                  {                      bits44[i] = packet.ReadBits(22);                      bit90[i] = packet.ReadBit();                      bits14[i] = packet.ReadBits(21);                        guid3[i] = new byte[bits14[i]][];                      for (var j = 0; j < bits14[i]; ++j)                      {                          guid3[i][j] = new byte[8];                          packet.StartBitStream(guid3[i][j]' 7' 2' 6' 4' 1' 3' 5' 0);                      }                        bits24[i] = packet.ReadBits(21);                        guid4[i] = new byte[bits24[i]][];                      for (var j = 0; j < bits24[i]; ++j)                      {                          guid4[i][j] = new byte[8];                          packet.StartBitStream(guid4[i][j]' 4' 2' 1' 7' 6' 5' 3' 0);                      }                        if (bit90[i])                      {                          guid2[i] = new byte[8];                          packet.StartBitStream(guid2[i]' 0' 5' 6' 2' 1' 4' 3' 7);                          bits7C[i] = packet.ReadBits(21);                      }                        bits34[i] = packet.ReadBits(24);                        guid5[i] = new byte[bits34[i]][];                      for (var j = 0; j < bits34[i]; ++j)                      {                          guid5[i][j] = new byte[8];                          packet.StartBitStream(guid5[i][j]' 7' 1' 2' 5' 0' 3' 6' 4);                      }                        bits54[i] = packet.ReadBits(22);                      bits4[i] = packet.ReadBits(20);                        guid6[i] = new byte[bits4[i]][];                      for (var j = 0; j < bits4[i]; ++j)                      {                          guid6[i][j] = new byte[8];                          packet.StartBitStream(guid6[i][j]' 6' 4' 1' 0' 5' 7' 3' 2);                      }                  }                    packet.StartBitStream(guid1' 2' 0);                    for (var i = 0; i < bits10; ++i)                  {                      for (var j = 0; j < bits44[i]; ++j)                          packet.ReadInt32("Int44"' i' j);                        for (var j = 0; j < bits4[i]; ++j)                      {                          packet.ReadXORByte(guid6[i][j]' 3);                          packet.ReadXORByte(guid6[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 5);                          packet.ReadXORByte(guid6[i][j]' 0);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 2);                          packet.ReadSingle("FloatEB"' i' j);                          packet.ReadXORByte(guid6[i][j]' 1);                          packet.ReadXORByte(guid6[i][j]' 6);                          packet.ReadXORByte(guid6[i][j]' 4);                          packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                      }                        for (var j = 0; j < bits14[i]; ++j)                      {                          packet.ReadInt32("IntEB");                          packet.ParseBitStream(guid3[i][j]' 7' 2' 1' 6' 4' 0' 3' 5);                          packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                      }                        for (var j = 0; j < bits24[i]; ++j)                      {                          packet.ReadXORByte(guid4[i][j]' 7);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 5);                          packet.ReadInt32("IntEB"' i' j);                          packet.ReadXORByte(guid4[i][j]' 6);                          packet.ReadXORByte(guid4[i][j]' 1);                          packet.ReadXORByte(guid4[i][j]' 2);                          packet.ReadXORByte(guid4[i][j]' 0);                          packet.ReadXORByte(guid4[i][j]' 4);                          packet.ReadXORByte(guid4[i][j]' 3);                          packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                      }                        if (bit90[i])                      {                          packet.ReadInt32("IntEB"' i);                          packet.ReadXORByte(guid2[i]' 3);                            for (var j = 0; j < bits7C[i]; ++j)                          {                              packet.ReadInt32("IntEB"' i' j);                              packet.ReadInt32("IntEB"' i' j);                          }                            packet.ReadXORByte(guid2[i]' 7);                          packet.ReadXORByte(guid2[i]' 2);                          packet.ReadXORByte(guid2[i]' 4);                          packet.ReadXORByte(guid2[i]' 6);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 5);                          packet.ReadXORByte(guid2[i]' 1);                          packet.ReadInt32("IntEB");                          packet.ReadXORByte(guid2[i]' 0);                          packet.WriteGuid("Guid2"' guid2[i]);                      }                        for (var j = 0; j < bits34[i]; ++j)                      {                          packet.ParseBitStream(guid5[i][j]' 1' 0' 2' 3' 7' 4' 5' 6);                          packet.WriteGuid("Guid5"' guid5[i][j]' i' j);                      }                        packet.ReadInt32("Int14"' i);                        for (var j = 0; j < bits54[i]; ++j)                          packet.ReadInt32("IntEB"' i' j);                  }                    packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                    packet.ReadUInt32<SpellId>("Spell ID");                    packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: var bits1C =  packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 2' 3' 4' 6' 7' 5' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 5' 4' 0' 3' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: for (var i = 0; i < bits1C; ++i)              {                  packet.ParseBitStream(guid2[i]' 5' 0' 4' 1' 3' 2' 7' 6);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6327,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 2' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 2' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown8,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 0' 5' 6' 4' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown305,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 0' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 0' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1321,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown429,The following statement contains a magic number: var bits14 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1135,The following statement contains a magic number: var bits10 = packet.ReadBits(15);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1135,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("Int14"' i);                    for (var j = 0; j < 300; ++j)                      packet.ReadByte("ByteEB"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,MultiplePackets,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  packet.WriteLine("ClientToServer: CMSG_ADDON_REGISTERED_PREFIXES");                  var count = packet.ReadBits("Count"' 24);                  var lengths = new int[count];                  for (var i = 0; i < count; ++i)                      lengths[i] = (int)packet.ReadBits(5);                    for (var i = 0; i < count; ++i)                      packet.ReadWoWString("Addon"' lengths[i]' i);              }              else              {                  packet.WriteLine("ServerToClient: SMSG_QUEST_GIVER_QUEST_COMPLETE");                    packet.ReadInt32("Reward XP");                  packet.ReadInt32<QuestId>("Quest ID");                  packet.ReadInt32("Money");                  packet.ReadInt32("Int1C");                  packet.ReadInt32("Int24");                  packet.ReadInt32("Int20");                  packet.ReadBit("bit28");                  packet.ReadBit("bit18");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,MultiplePackets,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  packet.WriteLine("ClientToServer: CMSG_ADDON_REGISTERED_PREFIXES");                  var count = packet.ReadBits("Count"' 24);                  var lengths = new int[count];                  for (var i = 0; i < count; ++i)                      lengths[i] = (int)packet.ReadBits(5);                    for (var i = 0; i < count; ++i)                      packet.ReadWoWString("Addon"' lengths[i]' i);              }              else              {                  packet.WriteLine("ServerToClient: SMSG_QUEST_GIVER_QUEST_COMPLETE");                    packet.ReadInt32("Reward XP");                  packet.ReadInt32<QuestId>("Quest ID");                  packet.ReadInt32("Money");                  packet.ReadInt32("Int1C");                  packet.ReadInt32("Int24");                  packet.ReadInt32("Int20");                  packet.ReadBit("bit28");                  packet.ReadBit("bit18");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4522,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2205,The following statement contains a magic number: var count = 5;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2205,The following statement contains a magic number: if (bits25) // has custom Name?              {                  bits26 = packet.ReadBits(8);                    for (var i = 0; i < count; ++i)                      bitsA7[i] = (int)packet.ReadBits(7);                    packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2205,The following statement contains a magic number: if (bits25) // has custom Name?              {                  bits26 = packet.ReadBits(8);                    for (var i = 0; i < count; ++i)                      bitsA7[i] = (int)packet.ReadBits(7);                    packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2080,The following statement contains a magic number: if (bitC00)              {                  bits7FA = (int)packet.ReadBits(10);                  bits18 = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2080,The following statement contains a magic number: if (bitC00)              {                  bits7FA = (int)packet.ReadBits(10);                  bits18 = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2087,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("Unk 1"' i);                  packet.ReadInt32("Unk 2"' i);                  packet.ReadInt32("Unk 3"' i);                  packet.ReadInt32("Unk 4"' i);                  packet.ReadInt32("Unk 5"' i);                  packet.ReadInt32("Unk 6"' i);                  packet.ReadInt32("Unk 7"' i);                  packet.ReadInt32("Unk 8"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ReadBits("bits20"' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown169,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 7' 5' 3' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: var bits11 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 6' 7' 3' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3139,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4374,The following statement contains a magic number: for (var i = 0; i < packet.ReadBits("Count"' 22); ++i)                  packet.ReadInt32("IntED"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1060,The following statement contains a magic number: for (var i = 0; i < packet.ReadBits("Count"' 21); ++i)              {                  packet.ReadInt32("Unk 1");                  packet.ReadInt32("Unk 1");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid4[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid4[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.StartBitStream(guid1' 1' 4' 5' 2' 6);                  bits24 = packet.ReadBits(21);                  packet.StartBitStream(guid1' 3' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.StartBitStream(guid4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: if (bit38)              {                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 6);                  packet.ReadInt32("Int18");                    for (var i = 0; i < bits24; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Int1C");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2338,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 0' 3' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 0' 3' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 0' 3' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 0' 3' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 0' 3' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 5' 2' 1' 0' 7);                  var powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3);                    packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Current health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5553,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 2' 4' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1444,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 3' 1' 0' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 6' 0' 4' 3' 7' 2' 1' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1464,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4518,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5525,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 0' 1' 6' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2235,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 5' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 1' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1182,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 3' 7' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 2' 3' 5' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown147,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 6' 1' 5' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 1' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4822,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 7' 0' 4' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2327,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 3' 5' 1' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown62,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 5' 4' 6' 2' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2178,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: var bits14 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6454,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4763,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 1' 7' 2' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 0' 1' 5' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1162,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 4' 2' 3' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown389,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 0' 6' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 3' 6' 0' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1189,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: var bits24 = (int)packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4710,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 6' 0' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1059,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 1' 0' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown163,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 7' 2' 4' 3' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 7' 2' 4' 3' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 7' 2' 4' 3' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 7' 2' 4' 3' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 7' 2' 4' 3' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: var powerCount = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.StartBitStream(powerGUID' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1197,The following statement contains a magic number: packet.ParseBitStream(powerGUID' 4' 2' 3' 7' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 6' 3' 4' 2' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6285,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Int14"); // flags?                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 6);                    packet.WriteGuid("Guid"' guid[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: var bits10 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits38[i] = packet.ReadBits(24);                    guid1[i] = new byte[8];                  guid2[i] = new byte[bits38[i]][];                    for (var j = 0; j < bits38[i]; ++j)                  {                      guid2[i][j] = new byte[8];                      packet.StartBitStream(guid2[i][j]' 5' 2' 6' 0' 1' 4' 3' 7);                  }                    packet.StartBitStream(guid1[i]' 2' 0' 4' 1' 7' 3' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1358,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid1[i]' 2);                    for (var j = 0; j < bits38[i]; ++j)                  {                      packet.ParseBitStream(guid2[i][j]' 4' 0' 1' 5' 3' 7' 2' 6);                      packet.WriteGuid("Guid2"' guid2[i][j]' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadPackedTime("Date");                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Item Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid1[i]' 0);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: var bits10 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 4' 1' 0' 5' 7' 2' 3' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: var bits34 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 1' 5' 6' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: var bits44 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid3[i] = new byte[8];                  packet.StartBitStream(guid3[i]' 3' 4' 6' 7' 1' 0' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: var bits24 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 0' 1' 6' 4' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: var bits54 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 3' 2' 7' 5' 6' 0' 1' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ReadXORByte(guid5[i]' 1);                  packet.ReadXORByte(guid5[i]' 2);                  packet.ReadXORByte(guid5[i]' 3);                  packet.ReadXORByte(guid5[i]' 4);                  packet.ReadXORByte(guid5[i]' 0);                  packet.ReadXORByte(guid5[i]' 5);                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid5[i]' 7);                  packet.ReadSingle("Z");                  packet.ReadSingle("Y");                  packet.ReadXORByte(guid5[i]' 6);                  packet.ReadSingle("X");                    packet.WriteGuid("Guid5"' guid5[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ReadSingle("Y");                  packet.ReadInt32("Vignette Id");                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadSingle("Z");                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadSingle("X");                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid4[i]' 5' 1' 3' 4' 2' 7' 0' 6);                  packet.WriteGuid("Guid4"' guid4[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ParseBitStream(guid1[i]' 0' 1' 4' 7' 5' 6' 2' 3);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown177,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid3[i]' 2' 4' 3' 0' 6' 7' 1' 5);                  packet.WriteGuid("Guid1"' guid3[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadBits("bits48"' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadBits("bits44"' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1318,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 0' 4' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5727,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 4' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: var bits10 = packet.ReadBits(17);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  bits30[i] = packet.ReadBits(6);                  packet.StartBitStream(guid[i]' 4' 0' 2' 3);                  bit16E[i] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid[i][1] = packet.ReadBit();                  bitsA2[i] = packet.ReadBits(8);                  packet.StartBitStream(guid[i]' 6' 5);                  bit16F[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1119,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadInt32<AreaId>("Area Id");                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("Int14"' i);                  packet.ReadSingle("Float14"' i);                    for (var j = 0; j < 2; ++j) // skill?                  {                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadXORByte(guid[i]' 3);                  packet.ReadWoWString("Name"' bits30[i]' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadWoWString("Note?"' bitsA2[i]' i);                  packet.ReadByteE<Class>("Class");                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt64("Int8"' i);                  packet.ReadByte("Byte14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadWoWString("String14"' bits0[i]' i);                  packet.ReadInt64("IntED"' i);                  packet.ReadInt32<ZoneId>("Zone Id");                  packet.ReadByte("Level"' i);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: for (var i = 0; i < 3; ++i)              {                  packet.ReadInt32("Unk 1"' i);                  packet.ReadByte("Byte48"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 5' 2' 3' 0' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown141,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 2' 3' 1' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: var bits2C = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 4' 5' 6' 0);                  bits8[i] = packet.ReadBits(20);                  packet.StartBitStream(guid2[i]' 7' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: for (var i = 0; i < bits2C; ++i)              {                    for (var j = 0; j < bits8[i]; ++j)                  {                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int0"' i);                      packet.ReadInt32("Int30"' i);                      packet.ReadInt32("Int30"' i);                  }                    packet.ParseBitStream(guid2[i]' 0' 1' 2' 5' 3' 6' 4' 7);                    packet.WriteGuid("Guid2"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown23,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < 3; ++i)                  packet.ReadByte("Byte15B"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: var bits10 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: var bits14 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 5' 4' 1' 6' 3' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: var bits12C = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)              {                  packet.ParseBitStream(guid1[i]' 3' 0' 7' 4' 2' 6' 1' 5);                  packet.WriteGuid("Guid1"' guid1[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2055,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: var bits18 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  guid[i] = new byte[8];                  bit410[i] = !packet.ReadBit();                  bitsC[i] = packet.ReadBits(11);                  packet.ReadBit(); // fake bit                  packet.StartBitStream(guid[i]' 7' 6' 1' 2' 5' 3' 0' 4);                  bit820[i] = !packet.ReadBit();                  bits420[i] = packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2202,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)              {                  packet.ParseBitStream(guid[i]' 6' 0' 7' 3' 5' 1' 4' 2);                    if (bit410[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadWoWString("Status Text"' bits420[i]' i);                    if (bit820[i])                      packet.ReadInt32("Int1C"' i);                    packet.ReadInt32("Ticket Id"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadInt32("Int1C"' i);                  packet.ReadWoWString("URL"' bitsC[i]' i);                    packet.WriteGuid("GUID"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 6' 7' 4' 5' 2' 3' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: var bits44 = packet.ReadBits(23);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: var bits60 = packet.ReadBits(23);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: var bits34 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid3[i] = new byte[8];                  guid3[i][0] = packet.ReadBit();                  bit14[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 6' 7);                  bitE[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 3' 2' 1);                  bits1C[i] = packet.ReadBits(21);                  bit2C[i] = packet.ReadBit();                  packet.StartBitStream(guid3[i]' 5' 4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  if (bitE[i])                      packet.ReadInt16("IntE"' i);                    packet.ReadXORByte(guid3[i]' 3);                  packet.ReadXORByte(guid3[i]' 4);                    for (var j = 0; j < bits1C[i]; ++j)                  {                      packet.ReadByte("ByteED"' i' j);                      packet.ReadInt32("IntED"' i' j);                  }                    if (bit14[i])                      packet.ReadInt32("Int14"' i);                    packet.ReadXORByte(guid3[i]' 0);                  packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 6);                    var len = packet.ReadInt32("Int30"' i);                    packet.ReadBytes(len);                    packet.ReadXORByte(guid3[i]' 1);                  packet.ReadXORByte(guid3[i]' 7);                  packet.ReadXORByte(guid3[i]' 5);                    packet.ReadByte("ByteED"' i);                  packet.ReadInt32("IntED"' i);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: if (bit28)              {                  packet.ReadInt32("Int20");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadInt32("Int24");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt64("Int18");                  packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2305,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 1' 3' 0' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown19,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 5' 1' 0' 7' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: var bits10 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 0' 7' 5);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 2' 1);                  packet.ReadBit();                  packet.StartBitStream(guid[i]' 3' 4' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1203,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Int14"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadInt32("IntED"' i);                  packet.ReadXORByte(guid[i]' 7);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown152,The following statement contains a magic number: var count = packet.ReadBits("Count"' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 1' 6' 3);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 0' 7' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6528,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 5' 4' 7' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown54,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 3' 4' 0' 7);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 5' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 5);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 6);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5298,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown410,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: var bits40 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1183,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 0' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1431,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1460,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown22,The following statement contains a magic number: var bits14 = packet.ReadBits("bits14"' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown22,The following statement contains a magic number: if (bits14 == 2)                  packet.ReadBit("bit34");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown22,The following statement contains a magic number: if (bits14 == 2)              {                  packet.ReadInt32("Int24");                  packet.ReadInt32("Int2C");                  packet.ReadInt32("Int30");                  packet.ReadInt32("Int1C");                  packet.ReadInt32("Int20");                  packet.ReadInt32("Int28");              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6018,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 3' 1' 7' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 6' 7' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4950,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 0' 6' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6047,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 5' 2' 7' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5659,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 3' 1' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5971,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5702,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: var bits10 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  guid2[i] = new byte[8];                    packet.StartBitStream(guid1[i]' 3' 6);                  packet.StartBitStream(guid2[i]' 5' 4);                  guid1[i][2] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  guid1[i][7] = packet.ReadBit();                  packet.StartBitStream(guid2[i]' 6' 7' 3);                  packet.StartBitStream(guid1[i]' 5' 0);                  guid2[i][2] = packet.ReadBit();                  packet.StartBitStream(guid1[i]' 2' 4);                  guid2[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1406,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid2[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 0);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 1);                    packet.ReadInt32("Int14");                  packet.ReadInt32("Int14");                    packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid1[i]' 4);                    packet.ReadInt32("Int14");                    packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 5);                    packet.WriteGuid("Guid1"' guid1[i]);                  packet.WriteGuid("Guid2"' guid2[i]);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1090,The following statement contains a magic number: var bits14 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ReadBits("bits10"' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown159,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 2' 1' 4' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)                  packet.StartBitStream(guid1' 2' 5' 3' 6' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid1' 3' 0' 1' 7' 2' 6' 5' 4);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4930,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 1' 6' 7' 3' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4703,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 5' 0' 3' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5838,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1299,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 4' 0' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 4' 2' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2307,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2' 0' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6174,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5376,The following statement contains a magic number: var bits10 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1031,The following statement contains a magic number: for (var i = 0; i < 256; ++i)                  packet.ReadBit("bit10"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)                  packet.StartBitStream(guid3' 5' 1' 3' 0' 7' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)                  packet.StartBitStream(guid2' 6' 4' 0' 2' 7' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit20)              {                  packet.ParseBitStream(guid2' 4' 7' 5' 1' 2' 6' 3' 0);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: if (bit30)              {                  packet.ParseBitStream(guid3' 3' 2' 7' 0' 5' 1' 6' 4);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown272,The following statement contains a magic number: packet.ParseBitStream(guid1' 0' 2' 5' 4' 3' 1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6083,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleMultiplePackets1,The following statement contains a magic number: var len2 = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4524,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.StartBitStream(guid' 7' 6' 0' 4' 5' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6774,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6315,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 0' 4' 1' 7' 6' 2' 5' 3);                  packet.ParseBitStream(guid' 4' 0' 6' 7' 3' 2' 1' 5);                    packet.WriteGuid("Guid"' guid);              }              else                  packet.ReadInt32("Int10");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 2' 6' 4' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6062,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 5' 2' 7' 6' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 3' 0' 6' 4' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2109,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 7' 2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5383,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.ReadInt32("Int10");                    packet.StartBitStream(guid' 3' 6' 2' 0' 4' 1' 7' 5);                  packet.ParseBitStream(guid' 4' 0' 1' 7' 5' 3' 2' 6);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                  var powerGUID = new byte[8];                    packet.ReadInt32("Int50");                  packet.ReadInt32("Int10");                  packet.ReadInt32("Int64");                  packet.ReadInt32("Int14");                  packet.ReadInt32("Int60");                    packet.StartBitStream(guid2' 1' 6);                  packet.StartBitStream(guid1' 3' 2' 7);                  packet.StartBitStream(guid2' 3' 2);                  guid1[6] = packet.ReadBit();                  var hasPowerData = packet.ReadBit();                  guid1[4] = packet.ReadBit();                    var powerCount = 0u;                  if (hasPowerData)                  {                      packet.StartBitStream(powerGUID' 0' 7);                      powerCount = packet.ReadBits(21);                      packet.StartBitStream(powerGUID' 3' 2' 6' 4' 1' 5);                  }                    guid1[0] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 1);                  if (hasPowerData)                  {                      packet.ReadXORByte(powerGUID' 2);                        for (var i = 0; i < powerCount; i++)                      {                          packet.ReadInt32("Value"' i);                          packet.ReadUInt32E<PowerType>("Power type"' i);                      }                        packet.ReadInt32("Current Health");                      packet.ReadXORByte(powerGUID' 6);                      packet.ReadInt32("Spell power");                      packet.ReadXORByte(powerGUID' 4);                      packet.ReadXORByte(powerGUID' 1);                      packet.ReadXORByte(powerGUID' 3);                      packet.ReadInt32("Attack Power");                      packet.ReadXORByte(powerGUID' 0);                      packet.ReadXORByte(powerGUID' 7);                      packet.ReadXORByte(powerGUID' 5);                      packet.WriteGuid("Power GUID"' powerGUID);                  }                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 7);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5177,The following statement contains a magic number: var len1 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5177,The following statement contains a magic number: var len2 = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1' 6' 7' 4' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5758,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 5' 6' 4' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: var bits152 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.StartBitStream(guid2' 4' 3' 2);                  bit92 = packet.ReadBit();                  bit100 = packet.ReadBit();                  packet.StartBitStream(guid2' 7' 1' 0' 5' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit24)                  packet.ReadBits("bits24"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit28)                  packet.ReadBits("bits28"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1827,The following statement contains a magic number: if (bit104)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                    if (bit100)                      packet.ReadInt32("Int100");                    packet.ReadXORByte(guid2' 2);                    packet.ReadSingle("float76");                  packet.ReadInt32("Int84");                  packet.ReadByte("byte80");                    packet.ReadXORByte(guid2' 1);                    packet.ReadSingle("float72");                  packet.ReadSingle("float64");                    packet.ReadXORByte(guid2' 4);                    if (bit92)                      packet.ReadInt32("Int88");                    packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("float68");                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4831,The following statement contains a magic number: packet.ReadBits("bit3"' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1446,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 0' 3' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4998,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 5' 1' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2187,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 2' 4' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1032,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 0' 7' 4' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5091,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 0' 6' 5' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 4' 7' 3' 1' 2' 0' 6' 5);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 6);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power type"' i);                      packet.ReadInt32("Value"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack Power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6199,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 1' 3' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5134,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 4' 6' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 2' 5' 3' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1155,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: var bits18 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 6' 0' 3' 7' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4277,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3162,The following statement contains a magic number: var bits14 = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown3162,The following statement contains a magic number: for (var i = 0; i < bits14; ++i)                  bits4[i] = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1355,The following statement contains a magic number: uint count = 6;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1374,The following statement contains a magic number: if (bit428)              {                  packet.ReadBit("bit10");                  bits28 = (int)packet.ReadBits(10);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 5' 7' 2' 3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4947,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2' 0' 1' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 0' 3' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4799,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown281,The following statement contains a magic number: packet.ReadBits("bits10"' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4990,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 1' 7' 5' 2' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown301,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 6' 1' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown133,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 7' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5882,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 6' 4' 3' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6166,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7' 2' 4' 6' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 6' 5' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5959,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 1' 3' 5' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown4679,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 1' 6' 5' 7' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 3' 2' 7' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown130,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2083,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2083,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadBits("bits0"' 8' i);                  packet.ReadBits("bits0"' 8' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2083,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadBits("bits0"' 8' i);                  packet.ReadBits("bits0"' 8' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: var bits28 = (int)packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1297,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 4' 0' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown48,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 3' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown441,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 1' 7' 6' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2224,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: var bits14 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 3' 0' 5' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1366,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid1' 7' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1386,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1442,The following statement contains a magic number: var bits10 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: var bits130 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: var bits28 = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: var bits10 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown28,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 3' 5' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown146,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2212,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1310,The following statement contains a magic number: var bits0 = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown1310,The following statement contains a magic number: packet.ReadWoWString("String10"' packet.ReadBits(8));
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 7' 6' 1' 2' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2063,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 5' 0' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6536,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown5766,The following statement contains a magic number: packet.ReadBits("bits3"' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 6' 0' 5' 3' 1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown2851,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 3' 6' 5' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown597,The following statement contains a magic number: var bits10 = packet.ReadBits("Unk bits22"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 6' 5' 0' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MiscellaneousHandler.cs,HandleUnknown6910,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 4' 2' 6' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var ownerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var factingTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(ownerGUID' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(ownerGUID' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bitB0)              {                  packet.ReadBits("bits9C"' 2);                  bits8C = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bitB0)              {                  packet.ReadBits("bits9C"' 2);                  bits8C = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var waypointCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3' 4' 6' 2' 1' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineCount = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineType = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 4' 6' 5' 1' 0' 7' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 1' 2' 7' 3' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 2' 1' 7' 0' 5' 3' 4' 6);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 2)              {                  var spot = new Vector3                  {                      Y = packet.ReadSingle()'                      Z = packet.ReadSingle()'                      X = packet.ReadSingle()                  };                  packet.AddValue("Facing Spot"' spot);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 4)                  packet.ReadSingle("Facing Angle");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 1' 5' 3' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 7' 6' 2' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var counter2 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 1' 2' 3' 4' 5);                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                  packet.ReadXORByte(transportGUID' 5);                  packet.ReadByte("Seat");                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 3);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 6);                  packet.ReadXORByte(transportGUID' 7);                  transPos.X = packet.ReadSingle();                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadInt32("Transport Time");                  transPos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGUID' 1);                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 5' 1' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveTimeSkipped434,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 6' 0' 5' 3' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  hasTransportTime3 = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGuid' 4' 5' 3' 2' 7' 0' 1' 6);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasMovementFlagsExtra)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: var counter = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: if (hasTransport)              {                  var tpos = new Vector4();                    packet.ReadXORByte(transportGuid' 7);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    tpos.O = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 0);                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadSByte("Transport Seat");                  tpos.Z = packet.ReadSingle();                  tpos.Y = packet.ReadSingle();                    packet.ReadXORByte(transportGuid' 2);                    tpos.X = packet.ReadSingle();                  packet.ReadUInt32("Transport Time");                    packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 5);                  packet.ReadXORByte(transportGuid' 3);                    packet.WriteGuid("Transport GUID"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 1' 4' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 3' 5' 4' 2' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4' 2' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 3' 0' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 3' 0' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 3' 0' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 3' 0' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5730,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 3' 0' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 6' 5' 7' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 6' 3' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 3' 1' 6' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandlePlayHoverAnim,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 4' 6' 7' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 3' 6' 1' 4' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveGravityDisable,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 1' 5' 4' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 5' 1' 0' 7' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleSplineMoveRoot,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 3' 0' 6' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: var bits98 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  guid2[1] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit18)                  bits18 = packet.ReadBits(30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit1C)                  bits1C = packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown1815,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 5);                  packet.ReadInt32("Int54");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 3);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.StartBitStream(guid1' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: var bits98 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit18)                  bits18 = packet.ReadBits(30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit1C)                  bits1C = packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  guid2[3] = packet.ReadBit();                  bit5C = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  bit64 = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  guid2[2] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown2874,The following statement contains a magic number: if (bit68)              {                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 1);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 5);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float4C");                  packet.ReadInt32("Int54");                  packet.WriteGuid("Guid7"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 5' 6' 4' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleMoveUpdateFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 2' 3' 1' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  bit6C = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 7);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 4' 6' 0' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: var bitsA0 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int5C");                  packet.ReadSingle("Float54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float50");                  packet.ReadByte("Byte58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  if (bit6C)                      packet.ReadInt32("Int68");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float48");                  packet.WriteGuid("Guid8"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6754,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5750,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 1' 7' 4' 5' 3' 6' 2);                  packet.ReadBit("bit16");                  guid[0] = packet.ReadBit();                  packet.ParseBitStream(guid' 0' 2' 3' 1' 4' 6' 5' 7);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit64 = false;                  var bit6C = false;                  var bit90 = false;                    var bit98 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 6' 0' 1' 5);                  var bit28 = !packet.ReadBit();                  var bit9C = packet.ReadBit();                  var bitsA0 = packet.ReadBits(22);                  guid1[4] = packet.ReadBit();                    var bit70 = packet.ReadBit();                  if (bit70)                  {                      packet.StartBitStream(guid2' 5' 6);                      bit6C = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 0' 4' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                  }                    guid1[3] = packet.ReadBit();                  var bit38 = !packet.ReadBit();                  var hasExtraMovementFlags = !packet.ReadBit();                  var bitB0 = !packet.ReadBit();                  var hasMovementFlags = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  var bit94 = packet.ReadBit();                  var bitB4 = packet.ReadBit();                    if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit94)                      bit90 = packet.ReadBit();                    var bit78 = !packet.ReadBit();                  var bit9D = packet.ReadBit();                    if (bit70)                  {                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float54");                      packet.ReadSingle("Float48");                      packet.ReadXORByte(guid2' 2);                      packet.ReadXORByte(guid2' 3);                      if (bit64)                          packet.ReadInt32("Int60");                      packet.ReadXORByte(guid2' 6);                      packet.ReadXORByte(guid2' 0);                      packet.ReadByte("Byte58");                      packet.ReadSingle("Float50");                      packet.ReadSingle("Float4C");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 4);                      packet.ReadInt32("Int5C");                      if (bit6C)                          packet.ReadInt32("Int68");                      packet.WriteGuid("Guid2"' guid2);                  }                    if (bit38)                      packet.ReadSingle("Float38");                  packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Float34");                  packet.ReadXORByte(guid1' 2);                  if (bit94)                  {                      if (bit90)                      {                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float88");                          packet.ReadSingle("Float8C");                      }                        packet.ReadSingle("Float80");                      packet.ReadInt32("Int7C");                  }                    packet.ReadXORByte(guid1' 6);                  if (bitB0)                      packet.ReadInt32("IntB0");                  if (bit28)                      packet.ReadInt32("Int28");                  packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 1);                  if (bit98)                      packet.ReadSingle("Float98");                  packet.ReadXORByte(guid1' 4);                  if (bit78)                      packet.ReadSingle("Float78");                  packet.ReadXORByte(guid1' 5);                    for (var i = 0; i < bitsA0; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float10");                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Float2C");                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 0' 1);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 2' 6' 5);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(guid2' 2);                  packet.ReadByte("Byte50");                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 1);                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 5);                  packet.ReadSingle("Float40");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float4C");                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5722,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 3' 6);                  bit64 = packet.ReadBit();                  packet.StartBitStream(guid2' 2' 0);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: if (bit68)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 5);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float48");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float4C");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 6);                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 3);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6742,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  packet.StartBitStream(guid2' 5' 7' 1' 6);                  bit5C = packet.ReadBit();                  packet.StartBitStream(guid2' 0' 2' 3);                  bit64 = packet.ReadBit();                  guid2[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: if (bit68)              {                  if (bit5C)                      packet.ReadInt32("Int58");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float44");                  packet.ReadXORByte(guid2' 1);                  if (bit64)                      packet.ReadInt32("Int60");                  packet.ReadSingle("Float4C");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadSingle("Float48");                  packet.ReadInt32("Int54");                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid2' 6);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid2' 4);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown5942,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  bit94 = packet.ReadBit();                  packet.StartBitStream(guid2' 3' 4' 2);                  bit9C = packet.ReadBit();                  packet.StartBitStream(guid2' 5' 1' 6' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: var bitsD0 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement flags"' 30);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: var bits18 = (int)packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: for (var i = 0; i < bits18; ++i)                  packet.ReadBits("bitsED"' 2' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: if (bitA0)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid2' 1);                  packet.ReadByte("Byte88");                  packet.ReadSingle("Float7C");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Float80");                  packet.ReadSingle("Float78");                  if (bit94)                      packet.ReadInt32("Int90");                  packet.ReadSingle("Float84");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 0);                  packet.ReadInt32("Int8C");                  if (bit9C)                      packet.ReadInt32("Int98");                  packet.ReadXORByte(guid2' 5);                  packet.WriteGuid("GuidE"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown4890,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\MovementHandler.cs,HandleUnknown6127,The following statement contains a magic number: if (packet.Direction == Direction.ClientToServer)              {                  var guid = new byte[8];                    packet.StartBitStream(guid' 5' 3' 0' 6' 1' 7' 4' 2);                  packet.ParseBitStream(guid' 6' 7' 3' 0' 5' 4' 2' 1);                    packet.WriteGuid("Guid"' guid);              }              else              {                  var guid1 = new byte[8];                  var guid2 = new byte[8];                    var bit5C = false;                  var bit64 = false;                  var bit88 = false;                    var bitA8 = !packet.ReadBit();                  packet.StartBitStream(guid1' 1' 5);                  var bits98 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 2' 4);                  var bit90 = !packet.ReadBit();                  var bit95 = packet.ReadBit();                  var bit70 = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  var bit30 = !packet.ReadBit();                  var bit20 = !packet.ReadBit();                  var bit94 = packet.ReadBit();                  packet.StartBitStream(guid1' 7' 6);                  var bitAC = packet.ReadBit();                  guid1[3] = packet.ReadBit();                    var bit68 = packet.ReadBit();                  if (bit68)                  {                      packet.StartBitStream(guid2' 4' 2' 7' 6' 3);                      bit64 = packet.ReadBit();                      guid2[1] = packet.ReadBit();                      bit5C = packet.ReadBit();                      packet.StartBitStream(guid2' 0' 5);                  }                    var bit8C = packet.ReadBit();                    var hasExtraMovementFlags = !packet.ReadBit();                  if (hasExtraMovementFlags)                      packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                    if (bit8C)                      bit88 = packet.ReadBit();                    var hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      packet.ReadBitsE<MovementFlag>("Movement flags"' 30);                    if (bit8C)                  {                      packet.ReadInt32("Int74");                        if (bit88)                      {                          packet.ReadSingle("Float80");                          packet.ReadSingle("Float84");                          packet.ReadSingle("Float7C");                      }                        packet.ReadSingle("Float78");                  }                    if (bit68)                  {                      if (bit64)                          packet.ReadInt32("Int60");                        packet.ReadXORByte(guid2' 4);                      packet.ReadSingle("Float4C");                      packet.ReadSingle("Float44");                      packet.ReadXORByte(guid2' 7);                      packet.ReadXORByte(guid2' 3);                      packet.ReadXORByte(guid2' 5);                      packet.ReadSingle("Float40");                      packet.ReadXORByte(guid2' 2);                      packet.ReadSingle("Float48");                      packet.ReadByte("Byte50");                      packet.ReadXORByte(guid2' 6);                      packet.ReadInt32("Int54");                      if (bit5C)                          packet.ReadInt32("Int58");                      packet.ReadXORByte(guid2' 1);                      packet.ReadXORByte(guid2' 0);                      packet.WriteGuid("Guid2"' guid2);                  }                    packet.ReadSingle("Float24");                  if (bit20)                      packet.ReadInt32("Int20");                  if (bit70)                      packet.ReadSingle("Float70");                  packet.ReadXORByte(guid1' 2);                  if (bit90)                      packet.ReadSingle("Float90");                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  if (bitA8)                      packet.ReadInt32("IntA8");                  packet.ReadSingle("Float28");                  if (bit30)                      packet.ReadSingle("Float30");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 4);                  for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("IntEA"' i);                    packet.ReadSingle("Float2C");                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var bits8 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 3' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint amountOfOptions = packet.ReadBits("Amount of Options"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  optionTextLen[i] = packet.ReadBits(12);                  boxTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  optionTextLen[i] = packet.ReadBits(12);                  boxTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint questgossips = packet.ReadBits("Amount of Quest gossips"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < questgossips; ++i)              {                  titleLen[i] = packet.ReadBits(9);                  packet.ReadBit("Change Icon"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 3' 4' 7' 2' 1' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 5' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 5' 0' 6' 2' 7' 3' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 5);                    packet.ReadInt32("Threat"' i);                    packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                    packet.WriteGuid("Hostile"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: var count = packet.ReadBits("Size"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid2[i] = new byte[8];                  packet.StartBitStream(guid2[i]' 7' 4' 3' 2' 6' 1' 0' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 7' 4' 0' 1' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(guid2[i]' 2' 5' 6' 0' 1' 4);                  packet.ReadInt32("IntED"' i);                  packet.ParseBitStream(guid2[i]' 7' 3);                  packet.WriteGuid("Guid1D"' guid2[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 0' 6' 3' 2' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: uint count = packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 3' 7' 1' 6' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  NpcVendor vendor = new NpcVendor();                    int maxCount = packet.ReadInt32("Max Count"' i);                  vendor.Type = packet.ReadUInt32("Type"' i); // 1 - item' 2 - currency                    if (hasCondition[i])                      vendor.PlayerConditionID = packet.ReadUInt32("Condition ID"' i);                    packet.ReadInt32("Max Durability"' i);                  packet.ReadInt32("Item Upgrade ID"' i);                  packet.ReadInt32("Price"' i);                  packet.ReadInt32("Display ID"' i);                  vendor.Item = packet.ReadInt32<ItemId>("Item ID"' i);                  vendor.Slot = packet.ReadInt32("Item Position"' i);                    if (hasExtendedCost[i])                      vendor.ExtendedCost = packet.ReadUInt32("Extended Cost"' i);                    uint buyCount = packet.ReadUInt32("Buy Count"' i);                  vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  if (vendor.Type == 2)                      vendor.MaxCount = buyCount;                    tempList.Add(vendor);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 2' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadInt32("Int824"' i);                  packet.ReadInt32("Int824"' i);                  packet.ReadByte("Byte824"' i);                  for (int j = 0; j < 3; ++j)                      packet.ReadInt32("Int824"' i' j);                  packet.ReadInt32("Int824"' i);                  packet.ReadByte("Byte824"' i);                  packet.ReadInt32("Int824"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var number = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.StartBitStream(number' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.StartBitStream(number' 5' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.StartBitStream(number' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(number' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(number' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(number' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORBytes(number' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: const int maxDeclinedNameCases = 5;
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: for (var i = 0; i < maxDeclinedNameCases; ++i)                  declinedNameLen[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  packet.ReadUInt32E<ReputationRank>("Faction Standing"' i);                  packet.ReadByteE<FactionFlag>("Faction Flags"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)                  packet.ReadBit("Count"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 4' 7' 2' 5' 1' 6' 0);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 6' 1' 2);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 4' 5' 7' 0' 3);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint qItemCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint lenS4 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint lenS3 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint lenS5 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32("Display ID 3");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32("Display ID 2");
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var name = new string[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var femaleName = new string[4];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  if (stringLens[i][0] > 1)                      name[i] = packet.ReadCString("Name"' i);                  if (stringLens[i][1] > 1)                      femaleName[i] = packet.ReadCString("Female Name"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits278 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits22 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextResponse,The following statement contains a magic number: uint textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.Probabilities = new float[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.BroadcastTextId = new uint[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.Probabilities[i] = pkt.ReadSingle("Probability"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.BroadcastTextId[i] = pkt.ReadUInt32("Broadcast Text Id"' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 3' 0' 4' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[6] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    var bits38 = packet.ReadBits(6);                    packet.StartBitStream(guid2' 1' 7' 2);                    guid1[4] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid2[3] = packet.ReadBit();                    packet.StartBitStream(guid1' 5' 0);                  guid2[5] = packet.ReadBit();                    packet.ReadBit(); // fake bit                    guid1[2] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 4);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid1' 5);                    packet.WriteGuid("Guid1"' guid1);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 6' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 1' 5' 6' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 2' 7' 3' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 5' 2' 1' 3' 4' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits907 = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var count = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  len2949_20[i] = packet.ReadBits(8);                  counter[i] = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  len2949_20[i] = packet.ReadBits(8);                  counter[i] = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2432 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2048 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2112 = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits157 = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits1657 = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2368 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits1792 = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits29 = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("int3001+16"' i);                  packet.ReadInt32("int3001+0"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < 5; ++i)              {                  packet.ReadInt32("int2986+40"' i);                  packet.ReadInt32("int2986+0"' i);                  packet.ReadInt32("int2986+20"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestNpcQuery,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleUnknown6462,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleUnknown6462,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)                  bits4[i] = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: uint count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  packet.ReadUInt32("Reputation Value Id"' i);                  packet.ReadUInt32("Reputation Faction"' i);                  packet.ReadInt32("Reputation Value"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  packet.ReadUInt32("Currency Id"' i);                  packet.ReadUInt32("Currency Count"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits756 = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits7353 = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits6 = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits24D4 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits21C0 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits1024 = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bitsFD8b = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits1774 = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits8377 = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits2228 = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(2' 3' 7' 4' 0' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 3' 4' 7' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var sha = new byte[20];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[4] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[19] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[12] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[9]= packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[6] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[18] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[17] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[8] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[13] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[10] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[11] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[15] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[3] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[14] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[7] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[5] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[16] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[2] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var size = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits23 = packet.ReadBits("Unkbits"' 21);                  packet.ReadBit("Unk 1");                  classCount = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBit("Unk 2");                    bit112 = packet.ReadBit();                  count1096 = new uint[bits23];                  len4 = new uint[bits23];                  len69 = new uint[bits23];                  for (var i = 0; i < bits23; ++i)                  {                      count1096[i] = packet.ReadBits(23);                      len4[i] = packet.ReadBits(7);                      len69[i] = packet.ReadBits(10);                  }                    bits6 = packet.ReadBits(21);                  len5 = new uint[bits6];                  len261 = new uint[bits6];                  for (var i = 0; i < bits6; ++i)                  {                      len261[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      len5[i] = packet.ReadBits(8);                  }                  bit116 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: var lineCount = packet.ReadBits("Line Count"' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: for (var i = 0; i < lineCount; i++)                  lineLength[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: var sha = new byte[20];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[12] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[4] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[5] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[7] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[18] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[2] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[19] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[8] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[11] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[13] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[14] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[9] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[6] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[3] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[10] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[15] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[17] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[16] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleInitialSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleLearnedSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleRemovedSpell,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellCategoryCooldown,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleWeeklySpellUsage,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSendUnlearnSpells,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 6' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var bits4 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 0' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 3' 1' 2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 0' 2' 6' 5' 7' 4' 1);                      }                        hasDuration[i] = packet.ReadBit();                      bitsEC[i] = packet.ReadBits(22);                  }              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 7' 5' 6' 1' 3' 2' 4);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        for (var j = 0; j < bitsEC[i]; ++j)                          packet.ReadSingle("FloatEA");                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 6);                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Value"' i);                      packet.ReadInt32E<PowerType>("Power type"' i); // Actually powertype for class                  }                    packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Current health");                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 2);                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 3' 7' 5' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid8 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid11 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid1' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid2' 2' 6' 0' 3' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter1 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter2 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)                  packet.StartBitStream(guid4' 4' 7' 5' 3' 6' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid5' 5' 3' 4' 6' 7' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 5' 3' 1' 4' 6' 0' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 2' 7' 4' 6' 3' 5' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter3 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)                  packet.StartBitStream(guid8' 4' 7' 6' 3' 2' 0' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[4] = packet.ReadBit();                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 2' 3' 7' 6' 5' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits5C = packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits184 = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter4 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 5' 1' 4' 7' 3' 6' 0' 2);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid11' 4' 1' 5' 2' 7' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter5 = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitF0)                  bitsF0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter5; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter5; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter5; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid11' 5' 3' 4' 2' 0' 1' 7' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid7[i]' 3' 6' 7' 5' 0' 4' 2' 1);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid6[i]' 6' 0' 3' 7' 2' 1' 5' 4);                  packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitC8)              {                  packet.ReadXORByte(guid8' 6);                  packet.ReadXORByte(guid8' 7);                  packet.ReadXORByte(guid8' 3);                  packet.ReadXORByte(guid8' 0);                    packet.ReadSingle("FloatBC");                    packet.ReadXORByte(guid8' 1);                    packet.ReadSingle("FloatC0");                    packet.ReadXORByte(guid8' 4);                  packet.ReadXORByte(guid8' 2);                    packet.ReadSingle("FloatB8");                    packet.ReadXORByte(guid8' 5);                    packet.WriteGuid("guidG"' guid8);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE8)              {                  var pos = new Vector3();                    packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                    pos.X = packet.ReadSingle("FloatD8");                    packet.ReadXORByte(guid4' 2);                    pos.Y = packet.ReadSingle("FloatDC");                  pos.Z = packet.ReadSingle("FloatE0");                    packet.ReadXORByte(guid4' 7);                    packet.WriteGuid("Guid4"' guid4);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid5' 1' 7' 3' 0' 6' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 5);                    packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 0);                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 2);                  packet.ReadXORByte(guid10[i]' 3);                    packet.ReadSingle("Float1B8"' i);                  packet.ReadSingle("Float1B8"' i);                    packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 7);                    packet.WriteGuid("Guid10"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Attack power");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ParseBitStream(powerGUID' 4' 7' 0' 2' 3' 5' 6' 1);                    packet.ReadInt32("Current Health");                  packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid2' 3' 2' 1' 4' 6' 0' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid8 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid9 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 5' 6' 1' 0' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 7' 0' 1' 3' 4' 2' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits140 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits2C = (int)packet.ReadBits("bits2C"' 13);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var counter2 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var counter1 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid5' 2' 4' 6' 3' 7' 5' 1' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 6' 7' 0' 2' 5' 4' 1' 3);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 0' 4' 3' 1' 6' 7' 2' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid8' 4' 6' 7' 0' 1' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid9' 4' 1' 7' 3' 0' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var counter3 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 7' 4' 0' 6);                  PowerTypeCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 5' 2' 3' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 4' 0' 2' 7' 6' 1' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid2' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits154 = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var counter4 = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitC0)                  bitsC0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 4);                    for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadInt32("Current Health");                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 3' 2' 7' 4' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter1; ++i)              {                  packet.ParseBitStream(guid6[i]' 7' 1' 0' 4' 2' 5' 6' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 4);                    packet.ReadSingle("Float8C");                  packet.ReadSingle("Float88");                  packet.ReadSingle("Float90");                    packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                    packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid4' 0' 6' 5' 7' 3' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  packet.ParseBitStream(guid11[i]' 6' 0' 7' 1' 2' 5' 3' 4);                    packet.WriteGuid("Guid12"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid3' 3' 1' 5' 0' 7' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatB0");                    packet.ReadXORByte(guid9' 4);                    packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatA8");                    packet.ReadXORByte(guid9' 7);                  packet.ReadXORByte(guid9' 3);                  packet.ReadXORByte(guid9' 2);                  packet.ReadXORByte(guid9' 1);                  packet.ReadXORByte(guid9' 6);                  packet.ReadXORByte(guid9' 0);                  packet.ReadXORByte(guid9' 5);                    packet.WriteGuid("Guid9"' guid9);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ReadXORByte(guid7[i]' 2);                    packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 6);                    packet.ReadSingle("Float188"' i);                  packet.ReadSingle("Float188"' i);                    packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 5);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.StartBitStream(guid3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.StartBitStream(guid3' 7' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.StartBitStream(guid3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: var counter = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 5' 7' 6);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 3' 0' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerGUID' 3);                  packet.ReadInt32("Spell power");                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 7);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Value"' i);                      packet.ReadUInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerGUID' 2);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleUnknow5410,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 6' 7' 4' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 1' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 1' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 1' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 1' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var counter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: for (var i = 0; i < counter; ++i)                  packet.ReadBits("unk value0"' 2' i);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  bit198 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bit180 = !packet.ReadBit();                  bits188 = packet.ReadBits(22);                  bit17C = packet.ReadBit();                  var bit108 = !packet.ReadBit();                    packet.StartBitStream(guid1' 6' 0);                    if (bit108)                      packet.ReadBits("bits108"' 30);                    bit160 = !packet.ReadBit();                  var bit184 = packet.ReadBit();                    packet.StartBitStream(guid1' 2' 7' 1' 5);                    bit120 = !packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    var bit19C = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  bit158 = packet.ReadBit();                    if (bit158)                  {                      bit14C = packet.ReadBit("bit14C");                      packet.StartBitStream(guid2' 6' 3' 1' 0' 4);                      bit154 = packet.ReadBit();                      packet.StartBitStream(guid2' 7' 2' 5);                  }                    var bit185 = packet.ReadBit();                  var bit10C = !packet.ReadBit();                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit110 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 2' 1' 3' 6' 5' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 3' 6' 1' 0' 4' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid5' 6' 3' 5' 2' 0' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 5' 0' 2' 3' 1' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit78)                  bits2F7 = packet.ReadBits("bits2F7"' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1C)                  packet.ReadBits("bits2F5"' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  if (bit158)                  {                      packet.ReadXORByte(guid2' 5);                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadSingle("Float13C");                      packet.ReadSingle("Float134");                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.ParseBitStream(guid2' 7' 2' 0);                        packet.ReadInt32("Int144");                        packet.ParseBitStream(guid2' 1' 6' 3);                        packet.ReadSingle("Float130");                        packet.ReadXORByte(guid2' 4);                        packet.ReadByte("Byte140");                      packet.ReadSingle("Float138");                        packet.WriteGuid("Guid2"' guid2);                  }                    if (bit120)                      packet.ReadSingle("Float120");                    packet.ParseBitStream(guid1' 6' 4);                    if (bit17C)                  {                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float16C");                          packet.ReadSingle("Float174");                      }                        packet.ReadSingle("Float168");                  }                    packet.ParseBitStream(guid1' 3' 2);                    if (bit160)                      packet.ReadSingle("Float160");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadSingle("Float11C");                    if (bit110)                      packet.ReadInt32("Int110");                    packet.ParseBitStream(guid1' 5' 0);                    packet.ReadSingle("Float114");                  packet.ReadSingle("Float118");                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ParseBitStream(guid1' 7' 1);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid5' 7);                  packet.ReadSingle("Float40");                  packet.ParseBitStream(guid5' 6' 0);                  packet.ReadSingle("Float44");                  packet.ParseBitStream(guid5' 1' 4);                  packet.ReadSingle("Float48");                  packet.ParseBitStream(guid5' 3' 2' 5);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ParseBitStream(guid4' 5' 4' 3' 1);                  packet.ReadSingle("Float68");                  packet.ReadSingle("Float64");                  packet.ParseBitStream(guid4' 2' 6' 7);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 7' 2' 6' 0' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 0' 2' 3' 5' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\SpellHandler.cs,HandleTotemCreated,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var goTransportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var attackingTargetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportFrames = packet.ReadBits("Transport Frames Count"' 22' index);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 5' 0' 6);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 7' 3' 2);                  hasGOTransportTime3 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var CreatorGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_5 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_10 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 2' 0' 4);                      bit358_10[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                      bits358_5[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_5[i]][];                      bits358_6_84[i] = new uint[bits358_5[i]];                      bits358_6_94[i] = new uint[bits358_5[i]];                      bits358_6_31[i] = new uint[bits358_5[i]];                      bits358_6_74[i] = new uint[bits358_5[i]];                      bit358_6_78_9[i] = new byte[bits358_5[i]][];                      bit358_6_88_10[i] = new byte[bits358_5[i]][];                      bit358_6_88_C[i] = new bool[bits358_5[i]][];                      bit358_6_88_8[i] = new bool[bits358_5[i]][];                      bit358_6_2E[i] = new bool[bits358_5[i]];                      bit358_6_30[i] = new bool[bits358_5[i]];                        for (var j = 0; j < bits358_5[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][3] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid358_6[i][j]' 2' 6' 4);                          bits358_6_84[i][j] = packet.ReadBits(21);                          guid358_6[i][j][1] = packet.ReadBit();                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                          }                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                          packet.StartBitStream(guid358_6[i][j]' 7' 0);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        packet.StartBitStream(guid358[i]' 6' 1' 5' 3);                      bit358_C[i] = !packet.ReadBit();                      bit358_24[i] = packet.ReadBit();                  }                    bit338 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_C[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_8[i][j] = !packet.ReadBit();                      }                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 5' 1' 6' 4' 3' 7' 0' 2);                  bit330 = !packet.ReadBit();                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  bit341 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                  bit332 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit23C = packet.ReadBit();                  bit230 = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit284 = packet.ReadBit();                  bit228 = packet.ReadBit();                  bit258 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  packet.ReadBit("bit210"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit23C = packet.ReadBit();                  bit230 = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit284 = packet.ReadBit();                  bit228 = packet.ReadBit();                  bit258 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  packet.ReadBit("bit210"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit23C = packet.ReadBit();                  bit230 = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit284 = packet.ReadBit();                  bit228 = packet.ReadBit();                  bit258 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  packet.ReadBit("bit210"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  packet.ReadBit("bit9C"' index);                  packet.StartBitStream(guid1' 1' 3);                  hasOrientation = !packet.ReadBit();                  packet.ReadBit("bit85"' index);                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                  bits88 = packet.ReadBits(22);                  packet.StartBitStream(guid1' 6' 7);                  hasTransportData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (hasTransportData)                  {                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 6' 2' 1' 0' 5);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3' 7' 4);                  }                    bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                  hasMoveFlagsExtra = !packet.ReadBit();                  guid1[2] = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasFallData = packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                  guid1[4] = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  packet.ReadBit("bit84"' index);                  hasPitch = !packet.ReadBit();                  bit98 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 6' 4' 5' 2' 3' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit32A)                  bits2AA = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit428)                  bits418 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+0"' index' i);                                  packet.ReadSingle("Float13C+1"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      moveInfo.Position.Y = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      moveInfo.TransportOffset.X = packet.ReadSingle();                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 3);                      var seat = packet.ReadByte("Transport Seat"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 0' 7' 6' 5' 1' 2);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    packet.ReadXORBytes(guid1' 2' 6' 0);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.Position.Y = packet.ReadSingle();                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    packet.ReadSingle("FloatC8"' index);                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits88; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC0"' index);                  packet.ReadSingle("FloatB4"' index);                  packet.ReadXORByte(guid1' 1);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadSingle("FloatB8"' index);                  packet.ReadSingle("FloatC4"' index);                  packet.ReadSingle("FloatB0"' index);                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORBytes(guid1' 5' 3);                  if (bit98)                      packet.ReadInt32("Int98"' index);                    packet.ReadSingle("FloatA8"' index);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  packet.ReadInt32("int334"' index);                  if (bit340)                      packet.ReadByte("byte340"' index);                    for (var i = 0; i < 2; ++i)                  {                      packet.ReadXORByte(guid358[i]' 3);                      for (var j = 0; j < bits358_5[i]; ++j)                      {                          if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadXORByte(guid358_6[i][j]' 3);                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                packet.ReadInt32("int358+6+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 5' 4' 0);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORBytes(guid358[i]' 7);                      if (!bit358_24[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_10[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 6);                      if (bit358_C[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadByte("byte358+37"' index' i);                      packet.ReadXORBytes(guid358[i]' 1' 2);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    packet.ParseBitStream(CreatorGUID' 7' 0' 6' 2' 5' 1' 3' 4);                  if (bit332)                      packet.ReadInt16("short332"' index);                  if (bit338)                      packet.ReadInt32("int338"' index);                  if (bit341)                      packet.ReadByte("byte341"' index);                  if (bit33C)                      packet.ReadInt32("int33C"' index);                  if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 0' 5);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 4);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 1' 3' 6);                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORByte(goTransportGuid' 2);                  moveInfo.TransportOffset.X = packet.ReadSingle();                  moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 5' 4' 7' 6' 2' 0' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(3' 1' 0' 7' 6' 4' 5' 2);                  packet.ParseBitStream(facingTargetGuid' 3' 0' 4' 6' 1' 5' 2' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4' 6' 7' 2' 0);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 0' 3' 7' 1' 5' 6);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,WorldStateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\WorldStateHandler.cs,HandleInitWorldStates,The following statement contains a magic number: var numFields = packet.ReadBits("Field Count"' 21);
Missing Default,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                            WoWObject obj;                          var updates = CoreParsers.UpdateHandler.ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                            if (Storage.Objects.TryGetValue(guid' out obj))                          {                              if (obj.ChangedUpdateFieldsList == null)                                  obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                              obj.ChangedUpdateFieldsList.Add(updates);                          }                            break;                      }                      case "CreateObject1":                      case "CreateObject2": // Might != CreateObject1 on Cata                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                          ReadCreateObjectBlock(packet' guid' map' i);                          break;                      }                      case "DestroyObjects":                      {                          CoreParsers.UpdateHandler.ReadObjectsBlock(packet' i);                          break;                      }                  }
Missing Default,WowPacketParserModule.V5_4_0_17359.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_0_17359\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }
