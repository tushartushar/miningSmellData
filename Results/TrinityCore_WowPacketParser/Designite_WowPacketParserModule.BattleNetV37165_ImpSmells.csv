Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The method has 126 lines of code.
Complex Method,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,Cyclomatic complexity of the method is 29
Complex Method,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,Cyclomatic complexity of the method is 17
Complex Method,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,Cyclomatic complexity of the method is 11
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,ReadRequestCommon,The following statement contains a magic number: var components = packet.Read<int>(0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,ReadRequestCommon,The following statement contains a magic number: packet.Read<uint>("Version"' 0' 32' fieldName' i' "Versions");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonRequest,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonRequest,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeRequest,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeRequest,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeRequest,The following statement contains a magic number: packet.Read<byte>("GameAccountRegion"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeRequest,The following statement contains a magic number: packet.ReadString("GameAccountName"' 1' 5);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofResponse,The following statement contains a magic number: var modules = packet.Read<byte>(0' 3);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofResponse,The following statement contains a magic number: var dataSize = packet.Read<int>("Data size"' 0' 10' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleGenerateSingleSignOnTokenRequest2,The following statement contains a magic number: packet.Read<uint>("Token"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonRequest3,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonRequest3,The following statement contains a magic number: packet.ReadString("Account"' 3' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonRequest3,The following statement contains a magic number: packet.Read<ulong>("Compatibility"' 0' 64);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleSingleSignOnRequest3,The following statement contains a magic number: packet.ReadByteArray("SsoId"' 0' 10);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleSingleSignOnRequest3,The following statement contains a magic number: packet.Read<ulong>("Compatibility"' 0' 64);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: packet.ReadFixedLengthString("Type"' 4' "Strings");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: var id = Utilities.ByteArrayToHexString(packet.ReadBytes("ModuleId"' 32' "Strings"));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: var dataSize = packet.Read<int>("Data size"' 0' 10);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: var errorType = packet.Read<byte>(2' 0);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: packet.Read<ushort>("Error"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleLogonResponse3,The following statement contains a magic number: packet.Read<uint>("Failure"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: packet.ReadFixedLengthString("Type"' 4' "Strings");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: var id = Utilities.ByteArrayToHexString(packet.ReadBytes("ModuleId"' 32' "Strings"));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: var dataSize = packet.Read<int>("Data size"' 0' 10);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: var errorType = packet.Read<byte>(2' 0);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: packet.Read<ushort>("Error"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleResumeResponse,The following statement contains a magic number: packet.Read<uint>("Failure"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofRequest,The following statement contains a magic number: var modules = packet.Read<byte>(0' 3);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofRequest,The following statement contains a magic number: packet.ReadFixedLengthString("Type"' 4' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofRequest,The following statement contains a magic number: var id = Utilities.ByteArrayToHexString(packet.ReadBytes("ModuleId"' 32' i));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleProofRequest,The following statement contains a magic number: var dataSize = packet.Read<int>("Data size"' 0' 10' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandlePatch,The following statement contains a magic number: packet.ReadString("Instructions"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleAuthorizedLicenses,The following statement contains a magic number: var licenses = packet.Read<int>(0' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleAuthorizedLicenses,The following statement contains a magic number: packet.Read<int>("Expiration"' int.MinValue' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleAuthorizedLicenses,The following statement contains a magic number: packet.Read<uint>("Id"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleGenerateSingleSignOnTokenResponse2,The following statement contains a magic number: packet.Read<uint>("Token"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleGenerateSingleSignOnTokenResponse2,The following statement contains a magic number: packet.ReadByteArray("SsoToken"' 0' 9);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Authentication,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Authentication.cs,HandleGenerateSingleSignOnTokenResponse2,The following statement contains a magic number: packet.ReadByteArray("SsoId"' 0' 10);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsRequest,The following statement contains a magic number: packet.ReadSkip(31);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsRequest,The following statement contains a magic number: packet.Read<uint>("Token"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsRequest,The following statement contains a magic number: packet.Read<uint>("ReferenceTime"' int.MinValue' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsRequest,The following statement contains a magic number: packet.Read<byte>("MaxItems"' 0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.Read<ushort>("Offset"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.Read<ushort>("TotalNumItems"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.Read<uint>("Token"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: var items = packet.Read<byte>(0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.ReadFixedLengthString("Type"' 4' "Items"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.ReadBytes("ModuleId"' 32' "Items"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.ReadSkip(27);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Cache,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Cache.cs,HandleGetStreamItemsResponse,The following statement contains a magic number: packet.Read<uint>("PublicationTime"' 0' 32' "Items"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleDisconnectRequest,The following statement contains a magic number: packet.Read<ushort>("Error"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleDisconnectRequest,The following statement contains a magic number: packet.Read<uint>("Timeout"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: var packets = packet.Read<int>(0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<uint>("Time"' 0' 32' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<ushort>("Size"' 0' 16' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.ReadFourCC("Layer"' 0' 16' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<ushort>("Offset"' 0' 16' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<ClosingReason>("Reason"' 0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.ReadByteArray("BadData"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<ushort>("Command"' 0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<ushort>("Channel"' 0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleConnectionClosing,The following statement contains a magic number: packet.Read<uint>("Now"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleBoom,The following statement contains a magic number: packet.Read<ushort>("Error"' 0' 16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,ReadRegulatorInfo,The following statement contains a magic number: packet.Read<uint>("Threshold"' 0' 32' fieldName);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,ReadRegulatorInfo,The following statement contains a magic number: packet.Read<uint>("Rate"' 0' 32' fieldName);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleServerVersion,The following statement contains a magic number: packet.Read<uint>("Version"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleSTUNServers,The following statement contains a magic number: var ip = packet.ReadBytes(4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleSTUNServers,The following statement contains a magic number: var port = packet.ReadBytes(2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleSTUNServers,The following statement contains a magic number: ip = packet.ReadBytes(4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Connection,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Connection.cs,HandleSTUNServers,The following statement contains a magic number: port = packet.ReadBytes(2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.ReadSkip(6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.Read<uint>("IdMaster"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.ReadSkip(6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: var count = packet.Read<int>(0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.Read<uint>("Handle"' 0' 32' "Update"' "HandlesCleared"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: count = packet.Read<int>(0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: varSizes.Enqueue(packet.Read<ushort>(0' 16));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: count = packet.Read<int>(0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: handles.Add(packet.Read<uint>(0' 32));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: var data = packet.ReadBytes(packet.Read<int>(0' 11));
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.Read<uint>("Target"' 0' 32' "Level0");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.Read<byte>("Online"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotify,The following statement contains a magic number: packet.Read<uint>("IdLocal"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following statement contains a magic number: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleFieldSpecAnnounce,The following statement contains a magic number: var fields = packet.Read<int>(0' 7);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleFieldSpecAnnounce,The following statement contains a magic number: field.FixedLength = packet.Read<ushort>("Fixed"' 0' 16' i' "Spec"' "Size");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleFieldSpecAnnounce,The following statement contains a magic number: field.FieldType = packet.Read<PresenceFieldType>("Id"' 0' 8' i' "Spec");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleFieldSpecAnnounce,The following statement contains a magic number: var handle = packet.Read<uint>("Handle"' 0' 32' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: packet.ReadSkip(21);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: packet.Read<ulong>("Id"' 0' 64' "RecordAddress");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: packet.Read<uint>("Label"' 0' 32' "RecordAddress");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: packet.Read<uint>("RequestId"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: var profiles = packet.Read<int>(0' 4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: packet.Read<ulong>("ProfileId"' 0' 64' "Specification"' "Reader");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: var selection = packet.Read<int>(0' 3);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following statement contains a magic number: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,UnpackInt,The following statement contains a magic number: lengthOfLength != 9
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,UnpackInt,The following statement contains a magic number: length <<= 8;
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: packet.Read<uint>("RequestId"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: var type = packet.Read<int>(0' 2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following statement contains a magic number: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.ReadSkip(5);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.ReadByteArray("Path"' 0' 6);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.ReadSkip(21);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.Read<ulong>("Id"' 0' 64' "Address");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.Read<uint>("Label"' 0' 32' "Address");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleSettingsAvailable,The following statement contains a magic number: packet.Read<SettingsType>("Type"' 1' 2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.Read<uint>("ClientSalt"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.ReadSkip(20);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.Read<byte>("Region"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.ReadSkip(12);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.Read<byte>("Site"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinRequestV2,The following statement contains a magic number: packet.Read<uint>("Realm"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleMultiLogonRequestV2,The following statement contains a magic number: packet.Read<uint>("ClientSalt"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.Read<WowAuthResult>("Failure"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: var charNumberCount = packet.Read<int>(0' 7);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.Read<byte>("Region"' 0' 8' "ToonCountEntry"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.ReadSkip(12);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.Read<byte>("Site"' 0' 8' "ToonCountEntry"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.Read<uint>("Realm"' 0' 32' "ToonCountEntry"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListSubscribeResponse,The following statement contains a magic number: packet.Read<short>("Count"' 0' 16' "ToonCountEntry"' i);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<uint>("Category"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<byte>("StateFlags"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.ReadSkip(19);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<uint>("Type"' int.MinValue' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.ReadString("Name"' 0' 10);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.ReadString("Version"' 0' 5' "PrivilegedData");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<uint>("ConfigId"' 0' 32' "PrivilegedData");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: var ip = packet.ReadBytes(4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: var port = packet.ReadBytes(2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<RealmInfoFlags>("InfoFlags"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<byte>("Region"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.ReadSkip(12);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<byte>("Site"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleListUpdate,The following statement contains a magic number: packet.Read<uint>("Realm"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<byte>("Region"' 0' 8' "Name");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<uint>("Realm"' 0' 32' "Name");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.ReadString("Name"' 2' 7' "Name");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.ReadString("Name"' 2' 7' "Name");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.ReadSkip(21);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<ulong>("Id"' 0' 64' "ProfileAddress");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<uint>("Label"' 0' 32' "ProfileAddress");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<ulong>("Id"' 0' 64' "Handle");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<uint>("Realm"' 0' 32' "Handle");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleToonReady,The following statement contains a magic number: packet.Read<byte>("Region"' 0' 8' "Handle");
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: packet.Read<WowAuthResult>("Failure"' 0' 8);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: packet.Read<uint>("ServerSalt"' 0' 32);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: var count = packet.Read<uint>(0' 5);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: var ip = packet.ReadBytes(4);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: var port = packet.ReadBytes(2);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: count = packet.Read<uint>(0' 5);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: var ip = packet.ReadBytes(16);
Magic Number,WowPacketParserModule.BattleNet.V37165.Parsers,WoWRealm,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\WoWRealm.cs,HandleJoinResponse,The following statement contains a magic number: var port = packet.ReadBytes(2);
Missing Default,WowPacketParserModule.BattleNet.V37165.Parsers,Presence,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Presence.cs,HandleUpdateNotifyFields,The following switch statement is missing a default case: switch (field.FieldType)                  {                      case PresenceFieldType.U8:                          outputStream.AddValue("U8"' bitStream.Read<byte>(0' 8)' i);                          break;                      case PresenceFieldType.S8:                          outputStream.AddValue("S8"' bitStream.Read<sbyte>(sbyte.MinValue' 8)' i);                          break;                      case PresenceFieldType.U16:                          outputStream.AddValue("U16"' bitStream.Read<ushort>(0' 16)' i);                          break;                      case PresenceFieldType.S16:                          outputStream.AddValue("S16"' bitStream.Read<short>(short.MinValue' 16)' i);                          break;                      case PresenceFieldType.U32:                          outputStream.AddValue("U32"' bitStream.Read<uint>(0' 32)' i);                          break;                      case PresenceFieldType.S32:                          outputStream.AddValue("S32"' bitStream.Read<int>(int.MinValue' 32)' i);                          break;                      case PresenceFieldType.U64:                          outputStream.AddValue("U64"' bitStream.Read<ulong>(0' 64)' i);                          break;                      case PresenceFieldType.S64:                          outputStream.AddValue("S64"' bitStream.Read<long>(long.MinValue' 64)' i);                          break;                      case PresenceFieldType.Float32:                          outputStream.AddValue("Float32"' bitStream.ReadSingle()' i);                          break;                      case PresenceFieldType.Float64:                          outputStream.AddValue("Float64"' bitStream.ReadDouble()' i);                          break;                      case PresenceFieldType.Bool:                          outputStream.AddValue("Bool"' bitStream.ReadBoolean()' i);                          break;                      case PresenceFieldType.FourCC:                          outputStream.AddValue("FourCC"' bitStream.ReadFourCC()' i);                          break;                      case PresenceFieldType.StringLiteral:                          outputStream.AddValue("StringLiteral"' bitStream.ReadString(bitStream.Read<int>(0' 9))' i);                          break;                      case PresenceFieldType.StringTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "StringTableEntry");                          break;                      case PresenceFieldType.ImageTableEntry:                          outputStream.AddValue("TableId"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          outputStream.AddValue("Offset"' bitStream.Read<ushort>(0' 16)' i' "ImageTableEntry");                          break;                      case PresenceFieldType.OpaqueData:                          outputStream.AddValue("OpaqueData"' Utilities.ByteArrayToHexString(bitStream.ReadBytes(bitStream.Read<int>(0' 7)))' i);                          break;                      case PresenceFieldType.ToonFullName:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonFullName");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonFullName");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonFullName");                          outputStream.AddValue("Name"' bitStream.ReadString(bitStream.Read<int>(2' 7))' i' "ToonFullName");                          break;                      case PresenceFieldType.AccountName:                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountName");                          break;                      case PresenceFieldType.ProfileAddress:                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ProfileAddress");                          outputStream.AddValue("Label"' bitStream.Read<uint>(0' 32)' i' "ProfileAddress");                          break;                      case PresenceFieldType.S2GameInfo:                          outputStream.AddValue("VariantIndex"' bitStream.Read<uint>(0' 6)' i' "ShortLink");                          outputStream.AddValue("Speed"' bitStream.ReadFourCC()' i' "ShortLink");                          var entries = bitStream.Read<int>(0' 3);                          for (var j = 0; j < entries; ++j)                          {                              outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Version"' bitStream.Read<uint>(0' 32)' i' "ShortLink"' j' "Handle");                              outputStream.AddValue("Type"' bitStream.Read<uint>(0' 4)' i' "ShortLink"' j);                          }                          var joinable = !bitStream.ReadBoolean();                          outputStream.AddValue("Joinable"' joinable' i' "Advert");                          if (joinable)                          {                              outputStream.AddValue("ServerLabel"' bitStream.Read<uint>(0' 32)' i' "Advert");                              outputStream.AddValue("ServerEpoch"' bitStream.Read<int>(int.MinValue' 32)' i' "Advert");                              outputStream.AddValue("AdvertId"' bitStream.Read<uint>(0' 32)' i' "Advert");                          }                          break;                      case PresenceFieldType.AccountInfo:                          outputStream.AddValue("AccountId"' bitStream.Read<uint>(0' 32)' i' "AccountInfo");                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "AccountInfo");                          outputStream.AddValue("GivenName"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          outputStream.AddValue("Surname"' bitStream.ReadString(bitStream.Read<int>(0' 8))' i' "AccountInfo"' "FullName");                          break;                      case PresenceFieldType.ToonHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "ToonHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "ToonHandle");                          outputStream.AddValue("Realm"' bitStream.Read<uint>(0' 32)' i' "ToonHandle");                          outputStream.AddValue("Id"' bitStream.Read<ulong>(0' 64)' i' "ToonHandle");                          break;                      case PresenceFieldType.GameAccountHandle:                          outputStream.AddValue("Region"' bitStream.Read<byte>(0' 8)' i' "GameAccountHandle");                          outputStream.AddValue("ProgramId"' bitStream.ReadFourCC()' i' "GameAccountHandle");                          outputStream.AddValue("Id"' bitStream.Read<uint>(0' 32)' i' "GameAccountHandle");                          break;                      case PresenceFieldType.Achievement:                          outputStream.AddValue("AchievementId"' bitStream.Read<ulong>(0' 64)' i' "Achievement");                          outputStream.AddValue("Completion"' bitStream.Read<int>(int.MinValue' 32)' i' "Achievement");                          outputStream.AddValue("EarnedCount"' bitStream.Read<uint>(0' 32)' i' "Achievement");                          break;                      case PresenceFieldType.AccountNickname:                          outputStream.AddValue("AccountNickname"' bitStream.ReadString(bitStream.Read<int>(0' 7))' i);                          break;                  }
Missing Default,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadRequest,The following switch statement is missing a default case: switch (selection)              {                  case 0:                      packet.ReadByteArray("PrefixPath"' 0' 6' "All");                      break;                  case 1:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceStart"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<ulong>("SliceEnd"' long.MinValue' 64' "Slice");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Slice");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Slice");                      break;                  case 2:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Random");                      var indices = packet.Read<int>(0' 7);                      for (var i = 0; i < indices; ++i)                          packet.Read<ulong>("Index"' 0' 64' "Random"' "Indices");                      break;                  case 3:                      var paths = packet.Read<int>(0' 5);                      for (var i = 0; i < paths; ++i)                          packet.ReadByteArray("PrefixPath"' 0' 6' "MultiPath"' "Paths");                      break;                  case 4:                      packet.ReadByteArray("PrefixPath"' 0' 6' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeStart"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<ulong>("RangeEnd"' long.MinValue' 64' "Range");                      if (packet.ReadBoolean())                          packet.Read<uint>("RowLimit"' 0' 32' "Range");                      if (packet.ReadBoolean())                          packet.ReadBoolean("SingleDepth"' "Range");                      break;              }
Missing Default,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following switch statement is missing a default case: switch (type)              {                  case 0:                      packet.Read<uint>("NumPackets"' 0' 32' "Start");                      packet.Read<uint>("Type"' 0' 32' "Start");                      break;                  case 1:                      var raw = packet.ReadBytes(packet.Read<int>(0' 14));                      using (var reader = new BinaryReader(new MemoryStream(raw)))                      {                          while (reader.BaseStream.Position < reader.BaseStream.Length)                          {                              var pathLength = UnpackInt(reader);                              packet.Stream.AddValue("Path"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)pathLength)));                              var fieldType = reader.ReadByte();                              switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }                          }                      }                      break;                  case 2:                      packet.Read<ushort>("Failure"' 0' 16);                      break;              }
Missing Default,WowPacketParserModule.BattleNet.V37165.Parsers,Profile,D:\research\architectureSmells\repos1\TrinityCore_WowPacketParser\WowPacketParserModule.BattleNet.V37165\Parsers\Profile.cs,HandleReadResponse,The following switch statement is missing a default case: switch (fieldType)                              {                                  case 1: //int                                      var encodedInt = UnpackInt(reader);                                      var decodedInt = 0L;                                      var p1 = (encodedInt & 0xFFFFFFFF) >> 1;                                      var p2 = ((encodedInt >> 32) & 0xFFFFFFFF) >> 1;                                      if ((encodedInt & 1) != 0)                                          decodedInt = ~p1 | (~p2 << 32);                                      else                                          decodedInt = p1 | (p2 << 32);                                      packet.Stream.AddValue("Int"' decodedInt);                                      break;                                  case 2:                                      packet.Stream.AddValue("Float"' reader.ReadDouble());                                      break;                                  case 3:                                      var binaryLength = UnpackInt(reader);                                      packet.Stream.AddValue("Binary"' Utilities.ByteArrayToHexString(reader.ReadBytes((int)binaryLength)));                                      break;                                  case 4:                                      var stringLength = UnpackInt(reader);                                      packet.Stream.AddValue("String"' Encoding.UTF8.GetString(reader.ReadBytes((int)stringLength)));                                      break;                                  case 5: //pointer                                      packet.Stream.AddValue("Unk"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Label"' UnpackInt(reader)' "Pointer");                                      packet.Stream.AddValue("Id"' UnpackInt(reader)' "Pointer");                                      break;                                  case 6: //cache handle                                      var handleLength = UnpackInt(reader);                                      if (handleLength == 40)                                          packet.Stream.AddValue("CacheHandle"' Utilities.ByteArrayToHexString(reader.ReadBytes(40)));                                      break;                              }
