Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpFileSystem,FileSystemExtensions,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystemExtensions.cs,GetEntities,The length of the statement  "            return new EnumerableCollection<FileSystemEntity>(paths.Select(p => FileSystemEntity.Create(directory.FileSystem' p))' paths.Count); " is 132.
Long Statement,SharpFileSystem,FileSystemExtensions,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystemExtensions.cs,Copy,The length of the statement  "            if (!EntityCopiers.Registration.TryGetSupported(sourceFileSystem.GetType()' destinationFileSystem.GetType()' out copier)) " is 121.
Long Statement,SharpFileSystem,PhysicalEntityCopier,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\PhysicalEntityMover.cs,Copy,The length of the statement  "                    source.Copy(e' destination' e.IsFile ? destinationPath.AppendFile(e.EntityName) : destinationPath.AppendDirectory(e.EntityName)); " is 129.
Long Statement,SharpFileSystem.FileSystems,PhysicalFileSystem,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystems\PhysicalFileSystem.cs,GetPhysicalPath,The length of the statement  "            return Path.Combine(PhysicalRoot' path.ToString().Remove(0' 1).Replace(FileSystemPath.DirectorySeparator' Path.DirectorySeparatorChar)); " is 136.
Long Statement,SharpFileSystem.FileSystems,PhysicalFileSystem,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystems\PhysicalFileSystem.cs,GetVirtualFilePath,The length of the statement  "            string virtualPath = FileSystemPath.DirectorySeparator + physicalPath.Remove(0' PhysicalRoot.Length).Replace(Path.DirectorySeparatorChar' FileSystemPath.DirectorySeparator); " is 173.
Long Statement,SharpFileSystem.FileSystems,PhysicalFileSystem,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystems\PhysicalFileSystem.cs,GetVirtualDirectoryPath,The length of the statement  "            string virtualPath = FileSystemPath.DirectorySeparator + physicalPath.Remove(0' PhysicalRoot.Length).Replace(Path.DirectorySeparatorChar' FileSystemPath.DirectorySeparator); " is 173.
Long Statement,SharpFileSystem.FileSystems,PhysicalFileSystem,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\FileSystems\PhysicalFileSystem.cs,GetEntities,The length of the statement  "            return new EnumerableCollection<FileSystemPath>(virtualDirectories.Concat(virtualFiles)' directories.Length + files.Length); " is 124.
Long Statement,SharpFileSystem.Collections,EnumerableCollection<T>,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\Collections\EnumerableCollection.cs,CopyTo,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(array)' "The supplied array (of size " + array.Length + ") cannot contain " + Count + " items on index " + arrayIndex); " is 164.
Long Statement,SharpFileSystem.Collections,TypeDictionary<T>,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\Collections\TypeDictionary.cs,GetExplicit,The length of the statement  "                throw new ArgumentException("The specified type is not a instantiatable type and cannot be explicitly returned."' "type"); " is 122.
Long Statement,SharpFileSystem.Collections,TypeDictionary<T>,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\Collections\TypeDictionary.cs,GetSingleExplicit,The length of the statement  "                throw new ArgumentException("The specified type is not a instantiatable type and cannot be explicitly returned."' "type"); " is 122.
Magic Number,SharpFileSystem,StandardEntityMover,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\StandardEntityMover.cs,StandardEntityMover,The following statement contains a magic number: BufferSize = 65536;
Magic Number,SharpFileSystem,StandardEntityCopier,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\StandardEntityCopier.cs,StandardEntityCopier,The following statement contains a magic number: BufferSize = 65536;
Missing Default,SharpFileSystem.IO,ConcatStream,C:\repos\FrozenCow_sharpfilesystem\SharpFileSystem\IO\ConcatStream.cs,Seek,The following switch statement is missing a default case: switch(origin)              {                  case SeekOrigin.Begin:                      return Position = offset;                  case SeekOrigin.Current:                      return Position = Position + offset;                  case SeekOrigin.End:                      return Position = Length - offset;              }
