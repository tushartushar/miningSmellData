Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,KindleGenerator,Program,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Program.cs,GenerateKindleBook,The method has 7 parameters. Parameters: bookName' bookTitle' bookSummary' author' publisher' sourceDir' targetDir
Long Parameter List,KindleGenerator.Indexing,Manifest,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\Manifest.cs,Generate,The method has 7 parameters. Parameters: rootPath' bookName' title' description' creator' publisher' coverRelativePath
Long Parameter List,KindleGenerator.Indexing,Manifest,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\Manifest.cs,Manifest,The method has 6 parameters. Parameters: bookName' title' description' creator' publisher' coverRelativePath
Long Statement,KindleGenerator.CodeFormatting,WordWrapParserBase,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\CodeFormatting\WordWrapParserBase.cs,Replace,The length of the statement  "            return Regex.Replace(value' RegexPattern' m => string.Format("<span class=\"{1}\">{0}</span>{2}"' m.Value' CssClass' Suffix)); " is 126.
Long Statement,KindleGenerator,Program,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Program.cs,GenerateKindleBook,The length of the statement  "            //Copy content files to the build dir for modification. i.e. We don't modify the source' we update then generate from that  " is 122.
Long Statement,KindleGenerator,Program,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Program.cs,GenerateKindleBook,The length of the statement  "            RemoveTags(targetDir' x => !x.Attributes().Any(att => att.Name == "class" && att.Value.Split(' ').Contains("webonly"))); " is 120.
Long Statement,KindleGenerator.Indexing,Manifest,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\Manifest.cs,ManifestTable,The length of the statement  "            sb.AppendFormat(@"  <item id=""My_Table_of_Contents"" media-type=""application/x-dtbncx+xml"" href=""{0}.ncx""/>"' _bookName); " is 126.
Long Statement,KindleGenerator.Indexing,WebFormatter,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\WebFormatter.cs,FormatContentFiles,The length of the statement  "                                            <a href=""IntroToRx.mobi"" title=""Introduction to Rx as .mobi file (for Kindle)"">Introduction to Rx<br/>Kindle edition</a> (2012) " is 131.
Long Statement,KindleGenerator.Indexing,WebFormatter,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\WebFormatter.cs,GenerateHeader,The length of the statement  "//<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> " is 127.
Long Statement,KindleGenerator.Indexing,WebFormatter,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\WebFormatter.cs,GenerateHeader,The length of the statement  "//                <a style=""font-size: 11px"" href=""#"">Other versions<img src=""../../Styles/DropDown.png"" style=""margin-left:2px; margin-bottom: 2px"" /></a>  " is 163.
Long Statement,KindleGenerator.Indexing,WebFormatter,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\WebFormatter.cs,GenerateHeader,The length of the statement  "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> " is 125.
Complex Conditional,KindleGenerator,XmlTextEncoder,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XmlTextEncoder.cs,PopulateBuffer,The conditional expression  "!(0x0 <= c && c <= 0x8) &&                           !new[] { 0xB' 0xC }.Contains(c) &&                           !(0xE <= c && c <= 0x1F) &&                           !(0x7F <= c && c <= 0x84) &&                           !(0x86 <= c && c <= 0x9F) &&                           !(0xD800 <= c && c <= 0xDFFF) &&                           !new[] { 0xFFFE' 0xFFFF }.Contains(c)"  is complex.
Magic Number,KindleGenerator,Extensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Extensions.cs,IsContent,The following statement contains a magic number: var prefix = file.Name.Substring(0' 2);
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator,XLinqExtensions,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\XLinqExtensions.cs,EncodeUnicodeCharacters,The following statement contains a magic number: var unicodeCharacters = new[]                                          {                                              8204' //&zwnj;  zero-width non joiner                                              8217' //’       right single quotation mark                                              8220' //“       left double quotation mark                                              8221' //”       right double quotation mark                                              233'  //é       Lowercase E-acute                                              160'  //&nbsp;  non breaking space                                          };
Magic Number,KindleGenerator.Indexing,FlatNavigationNcx,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\FlatNavigationNcx.cs,OpenLevelTag,The following statement contains a magic number: var id = fileName.Substring(3);
Magic Number,KindleGenerator.Indexing,FlatNavigationNcx,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\FlatNavigationNcx.cs,OpenLevelTag,The following statement contains a magic number: id = id.Substring(0' fileName.LastIndexOf('.') - 3);
Magic Number,KindleGenerator.Indexing,FlatNavigationNcx,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\FlatNavigationNcx.cs,TableOfContents,The following statement contains a magic number: return headings.Where(h => h.tag.HeadingLevel() < 3)                  .Select(h =>                              {                                    string fileName = new FileInfo(h.file).Name;                                  var anchor = GetAnchor(h.tag);                                  var heading = h.tag.Value.Replace("<"' "&lt;").Replace(">"' "&gt;");                                    var itemValue = ItemSelector(fileName' anchor' heading' 0);                                  return new StringBuilder()                                      .Append(OpenLevelTag(fileName' anchor' ++index))                                      .Append(itemValue)                                      .Append(CloseLevelTag())                                      .ToString();                              });
Magic Number,KindleGenerator.Indexing,NestedNavigationNcx,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\NestedNavigationNcx.cs,OpenLevelTag,The following statement contains a magic number: var id = fileName.Substring(3);
Magic Number,KindleGenerator.Indexing,NestedNavigationNcx,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\NestedNavigationNcx.cs,OpenLevelTag,The following statement contains a magic number: id = id.Substring(0' fileName.LastIndexOf('.') - 3);
Magic Number,KindleGenerator.Indexing,WebFormatter,C:\repos\LeeCampbell_IntroToRx\KindleGenerator\KindleGenerator\Indexing\WebFormatter.cs,GenerateHeaderNavigation,The following statement contains a magic number: foreach (var root in rootHeadings)              {                  var text = string.Empty;// root.Name;                  var seperatorIdx = root.Name.IndexOf(" - ");                    if (seperatorIdx > 0)                  {                      text = root.Name.Substring(seperatorIdx + 3);                          if (root.Contains(fileName))                      {                            sb.AppendFormat("<td class='tocactive'>{0}</td>"' text);                          sb.AppendLine();                      }                      else                      {                          sb.AppendFormat("<td class='toc'><a class='toc' href='{1}'>{0}</a></td>"' text' root.PageHref);                          sb.AppendLine();                      }                  }                  else                  {                      sb.AppendFormat("<td></td>");                      sb.AppendLine();                  }              }
