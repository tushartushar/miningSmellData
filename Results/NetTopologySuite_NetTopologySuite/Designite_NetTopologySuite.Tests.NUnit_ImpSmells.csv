Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The method has 211 lines of code.
Complex Method,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustRayCrossingCounter,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustRayCrossingCounter.cs,CountSegment,Cyclomatic complexity of the method is 10
Complex Method,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,RunCompare,Cyclomatic complexity of the method is 8
Complex Method,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,fast_expansion_sum_zeroelim,Cyclomatic complexity of the method is 13
Complex Method,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationEnforcement,Cyclomatic complexity of the method is 18
Complex Method,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,Cyclomatic complexity of the method is 21
Complex Method,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,Cyclomatic complexity of the method is 13
Complex Method,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,Cyclomatic complexity of the method is 22
Complex Method,NetTopologySuite.Tests.NUnit,GeometryTestCase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryTestCase.cs,CheckEqual,Cyclomatic complexity of the method is 11
Complex Method,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,SetDimension,Cyclomatic complexity of the method is 8
Long Parameter List,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqual,The method has 6 parameters. Parameters: p0x' p0y' p1x' p1y' p2x' p2y
Long Parameter List,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The method has 6 parameters. Parameters: p0x' p0y' p1x' p1y' p2x' p2y
Long Parameter List,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckIntersection,The method has 5 parameters. Parameters: wkt1' wkt2' expectedIntersectionNum' intPt' distanceTolerance
Long Parameter List,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckIntersection,The method has 5 parameters. Parameters: wkt1' wkt2' expectedIntersectionNum' expectedWKT' distanceTolerance
Long Parameter List,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,fast_expansion_sum_zeroelim,The method has 5 parameters. Parameters: elen' e' flen' f' h
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CheckCoordinateAt,The method has 5 parameters. Parameters: seq1' pos1' seq2' pos2' dim
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircularString,The method has 6 parameters. Parameters: factory' dimension' center' radius' startAngle' numPoints
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,CheckIntersectsPermuted,The method has 9 parameters. Parameters: a1x' a1y' a2x' a2y' b1x' b1y' b2x' b2y' expected
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,CheckIntersects,The method has 9 parameters. Parameters: a1x' a1y' a2x' a2y' b1x' b1y' b2x' b2y' expected
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,DoTestEquals,The method has 6 parameters. Parameters: a' b' equalsGeometry' equalsObject' equalsExact' equalsHash
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,DoTestEqualsExact,The method has 6 parameters. Parameters: x' somethingExactlyEqual' somethingNotEqualButSameClass' sameClassButEmpty' anotherSameClassButEmpty' collectionFactory
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateCircle,The method has 5 parameters. Parameters: fact' basex' basey' size' nPts
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateBox,The method has 5 parameters. Parameters: fact' minx' miny' nSide' segLen
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The method has 6 parameters. Parameters: basex' basey' size' armLen' nArms' nPts
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The method has 7 parameters. Parameters: fact' basex' basey' size' armLen' nArms' nPts
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,CheckOffset,The method has 8 parameters. Parameters: x0' y0' x1' y1' segFrac' offset' expectedX' expectedY
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,CheckOrientationIndex,The method has 7 parameters. Parameters: x0' y0' x1' y1' px' py' expectedOrient
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,CheckOrientationIndex,The method has 6 parameters. Parameters: seg' s0x' s0y' s1x' s1y' expectedOrient
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,PreciseCoordinateTester,The method has 5 parameters. Parameters: pm' x1' y1' x2' y2
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,Run,The method has 12 parameters. Parameters: p0x' p0y' p1x' p1y' p2x' p2y' pp0x' pp0y' pp1x' pp1y' pp2x' pp2y
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,Run,The method has 8 parameters. Parameters: p0x' p0y' p1x' p1y' pp0x' pp0y' pp1x' pp1y
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,RunSingular,The method has 12 parameters. Parameters: p0x' p0y' p1x' p1y' p2x' p2y' pp0x' pp0y' pp1x' pp1y' pp2x' pp2y
Long Parameter List,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The method has 5 parameters. Parameters: x' y' trans' xp' yp
Long Parameter List,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunGeometry,The method has 5 parameters. Parameters: g' dimension' byteOrder' toHex' srid
Long Parameter List,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorTest.cs,checkNodePosition,The method has 6 parameters. Parameters: octant' x0' y0' x1' y1' expectedPositionValue
Long Parameter List,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestClosestPoints,The method has 8 parameters. Parameters: wkt0' wkt1' distance' p0X' p0Y' p1X' p1Y' reliesOnCheckingPointInPolygon
Long Identifier,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,DoTestCreateParentsFromVerticalSlice,The length of the parameter expectedChildrenPerParentBoundable is 34.
Long Identifier,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestML,The length of the parameter shortestDistanceToPointBeforeNoding is 35.
Long Identifier,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestML,The length of the parameter shortestDistanceToPointAfterNoding is 34.
Long Identifier,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestClosestPoints,The length of the parameter reliesOnCheckingPointInPolygon is 30.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComplexRing,The length of the statement  "                "POLYGON ((-40 80' -40 -80' 20 0' 20 -100' 40 40' 80 -80' 100 80' 140 -20' 120 140' 40 180'     60 40' 0 120' -20 -20' -40 80))"); " is 130.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The length of the statement  "            RunPtInRing(Location.Exterior' new Coordinate(25.374625374625374' 128.35564435564436)' "POLYGON ((0.0 0.0' 0.0 172.0' 100.0 0.0' 0.0 0.0))"); " is 141.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The length of the statement  "            RunPtInRing(Location.Interior' new Coordinate(97.96039603960396' 782.0)' "POLYGON ((642.0 815.0' 69.0 764.0' 394.0 966.0' 642.0 815.0))"); " is 138.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustTriangle,The length of the statement  "            RunPtInRing(Location.Exterior' new Coordinate(3.166572116932842' 48.5390194687463)' "POLYGON ((2.152214146946829 50.470470727186765' 18.381941666723034 19.567250592139274' 2.390837642830135 49.228045261718165' 2.152214146946829 50.470470727186765))"); " is 251.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints2,The length of the statement  "            DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20))"' "MULTIPOINT ((10 10)' (20 20))"' new Coordinate(15' 15)' 7.0710678118654755); " is 138.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestTriangleWithMiddlePoint,The length of the statement  "            DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20)' (15 19))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"' " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter3,The length of the statement  "            DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240)); " is 127.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter4,The length of the statement  "            DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240)); " is 127.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter5,The length of the statement  "            DoMinimumDiameterTest(true' "POLYGON ((0 240' 160 140' 220 0' 0 0' 0 240))"' new Coordinate(185.86206896551724' 79.65517241379311)' new Coordinate(0' 0)); " is 154.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter6,The length of the statement  "            DoMinimumDiameterTest(false' "LINESTRING ( 39 119' 162 197' 135 70' 95 35' 33 66' 111 82' 97 131' 48 160' -4 182' 57 195' 94 202' 90 174' 75 134' 47 114' 0 100' 59 81' 123 60' 136 43' 163 75' 145 114' 93 136' 92 159' 105 175 )"' new Coordinate(64.46262341325811' 196.41184767277855)' new Coordinate(95' 35)); " is 308.
Long Statement,NetTopologySuite.Tests.NUnit.Algorithm,PointLocatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocatorTest.cs,TestComplexRing,The length of the statement  "                "POLYGON ((-40 80' -40 -80' 20 0' 20 -100' 40 40' 80 -80' 100 80' 140 -20' 120 140' 40 180'     60 40' 0 120' -20 -20' -40 80))"); " is 130.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,BidirectionalComparatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\BidirectionalComparatorTest.cs,TestLineString1,The length of the statement  "            Assert.IsTrue(0 == compareBiDir("LINESTRING ( 1388155.775 794886.703' 1388170.712 794887.346' 1388185.425 794892.987' 1388195.167 794898.409' 1388210.091 794899.06' 1388235.117 794900.145' 1388250.276 794895.796' 1388270.174 794896.648' 1388280.138 794897.079' 1388295.063 794897.731' 1388310.348 794893.382' 1388330.479 794889.255' 1388345.617 794884.895' 1388360.778 794880.538' 1388366.184 794870.766' 1388366.62 794860.776' 1388362.086 794850.563' 1388357.761 794835.234' 1388343.474 794819.588' 1388339.151 794804.386' 1388320.114 794783.54' 1388310.597 794773.107' 1388301.155 794757.682' 1388286.452 794751.914' 1388282.129 794736.7' 1388273.037 794716.275' 1388278.444 794706.504' 1388293.603 794702.155' 1388303.994 794692.585' 1388319.278 794688.247' 1388339.4 794684.108' 1388369.486 794680.401' 1388394.513 794681.487' 1388409.429 794682.126' 1388433.884 794693.192' 1388454.204 794698.202 )"' " is 905.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,BidirectionalComparatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\BidirectionalComparatorTest.cs,TestLineString1,The length of the statement  "                                            "LINESTRING ( 1388454.204 794698.202' 1388433.884 794693.192' 1388409.429 794682.126' 1388394.513 794681.487' 1388369.486 794680.401' 1388339.4 794684.108' 1388319.278 794688.247' 1388303.994 794692.585' 1388293.603 794702.155' 1388278.444 794706.504' 1388273.037 794716.275' 1388282.129 794736.7' 1388286.452 794751.914' 1388301.155 794757.682' 1388310.597 794773.107' 1388320.114 794783.54' 1388339.151 794804.386' 1388343.474 794819.588' 1388357.761 794835.234' 1388362.086 794850.563' 1388366.62 794860.776' 1388366.184 794870.766' 1388360.778 794880.538' 1388345.617 794884.895' 1388330.479 794889.255' 1388310.348 794893.382' 1388295.063 794897.731' 1388280.138 794897.079' 1388270.174 794896.648' 1388250.276 794895.796' 1388235.117 794900.145' 1388210.091 794899.06' 1388195.167 794898.409' 1388185.425 794892.987' 1388170.712 794887.346' 1388155.775 794886.703 )" " is 872.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetDimension,The length of the statement  "            var g = (GeometryCollection)reader.Read("GEOMETRYCOLLECTION (POINT (10 10)' POINT (30 30)' LINESTRING (15 15' 20 20))"); " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The length of the statement  "            var g = (GeometryCollection)reader.Read("GEOMETRYCOLLECTION (POINT (10 10)' POINT (30 30)' LINESTRING (15 15' 20 20))"); " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCreateGeometry,The length of the statement  "                "GEOMETRYCOLLECTION (POLYGON ((100 200' 200 200' 200 100' 100 100' 100 200))' LINESTRING (250 100' 350 200)' POINT (350 150))"); " is 128.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,doTestFromCommcast2003AtYahooDotCa,The length of the statement  "                "POLYGON ((708653.498611049 2402311.54647056' 708708.895756966 2402203.47250014' 708280.326454234 2402089.6337791' 708247.896591321 2402252.48269854' 708367.379593851 2402324.00761653' 708248.882609455 2402253.07294874' 708249.523621829 2402244.3124463' 708261.854734465 2402182.39086576' 708262.818392579 2402183.35452387' 708653.498611049 2402311.54647056))") " is 361.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,doTestFromCommcast2003AtYahooDotCa,The length of the statement  "                    "POLYGON ((708258.754920656 2402197.91172757' 708257.029447455 2402206.56901508' 708652.961095455 2402312.65463437' 708657.068786251 2402304.6356364' 708258.754920656 2402197.91172757))")); " is 189.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEquals,The length of the statement  "            DoTestEquals(g' differentStart' true' true' false' true);  // NTS casts from object to Geometry if possible' so changed a equalsObject to be true not false " is 155.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals8,The length of the statement  "            var l1 = (MultiLineString)reader.Read("MULTILINESTRING((1732328800 519578384' 1732026179 519976285' 1731627364 519674014' 1731929984 519276112' 1732328800 519578384))"); " is 169.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals8,The length of the statement  "            var l2 = (MultiLineString)reader.Read("MULTILINESTRING((1731627364 519674014' 1731929984 519276112' 1732328800 519578384' 1732026179 519976285' 1731627364 519674014))"); " is 169.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals9,The length of the statement  "            var l1 = (MultiLineString)reader.Read("MULTILINESTRING((1732328800 519578384' 1732026179 519976285' 1731627364 519674014' 1731929984 519276112' 1732328800 519578384))"); " is 169.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals9,The length of the statement  "            var l2 = (MultiLineString)reader.Read("MULTILINESTRING((1731627364 519674014' 1731929984 519276112' 1732328800 519578384' 1732026179 519976285' 1731627364 519674014))"); " is 169.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals10,The length of the statement  "            var l1 = reader.Read("POLYGON((1732328800 519578384' 1732026179 519976285' 1731627364 519674014' 1731929984 519276112' 1732328800 519578384))"); " is 144.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals10,The length of the statement  "            var l2 = reader.Read("POLYGON((1731627364 519674014' 1731929984 519276112' 1732328800 519578384' 1732026179 519976285' 1731627364 519674014))"); " is 144.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizePolygon1,The length of the statement  "                  "POLYGON ((120 320' 240 200' 120 80' 20 200' 120 320)' (60 200' 80 220' 80 200' 60 200)' (160 200' 180 200' 180 220' 160 200)' (120 140' 140 140' 140 160' 120 140)' (140 240' 140 220' 120 260' 140 240))"); " is 205.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizePolygon1,The length of the statement  "                  "POLYGON ((20 200' 120 320' 240 200' 120 80' 20 200)' (60 200' 80 200' 80 220' 60 200)' (120 140' 140 140' 140 160' 120 140)' (120 260' 140 220' 140 240' 120 260)' (160 200' 180 200' 180 220' 160 200))"); " is 204.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeMultiLineString,The length of the statement  "                  "MULTILINESTRING ((200 260' 180 320' 260 340)' (120 180' 140 100' 40 80)' (200 180' 220 160' 200 180)' (100 280' 120 260' 140 260' 140 240' 120 240' 120 260' 100 280))"); " is 170.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeMultiLineString,The length of the statement  "                  "MULTILINESTRING ((40 80' 140 100' 120 180)' (100 280' 120 260' 120 240' 140 240' 140 260' 120 260' 100 280)' (200 180' 220 160' 200 180)' (200 260' 180 320' 260 340))"); " is 170.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeMultiPolygon,The length of the statement  "                  "MULTIPOLYGON (((40 360' 40 280' 140 280' 140 360' 40 360)' (60 340' 60 300' 120 300' 120 340' 60 340))' ((140 200' 260 200' 260 100' 140 100' 140 200)' (160 180' 240 180' 240 120' 160 120' 160 180)))"); " is 203.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeMultiPolygon,The length of the statement  "                  "MULTIPOLYGON (((40 280' 40 360' 140 360' 140 280' 40 280)' (60 300' 120 300' 120 340' 60 340' 60 300))' ((140 100' 140 200' 260 200' 260 100' 140 100)' (160 120' 240 120' 240 180' 160 180' 160 120)))"); " is 203.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeGeometryCollection,The length of the statement  "                  "GEOMETRYCOLLECTION (LINESTRING (200 300' 200 280' 220 280' 220 320' 180 320)' POINT (140 220)' POLYGON ((100 80' 100 160' 20 160' 20 80' 100 80)' (40 140' 40 100' 80 100' 80 140' 40 140))' POINT (100 240))"); " is 209.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizeGeometryCollection,The length of the statement  "                  "GEOMETRYCOLLECTION (POINT (100 240)' POINT (140 220)' LINESTRING (180 320' 220 320' 220 280' 200 280' 200 300)' POLYGON ((20 80' 20 160' 100 160' 100 80' 20 80)' (40 100' 80 100' 80 140' 40 140' 40 100)))"); " is 208.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,DoTest,The length of the statement  "                    Assert.AreEqual(forward.GetOrdinate(i' ordinate)' reversed.GetOrdinate(j' ordinate)' eps' string.Format("{0} values are not within tolerance"' ordinate)); " is 154.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestMultiPolygon,The length of the statement  "            CheckTransformation("MULTIPOLYGON ( ((0 0' 100 0' 100 100' 0 100' 0 0)' (1 1' 1 10' 10 10' 10 1' 1 1) )' ((200 200' 200 250' 250 250' 250 200' 200 200)) )"); " is 157.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestGeometryCollection,The length of the statement  "            CheckTransformation("GEOMETRYCOLLECTION ( POINT ( 1 1)' LINESTRING (0 0' 10 10)' POLYGON ((0 0' 100 0' 100 100' 0 100' 0 0)) )"); " is 129.
Long Statement,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestNestedGeometryCollection,The length of the statement  "            CheckTransformation("GEOMETRYCOLLECTION ( POINT (20 20)' GEOMETRYCOLLECTION ( POINT ( 1 1)' LINESTRING (0 0' 10 10)' POLYGON ((0 0' 100 0' 100 100' 0 100' 0 0)) ) )"); " is 167.
Long Statement,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The length of the statement  "                Assert.LessOrEqual(srids.Length * precisionModels.Length' ((NtsGeometryServices)NtsGeometryServices.Instance).NumFactories' " is 123.
Long Statement,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCreateEmptyGeometry,The length of the statement  "            //    Assert.IsTrue(geometryFactory.CreatePolygon(geometryFactory.CreateLinearRing(new Coordinate[] { })' new LinearRing[] { }).IsSimple); " is 138.
Long Statement,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testNoOutgoingDirEdgeFoundException,The length of the statement  "            var a = new WKTReader().Read("MULTIPOLYGON (((1668033.7441322226 575074.5372325261' 1668043.6526485088 575601.4901441064' 1668049.5076808596 575876.2262774946' 1668054.4619390026 576155.4662819218' 1668057.61464873 576428.4008668943' 1668059.8665842495 576711.2439681528' 1668063.9200681846 576991.3847467878' 1668071.576648951 577269.7239770072' 1668075.630132886 577547.1624330188' 1668077.8820684056 577825.5016632382' 1668081.935552341 578102.9401192497' 1668087.7905846918 578380.3785752613' 1668094.5463912506 578650.6108376103' 1668097.699100978 578919.9423257514' 1668103.5541333288 579191.0753623082' 1668111.2107140953 579455.9029794101' 1668112.5230371233 579490.6388405386' 1668120.62746972 579490.4954984378' 1668113.4626496148 579183.8691686456' 1668108.5083914716 578916.3392289202' 1668104.4549075365 578642.50386974' 1668100.401423601 578368.6685105597' 1668094.54639125 578095.7339255873' 1668088.6913588992 577822.7993406148' 1668085.5386491718 577548.9639814346' 1668082.3859394444 577275.1286222544' 1668076.5309070935 577002.1940372819' 1668072.4774231582 576729.2594523095' 1668066.6223908074 576456.324867337' 1668063.46968108 576183.3902823646' 1668059.416197145 575910.4556973921' 1668055.3627132094 575637.5211124197' 1668052.210003482 575366.3880758629' 1668046.354971131 575097.9573619296' 1668046.805358235 575068.2318130712' 1668033.7441322226 575074.5372325261)))"); " is 1398.
Long Statement,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testNoOutgoingDirEdgeFoundException,The length of the statement  "            var b = new WKTReader().Read("MULTIPOLYGON (((1665830.62 580116.54' 1665859.44 580115.84' 1666157.24 580108.56' 1666223.3 580107.1' 1666313 580105.12' 1666371.1 580103.62' 1666402 580102.78' 1666452.1 580101.42' 1666491.02 580100.36' 1666613.94 580097.02' 1666614.26 580097.02' 1666624 580096.74' 1666635.14 580096.42' 1666676.16 580095.28' 1666722.42 580093.94' 1666808.26 580091.44' 1666813.42 580091.3' 1666895.02 580088.78' 1666982.06 580086.1' 1667067.9 580083.46' 1667151.34 580080.88' 1667176.8 580080.1' 1667273.72 580077.14' 1667354.54 580074.68' 1667392.4 580073.88' 1667534.24 580070.9' 1667632.7 580068.82' 1667733.94 580066.68' 1667833.62 580064.58' 1667933.24 580062.5' 1667985 580061.4' 1668033.12 580060.14' 1668143.7 580057.24' 1668140.64 579872.78' 1668134.7548600042 579519.7278276943' 1668104.737250423 579518.9428425882' 1668110.64 579873.68' 1668113.18 580025.46' 1668032.4 580027.46' 1667932.66 580030.08' 1667832.8 580032.58' 1667632.28 580037.78' 1667392.14 580043.78' 1667273.4 580046.72' 1667150.62 580049.46' 1667067.14 580051.78' 1666981.14 580053.84' 1666807.4 580057.96' 1666613.64 580062.58' 1666490.14 580065.78' 1666400.9 580067.78' 1666312.18 580070.36' 1666222.1 580072.6' 1665859.28 580079.52' 1665830.28 580080.14' 1665830.62 580116.54))' ((1668134.2639058917 579490.2543124713' 1668130.62 579270.86' 1668125.86 578984.78' 1668117.3 578470.2' 1668104.02 577672.06' 1668096.78 577237.18' 1668093.4 577033.64' 1668087.28 576666.92' 1668085.24 576543.96' 1668083.32 576428.36' 1668081.28 576305.86' 1668075.38 575950.9' 1668061.12 575018.44' 1666745.6 575072.62' 1665835.48 575109.72' 1665429.26 575126.26' 1664940.66 575148.86' 1664365.4 575170.64' 1664116.02 575181.78' 1662804.22 575230.32' 1662804.780409841 575260.319992344' 1664086.52 575208.92' 1664150.3090003466 579072.2660557877' 1664180.345101783 579073.7529915024' 1664174.46 578717.2' 1664204.44 578716.82' 1664173.3 576830.12' 1664146.48 575206.52' 1665410.98 575155.82' 1665439.18 576784.24' 1665441.16 576899.44' 1665441.88 576940.4' 1665478.5547472103 579058.5389785315' 1665518.6155320513 579061.3502616781' 1665450.98 575156.2' 1668030.38 575050.3' 1668104.2687072477 579490.7848338542' 1668134.2639058917 579490.2543124713))' ((1664150.7710040906 579100.2470608585' 1664160.68 579700.38' 1664165.68 579987.66' 1664195.2 579986.98' 1664190.68 579699.9' 1664180.7918241904 579100.8179797827' 1664150.7710040906 579100.2470608585))' ((1665478.9532824333 579081.5562602862' 1665483.38 579337.22' 1665503.38 579336.64' 1665505.06 579443.26' 1665525.22 579442.68' 1665522.9750161383 579313.0587927903' 1665513.4612495075 579308.8304520656' 1665510.9439672586 579258.4848070825' 1665510.9439672586 579114.9997188805' 1665503.392120511 579082.2750496415' 1665478.9532824333 579081.5562602862)))"); " is 2794.
Long Statement,NetTopologySuite.Tests.NUnit.Hull,ChiShapeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Hull\ChiShapeTest.cs,TestTurf,The length of the statement  "                "LINESTRING (-63.601226 44.642643' -63.591442 44.651436' -63.580799 44.648749' -63.573589 44.641788' -63.587665 44.64533' -63.595218 44.64765)"' " is 144.
Long Statement,NetTopologySuite.Tests.NUnit.Hull,ChiShapeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Hull\ChiShapeTest.cs,TestTurf,The length of the statement  "                "POLYGON ((-63.601226 44.642643' -63.587665 44.64533' -63.573589 44.641788' -63.580799 44.648749' -63.591442 44.651436' -63.601226 44.642643))" " is 143.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestPolygon,The length of the statement  "                "<Polygon><outerBoundaryIs><LinearRing><coordinates>1'1 2'1 2'2 1'2 1'1</coordinates></LinearRing></outerBoundaryIs></Polygon>"); " is 129.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestPolygonWithHole,The length of the statement  "                "<Polygon><outerBoundaryIs><LinearRing><coordinates>1'9 9'9 9'1 1'1 1'9</coordinates></LinearRing></outerBoundaryIs><innerBoundaryIs><LinearRing><coordinates>2'8 8'8 8'2 2'2 2'8</coordinates></LinearRing></innerBoundaryIs></Polygon>"); " is 235.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestMultiPoint,The length of the statement  "                "<MultiGeometry><Point><coordinates>1'1</coordinates></Point><Point><coordinates>2'2</coordinates></Point></MultiGeometry>"); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestMultiLineString,The length of the statement  "                "<MultiGeometry><LineString><coordinates>2'9 2'2</coordinates></LineString><LineString><coordinates>5'5 8'5</coordinates></LineString></MultiGeometry>"); " is 153.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestMultiPolygon,The length of the statement  "                "<MultiGeometry><Polygon><outerBoundaryIs><LinearRing><coordinates>2'9 5'9 5'5 2'5 2'9</coordinates></LinearRing></outerBoundaryIs></Polygon><Polygon><outerBoundaryIs><LinearRing><coordinates>6'4 8'4 8'2 6'2 6'4</coordinates></LinearRing></outerBoundaryIs></Polygon></MultiGeometry>"); " is 285.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestGeometryCollection,The length of the statement  "                "<MultiGeometry><LineString><coordinates>1'9 1'2 3'2</coordinates></LineString><Polygon><outerBoundaryIs><LinearRing><coordinates>3'9 5'9 5'7 3'7 3'9</coordinates></LinearRing></outerBoundaryIs></Polygon><Point><coordinates>5'5</coordinates></Point></MultiGeometry>"); " is 268.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestExtrudeAltitudeLineString,The length of the statement  "                "<LineString><extrude>1</extrude><altitudeMode>absolute</altitudeMode><coordinates>1'1 2'2</coordinates></LineString>"); " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestExtrudeAltitudePolygon,The length of the statement  "                "<Polygon><extrude>1</extrude><altitudeMode>absolute</altitudeMode><outerBoundaryIs><LinearRing><coordinates>1'1 2'1 2'2 1'2 1'1</coordinates></LinearRing></outerBoundaryIs></Polygon>"); " is 186.
Long Statement,NetTopologySuite.Tests.NUnit.IO.KML,KMLWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\KML\KMLWriterTest.cs,TestExtrudeGeometryCollection,The length of the statement  "                "<MultiGeometry><LineString><extrude>1</extrude><coordinates>1'9 1'2 3'2</coordinates></LineString><Polygon><extrude>1</extrude><outerBoundaryIs><LinearRing><coordinates>3'9 5'9 5'7 3'7 3'9</coordinates></LinearRing></outerBoundaryIs></Polygon><Point><extrude>1</extrude><coordinates>5'5</coordinates></Point></MultiGeometry>"); " is 328.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBReaderTest.cs,TestSpatialiteMultiGeometry,The length of the statement  "                "01060000000200000069030000000100000004000000000000000000444000000000000044400000000000003440000000000080464000000000008046400000000000003E4000000000000044400000000000004440690300000001000000040000000000000000003E40000000000000344000000000000034400000000000002E40000000000000344000000000000039400000000000003E400000000000003440"' " is 329.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBReaderTest.cs,TestSpatialiteMultiGeometry,The length of the statement  "                "010500000002000000690200000003000000000000000000244000000000000024400000000000003440000000000000344000000000000024400000000000004440690200000004000000000000000000444000000000000044400000000000003E400000000000003E40000000000000444000000000000034400000000000003E400000000000002440"' " is 281.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBReaderTest.cs,TestSpatialiteMultiGeometry,The length of the statement  "                "010700000002000000690100000000000000000010400000000000001840690200000002000000000000000000104000000000000018400000000000001C400000000000002440"' " is 145.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBReaderTest.cs,CheckWkbGeometry,The length of the statement  "                useReader = new WKTReader(NtsGeometryServices.Instance.CreateGeometryFactory(PackedCoordinateSequenceFactory.DoubleFactory)); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBReaderTest.cs,TestBase64TextFiles,The length of the statement  "            // taken from: https://raw.githubusercontent.com/SharpMap/SharpMap/5289522c26e77584eaa95428c1bd2202ff18a340/UnitTests/TestData/Base%2064.txt " is 140.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestMultiPolygon,The length of the statement  "            RunWKBTest("MULTIPOLYGON ( ((0 0' 100 0' 100 100' 0 100' 0 0)' (1 1' 1 10' 10 10' 10 1' 1 1) )' ((200 200' 200 250' 250 250' 250 200' 200 200)) )"); " is 148.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestGeometryCollection,The length of the statement  "            RunWKBTest("GEOMETRYCOLLECTION ( POINT ( 1 1)' LINESTRING (0 0' 10 10)' POLYGON ((0 0' 100 0' 100 100' 0 100' 0 0)) )"); " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestNestedGeometryCollection,The length of the statement  "            RunWKBTest("GEOMETRYCOLLECTION ( POINT (20 20)' GEOMETRYCOLLECTION ( POINT ( 1 1)' LINESTRING (0 0' 10 10)' POLYGON ((0 0' 100 0' 100 100' 0 100' 0 0)) ) )"); " is 158.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The length of the statement  "            Assert.That(() => this.reader2D.Read("LINEARRING (10 10' 20 20' 30 40' 10 99)")' Throws.ArgumentException.With.Message.Contains("must form a closed linestring")); " is 162.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON ((10 10' 10 20' 20 20' 20 15' 10 10)' (11 11' 12 11' 12 12' 12 11' 11 11)' (11 19' 11 18' 12 18' 12 19' 11 19))")' " is 141.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON Z((10 10 10' 10 20 10' 20 20 10' 20 15 10' 10 10 10)' (11 11 10' 12 11 10' 12 12 10' 12 11 10' 11 11 10))")' " is 135.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON Z((10 10 10' 10 20 10' 20 20 10' 20 15 10' 10 10 10)' (11 11 10' 12 11 10' 12 12 10' 12 11 10' 11 11 10)' (11 19 10' 11 18 10' 12 18 10' 12 19 10' 11 19 10))")' " is 187.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON M((10 10 11' 10 20 11' 20 20 11' 20 15 11' 10 10 11)' (11 11 11' 12 11 11' 12 12 11' 12 11 11' 11 11 11))")' " is 135.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON M((10 10 11' 10 20 11' 20 20 11' 20 15 11' 10 10 11)' (11 11 11' 12 11 11' 12 12 11' 12 11 11' 11 11 11)' (11 19 11' 11 18 11' 12 18 11' 12 19 11' 11 19 11))")' " is 187.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON ZM((10 10 10 11' 10 20 10 11' 20 20 10 11' 20 15 10 11' 10 10 10 11)' (11 11 10 11' 12 11 10 11' 12 12 10 11' 12 11 10 11' 11 11 10 11))")' " is 166.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The length of the statement  "                (Polygon)rdr.Read("POLYGON ZM((10 10 10 11' 10 20 10 11' 20 20 10 11' 20 15 10 11' 10 10 10 11)' (11 11 10 11' 12 11 10 11' 12 12 10 11' 12 11 10 11' 11 11 10 11)' (11 19 10 11' 11 18 10 11' 12 18 10 11' 12 19 10 11' 11 19 10 11))")' " is 233.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON (((10 10' 10 20' 20 20' 20 15' 10 10)' (11 11' 12 11' 12 12' 12 11' 11 11))' ((60 60' 70 70' 80 60' 60 60)))")' " is 148.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON Z(((10 10 10' 10 20 10' 20 20 10' 20 15 10' 10 10 10)' (11 11 10' 12 11 10' 12 12 10' 12 11 10' 11 11 10)))")' " is 147.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON Z(((10 10 10' 10 20 10' 20 20 10' 20 15 10' 10 10 10)' (11 11 10' 12 11 10' 12 12 10' 12 11 10' 11 11 10))' ((60 60 10' 70 70 10' 80 60 10' 60 60 10)))")' " is 191.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON M(((10 10 11' 10 20 11' 20 20 11' 20 15 11' 10 10 11)' (11 11 11' 12 11 11' 12 12 11' 12 11 11' 11 11 11)))")' " is 147.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON M(((10 10 11' 10 20 11' 20 20 11' 20 15 11' 10 10 11)' (11 11 11' 12 11 11' 12 12 11' 12 11 11' 11 11 11))' ((60 60 11' 70 70 11' 80 60 11' 60 60 11)))")' " is 191.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON ZM(((10 10 10 11' 10 20 10 11' 20 20 10 11' 20 15 10 11' 10 10 10 11)' (11 11 10 11' 12 11 10 11' 12 12 10 11' 12 11 10 11' 11 11 10 11)))")' " is 178.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The length of the statement  "                (MultiPolygon)rdr.Read("MULTIPOLYGON ZM(((10 10 10 11' 10 20 10 11' 20 20 10 11' 20 15 10 11' 10 10 10 11)' (11 11 10 11' 12 11 10 11' 12 12 10 11' 12 11 10 11' 11 11 10 11))' ((60 60 10 11' 70 70 10 11' 80 60 10 11' 60 60 10 11)))")' " is 234.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The length of the statement  "            var gc1 = (GeometryCollection)rdr.Read("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING EMPTY' LINESTRING (15 15' 20 20))"); " is 122.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The length of the statement  "            var gc2 = (GeometryCollection)rdr.Read("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING (10 10' 20 20' 30 40' 10 10)' LINESTRING (15 15' 20 20))"); " is 145.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadLinearRing,The length of the statement  "            Assert.AreEqual("LINEARRING (10 10' 20 20' 30 40' 10 10)"' _writer.Write(_reader.Read("LINEARRING (10 10' 20 20' 30 40' 10 10)"))); " is 131.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadPolygon,The length of the statement  "            Assert.AreEqual("POLYGON ((10 10' 10 20' 20 20' 20 15' 10 10))"' _writer.Write(_reader.Read("POLYGON ((10 10' 10 20' 20 20' 20 15' 10 10))"))); " is 143.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadMultiLineString,The length of the statement  "            Assert.AreEqual("MULTILINESTRING ((10 10' 20 20)' (15 15' 30 15))"' _writer.Write(_reader.Read("MULTILINESTRING ((10 10' 20 20)' (15 15' 30 15))"))); " is 149.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadMultiPolygon,The length of the statement  "            Assert.AreEqual("MULTIPOLYGON (((10 10' 10 20' 20 20' 20 15' 10 10))' ((60 60' 70 70' 80 60' 60 60)))"' _writer.Write(_reader.Read("MULTIPOLYGON (((10 10' 10 20' 20 20' 20 15' 10 10))' ((60 60' 70 70' 80 60' 60 60)))"))); " is 221.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadGeometryCollection,The length of the statement  "            Assert.AreEqual("GEOMETRYCOLLECTION (POINT (10 10)' POINT (30 30)' LINESTRING (15 15' 20 20))"' _writer.Write(_reader.Read("GEOMETRYCOLLECTION (POINT (10 10)' POINT (30 30)' LINESTRING (15 15' 20 20))"))); " is 205.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadGeometryCollection,The length of the statement  "            Assert.AreEqual("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING EMPTY' LINESTRING (15 15' 20 20))"' _writer.Write(_reader.Read("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING EMPTY' LINESTRING (15 15' 20 20))"))); " is 211.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadGeometryCollection,The length of the statement  "            Assert.AreEqual("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING (10 10' 20 20' 30 40' 10 10)' LINESTRING (15 15' 20 20))"' _writer.Write(_reader.Read("GEOMETRYCOLLECTION (POINT (10 10)' LINEARRING (10 10' 20 20' 30 40' 10 10)' LINESTRING (15 15' 20 20))"))); " is 257.
Long Statement,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The length of the statement  "                    "GEOMETRYCOLLECTION (POLYGON ((100 200' 200 200' 200 100' 100 100' 100 200))' LINESTRING (250 100' 350 200)' POINT (350 150))" " is 126.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' 1.0' "POINT (-0.7071067811865475 0.7071067811865475)"); " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' -1.0' "POINT (0.7071067811865475 -0.7071067811865475)"); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            //RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' 5.0' "POINT (6.464466094067262 13.535533905932738)"); " is 126.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            //RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' -5.0' "POINT (13.535533905932738 6.464466094067262)"); " is 127.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' 1.0' "POINT (-0.7071067811865475 0.7071067811865475)"); " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' -1.0' "POINT (0.7071067811865475 -0.7071067811865475)"); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' 5.0' "POINT (6.464466094067262 13.535533905932738)"); " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' -5.0' "POINT (13.535533905932738 6.464466094067262)"); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' 1.0' "POINT (-0.7071067811865475 0.7071067811865475)"); " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(0 0)"' -1.0' "POINT (0.7071067811865475 -0.7071067811865475)"); " is 125.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            //RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' 5.0' "POINT (6.464466094067262 13.535533905932738)"); " is 126.
Long Statement,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The length of the statement  "            //RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' -5.0' "POINT (13.535533905932738 6.464466094067262)"); " is 127.
Long Statement,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestBadLines1,The length of the statement  "                "LINESTRING ( 171 157' 175 154' 170 154' 170 155' 170 156' 170 157' 171 158' 171 159' 172 160' 176 156' 171 156' 171 159' 176 159' 172 155' 170 157' 174 161' 174 156' 173 156' 172 156 )" " is 186.
Long Statement,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestBadNoding1,The length of the statement  "                "LINESTRING ( 76 47' 81 52' 81 53' 85 57' 88 62' 89 64' 57 80' 82 55' 101 74' 76 99' 92 67' 94 68' 99 71' 103 75' 139 111 )" " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferResultValidatorTest.cs,TestRandomLineStringEnvDistanceFailure,The length of the statement  "            string wkt = "LINESTRING (0 0' 0.0050121406740709 -0.0178116943078762' 0.023360713164988 -0.0154225740096356' 0.0242435510469024 -0.0324899203339147' 0.0085030847458749 -0.0391466037351922' -0.0049763942180625 -0.037881923003369' -0.0178369891369056 -0.0336509811666022' -0.0177592362824081 -0.0478222381025471' -0.0261518089363225 -0.059241313936419' -0.0341770463763633 -0.0645869491810857' -0.0427699646025609 -0.0602117910701216' -0.0465729748988988 -0.0703610553736549' -0.0572399695179476 -0.0684412431395525' -0.064840373708758 -0.0597916835657802' -0.075933665026951 -0.0567062480351575' -0.0906286002341713 -0.059530806708663' -0.0891053530465528 -0.0744170073807583' -0.0746455187887388 -0.0582637398359729' -0.0876322125310863 -0.0409039977647514' -0.1069996284174552 -0.0514712920048503' -0.1204569088827982 -0.0339879825884526' -0.1354060760983749 -0.0341983165162511' -0.1424144995136747 -0.0474045211955802' -0.1561943830808726 -0.0516357586378472' -0.1609639311781655 -0.0652386984806159' -0.172820609900011 -0.0479563759837032' -0.1931585264285574 -0.0530188509197635' -0.1876254420927919 -0.0738312584480705' -0.2060740501060544 -0.0849407225109319' -0.1954015340280759 -0.0931083780890523' -0.1913365994785588 -0.1059181206385984' -0.1879772905502195 -0.1185977617930016' -0.1901791119746468 -0.1315287415971536' -0.2055975201959379 -0.1276390095109663' -0.2180744798435294 -0.1374971434993573' -0.2261858140167908 -0.1504179698941716' -0.2236828711990071 -0.1654671151870497' -0.225571090488597 -0.1471690572150352' -0.2434396962271624 -0.1427990198476331' -0.2503470559042911 -0.1628488501608332' -0.2704331618796968 -0.1560476987846242' -0.2550448722209311 -0.1440053393069962' -0.2635574811871452 -0.1264168951177332' -0.2758386441327004 -0.116818079927041' -0.2828404821964569 -0.1028919002610568' -0.2928940810123721 -0.0879293917136913' -0.3108998104218049 -0.0870661306780576' -0.3294214224615548 -0.0886284960279035' -0.3373659412990392 -0.1054325347828655' -0.3503843166187969 -0.1008471110331078' -0.3620893100993321 -0.0935329238225187' -0.3752347454586858 -0.0807205639798017' -0.364050120731684 -0.0661650425105326' -0.3780981811728654 -0.0583863178624236' -0.3740658987852153 -0.0428429186828223' -0.3864807698899518 -0.0394112742622611' -0.397014675967126 -0.0319989850926683' -0.3792640781001624 -0.0475790727438729' -0.3635724248095485 -0.0299270226402436' -0.3531693783166142 -0.0125463838807832' -0.3655005683918717 0.0035238286675586' -0.3493015470929176 0.0029497655991704' -0.3378627422211032 0.0144341716593467' -0.3379405126929051 0.0293510688455208' -0.3406883764612563 0.0440128939235851' -0.3324332748392658 0.0227821327097087' -0.3462851476872376 0.0046985063279884' -0.3661593446838672 0.0075718173506031' -0.3859950986841109 0.0044441207963732' -0.4027319978512339 0.0004805553317992' -0.4150094528052938 0.012526207857646' -0.4311725983161582 0.0071653266858711' -0.4447171238919916 0.0174867677998271' -0.465291792103443 0.0104740624365847' -0.4615219171240586 -0.0109334841571465' -0.4526590891130391 -0.025063534859475' -0.4401615889615084 -0.0361098257829378' -0.451476583234073 -0.0503332357093948' -0.43876845696841 -0.0633270039134291' -0.4220363317446629 -0.0713764311308523' -0.4287707591717834 -0.0886797481614276' -0.4163583595694239 -0.0805826015178939' -0.4017174055456447 -0.0782861013700334' -0.3864498922291822 -0.087086838473576' -0.3893076893621629 -0.1044759998099015' -0.3782293922748502 -0.1056035091475074' -0.3670938749838836 -0.1055894264015696' -0.3613890574287955 -0.1164741204510282' -0.3493671904520086 -0.1190228892282226' -0.3511433302216462 -0.1319276046935007' -0.3402777116820132 -0.139112636876606' -0.3469922590359794 -0.1509770179277757' -0.3377737639033578 -0.1610203257188295' -0.3368889950817616 -0.1732679389871961' -0.3269102987026388 -0.1804242274953837' -0.3177137792270426 -0.1867051970797883' -0.3092836077007141 -0.1939824738659162' -0.3116643890978169 -0.2050741572602805' -0.3229956647241386 -0.2045303252439961' -0.3221430239883363 -0.2150674360329148' -0.331767345466129 -0.2194412371365768' -0.3315329076661971 -0.2298055225437402' -0.3362944034438575 -0.2390142972202375' -0.3470221693455817 -0.2369980102710796' -0.3559158724222612 -0.2433267083905513' -0.3644604760007383 -0.2436755181520328' -0.372881872491775 -0.2421882388562105' -0.3814256019023612 -0.2406668899680489' -0.3898804777999258 -0.2426226221167863' -0.3970018876959567 -0.2364253071078368' -0.4060835430038888 -0.2338475699033603' -0.412594493640082 -0.2439820360262829' -0.4236884218893332 -0.2392889946047656' -0.425726993166183 -0.2499686502941685' -0.4362210512383605 -0.2528121628530928' -0.4454415965196014 -0.2541298962589096' -0.4546585745696004 -0.2527874387221312' -0.4687370955646141 -0.2482192707581446' -0.4645693181446278 -0.2340170686988974' -0.4747109779380611 -0.2373166792512392' -0.4853026776378588 -0.2385643132649516' -0.4823430301358789 -0.2261580832778798' -0.4921708793894377 -0.2180286654095807' -0.5014310346680746 -0.2104343904289632' -0.5131767467491777 -0.2127714261525942' -0.524758242265578 -0.2138677953865533' -0.5281216797546923 -0.225004237913249' -0.5402456559428697 -0.2190784275354333' -0.5464620363415711 -0.2310560166911842' -0.542512721959894 -0.2190727838184703' -0.5299158885511648 -0.2183553284263113' -0.5323313826508866 -0.2081056749441625' -0.5374613194449342 -0.1989092758260843' -0.5308959758078244 -0.192158102294992' -0.5252832259614064 -0.18459641463404' -0.5221681982846436 -0.1741043062332059' -0.5299291504240683 -0.1663870944302677' -0.538075291830999 -0.1606196846947658' -0.5460958408390417 -0.1546788574385282' -0.5571976352029643 -0.1590683728220992' -0.5656419053954334 -0.15062965346914' -0.5626710205200925 -0.1391545786037842' -0.5716905851300862 -0.131463612841658' -0.5620517316800521 -0.1229727179031278' -0.5681678748101774 -0.1116768962906813' -0.5771327800896917 -0.1056434422681761' -0.5826417573967029 -0.0963470309636358' -0.5787652458443208 -0.0819577497852585' -0.5931515506438964 -0.07807020700609' -0.6000930810759233 -0.0897522881719957' -0.613090596340292 -0.0857873843827383' -0.6265660218475042 -0.08732871676454' -0.6283374626939596 -0.1007758278088917' -0.6376657588583103 -0.103841922781183' -0.6474053207345623 -0.1025933307070406' -0.6548736564285454 -0.0953067735503082' -0.654680552705842 -0.0848744840514193' -0.6673818543076171 -0.0797269153099037' -0.6732514461208984 -0.0921111156584666' -0.680340410670068 -0.0848045371912123' -0.6839141811082304 -0.0752720835651596' -0.6952357315689285 -0.0780839448648954' -0.7043638998905275 -0.0708202948254428' -0.7089478156886628 -0.0611570039128909' -0.7170491012862124 -0.0541741214871344' -0.7299366109544918 -0.0489860575040238' -0.743822620267513 -0.0494134433970277' -0.7525108381809805 -0.0614072740889566' -0.7497387870295431 -0.0759555673769118' -0.7639646144394061 -0.0777167567822421' -0.7647857704051172 -0.0920276497137342' -0.7665925966102568 -0.1068906296980722' -0.751925224535934 -0.1098974538338984' -0.7553757071995333 -0.1178721548416768' -0.7582065416490503 -0.1260872667152114' -0.7646431127084641 -0.1319348983754947' -0.7703918589555896 -0.1384599393426758' -0.7782472054819142 -0.148123733387558' -0.7905826527045907 -0.1498360786235145' -0.805019711373555 -0.1498484410770697' -0.8091953806227662 -0.1360284337629413' -0.8239770665663367 -0.138740014308915' -0.8358364299184061 -0.1295092825245303' -0.8317679166580235 -0.1163824870318194' -0.8294437111734797 -0.102837612395154' -0.8347428924366753 -0.1129319903177962' -0.82988311192825 -0.1232451043535887' -0.8422385495990062 -0.1216458574069483' -0.8479693210652968 -0.1327080764082801' -0.8494086824352087 -0.143259925911373' -0.8594354099962246 -0.1468485222255715' -0.8710700404835304 -0.1418156960697787' -0.8764637086499377 -0.1532875010455122' -0.871877966331779 -0.1412974383981378' -0.8823312633464051 -0.1338463165751822' -0.8927539427986722 -0.1352439397632697' -0.9024673537790425 -0.1312146414785791' -0.9169666300372805 -0.1335633933170455' -0.9209834585760139 -0.1194350269676821' -0.9100334022350977 -0.1118099759715185' -0.9133093778973502 -0.0988750186842421' -0.904147237248668 -0.0981354871802091' -0.867761668652526 -0.0926437616303994' -0.8913826744373572 -0.0840621883819444' -0.8812480806037308 -0.0842143981575342' -0.8685379344019649 -0.083568724024858' -0.8675160071300994 -0.0708832844894344' -0.8580205523689814 -0.0613140308561704' -0.8675158498660372 -0.0517446211742423' -0.872409166809526 -0.0609547213497025' -0.8814761088393026 -0.0661084635027518' -0.8953889326977116 -0.0653897157193776' -0.8965747408556268 -0.0792705343228981' -0.8971756623331555 -0.0639311912103026' -0.9092402266247249 -0.0544389395173335' -0.9210951910761328 -0.0619763164030262' -0.9344515553812949 -0.0663305976306128' -0.9293822574409418 -0.0516430853363158' -0.9432685864947324 -0.044672384911463' -0.9334103096655941 -0.0379224973468535' -0.9271045458452278 -0.0277743966961627' -0.9402339665028446 -0.031168284369269' -0.9452756930518931 -0.0185793545598317' -0.945522913806585 -0.0067054298128354' -0.9561187700225338 -0.001340820036736' -0.953028314165927 0.0069471451590414' -0.9539875490127478 0.0157403898955819' -0.9454055349138165 0.0164413901291298' -0.9367970827899018 0.0166335342207932' -0.9348612526701263 0.0262474007677379' -0.9444648321049989 0.0282336359686109' -0.9416892723465026 0.0350367191376586' -0.9436581770452196 0.0421154963530633' -0.9392419545310323 0.0479752065653825' -0.9429529439318587 0.0543051183131185' -0.9498274711576367 0.0567906035358281' -0.9502592194732825 0.0640878876033568' -0.9520104655644192 0.0697913324971662' -0.9506223265991526 0.075593850635143' -0.9522815769508243 0.0816306792021164' -0.949060273844204 0.0869990697590549' -0.9422910357785079 0.092524671810989' -0.939968942049302 0.1009486104823701' -0.9324013321982897 0.1049244389670934' -0.9273714883420019 0.11183650101676' -0.9288062097408671 0.1235145389288624' -0.9183235713304518 0.1288576922043494' -0.9306750764088837 0.1320777269837099' -0.9292202577363909 0.1447588864067668' -0.9370186524242582 0.1524827493617562' -0.9433294881114153 0.1614630818491934' -0.9465907937786249 0.1720205011056855' -0.9466837543675501 0.1830697804641427' -0.961723424524043 0.1824460721954856' -0.9729999178465795 0.1924170996634692' -0.9712379977563 0.1757762035680768' -0.9858512041816034 0.1676228003992367)"; " is 10408.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringDepthFailure,The length of the statement  "              "MULTILINESTRING ((1335558.59524 631743.01449' 1335572.28215 631775.89056' 1335573.2578018496 631782.1915185435)'  (1335573.2578018496 631782.1915185435' 1335576.62035 631803.90754)' (1335558.59524 631743.01449' 1335573.2578018496 631782.1915185435)' (1335573.2578018496 631782.1915185435' 1335580.70187 631802.08139))") " is 320.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringSeparateBuffersFloating,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString2BuffersTouchToMakeHoleFloating,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString3HoleVanishesFloating,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString4ReallyBigDistanceFloating,The length of the statement  "                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringSeparateBuffersFloatingSingle,The length of the statement  "                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))"' " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString2BuffersTouchToMakeHoleFloatingSingle,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))"' true) " is 255.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString3HoleVanishesFloatingSingle,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString4ReallyBigDistanceFloatingSingle,The length of the statement  "              "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))") " is 249.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestPolygonMultipleHoles,The length of the statement  "              "POLYGON (( 78 82' 78 282' 312 282' 312 82' 78 82 )' ( 117 242' 122 242' 122 248' 117 248' 117 242 )' ( 156 104' 288 104' 288 210' 156 210' 156 104 ))") " is 152.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test11,The length of the statement  "              "POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400)' (260 320' 240 260' 220 220' 160 180' 220 160' 200 100' 260 160' 300 140' 320 180' 260 200' 260 320))") " is 260.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test16,The length of the statement  "              "POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400)' (260 320' 240 260' 220 220' 160 180' 220 160' 200 100' 260 160' 300 140' 320 180' 260 200' 260 320))") " is 260.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test17,The length of the statement  "              "POLYGON ((32 136' 27 163' 30 236' 34 252' 49 291' 72 326' 83 339' 116 369' 155 391' 176 400' 219 414' 264 417' 279 416' 339 401' 353 395' 380 381' 394 372' 441 328' 458 303' 463 294' 480 251' 486 205' 486 183' 473 115' 469 105' 460 85' 454 74' 423 33' 382 2' 373 -3' 336 -19' 319 -24' 275 -31' 252 -32' 203 -27' 190 -24' 149 -10' 139 -5' 84 37' 76 46' 52 81' 36 121' 32 136))") " is 378.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test22,The length of the statement  "              "POLYGON ((224 271' 225 261' 214 258' 210 266' 212 267' 214 267' 217 268' 218 268' 219 268' 221 269' 222 270'  224 271 ))") " is 123.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test23,The length of the statement  "              "POLYGON ((484 76' 474 79' 492 122' 502 119' 501 117' 500 112' 499 111' 498 107' 497 104' 496 103' 494 98' 493 96' 491 92' 490 90' 489 86' 487 81' 486 79' 485 77' 484 76 ))") " is 174.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test25,The length of the statement  "              "POLYGON ((233 195' 232 195' 231 194' 222 188' 226 187' 227 187' 229 187' 230 186' 232 186' 234 185' 236 184' 237 183' 238 182' 237 184' 236 185' 236 186' 235 187' 235 188' 234 189' 234 191' 234 192' 233 193' 233 195 ))") " is 221.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test26,The length of the statement  "              "LINESTRING (233 195' 232 195' 231 194' 222 188' 226 187' 227 187' 229 187' 230 186' 232 186' 234 185' 236 184' 237 183' 238 182' 237 184' 236 185' 236 186' 235 187' 235 188' 234 189' 234 191' 234 192' 233 193' 233 195 )") " is 222.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test27,The length of the statement  "              "POLYGON ((2330 1950' 2320 1950' 2310 1940' 2220 1880' 2260 1870' 2270 1870' 2290 1870' 2300 1860' 2320 1860' 2340 1850' 2360 1840' 2370 1830' 2380 1820' 2370 1840' 2360 1850' 2360 1860' 2350 1870' 2350 1880' 2340 1890' 2340 1910' 2340 1920' 2330 1930' 2330 1950 ))") " is 267.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test28,The length of the statement  "              "LINESTRING (2330 1950' 2320 1950' 2310 1940' 2220 1880' 2260 1870' 2270 1870' 2290 1870' 2300 1860' 2320 1860' 2340 1850' 2360 1840' 2370 1830' 2380 1820' 2370 1840' 2360 1850' 2360 1860' 2350 1870' 2350 1880' 2340 1890' 2340 1910' 2340 1920' 2330 1930' 2330 1950 )") " is 268.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test29,The length of the statement  "              "POLYGON ((440 -93' 440 -67' 475 -67' 471 -71' 469 -72' 468 -73' 467 -74' 463 -78' 459 -81' 458 -82' 454 -84' 453 -85' 452 -86' 450 -86' 449 -87' 448 -88' 444 -90' 443 -91' 441 -92' 440 -93 ))") " is 194.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test30,The length of the statement  "              "POLYGON ((4400 -930' 4400 -670' 4750 -670' 4710 -710' 4690 -720' 4680 -730' 4670 -740' 4630 -780' 4590 -810' 4580 -820' 4540 -840' 4530 -850' 4520 -860' 4500 -860' 4490 -870' 4480 -880' 4440 -900' 4430 -910' 4410 -920' 4400 -930 ))") " is 234.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test31,The length of the statement  "                "POLYGON ((635074.6769928858 6184832.427381967' 635075.6723193424 6184799.950949265' 634717.5983159657 6184655.107092909' 634701.0176852546 6184648.498845058' 634697.7188197445 6184647.20632975' 634694.416887708 6184645.922033237' 634691.1138635761 6184644.642692243' 634687.8077729489 6184643.371570057' 634684.498667351 6184642.107006015' 634681.1875340013 6184640.847368483' 634677.8742698929 6184639.595978798' 634674.5570551592 6184638.351118257' 634671.2386969016 6184637.112873929' 634667.9173237421 6184635.881187774' 634664.5938713895 6184634.656088823' 634661.2674041622 6184633.437548058' 634657.9388577675 6184632.2255945075' 634654.6082322216 6184631.02022817' 634651.2745403448 6184629.823080709' 634647.9388208436 6184628.630859804' 634644.6000865338 6184627.4451971175' 634641.2592216335 6184626.267782336' 634637.9163291481 6184625.095294129' 634634.5713061031 6184623.931053837' 634631.2232683088 6184622.773371783' 634636.1918816608 6184608.365992378' 634633.2495506873 6184607.353869728' 634630.3051410569 6184606.348333739' 634627.3587557608 6184605.346063082' 634624.4102918282 6184604.3503790945' 634621.4607364619 6184603.359650123' 634618.5091539674 6184602.37384716' 634615.5564800596 6184601.392999219' 634612.6017790422 6184600.417077295' 634609.6450509242 6184599.446081388' 634606.6862442375 6184598.481672177' 634603.7263976521 6184597.52055733' 634600.7654082242 6184596.566058185' 634597.80145603 6184595.61645607' 634594.8364124894 6184594.671808995' 634591.8702261405 6184593.733777636' 634588.9020642313 6184592.799011653' 634585.9318238292 6184591.870832384' 634582.960543591 6184590.945947501' 634579.9871848791 6184590.027649342' 634577.0127348808 6184589.11430624' 634574.0362578988 6184588.205889201' 634571.0586381858 6184587.304087893' 634568.0790429743 6184586.405551985' 634565.0983050519 6184585.513631817' 634562.115540186 6184584.626637723' 634559.1316840936 6184583.744598703' 634556.1458010782 6184582.867485766' 634553.1587753976 6184581.996988578' 634550.1697742692 6184581.12975681' 634547.1796305005 6184580.269140797' 634544.1874598458 6184579.41345088' 634541.194198027 6184578.562716054' 634538.1998450506 6184577.716936321' 634535.2034137691 6184576.877743362' 634532.2059428038 6184576.041844833' 634529.2063935531 6184575.212533085' 634526.2057531879 6184574.388176442' 634523.2040217179 6184573.568774906' 634520.2002119992 6184572.755960159' 634517.1953626422 6184571.946439856' 634514.1893707667 6184571.143535337' 634510.267712847 6184585.871039091' 634281.9449709259 6184525.076957544' 633860.4859191478 6184412.861324424' 633664.3557212166 6184360.639468017' 633645.5884675509 6184355.641948889' 633486.222 6184313.208' 633485.7474265156 6184328.852301474' 633485.2749953512 6184344.496113185' 633650.4562371405 6184388.478170839' 633669.5206846121 6184393.553017912' 633852.6461183216 6184442.312440121' 634280.9949861752 6184556.364455' 634502.4254528129 6184615.324425217' 634505.716566367 6184616.204307566' 634509.0065372197 6184617.090806118' 634512.2953653594 6184617.983920872' 634515.5812308139 6184618.88193318' 634518.8659020835 6184619.788222348' 634522.1484948951 6184620.7010987215' 634525.4299963829 6184621.61893061' 634528.7093679372 6184622.545010364' 634531.9867124417 6184623.476016638' 634535.2619784358 6184624.413610098' 634538.5360501477 6184625.3594804' 634541.807159074 6184626.310248219' 634545.0771251463 6184627.267632202' 634548.3459483465 6184628.231632348' 634551.611808724 6184629.200529998' 634554.8764747474 6184630.177704472' 634558.138126462 6184631.161437107' 634561.3986867118 6184632.150125222' 634564.6571168633 6184633.147061154' 634567.9135198268 6184634.14892356' 634571.1678441261 6184635.157373106' 634574.421025444 6184636.172438785' 634577.6711923747 6184637.194062597' 634580.9192805979 6184638.222273537' 634584.1662257991 6184639.257100599' 634587.410208043 6184640.296825108' 634590.6529957657 6184641.3448264' 634593.8928205046 6184642.397725132' 634597.131502168 6184643.457239971' 634600.3671178726 6184644.524973575' 634603.6016934284 6184645.596001944' 634605.6958877691 6184646.2958191885' 634606.946276627 6184646.713661825' 634608.6177147877 6184647.275847967' 634610.2887808911 6184647.8379089665' 634613.6292576884 6184648.967082693' 634616.9666683461 6184650.104475331' 634620.3029357173 6184651.248484221' 634623.6361369188 6184652.4007120095' 634626.9663749042 6184653.557837355' 634630.2954695637 6184654.721578941' 634633.6214980055 6184655.893539405' 634636.9454988878 6184657.070426424' 634640.2664335228 6184658.255532312' 634643.5852890809 6184659.44722541' 634646.9020655481 6184660.6455057105' 634650.2167629072 6184661.850373212' 634653.5284454564 6184663.061798892' 634656.8370616816 6184664.2814434115' 634660.1436502574 6184665.506014449' 634663.4481081718 6184666.7388333315' 634666.7496027217 6184667.976549702' 634670.0489665787 6184669.222513908' 634673.3453155413 6184670.475036258' 634676.6396367943 6184671.732485097' 634679.9308916207 6184672.9981527375' 634683.2200672035 6184674.270407524' 634686.5062278372 6184675.54922043' 634689.789322 6184676.8362521175' 634693.0703883899 6184678.128210268' 634696.3493754807 6184679.426755545' 634699.6253475712 6184680.731858918' 634702.8982531315 6184682.04518105' 634706.1681951834 6184683.363400595' 635074.6769928858 6184832.427381967))") " is 5336.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test32,The length of the statement  "              "MULTILINESTRING ((80 285' 85.5939933259177 234.65406006674084 )' (85.5939933259177 234.65406006674084' 98 123' 294 92' 344.3694502052736 126.0884157954882 )' (344.3694502052736 126.0884157954882' 393 159 )' (51 235' 85.5939933259177 234.65406006674084 )' (85.5939933259177 234.65406006674084' 251 233' 344.3694502052736 126.0884157954882 )' (344.3694502052736 126.0884157954882' 382 83 ))") " is 391.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test35,The length of the statement  "              "GEOMETRYCOLLECTION (POINT (100 100)' POLYGON ((400 260' 280 380' 240 220' 120 300' 120 100' 260 40' 200 160' 400 260))' LINESTRING (260 400' 220 280' 120 400' 20 280' 160 160' 60 40' 160 20' 360 140))") " is 203.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test36,The length of the statement  "              "GEOMETRYCOLLECTION (POINT (100 100)' POLYGON ((400 260' 120 300' 120 100' 400 260))' LINESTRING (20 280' 160 160' 60 40))") " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test39,The length of the statement  "              "MULTIPOLYGON (((0 400' 440 400' 440 0' 0 0' 0 400)'(380 360' 160 120' 260 80' 380 360))' ((360 320' 200 120' 240 100' 360 320)))") " is 131.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision1,The length of the statement  "              "LINESTRING (331771 5530174' 331776 5530175' 331782 5530177' 331787 5530177' 331791 5530178' 331796 5530178' 331800 5530178' 331805 5530177' 331811 5530176' 331817 5530175' 331823 5530173' 331828 5530171' 331832 5530169' 331835 5530167' 331839 5530163' 331843 5530160' 331846 5530157' 331849 5530154' 331853 5530150' 331855 5530145' 331857 5530141)") " is 350.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision2,The length of the statement  "              "LINESTRING (317091 5557033' 317079 5557042' 317067 5557053' 317055 5557065' 317045 5557078' 317037 5557091' 317029 5557098' 317016 5557108' 317002 5557118' 316990 5557129' 316986 5557131' 316978 5557133' 316968 5557133' 316965 5557131' 316954 5557120' 316952 5557115' 316951 5557108' 316949 5557092' 316948 5557076' 316946 5557063' 316944 5557057' 316937 5557042' 316924 5557029' 316911 5557019' 316896 5557009' 316881 5557001' 316865 5556997' 316849 5556992' 316834 5556988' 316817 5556985' 316801 5556983' 316766 5556983' 316751 5556982' 316733 5556980' 316716 5556976' 316702 5556968' 316699 5556964' 316691 5556951' 316680 5556934' 316670 5556922' 316660 5556911' 316642 5556885' 316637 5556881)") " is 702.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision3,The length of the statement  "              "LINESTRING (300181 5547255' 300183 5547252' 300203 5547253' 300209 5547261' 300237 5547277' 300262 5547286' 300280 5547292' 300288 5547297' 300293 5547303' 300297 5547311' 300299 5547319' 300299 5547334' 300306 5547349' 300320 5547367)") " is 238.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision4,The length of the statement  "              "LINESTRING (301546 5537924' 301547 5537922' 301551 5537919' 301555 5537919' 301559 5537918' 301565 5537918' 301569 5537917' 301573 5537915' 301580 5537912' 301583 5537909' 301587 5537906' 301594 5537900' 301598 5537897' 301601 5537893' 301605 5537889' 301608 5537885' 301609 5537880' 301612 5537876' 301614 5537873' 301616 5537869' 301620 5537865' 301624 5537860' 301632 5537852' 301640 5537842' 301643 5537836' 301644 5537829' 301644 5537822' 301646 5537815' 301647 5537808' 301650 5537802' 301650 5537796' 301651 5537791' 301653 5537786' 301654 5537780' 301656 5537773' 301658 5537767' 301662 5537761)") " is 606.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision5,The length of the statement  "              "LINESTRING (334797 5560136' 334781 5560129' 334777 5560128' 334762 5560122' 334760 5560121' 334752 5560116' 334745 5560109' 334742 5560103' 334741 5560098' 334736 5560087' 334731 5560082' 334726 5560081' 334708 5560072' 334691 5560063' 334674 5560052' 334660 5560048' 334655 5560048' 334633 5560049' 334621 5560046' 334616 5560043' 334596 5560034' 334586 5560025' 334573 5560009' 334562 5559982' 334549 5559943' 334543 5559923' 334538 5559905' 334535 5559887' 334530 5559869' 334536 5559853)") " is 494.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision6,The length of the statement  "              "LINESTRING (316640 5563099' 316639 5563114' 316642 5563132' 316644 5563137' 316650 5563144' 316653 5563147' 316663 5563159' 316665 5563164' 316667 5563172' 316667 5563193' 316668 5563209' 316672 5563214' 316678 5563228' 316679 5563230' 316679 5563236' 316678 5563252' 316676 5563256' 316671 5563270' 316669 5563289' 316667 5563304' 316666 5563308' 316656 5563323' 316646 5563336' 316639 5563347)") " is 398.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision7,The length of the statement  "              "LINESTRING (301178 5534835' 301189 5534837' 301218 5534837' 301229 5534836' 301237 5534836' 301245 5534838' 301268 5534838' 301273 5534837' 301279 5534838' 301286 5534838' 301289 5534839' 301296 5534842' 301302 5534844' 301306 5534846' 301309 5534850' 301313 5534853' 301316 5534856' 301319 5534868' 301320 5534873' 301323 5534877' 301326 5534882' 301334 5534896' 301340 5534902' 301344 5534908' 301348 5534913' 301352 5534919' 301357 5534925' 301363 5534932' 301369 5534937' 301375 5534941' 301382 5534949' 301386 5534955' 301397 5534964' 301402 5534967' 301407 5534972' 301411 5534975' 301414 5534980' 301418 5534986' 301419 5534989' 301422 5534994' 301426 5535000' 301438 5535012' 301444 5535017' 301456 5535030' 301457 5535033)") " is 734.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision8,The length of the statement  "              "LINESTRING (303722 5533544' 303713 5533542' 303706 5533539' 303697 5533537' 303694 5533534' 303677 5533527' 303673 5533525' 303670 5533524' 303669 5533523' 303664 5533519' 303654 5533513' 303647 5533507' 303644 5533506' 303634 5533504' 303633 5533504' 303627 5533502)") " is 270.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision9,The length of the statement  "              "LINESTRING (309969 5563538' 309955 5563542' 309941 5563548' 309913 5563562' 309896 5563569' 309883 5563576' 309868 5563586' 309855 5563594' 309841 5563603' 309830 5563614' 309818 5563624' 309805 5563635' 309791 5563645' 309778 5563654' 309766 5563663' 309752 5563672' 309722 5563692' 309709 5563699' 309681 5563713' 309667 5563721' 309651 5563728' 309631 5563734' 309615 5563739' 309602 5563747' 309589 5563756' 309578 5563766' 309566 5563775' 309554 5563785' 309542 5563796' 309538 5563801' 309535 5563810' 309532 5563828' 309533 5563833' 309540 5563855' 309546 5563868' 309552 5563884' 309556 5563900' 309559 5563916' 309561 5563933' 309561 5563970' 309559 5563988' 309554 5564003' 309550 5564018' 309546 5564032' 309542 5564047' 309538 5564061' 309531 5564074' 309528 5564077' 309518 5564090' 309507 5564101' 309493 5564110' 309492 5564111' 309480 5564119' 309474 5564121' 309458 5564123' 309443 5564125' 309426 5564125' 309408 5564123' 309393 5564123' 309377 5564126' 309373 5564129' 309364 5564139' 309360 5564147' 309359 5564151' 309359 5564155' 309362 5564159)") " is 1070.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision10,The length of the statement  "              "LINESTRING (299331 5536963' 299335 5536956' 299335 5536953' 299336 5536949' 299338 5536942' 299345 5536933' 299349 5536927' 299352 5536924' 299358 5536922' 299364 5536919' 299369 5536916' 299375 5536912' 299380 5536908' 299387 5536905' 299391 5536904' 299395 5536902' 299399 5536899' 299402 5536896' 299405 5536892' 299415 5536886' 299425 5536882' 299435 5536880' 299449 5536874' 299455 5536869' 299461 5536865' 299468 5536862' 299474 5536859' 299480 5536855' 299491 5536846' 299497 5536842' 299502 5536838' 299508 5536835' 299513 5536834' 299523 5536830' 299527 5536826' 299532 5536824' 299542 5536821' 299548 5536818' 299552 5536814' 299556 5536812' 299566 5536808' 299574 5536804' 299588 5536798' 299594 5536796' 299602 5536792' 299611 5536789' 299625 5536784' 299632 5536782' 299648 5536780' 299657 5536785' 299672 5536798' 299678 5536801' 299688 5536801' 299696 5536802' 299711 5536807' 299729 5536807' 299739 5536808' 299748 5536807' 299766 5536810' 299777 5536813' 299801 5536816' 299825 5536811' 299850 5536810' 299867 5536809' 299875 5536811' 299887 5536811' 299895 5536815' 299913 5536822)") " is 1102.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision11,The length of the statement  "              "LINESTRING (325089 5534737' 325089 5534733' 325093 5534723' 325099 5534718' 325118 5534712' 325129 5534709' 325147 5534709' 325164 5534732' 325164 5534740' 325162 5534746' 325159 5534749' 325144 5534760' 325143 5534763' 325145 5534782' 325162 5534800' 325184 5534812' 325187 5534815' 325190 5534831' 325196 5534852' 325205 5534867' 325214 5534876' 325219 5534878' 325239 5534880' 325251 5534890' 325259 5534892' 325282 5534887' 325294 5534883' 325314 5534864)") " is 462.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision12,The length of the statement  "              "LINESTRING (307468 5557827' 307467 5557842' 307466 5557854' 307463 5557874' 307459 5557889' 307454 5557902' 307447 5557922' 307440 5557944' 307428 5557965' 307417 5557986' 307411 5557996' 307404 5558020' 307398 5558031' 307390 5558056' 307387 5558066' 307384 5558084' 307383 5558093' 307385 5558102' 307389 5558110' 307394 5558116' 307404 5558121' 307421 5558122' 307443 5558121' 307464 5558127' 307486 5558133' 307502 5558142' 307508 5558150)") " is 446.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision13,The length of the statement  "              "LINESTRING (301395 5535820' 301412 5535803' 301416 5535798' 301420 5535786' 301423 5535782' 301427 5535778' 301432 5535771' 301437 5535768' 301444 5535763' 301447 5535760' 301452 5535757' 301459 5535754' 301462 5535753' 301468 5535750' 301473 5535747' 301481 5535742' 301487 5535739' 301494 5535734' 301499 5535730' 301508 5535725' 301514 5535721' 301521 5535716' 301527 5535714' 301533 5535711' 301538 5535707' 301542 5535703' 301554 5535693' 301559 5535688' 301563 5535681)") " is 478.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision14,The length of the statement  "              "LINESTRING (331384 5535032' 331397 5535031' 331415 5535025' 331426 5535022' 331436 5535016' 331451 5534999' 331460 5534994' 331468 5534993' 331474 5534996' 331479 5535001' 331482 5535015' 331486 5535019' 331493 5535018' 331504 5535011' 331508 5535011' 331519 5535022' 331526 5535023' 331542 5535019' 331547 5535016' 331549 5534994' 331558 5534975' 331562 5534968' 331565 5534966' 331571 5534967' 331575 5534970' 331576 5534978' 331575 5534987' 331568 5535005' 331564 5535022' 331565 5535030' 331570 5535038' 331578 5535044' 331582 5535046' 331592 5535046' 331602 5535043' 331613 5535038' 331631 5535027' 331640 5535021' 331645 5535020' 331654 5535020' 331662 5535022' 331669 5535028' 331676 5535040' 331674 5535065' 331668 5535089' 331659 5535108' 331655 5535118' 331655 5535123' 331662 5535143' 331662 5535147' 331651 5535167' 331646 5535181' 331642 5535198' 331640 5535210' 331641 5535234' 331642 5535245' 331645 5535255' 331648 5535276' 331651 5535287' 331663 5535309' 331665 5535316' 331666 5535324' 331671 5535337' 331677 5535344)") " is 1038.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestMultiPolygon,The length of the statement  "                "MULTIPOLYGON ( ((120 120 -10' 120 120 100' 180 120 100' 180 120 -10' 120 120 -10))' ((120 200 -10' 120 200 190' 180 200 190' 180 200 -10' 120 200 -10)) )"' " is 156.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestMultiPolygon,The length of the statement  "                "MULTIPOLYGON ( ((100 200 200' 200 200 200' 200 100 200' 100 100 200' 100 200 200))' ((100 200 210' 200 200 210' 200 100 210' 100 100 210' 100 200 210)) )"' " is 156.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestMultiPolygon,The length of the statement  "                "MULTIPOLYGON ( ((120 120 -10' 120 120 100' 180 120 100' 180 120 -10' 120 120 -10))' ((120 200 -10' 120 200 190' 180 200 190' 180 200 -10' 120 200 -10)) )"' " is 156.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestMultiPolygon,The length of the statement  "                "MULTIPOLYGON ( ((100 200 200' 200 200 200' 200 100 200' 100 100 200' 100 200 200))' ((100 200 210' 200 200 210' 200 100 210' 100 100 210' 100 200 210)) )"' " is 156.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestEverything,The length of the statement  "            var g1 = _reader.Read("POLYGON ((40 320' 200 380' 320 80' 40 40' 40 320)'  (180 280' 80 280' 100 100' 220 140' 180 280))"); " is 123.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.LineMerge,LineMergerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\LineMerge\LineMergerTest.cs,Compare,The length of the statement  "                Assert.IsTrue(Contains(actualGeometries' expectedGeometry' compareDirections)' "Not found: " + expectedGeometry + "' " + actualGeometries); " is 139.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.LineMerge,LineSequencerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\LineMerge\LineSequencerTest.cs,TestMultipleGraphsWithMultipeRings,The length of the statement  "                "MULTILINESTRING ((0 0' 0 10)' (0 10' 40 40' 40 20' 0 10)' (0 10' 10 10' 10 20' 0 10)' (0 10' 0 20)' (0 20' 0 30)' (0 40' 0 50)' (0 50' 0 60))"; " is 144.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Union,UnaryUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\UnaryUnionTest.cs,TestSnapIfNeeded,The length of the statement  "            DoTest(new[] { "LINESTRING (-79.52286 8.89081' -79.57426 8.9547' -79.57421 8.95472' -79.57424 8.9547' -79.57429 8.9547' -79.57425 8.95469' -79.57429 8.95472' -79.57431 8.95472' -79.57424 8.95473' -79.57422 8.95478' -79.57424 8.95474' -79.57421 8.9547' -79.57426 8.95473' -79.57434 8.95472' -79.5742 8.95469' -79.57428 8.95474' -79.57433 8.95474' -79.57426 8.95471' -79.57419 8.95469' -79.57433 8.95479' -79.57426 8.95466' -79.57425 8.95476' -79.5743 8.95469' -79.57424 8.95469' -79.5742 8.95476' -79.57424 8.95465' -79.57423 8.95474' -79.57423 8.95471)" }' " is 556.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Union,UnaryUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\UnaryUnionTest.cs,TestSnapIfNeeded,The length of the statement  "                           "MULTILINESTRING ((-79.52286 8.89081' -79.574233703956338 8.9546673141200621)' (-79.574233703956338 8.9546673141200621' -79.5742375456324 8.9546720893084473)' (-79.5742375456324 8.9546720893084473' -79.574251954922516 8.95469)' (-79.574251954922516 8.95469' -79.5742524471003 8.9546906117750744)' (-79.5742524471003 8.9546906117750744' -79.574254928966042 8.9546936967245223)' (-79.574254928966042 8.9546936967245223' -79.574256442229483 8.9546955777051043)' (-79.574256442229483 8.9546955777051043' -79.57426 8.9547)' (-79.57426 8.9547' -79.574255833333339 8.954701666666665)' (-79.574255833333339 8.954701666666665' -79.574255348837212 8.9547018604651143)' (-79.574255348837212 8.9547018604651143' -79.574245416666656 8.9547058333333336)' (-79.574245416666656 8.9547058333333336' -79.574233255813951 8.9547106976744164)' (-79.574233255813951 8.9547106976744164' -79.5742331707317 8.9547107317073156)' (-79.5742331707317 8.9547107317073156' -79.57423 8.9547119999999989)' (-79.57423 8.9547119999999989' -79.57423 8.954712)' (-79.57423 8.954712' -79.574226666666675 8.9547133333333289)' (-79.574226666666675 8.9547133333333289' -79.5742241025641 8.954714358974357)' (-79.5742241025641 8.954714358974357' -79.574221538461529 8.9547153846153833)' (-79.574221538461529 8.9547153846153833' -79.574215319148948 8.95471787234042)' (-79.574215319148948 8.95471787234042' -79.57421 8.95472' -79.574216 8.9547159999999923)' (-79.574216 8.9547159999999923' -79.57422 8.9547133333333342)' (-79.57422 8.9547133333333342' -79.574221379310345 8.9547124137931018)' (-79.574221379310345 8.9547124137931018' -79.574225789473687 8.954709473684213)' (-79.574225789473687 8.954709473684213' -79.574228387096781 8.9547077419354828)' (-79.574228387096781 8.9547077419354828' -79.57423076923078 8.9547061538461517)' (-79.57423076923078 8.9547061538461517' -79.574234 8.9547040000000013)' (-79.574234 8.9547040000000013' -79.5742355 8.954703)' (-79.5742355 8.954703' -79.57424 8.9547' -79.574246666666681 8.9547)' (-79.574246666666681 8.9547' -79.574256 8.9547)' (-79.574256 8.9547' -79.57426 8.9547)' (-79.57426 8.9547' -79.574263333333334 8.9547)' (-79.574263333333334 8.9547' -79.574281538461534 8.9547)' (-79.574281538461534 8.9547' -79.57429 8.9547' -79.574280222222214 8.954697555555553)' (-79.574280222222214 8.954697555555553' -79.5742568292683 8.9546917073170711)' (-79.5742568292683 8.9546917073170711' -79.5742524471003 8.9546906117750744)' (-79.5742524471003 8.9546906117750744' -79.57425 8.95469)' (-79.57425 8.95469' -79.574254928966042 8.9546936967245223)' (-79.574254928966042 8.9546936967245223' -79.574256511627908 8.9546948837209257)' (-79.574256511627908 8.9546948837209257' -79.574263333333334 8.9547)' (-79.574263333333334 8.9547' -79.574270000000013 8.954705)' (-79.574270000000013 8.954705' -79.574282558139529 8.954714418604647)' (-79.574282558139529 8.954714418604647' -79.57429 8.95472' -79.5742923076923 8.95472)' (-79.5742923076923 8.95472' -79.57431 8.95472' -79.574293571428569 8.9547223469387749)' (-79.574293571428569 8.9547223469387749' -79.57429 8.9547228571428565)' (-79.57429 8.9547228571428565' -79.574275 8.954725)' (-79.574275 8.954725' -79.574259534883723 8.9547272093023249)' (-79.574259534883723 8.9547272093023249' -79.57425615384615 8.9547276923076922)' (-79.57425615384615 8.9547276923076922' -79.5742531884058 8.9547281159420287)' (-79.5742531884058 8.9547281159420287' -79.574245 8.9547292857142846)' (-79.574245 8.9547292857142846' -79.57424 8.95473' -79.574237391304351 8.95473652173913)' (-79.574237391304351 8.95473652173913' -79.57422 8.95478' -79.57424 8.95474' -79.574237391304351 8.95473652173913)' (-79.574237391304351 8.95473652173913' -79.574231290322587 8.9547283870967735)' (-79.574231290322587 8.9547283870967735' -79.57423 8.9547266666666658)' (-79.57423 8.9547266666666658' -79.574223783783779 8.9547183783783826)' (-79.574223783783779 8.9547183783783826' -79.574221538461529 8.9547153846153833)' (-79.574221538461529 8.9547153846153833' -79.57422 8.9547133333333342)' (-79.57422 8.9547133333333342' -79.57421795918367 8.9547106122449058)' (-79.57421795918367 8.9547106122449058' -79.5742169230769 8.95470923076922)' (-79.5742169230769 8.95470923076922' -79.57421 8.9547' -79.574219701492538 8.9547058208955281)' (-79.574219701492538 8.9547058208955281' -79.574225789473687 8.954709473684213)' (-79.574225789473687 8.954709473684213' -79.574228085106384 8.9547108510638349)' (-79.574228085106384 8.9547108510638349' -79.57423 8.954712)' (-79.57423 8.954712' -79.57423 8.9547120000000042)' (-79.57423 8.9547120000000042' -79.574232916666674 8.9547137500000034)' (-79.574232916666674 8.9547137500000034' -79.57425339622641 8.9547260377358526)' (-79.57425339622641 8.9547260377358526' -79.57425615384615 8.9547276923076922)' (-79.57425615384615 8.9547276923076922' -79.57426 8.95473' -79.574263333333334 8.9547295833333322)' (-79.574263333333334 8.9547295833333322' -79.574272549019611 8.9547284313725477)' (-79.574272549019611 8.9547284313725477' -79.574295315315311 8.9547255855855852)' (-79.574295315315311 8.9547255855855852' -79.574296129032263 8.954725483870968)' (-79.574296129032263 8.954725483870968' -79.57434 8.95472' -79.574286725663711 8.9547085840707954)' (-79.574286725663711 8.9547085840707954' -79.574286086956519 8.9547084472049665)' (-79.574286086956519 8.9547084472049665' -79.574270000000013 8.954705)' (-79.574270000000013 8.954705' -79.5742558041958 8.9547019580419569)' (-79.5742558041958 8.9547019580419569' -79.574255348837212 8.9547018604651143)' (-79.574255348837212 8.9547018604651143' -79.574246666666681 8.9547)' (-79.574246666666681 8.9547' -79.574235636363639 8.954697636363635)' (-79.574235636363639 8.954697636363635' -79.574234728682171 8.9546974418604641)' (-79.574234728682171 8.9546974418604641' -79.574223614457836 8.9546950602409634)' (-79.574223614457836 8.9546950602409634' -79.5742 8.95469' -79.574208421052646 8.9546952631578964)' (-79.574208421052646 8.9546952631578964' -79.574220740740742 8.954702962962962)' (-79.574220740740742 8.954702962962962' -79.574228387096781 8.9547077419354828)' (-79.574228387096781 8.9547077419354828' -79.574229473684213 8.9547084210526311)' (-79.574229473684213 8.9547084210526311' -79.5742331707317 8.9547107317073156)' (-79.5742331707317 8.9547107317073156' -79.574233246753252 8.9547107792207772)' (-79.574233246753252 8.9547107792207772' -79.574253647058825 8.9547235294117637)' (-79.574253647058825 8.9547235294117637' -79.574259534883723 8.9547272093023249)' (-79.574259534883723 8.9547272093023249' -79.574263333333334 8.9547295833333322)' (-79.574263333333334 8.9547295833333322' -79.574269135802467 8.954733209876542)' (-79.574269135802467 8.954733209876542' -79.57428 8.95474' -79.574303076923073 8.95474)' (-79.574303076923073 8.95474' -79.57433 8.95474' -79.574296129032263 8.954725483870968)' (-79.574296129032263 8.954725483870968' -79.574295 8.954725)' (-79.574295 8.954725' -79.57429 8.9547228571428565)' (-79.57429 8.9547228571428565' -79.5742796875 8.9547184375)' (-79.5742796875 8.9547184375' -79.57426 8.95471' -79.574255138888887 8.954708611111112)' (-79.574255138888887 8.954708611111112' -79.574245416666656 8.9547058333333336)' (-79.574245416666656 8.9547058333333336' -79.5742355 8.954703)' (-79.5742355 8.954703' -79.574234153846149 8.9547026153846172)' (-79.574234153846149 8.9547026153846172' -79.574232982456138 8.9547022807017562)' (-79.574232982456138 8.9547022807017562' -79.574222117647068 8.954699176470589)' (-79.574222117647068 8.954699176470589' -79.574208421052646 8.9546952631578964)' (-79.574208421052646 8.9546952631578964' -79.57419 8.95469' -79.5742169230769 8.95470923076922)' (-79.5742169230769 8.95470923076922' -79.5742181443299 8.9547101030927845)' (-79.5742181443299 8.9547101030927845' -79.574221379310345 8.9547124137931018)' (-79.574221379310345 8.9547124137931018' -79.5742241025641 8.954714358974357)' (-79.5742241025641 8.954714358974357' -79.574225507246382 8.95471536231884)' (-79.574225507246382 8.95471536231884' -79.57423 8.95471857142857)' (-79.57423 8.95471857142857' -79.574232205882353 8.954720147058822)' (-79.574232205882353 8.954720147058822' -79.574245 8.9547292857142846)' (-79.574245 8.9547292857142846' -79.574252533333336 8.954734666666667)' (-79.574252533333336 8.954734666666667' -79.574262837837836 8.9547420270270273)' (-79.574262837837836 8.9547420270270273' -79.57433 8.95479' -79.574303076923073 8.95474)' (-79.574303076923073 8.95474' -79.574295315315311 8.9547255855855852)' (-79.574295315315311 8.9547255855855852' -79.574295 8.954725)' (-79.574295 8.954725' -79.574293571428569 8.9547223469387749)' (-79.574293571428569 8.9547223469387749' -79.5742923076923 8.95472)' (-79.5742923076923 8.95472' -79.574286403508765 8.9547090350877188)' (-79.574286403508765 8.9547090350877188' -79.574286086956519 8.9547084472049665)' (-79.574286086956519 8.9547084472049665' -79.574281538461534 8.9547)' (-79.574281538461534 8.9547' -79.574280222222214 8.954697555555553)' (-79.574280222222214 8.954697555555553' -79.574276153846156 8.95469)' (-79.574276153846156 8.95469' -79.57426 8.95466' -79.574257 8.95469)' (-79.574257 8.95469' -79.5742568292683 8.9546917073170711)' (-79.5742568292683 8.9546917073170711' -79.574256511627908 8.9546948837209257)' (-79.574256511627908 8.9546948837209257' -79.574256442229483 8.9546955777051043)' (-79.574256442229483 8.9546955777051043' -79.574256 8.9547)' (-79.574256 8.9547' -79.574255833333339 8.954701666666665)' (-79.574255833333339 8.954701666666665' -79.5742558041958 8.9547019580419569)' (-79.5742558041958 8.9547019580419569' -79.574255138888887 8.954708611111112)' (-79.574255138888887 8.954708611111112' -79.574253647058825 8.9547235294117637)' (-79.574253647058825 8.9547235294117637' -79.57425339622641 8.9547260377358526)' (-79.57425339622641 8.9547260377358526' -79.5742531884058 8.9547281159420287)' (-79.5742531884058 8.9547281159420287' -79.574252533333336 8.954734666666667)' (-79.574252533333336 8.954734666666667' -79.57425 8.95476' -79.574262837837836 8.9547420270270273)' (-79.574262837837836 8.9547420270270273' -79.574269135802467 8.954733209876542)' (-79.574269135802467 8.954733209876542' -79.574272549019611 8.9547284313725477)' (-79.574272549019611 8.9547284313725477' -79.574275 8.954725)' (-79.574275 8.954725' -79.5742796875 8.9547184375)' (-79.5742796875 8.9547184375' -79.574282558139529 8.954714418604647)' (-79.574282558139529 8.954714418604647' -79.574286403508765 8.9547090350877188)' (-79.574286403508765 8.9547090350877188' -79.574286725663711 8.9547085840707954)' (-79.574286725663711 8.9547085840707954' -79.5743 8.95469' -79.574276153846156 8.95469)' (-79.574276153846156 8.95469' -79.574257 8.95469)' (-79.574257 8.95469' -79.574251954922516 8.95469)' (-79.574251954922516 8.95469' -79.57425 8.95469)' (-79.57425 8.95469' -79.57424 8.95469' -79.574235636363639 8.954697636363635)' (-79.574235636363639 8.954697636363635' -79.574234482758627 8.9546996551724174)' (-79.574234482758627 8.9546996551724174' -79.574232982456138 8.9547022807017562)' (-79.574232982456138 8.9547022807017562' -79.57423076923078 8.9547061538461517)' (-79.57423076923078 8.9547061538461517' -79.574229473684213 8.9547084210526311)' (-79.574229473684213 8.9547084210526311' -79.574228085106384 8.9547108510638349)' (-79.574228085106384 8.9547108510638349' -79.574226666666675 8.9547133333333289)' (-79.574226666666675 8.9547133333333289' -79.574225507246382 8.95471536231884)' (-79.574225507246382 8.95471536231884' -79.574223783783779 8.9547183783783826)' (-79.574223783783779 8.9547183783783826' -79.5742 8.95476' -79.574215319148948 8.95471787234042)' (-79.574215319148948 8.95471787234042' -79.574216 8.9547159999999923)' (-79.574216 8.9547159999999923' -79.57421795918367 8.9547106122449058)' (-79.57421795918367 8.9547106122449058' -79.5742181443299 8.9547101030927845)' (-79.5742181443299 8.9547101030927845' -79.574219701492538 8.9547058208955281)' (-79.574219701492538 8.9547058208955281' -79.574220740740742 8.954702962962962)' (-79.574220740740742 8.954702962962962' -79.574222117647068 8.954699176470589)' (-79.574222117647068 8.954699176470589' -79.574223614457836 8.9546950602409634)' (-79.574223614457836 8.9546950602409634' -79.574233703956338 8.9546673141200621)' (-79.574233703956338 8.9546673141200621' -79.57424 8.95465' -79.5742375456324 8.9546720893084473)' (-79.5742375456324 8.9546720893084473' -79.574234728682171 8.9546974418604641)' (-79.574234728682171 8.9546974418604641' -79.574234482758627 8.9546996551724174)' (-79.574234482758627 8.9546996551724174' -79.574234153846149 8.9547026153846172)' (-79.574234153846149 8.9547026153846172' -79.574234 8.9547040000000013)' (-79.574234 8.9547040000000013' -79.574233255813951 8.9547106976744164)' (-79.574233255813951 8.9547106976744164' -79.574233246753252 8.9547107792207772)' (-79.574233246753252 8.9547107792207772' -79.574232916666674 8.9547137500000034)' (-79.574232916666674 8.9547137500000034' -79.574232205882353 8.954720147058822)' (-79.574232205882353 8.954720147058822' -79.574231290322587 8.9547283870967735)' (-79.574231290322587 8.9547283870967735' -79.57423 8.95474' -79.57423 8.9547266666666658)' (-79.57423 8.9547266666666658' -79.57423 8.95471857142857)' (-79.57423 8.95471857142857' -79.57423 8.9547120000000042)' (-79.57423 8.9547120000000042' -79.57423 8.9547119999999989)' (-79.57423 8.9547119999999989' -79.57423 8.95471))"); " is 13362.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Union,UnaryUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\UnaryUnionTest.cs,TestAll,The length of the statement  "            DoTest(new[] { "GEOMETRYCOLLECTION (POLYGON ((0 0' 0 90' 90 90' 90 0' 0 0))'   POLYGON ((120 0' 120 90' 210 90' 210 0' 120 0))'  LINESTRING (40 50' 40 140)'  LINESTRING (160 50' 160 140)'  POINT (60 50)'  POINT (60 140)'  POINT (40 140))" }' " is 241.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Union,UnaryUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\UnaryUnionTest.cs,TestAll,The length of the statement  "                "GEOMETRYCOLLECTION (POINT (60 140)'   LINESTRING (40 90' 40 140)' LINESTRING (160 90' 160 140)' POLYGON ((0 0' 0 90' 40 90' 90 90' 90 0' 0 0))' POLYGON ((120 0' 120 90' 160 90' 210 90' 210 0' 120 0)))"); " is 204.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidClosedRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidClosedRingTest.cs,TestBadGeometryCollection,The length of the statement  "            var gc = (GeometryCollection) FromWKT("GEOMETRYCOLLECTION ( POLYGON ((0 0' 0 10' 10 10' 10 0' 0 0)' (1 1' 2 1' 2 2' 1 2' 1 1) ))' POINT(0 0) )"); " is 145.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidSelfTouchingRingFormingHoleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidSelfTouchingRingFormingHoleTest.cs,TestShellAndHoleSelfTouch,The length of the statement  "            string wkt = "POLYGON ((0 0' 0 340' 320 340' 320 0' 120 0' 180 100' 60 100' 120 0' 0 0)'   (80 300' 80 180' 200 180' 200 240' 280 200' 280 280' 200 240' 200 300' 80 300))"; " is 172.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidSelfTouchingRingFormingHoleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidSelfTouchingRingFormingHoleTest.cs,TestShellHoleAndHoleHoleTouch,The length of the statement  "            string wkt = "POLYGON ((0 0' 0 340' 320 340' 320 0' 120 0' 0 0)'   (120 0' 180 100' 60 100' 120 0)'   (80 300' 80 180' 200 180' 200 240' 200 300' 80 300)'  (200 240' 280 200' 280 280' 200 240))"; " is 195.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidSelfTouchingRingFormingHoleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidSelfTouchingRingFormingHoleTest.cs,TestShellSelfTouchHoleOverlappingHole,The length of the statement  "            string wkt = "POLYGON ((0 0' 220 0' 220 200' 120 200' 140 100' 80 100' 120 200' 0 200' 0 0)'   (200 80' 20 80' 120 200' 200 80))"; " is 130.
Long Statement,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidSelfTouchingRingFormingHoleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidSelfTouchingRingFormingHoleTest.cs,TestShellCrossAndSTR,The length of the statement  "            string wkt = "POLYGON ((20 20' 120 20' 120 220' 180 220' 140 160' 200 160' 180 220' 240 220' 240 120' 20 120'  20 20))"; " is 120.
Long Statement,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,SetUp,The length of the statement  "            Console.WriteLine($"SineStar: origin: ({OriginX}' {OriginY})  size: {Size}  # arms: {NumberOfArms}  arm ratio: {ArmRatio}"); " is 124.
Long Statement,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The length of the statement  "                Console.WriteLine(string.Format("{0'10}'\tnow err: {1'23}'\tacc err: {2'23}'\told err: {3'23}"' nrVertices 'eps1' eps2 'eps3)); " is 127.
Long Statement,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,PolygonBufferStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\PolygonBufferStressTest.cs,GetSampleGeometry,The length of the statement  "                "POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400)' (260 320' 240 260' 220 220' 160 180' 220 160' 200 100' 260 160' 300 140' 320 180' 260 200' 260 320))"; " is 260.
Long Statement,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,PolygonBufferStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\PolygonBufferStressTest.cs,GetSampleGeometry,The length of the statement  "            // wkt ="POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400))"; " is 167.
Long Statement,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,PolygonBufferStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\PolygonBufferStressTest.cs,GetSampleGeometry,The length of the statement  "            // wkt ="POLYGON ((2600 4000' 2200 3000' 800 3000' 1800 2200' 400 2000' 1800 1600' 600 200' 2000 800' 2800 200' 2600 1400' 4400 200' 3400 1800' 5200 1600' 2800 2200' 4600 3400' 3000 3000' 2600 4000))"; " is 201.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestMultiPolygonWithEmpty,The length of the statement  "                    "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"' " is 136.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiPolygonWithSmallComponents,The length of the statement  "            const string geomStr = "MULTIPOLYGON(((13.73095 51.024734'13.7309323 51.0247668'13.7306959 51.0247959'13.7292724 51.0249742'13.7280216 51.0251252'13.7266598 51.0252998'13.7259617 51.0254072'13.7258854 51.0254201'13.7253253 51.0255144'13.725276 51.025492'13.724538 51.025631'13.7230288 51.0259021'13.7223529 51.0260273'13.7223299 51.0260863'13.7222292 51.026391'13.7220002 51.0273366'13.7217875 51.0282094'13.721746 51.028243'13.7217693 51.0282803'13.7215512 51.0291967'13.721513 51.029222'13.7215203 51.0292567'13.7212713 51.0295967'13.7222258 51.0299532'13.722234 51.03'13.7222931 51.0299823'13.7232514 51.0303187'13.7242514 51.0306715'13.724263 51.030714'13.7243024 51.0306951'13.7249934 51.0309315'13.7265097 51.0314552'13.7266116 51.0313952'13.7267988 51.0313334'13.7269952 51.0313243'13.72703 51.0314107'13.7271637 51.0313254'13.7272524 51.0313839'13.72739 51.031449'13.7276768 51.0313074'13.7283793 51.0309944'13.7296654 51.0304157'13.7297572 51.0303637'13.729845 51.0303139'13.7299557 51.0301763'13.7300964 51.0300176'13.730252 51.0298919'13.7304615 51.0297932'13.730668 51.0297363'13.730743 51.029783'13.7307859 51.0298398'13.7307094 51.0301388'13.730624 51.030263'13.7306955 51.0303267'13.7301182 51.0325594'13.7300528 51.0325663'13.7301114 51.0327342'13.7301645 51.0329094'13.7300035 51.0327693'13.7299669 51.0327351'13.7299445 51.0327211'13.7298934 51.032814'13.7298539 51.0328585'13.7297737 51.0328321'13.7288526 51.0325639'13.7288201 51.0324367'13.7284426 51.0324383'13.7276461 51.032179'13.7274569 51.0321976'13.7272787 51.0322421'13.7271265 51.0322903'13.7267034 51.0322495'13.7265364 51.0322161'13.7259018 51.0324269'13.7258649 51.03242'13.725733 51.0326646'13.7251933 51.0328876'13.7247918 51.0331374'13.7244439 51.0331106'13.7242967 51.0334273'13.7239131 51.0337529'13.7237035 51.0338511'13.7235429 51.033967'13.7233375 51.0339148'13.7232064 51.0339347'13.7231786 51.0339863'13.7228848 51.0340776'13.7224481 51.0341888'13.7220471 51.0342483'13.7217493 51.0343198'13.721552 51.0343861'13.7214718 51.0344095'13.7215108 51.034534'13.7205032 51.0349932'13.7197657 51.0352983'13.7195764 51.0352291'13.7195934 51.0352797'13.7182451 51.0359157'13.7181108 51.0359003'13.7181657 51.0359571'13.717622 51.0361956'13.7159749 51.0369683'13.7159057 51.0369284'13.7158604 51.0370288'13.7157161 51.0370124'13.7157523 51.0370733'13.7153708 51.0372801'13.7150274 51.0374899'13.7144074 51.0379192'13.7138287 51.0383899'13.7137514 51.0383857'13.7137492 51.0384566'13.7134249 51.0387269'13.7130179 51.0390385'13.7125791 51.0393343'13.7120736 51.039611'13.7115839 51.0398558'13.7112945 51.0399894'13.7114637 51.0402313'13.7123153 51.041449'13.7126333 51.0417033'13.713371 51.0421453'13.7138861 51.0424061'13.7142518 51.0425683'13.7164587 51.0435668'13.7167995 51.0437957'13.7170883 51.0439897'13.7190694 51.0451663'13.7196131 51.0458277'13.7197562 51.0461521'13.7198262 51.0464192'13.7198377 51.0467389'13.7205681 51.0455573'13.7210009 51.0450379'13.7214987 51.0445401'13.7220306 51.0442859'13.7227215 51.0439558'13.7237962 51.0434514'13.723979 51.0435278'13.7241448 51.0435041'13.7241052 51.0436042'13.7247987 51.0438896'13.7250186 51.0439093'13.7250579 51.0440386'13.7257225 51.0443545'13.7259312 51.0443456'13.725955 51.0443813'13.7260235 51.0443873'13.7260682 51.0445303'13.7282191 51.0455848'13.7290532 51.045927'13.7292643 51.0458591'13.7292228 51.0459969'13.729706 51.0461854'13.7303185 51.046393'13.7309107 51.0465601'13.731546 51.0466841'13.7321939 51.0467752'13.7332896 51.0468999'13.7333733 51.0469094'13.7334778 51.0468127'13.7335706 51.0469078'13.733651 51.0470684'13.7338458 51.0471508'13.7346109 51.0472333'13.7346367 51.0471474'13.7346922 51.0470697'13.7346666 51.0470056'13.7346564 51.0468714'13.7345552 51.0467095'13.7336001 51.0465496'13.733427 51.046454'13.7335317 51.0464255'13.7347225 51.0465948'13.7348421 51.0466562'13.7349123 51.0466203'13.736811 51.0468537'13.7382043 51.0469796'13.7383487 51.0469803'13.7394909 51.0469005'13.7400899 51.0467949'13.7405051 51.0464739'13.7408331 51.0462204'13.7412027 51.0463256'13.741053 51.0466451'13.7407291 51.0469007'13.7405095 51.0469726'13.7400888 51.0470337'13.7393051 51.0471049'13.7393014 51.0472015'13.7393088 51.0473019'13.7395556 51.0473056'13.7404944 51.0472245'13.740932 51.0470192'13.7414421 51.0465652'13.7414893 51.0465576'13.7416494 51.0464916'13.7416003 51.0466074'13.7416246 51.04663'13.741668 51.0466443'13.7417272 51.0467159'13.7417503 51.0466716'13.7423587 51.0468732'13.7426958 51.0470246'13.7429143 51.0471813'13.74318 51.04726'13.7430363 51.0472995'13.7433021 51.047588'13.7434678 51.0475916'13.7433805 51.0477019'13.7436362 51.0479981'13.7446308 51.0491622'13.7447961 51.0491827'13.744722 51.0492509'13.7448536 51.0494078'13.745056 51.0494766'13.7450313 51.0496901'13.7453573 51.0500052'13.7465317 51.0512807'13.7466999 51.0513722'13.746638 51.0514149'13.7468683 51.0516781'13.7470071 51.051777'13.7469985 51.0518746'13.7470732 51.0519866'13.7471316 51.0520528'13.7472989 51.0523089'13.7472368 51.0523858'13.7473063 51.0524932'13.7473468 51.0527412'13.7473392 51.0531614'13.7472987 51.0533157'13.7473919 51.0534224'13.7472684 51.0534549'13.7472134 51.0536926'13.7472913 51.0537784'13.7473216 51.053725'13.7474649 51.0537575'13.7474492 51.053833'13.7475625 51.0537839'13.7497379 51.0544435'13.7515333 51.0551019'13.7527693 51.0555438'13.7549766 51.0564993'13.7550622 51.0565364'13.755105 51.0566612'13.7552745 51.0566237'13.7558661 51.0560648'13.7559318 51.0560101'13.755908 51.055897'13.7559252 51.0558292'13.7559566 51.0557055'13.7564494 51.0551377'13.7564124 51.0550457'13.7573213 51.0539813'13.7575007 51.0539933'13.757856 51.0540047'13.7580394 51.054028'13.7580896 51.053984'13.7580949 51.0539463'13.7579963 51.0538534'13.7581294 51.0537147'13.7582346 51.0535957'13.758354 51.053433'13.758363 51.053392'13.7583656 51.0533457'13.758359 51.0532095'13.7583338 51.0530937'13.7582902 51.0529647'13.7580365 51.0522637'13.7577683 51.051463'13.7573182 51.0501993'13.7571595 51.0497164'13.7567579 51.0490095'13.7563383 51.0482979'13.7557757 51.0473383'13.7557095 51.0472522'13.7555771 51.0471199'13.7554448 51.0470471'13.7548596 51.0462612'13.7547097 51.046054'13.7549127 51.0460086'13.7548633 51.0459174'13.7548127 51.0458413'13.7547176 51.0457237'13.7538293 51.0449222'13.7530218 51.0441346'13.7526711 51.0437838'13.752446 51.0435522'13.7522297 51.0433547'13.751704 51.042833'13.7513058 51.0424448'13.7505766 51.0417281'13.7499967 51.0411283'13.7497695 51.0408943'13.7493849 51.0405205'13.7486222 51.0397896'13.7478209 51.0390261'13.7477474 51.0389532'13.7477041 51.0389189'13.7476277 51.0388729'13.7475781 51.0388513'13.7472699 51.038726'13.747131 51.0386506'13.7469329 51.0385052'13.7468562 51.0384284'13.7466683 51.0383483'13.7467998 51.038236'13.7473841 51.0380129'13.747838 51.0378277'13.7481801 51.0376558'13.7489728 51.0370285'13.7491313 51.0368016'13.7492665 51.0363477'13.7493166 51.0359389'13.7492966 51.0358087'13.7493888 51.0356942'13.7492867 51.0357016'13.7492855 51.0354359'13.7492829 51.034867'13.7492723 51.0348311'13.7492455 51.0347398'13.7493034 51.0346612'13.7491987 51.0346142'13.748866 51.034723'13.748791 51.034201'13.748335 51.034159'13.748294 51.034034'13.748205 51.033764'13.7488691 51.0333037'13.748962 51.033245'13.7486777 51.0332252'13.7483008 51.032683'13.7484397 51.0324582'13.7469913 51.0327817'13.7466998 51.0326205'13.7459997 51.0314852'13.7460996 51.0313569'13.745967 51.0314864'13.7449355 51.0317377'13.7447301 51.0316513'13.7446705 51.0318463'13.7420262 51.0323659'13.7419131 51.0322884'13.7418636 51.0322552'13.7416501 51.0321425'13.7415567 51.0317708'13.7414972 51.0314666'13.741484 51.0311492'13.741923 51.031003'13.7418649 51.030884'13.74209 51.0304134'13.7422077 51.0300143'13.7421975 51.0299222'13.742286 51.029835'13.7421463 51.0297533'13.7420951 51.0296254'13.7415933 51.0288452'13.7414906 51.0286855'13.7414437 51.0286127'13.7413482 51.0284642'13.7410545 51.0280777'13.7407158 51.0277229'13.7401513 51.0273842'13.7392803 51.0270293'13.7382744 51.0267844'13.737321 51.0267454'13.7365929 51.0267541'13.736556 51.026812'13.7364715 51.026754'13.7357088 51.0268017'13.7353967 51.02678'13.73534 51.02685'13.7352667 51.0267757'13.734907 51.0267324'13.734824 51.02679'13.7347684 51.0267064'13.7342093 51.0266674'13.73409 51.026725'13.7340359 51.0266283'13.7335072 51.0265633'13.733407 51.02663'13.7333208 51.0265373'13.7317087 51.0263813'13.7317173 51.0263119'13.73167 51.026241'13.7317563 51.0261602'13.7318473 51.0258395'13.7318647 51.0254971'13.73183 51.0253281'13.7317736 51.0252414'13.731663 51.025181'13.7316826 51.0251114'13.7310803 51.0247604'13.73095 51.024734))'((13.7368533 51.0470386'13.7368426 51.0471226'13.7368067 51.0472669'13.7368255 51.0473828'13.7369099 51.0474154'13.7376695 51.0474677'13.7382756 51.0474245'13.738513 51.0474297'13.7386105 51.0474065'13.738705 51.0473737'13.7385856 51.0473757'13.7385618 51.0473751'13.7385263 51.0473743'13.7384706 51.0473744'13.7383071 51.0473734'13.7383822 51.0473564'13.7390821 51.047287'13.7390933 51.047209'13.7390933 51.0471421'13.7368533 51.0470386))'((13.7367293 51.0470057'13.7346615 51.0466892'13.7347551 51.0468411'13.7347754 51.0470359'13.7347106 51.0471899'13.7356421 51.0472919'13.7366963 51.0474074'13.736705 51.047249'13.7367293 51.0470057)))"; " is 9230.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonWithSpike,The length of the statement  "            const string geomStr = "POLYGON ((3312459.605 6646878.353' 3312460.524 6646875.969' 3312459.427 6646878.421' 3312460.014 6646886.391' 3312465.889 6646887.398' 3312470.827 6646884.839' 3312475.4 6646878.027' 3312477.289 6646871.694' 3312472.748 6646869.547' 3312468.253 6646874.01' 3312463.52 6646875.779' 3312459.605 6646878.353))"; " is 332.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonWithTouchingHole,The length of the statement  "                .SetExpectedResult("POLYGON ((80 200' 240 200' 240 60' 80 60' 80 200)' (120 120' 220 120' 180 199' 160 200' 140 199' 120 120))") " is 128.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiPolygonWithEmpty,The length of the statement  "                    "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"' " is 136.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInShell,The length of the statement  "            const string geomStr = "POLYGON ((1721355.3 693015.146' 1721318.687 693046.251' 1721306.747 693063.038' 1721367.025 692978.29' 1721355.3 693015.146))"; " is 151.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInShell,The length of the statement  "            const string result = "POLYGON ((1721355.3 693015.146' 1721367.025 692978.29' 1721318.687 693046.251' 1721355.3 693015.146))"; " is 126.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInHole,The length of the statement  "            const string geomStr = "POLYGON ((1721270 693090' 1721400 693090' 1721400 692960' 1721270 692960' 1721270 693090)' (1721355.3 693015.146' 1721318.687 693046.251' 1721306.747 693063.038' 1721367.025 692978.29' 1721355.3 693015.146))"; " is 233.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInHole,The length of the statement  "            const string result = "POLYGON ((1721270 693090' 1721400 693090' 1721400 692960' 1721270 692960' 1721270 693090)' (1721355.3 693015.146' 1721318.687 693046.251' 1721367.025 692978.29' 1721355.3 693015.146))"; " is 208.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestMultiPolygonWithEmpty,The length of the statement  "                    "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"' " is 136.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestNewResultsIdenticalToOldResults,The length of the statement  "            Console.WriteLine("Total: Removed {0} of {1} points (reduction: {2:P0})."' pointsRemoved' totalPointCount' pointsRemoved / (double)totalPointCount); " is 148.
Long Statement,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestNewResultsIdenticalToOldResults,The length of the statement  "            Console.WriteLine("Old: {0:N3} seconds.  New: {1:N3} seconds (reduction: {2:P0})."' oldTicks / (double)Stopwatch.Frequency' newTicks / (double)Stopwatch.Frequency' (oldTicks - newTicks) / (double)oldTicks); " is 206.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestRandom,The length of the statement  "            const string wkt = "MULTIPOINT ((90 290)' (120 250)' (280 250)' (200 200)' (220 290)' (170 320)' (110 180)' (70 140)' (180 110)' (210 80)' (250 120))"; " is 151.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestRandom,The length of the statement  "            const string lineWKT = "MULTILINESTRING ((130 160' 150 280' 200 250)' (180 120' 240 230)' (40 270' 90 220)' (90 270' 130 290' 100 280' 140 310))"; " is 146.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestRandom,The length of the statement  "            const string expected = "MULTILINESTRING ((220 290' 280 250)' (170 320' 220 290)' (170 320' 140 310)' (90 290' 140 310)' (90 290' 40 270)' (70 140' 40 270)' (70 140' 210 80)' (210 80' 250 120)' (280 250' 250 120)' (250 120' 240 230)' (280 250' 240 230)' (240 230' 220 290)' (200 250' 240 230)' (220 290' 200 250)' (150 280' 200 250)' (220 290' 150 280)' (170 320' 150 280)' (140 310' 150 280)' (130 290' 150 280)' (130 290' 140 310)' (130 290' 124 298)' (140 310' 124 298)' (90 290' 124 298)' (100 280' 124 298)' (90 290' 100 280)' (90 270' 100 280)' (90 290' 90 270)' (90 270' 40 270)' (90 220' 90 270)' (40 270' 90 220)' (90 220' 70 140)' (110 180' 90 220)' (70 140' 110 180)' (110 180' 130 160)' (70 140' 130 160)' (180 110' 130 160)' (70 140' 180 110)' (180 110' 210 80)' (180 110' 250 120)' (180 110' 180 120)' (250 120' 180 120)' (180 120' 218.21656050955414 190.06369426751593)' (250 120' 218.21656050955414 190.06369426751593)' (240 230' 218.21656050955414 190.06369426751593)' (200 200' 218.21656050955414 190.06369426751593)' (200 200' 240 230)' (200 200' 200 250)' (200 200' 143.51351351351352 241.0810810810811)' (200 250' 143.51351351351352 241.0810810810811)' (150 280' 143.51351351351352 241.0810810810811)' (120 250' 143.51351351351352 241.0810810810811)' (120 250' 150 280)' (120 250' 130 290)' (120 250' 102 276)' (130 290' 102 276)' (100 280' 102 276)' (100 280' 130 290)' (90 270' 102 276)' (120 250' 90 270)' (120 250' 90 220)' (120 250' 136.05405405405406 196.32432432432432)' (136.05405405405406 196.32432432432432' 90 220)' (136.05405405405406 196.32432432432432' 110 180)' (130 160' 136.05405405405406 196.32432432432432)' (200 200' 136.05405405405406 196.32432432432432)' (130 160' 200 200)' (200 200' 180 120)' (130 160' 180 120)' (143.51351351351352 241.0810810810811' 136.05405405405406 196.32432432432432))"; " is 1838.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestRandom,The length of the statement  "            const string expectedTri = "GEOMETRYCOLLECTION (POLYGON ((40 270' 70 140' 90 220' 40 270))' POLYGON ((40 270' 90 220' 90 270' 40 270))' POLYGON ((40 270' 90 270' 90 290' 40 270))' POLYGON ((90 290' 90 270' 100 280' 90 290))' POLYGON ((90 290' 100 280' 124 298' 90 290))' POLYGON ((90 290' 124 298' 140 310' 90 290))' POLYGON ((140 310' 124 298' 130 290' 140 310))' POLYGON ((140 310' 130 290' 150 280' 140 310))' POLYGON ((140 310' 150 280' 170 320' 140 310))' POLYGON ((170 320' 150 280' 220 290' 170 320))' POLYGON ((220 290' 150 280' 200 250' 220 290))' POLYGON ((220 290' 200 250' 240 230' 220 290))' POLYGON ((220 290' 240 230' 280 250' 220 290))' POLYGON ((280 250' 240 230' 250 120' 280 250))' POLYGON ((210 80' 250 120' 180 110' 210 80))' POLYGON ((210 80' 180 110' 70 140' 210 80))' POLYGON ((70 140' 180 110' 130 160' 70 140))' POLYGON ((70 140' 130 160' 110 180' 70 140))' POLYGON ((70 140' 110 180' 90 220' 70 140))' POLYGON ((90 220' 110 180' 136.05405405405406 196.32432432432432' 90 220))' POLYGON ((90 220' 136.05405405405406 196.32432432432432' 120 250' 90 220))' POLYGON ((90 220' 120 250' 90 270' 90 220))' POLYGON ((90 270' 120 250' 102 276' 90 270))' POLYGON ((90 270' 102 276' 100 280' 90 270))' POLYGON ((100 280' 102 276' 130 290' 100 280))' POLYGON ((100 280' 130 290' 124 298' 100 280))' POLYGON ((130 290' 102 276' 120 250' 130 290))' POLYGON ((130 290' 120 250' 150 280' 130 290))' POLYGON ((150 280' 120 250' 143.51351351351352 241.0810810810811' 150 280))' POLYGON ((150 280' 143.51351351351352 241.0810810810811' 200 250' 150 280))' POLYGON ((200 250' 143.51351351351352 241.0810810810811' 200 200' 200 250))' POLYGON ((200 250' 200 200' 240 230' 200 250))' POLYGON ((240 230' 200 200' 218.21656050955414 190.06369426751593' 240 230))' POLYGON ((240 230' 218.21656050955414 190.06369426751593' 250 120' 240 230))' POLYGON ((250 120' 218.21656050955414 190.06369426751593' 180 120' 250 120))' POLYGON ((250 120' 180 120' 180 110' 250 120))' POLYGON ((180 110' 180 120' 130 160' 180 110))' POLYGON ((130 160' 180 120' 200 200' 130 160))' POLYGON ((130 160' 200 200' 136.05405405405406 196.32432432432432' 130 160))' POLYGON ((130 160' 136.05405405405406 196.32432432432432' 110 180' 130 160))' POLYGON ((136.05405405405406 196.32432432432432' 200 200' 143.51351351351352 241.0810810810811' 136.05405405405406 196.32432432432432))' POLYGON ((136.05405405405406 196.32432432432432' 143.51351351351352 241.0810810810811' 120 250' 136.05405405405406 196.32432432432432))' POLYGON ((200 200' 180 120' 218.21656050955414 190.06369426751593' 200 200)))"; " is 2576.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestPolygonWithHole,The length of the statement  "            const string ExpectedEdgesWKT = "MULTILINESTRING ((0 10' 10 10)' (0 0' 0 10)' (0 0' 10 0)' (10 0' 10 10)' (6 4' 10 0)' (6 4' 10 10)' (6 4' 6 6)' (6 6' 10 10)' (4 6' 6 6)' (4 6' 10 10)' (0 10' 4 6)' (4 4' 4 6)' (0 10' 4 4)' (0 0' 4 4)' (4 4' 10 0)' (4 4' 6 4)' (4 6' 6 4))"; " is 273.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,ConformingDelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\ConformingDelaunayTest.cs,TestPolygonWithHole,The length of the statement  "            const string ExpectedTriWKT = "GEOMETRYCOLLECTION (POLYGON ((0 10' 0 0' 4 4' 0 10))' POLYGON ((0 10' 4 4' 4 6' 0 10))' POLYGON ((0 10' 4 6' 10 10' 0 10))' POLYGON ((10 10' 4 6' 6 6' 10 10))' POLYGON ((10 10' 6 6' 6 4' 10 10))' POLYGON ((10 10' 6 4' 10 0' 10 10))' POLYGON ((0 0' 10 0' 4 4' 0 0))' POLYGON ((4 4' 10 0' 6 4' 4 4))' POLYGON ((4 4' 6 4' 4 6' 4 4))' POLYGON ((4 6' 6 4' 6 6' 4 6)))"; " is 395.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestRandom,The length of the statement  "            const string expected = "MULTILINESTRING ((70 180' 190 110)' (30 150' 70 180)' (30 150' 50 40)' (50 40' 120 20)' (190 110' 120 20)' (120 20' 140 70)' (190 110' 140 70)' (130 140' 140 70)' (130 140' 190 110)' (70 180' 130 140)' (80 100' 130 140)' (70 180' 80 100)' (30 150' 80 100)' (50 40' 80 100)' (80 100' 120 20)' (80 100' 140 70))"; " is 336.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestRandom,The length of the statement  "            const string expectedTri = "GEOMETRYCOLLECTION (POLYGON ((30 150' 50 40' 80 100' 30 150))' POLYGON ((30 150' 80 100' 70 180' 30 150))' POLYGON ((70 180' 80 100' 130 140' 70 180))' POLYGON ((70 180' 130 140' 190 110' 70 180))' POLYGON ((190 110' 130 140' 140 70' 190 110))' POLYGON ((190 110' 140 70' 120 20' 190 110))' POLYGON ((120 20' 140 70' 80 100' 120 20))' POLYGON ((120 20' 80 100' 50 40' 120 20))' POLYGON ((80 100' 140 70' 130 140' 80 100)))"; " is 452.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestGrid,The length of the statement  "            const string expected = "MULTILINESTRING ((10 20' 20 20)' (0 20' 10 20)' (0 10' 0 20)' (0 0' 0 10)' (0 0' 10 0)' (10 0' 20 0)' (20 0' 20 10)' (20 10' 20 20)' (10 20' 20 10)' (10 10' 20 10)' (10 10' 10 20)' (10 10' 0 20)' (10 10' 0 10)' (10 0' 10 10)' (0 10' 10 0)' (10 10' 20 0))"; " is 281.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestGrid,The length of the statement  "            const string expectedTri = "GEOMETRYCOLLECTION (POLYGON ((0 20' 0 10' 10 10' 0 20))' POLYGON ((0 20' 10 10' 10 20' 0 20))' POLYGON ((10 20' 10 10' 20 10' 10 20))' POLYGON ((10 20' 20 10' 20 20' 10 20))' POLYGON ((10 0' 20 0' 10 10' 10 0))' POLYGON ((10 0' 10 10' 0 10' 10 0))' POLYGON ((10 0' 0 10' 0 0' 10 0))' POLYGON ((10 10' 20 0' 20 10' 10 10)))"; " is 352.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestCircle,The length of the statement  "            const string wkt = "POLYGON ((42 30' 41.96 29.61' 41.85 29.23' 41.66 28.89' 41.41 28.59' 41.11 28.34' 40.77 28.15' 40.39 28.04' 40 28' 39.61 28.04' 39.23 28.15' 38.89 28.34' 38.59 28.59' 38.34 28.89' 38.15 29.23' 38.04 29.61' 38 30' 38.04 30.39' 38.15 30.77' 38.34 31.11' 38.59 31.41' 38.89 31.66' 39.23 31.85' 39.61 31.96' 40 32' 40.39 31.96' 40.77 31.85' 41.11 31.66' 41.41 31.41' 41.66 31.11' 41.85 30.77' 41.96 30.39' 42 30))"; " is 431.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestCircle,The length of the statement  "            const string expected = "MULTILINESTRING ((41.66 31.11' 41.85 30.77)' (41.41 31.41' 41.66 31.11)' (41.11 31.66' 41.41 31.41)' (40.77 31.85' 41.11 31.66)' (40.39 31.96' 40.77 31.85)' (40 32' 40.39 31.96)' (39.61 31.96' 40 32)' (39.23 31.85' 39.61 31.96)' (38.89 31.66' 39.23 31.85)' (38.59 31.41' 38.89 31.66)' (38.34 31.11' 38.59 31.41)' (38.15 30.77' 38.34 31.11)' (38.04 30.39' 38.15 30.77)' (38 30' 38.04 30.39)' (38 30' 38.04 29.61)' (38.04 29.61' 38.15 29.23)' (38.15 29.23' 38.34 28.89)' (38.34 28.89' 38.59 28.59)' (38.59 28.59' 38.89 28.34)' (38.89 28.34' 39.23 28.15)' (39.23 28.15' 39.61 28.04)' (39.61 28.04' 40 28)' (40 28' 40.39 28.04)' (40.39 28.04' 40.77 28.15)' (40.77 28.15' 41.11 28.34)' (41.11 28.34' 41.41 28.59)' (41.41 28.59' 41.66 28.89)' (41.66 28.89' 41.85 29.23)' (41.85 29.23' 41.96 29.61)' (41.96 29.61' 42 30)' (41.96 30.39' 42 30)' (41.85 30.77' 41.96 30.39)' (41.66 31.11' 41.96 30.39)' (41.41 31.41' 41.96 30.39)' (41.41 28.59' 41.96 30.39)' (41.41 28.59' 41.41 31.41)' (38.59 28.59' 41.41 28.59)' (38.59 28.59' 41.41 31.41)' (38.59 28.59' 38.59 31.41)' (38.59 31.41' 41.41 31.41)' (38.59 31.41' 39.61 31.96)' (39.61 31.96' 41.41 31.41)' (39.61 31.96' 40.39 31.96)' (40.39 31.96' 41.41 31.41)' (40.39 31.96' 41.11 31.66)' (38.04 30.39' 38.59 28.59)' (38.04 30.39' 38.59 31.41)' (38.04 30.39' 38.34 31.11)' (38.04 29.61' 38.59 28.59)' (38.04 29.61' 38.04 30.39)' (39.61 28.04' 41.41 28.59)' (38.59 28.59' 39.61 28.04)' (38.89 28.34' 39.61 28.04)' (40.39 28.04' 41.41 28.59)' (39.61 28.04' 40.39 28.04)' (41.96 29.61' 41.96 30.39)' (41.41 28.59' 41.96 29.61)' (41.66 28.89' 41.96 29.61)' (40.39 28.04' 41.11 28.34)' (38.04 29.61' 38.34 28.89)' (38.89 31.66' 39.61 31.96))"; " is 1703.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestPolygonWithChevronHoles,The length of the statement  "            const string wkt = "POLYGON ((0 0' 0 200' 180 200' 180 0' 0 0)' (20 180' 160 180' 160 20' 152.625 146.75' 20 180)' (30 160' 150 30' 70 90' 30 160))"; " is 149.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayTest.cs,TestPolygonWithChevronHoles,The length of the statement  "            const string expected = "MULTILINESTRING ((0 200' 180 200)' (0 0' 0 200)' (0 0' 180 0)' (180 200' 180 0)' (152.625 146.75' 180 0)' (152.625 146.75' 180 200)' (152.625 146.75' 160 180)' (160 180' 180 200)' (0 200' 160 180)' (20 180' 160 180)' (0 200' 20 180)' (20 180' 30 160)' (30 160' 0 200)' (0 0' 30 160)' (30 160' 70 90)' (0 0' 70 90)' (70 90' 150 30)' (150 30' 0 0)' (150 30' 160 20)' (0 0' 160 20)' (160 20' 180 0)' (152.625 146.75' 160 20)' (150 30' 152.625 146.75)' (70 90' 152.625 146.75)' (30 160' 152.625 146.75)' (30 160' 160 180))"; " is 545.
Long Statement,NetTopologySuite.Tests.NUnit.Triangulate,VoronoiTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\VoronoiTest.cs,TestSimple,The length of the statement  "            const string expected = "GEOMETRYCOLLECTION (POLYGON ((-1162.076359832636 462.66344142259413' 50 419.375' 50 60' 27.857142857142854 37.857142857142854' -867 187' -1162.076359832636 462.66344142259413))' POLYGON ((-867 187' 27.857142857142854 37.857142857142854' 245 -505' 45 -725' -867 187))' POLYGON ((27.857142857142854 37.857142857142854' 50 60' 556.6666666666666 -193.33333333333331' 245 -505' 27.857142857142854 37.857142857142854))' POLYGON ((50 60' 50 419.375' 1289.1616314199396 481.3330815709969' 556.6666666666666 -193.33333333333331' 50 60)))"; " is 555.
Complex Conditional,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustCGAlgorithms,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustCGAlgorithms.cs,IsPointInRing,The conditional expression  "((y1 > 0) && (y2 <= 0)) || ((y2 > 0) && (y1 <= 0))"  is complex.
Complex Conditional,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustCGAlgorithms,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustCGAlgorithms.cs,DistanceLineLine,The conditional expression  "(r < 0) || (r > 1) || (s < 0) || (s > 1)"  is complex.
Complex Conditional,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustLineIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustLineIntersector.cs,ComputeIntersect,The conditional expression  "Pa.Equals(p1) || Pa.Equals(p2) || Pa.Equals(p3) || Pa.Equals(p4)"  is complex.
Complex Conditional,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustRayCrossingCounter,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustRayCrossingCounter.cs,CountSegment,The conditional expression  "((p1.Y > _p.Y) && (p2.Y <= _p.Y))                  || ((p2.Y > _p.Y) && (p1.Y <= _p.Y))"  is complex.
Complex Conditional,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The conditional expression  "(acxtail == 0.0) && (acytail == 0.0) && (bcxtail == 0.0)          && (bcytail == 0.0)"  is complex.
Virtual Method Call from Constructor,NetTopologySuite.Tests.NUnit.Geometries,RectanglePredicateSyntheticTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\RectanglePredicateSyntheticTest.cs,RectanglePredicateSyntheticTest,The constructor "RectanglePredicateSyntheticTest" calls a virtual method "ToGeometry".
Empty Catch Block,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDimInvalid,The method has an empty catch block.
Empty Catch Block,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The method has an empty catch block.
Empty Catch Block,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testBoundaryOfEmptyGeometry,The method has an empty catch block.
Empty Catch Block,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testEmptyPoint,The method has an empty catch block.
Empty Catch Block,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testEmptyPoint,The method has an empty catch block.
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestBox,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(10' 10)'                  "POLYGON ((0 0' 0 20' 20 20' 20 0' 0 0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestBox,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(10' 10)'                  "POLYGON ((0 0' 0 20' 20 20' 20 0' 0 0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(4' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(4' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(8' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(8' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(11' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(11' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(30' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(30' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(22' 7)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(22' 7)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(1' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(5' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(5' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(1' 7)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(12' 10)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(12' 10)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(16' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(16' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(35' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestComb,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(35' 5)' Comb);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(2' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(2' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(8' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(8' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(10' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Boundary' new Coordinate(10' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(1' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(3' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRepeatedPts,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(3' 5)' RepeatedPts);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(25.374625374625374' 128.35564435564436)' "POLYGON ((0.0 0.0' 0.0 172.0' 100.0 0.0' 0.0 0.0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(25.374625374625374' 128.35564435564436)' "POLYGON ((0.0 0.0' 0.0 172.0' 100.0 0.0' 0.0 0.0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(97.96039603960396' 782.0)' "POLYGON ((642.0 815.0' 69.0 764.0' 394.0 966.0' 642.0 815.0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustStressTriangles,The following statement contains a magic number: RunPtInRing(Location.Interior' new Coordinate(97.96039603960396' 782.0)' "POLYGON ((642.0 815.0' 69.0 764.0' 394.0 966.0' 642.0 815.0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustTriangle,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(3.166572116932842' 48.5390194687463)' "POLYGON ((2.152214146946829 50.470470727186765' 18.381941666723034 19.567250592139274' 2.390837642830135 49.228045261718165' 2.152214146946829 50.470470727186765))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AbstractPointInRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AbstractPointInRingTest.cs,TestRobustTriangle,The following statement contains a magic number: RunPtInRing(Location.Exterior' new Coordinate(3.166572116932842' 48.5390194687463)' "POLYGON ((2.152214146946829 50.470470727186765' 18.381941666723034 19.567250592139274' 2.390837642830135 49.228045261718165' 2.152214146946829 50.470470727186765))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(10' 0))' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(10' 10))' Math.PI / 4' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(10' 10))' Math.PI / 4' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(10' 10))' Math.PI / 4' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(0' 10))' Math.PI / 2' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(0' 10))' Math.PI / 2' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' 10))' 0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' 10))' 0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' 10))' 0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' 0))' Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -0.1))' -3.131592986903128' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -0.1))' -3.131592986903128' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -0.1))' -3.131592986903128' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -10))' -0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -10))' -0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestAngle,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Angle(new Coordinate(-10' -10))' -0.75 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' 10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' 10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' 10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' -10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' -10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(5' -10))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(10' 0))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(10' 0))' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' 10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' 10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' 10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' -10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' -10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestIsAcute,The following statement contains a magic number: Assert.AreEqual(AngleUtility.IsAcute(new Coordinate(10' 0)' new Coordinate(0' 0)' new Coordinate(-5' -10))' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-0.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-0.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-1.5 * Math.PI)' .5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-1.5 * Math.PI)' .5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-2 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-2.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-2.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-3 * Math.PI)' Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(-4 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(0.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(0.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(1.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(1.5 * Math.PI)' 1.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(2 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(2.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(2.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(3 * Math.PI)' Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalizePositive,The following statement contains a magic number: Assert.AreEqual(AngleUtility.NormalizePositive(4 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-0.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-0.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-1.5 * Math.PI)' .5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-1.5 * Math.PI)' .5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-2 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-2.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-2.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-3 * Math.PI)' Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(-4 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(0.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(0.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(1.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(1.5 * Math.PI)' -0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(2 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(2.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(2.5 * Math.PI)' 0.5 * Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(3 * Math.PI)' Math.PI' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AngleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AngleTest.cs,TestNormalize,The following statement contains a magic number: Assert.AreEqual(AngleUtility.Normalize(4 * Math.PI)' 0.0' Tolerance);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AreaTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AreaTest.cs,TestArea,The following statement contains a magic number: CheckAreaOfRing("LINEARRING (100 200' 200 200' 200 100' 100 100' 100 200)"' 10000.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AreaTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AreaTest.cs,TestAreaSignedCw,The following statement contains a magic number: CheckAreaOfRingSigned("LINEARRING (100 200' 200 200' 200 100' 100 100' 100 200)"' 10000.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,AreaTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\AreaTest.cs,TestAreaSignedCcw,The following statement contains a magic number: CheckAreaOfRingSigned("LINEARRING (100 200' 100 100' 200 100' 200 200' 100 200)"' -10000.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p0 = new Coordinate(219.3649559090992' 140.84159161824724);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p0 = new Coordinate(219.3649559090992' 140.84159161824724);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p1 = new Coordinate(168.9018919682399' -5.713787599646864);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p1 = new Coordinate(168.9018919682399' -5.713787599646864);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p = new Coordinate(186.80814046338352' 46.28973405831556);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,CGAlgorithmsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\CGAlgorithmsTest.cs,TestOrientationIndexRobust,The following statement contains a magic number: var p = new Coordinate(186.80814046338352' 46.28973405831556);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestCCW,The following statement contains a magic number: Coordinate[] pts2 = {              new Coordinate(1.0000000000004998' -7.989685402102996)'              new Coordinate(10.0' -7.004368924503866)'              new Coordinate(1.0000000000005' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts1 = {              new Coordinate(1.4540766091864998' -7.989685402102996)'              new Coordinate(23.131039116367354' -7.004368924503866)'              new Coordinate(1.4540766091865' -7.989685402102996)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: var orient = new OrientationIndex[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[0] = Orientation.Index(pts[0]' pts[1]' pts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[1] = Orientation.Index(pts[1]' pts[2]' pts[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[2] = Orientation.Index(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[2] = Orientation.Index(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ComputeOrientationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ComputeOrientationTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: return orient[0] == orient[1] && orient[0] == orient[2];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,ConvexHullTest,The following statement contains a magic number: PrecisionModel precisionModel = new PrecisionModel(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,TestManyIdenticalPoints,The following statement contains a magic number: var pts = new Coordinate[100];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,TestManyIdenticalPoints,The following statement contains a magic number: i < 99
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,TestManyIdenticalPoints,The following statement contains a magic number: pts[99] = new Coordinate(1' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,TestAllIdenticalPoints,The following statement contains a magic number: var pts = new Coordinate[100];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ConvexHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ConvexHullTest.cs,TestAllIdenticalPoints,The following statement contains a magic number: i < 100
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(3.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(3.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(3.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(3.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.707106' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(1' 0)' new Coordinate(0' 0)' new Coordinate(1' 1))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLinePerpendicular,The following statement contains a magic number: Assert.AreEqual(0.707106' DistanceComputer.PointToLinePerpendicular(                  new Coordinate(1' 0)' new Coordinate(0' 0)' new Coordinate(1' 1))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToSegment(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToSegment(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToSegment(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(0.5' DistanceComputer.PointToSegment(                  new Coordinate(0.5' 0.5)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(1.0' DistanceComputer.PointToSegment(                  new Coordinate(2' 0)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointLine,The following statement contains a magic number: Assert.AreEqual(1.0' DistanceComputer.PointToSegment(                  new Coordinate(2' 0)' new Coordinate(0' 0)' new Coordinate(1' 0))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistanceLineLineDisjointCollinear,The following statement contains a magic number: Assert.AreEqual(1.999699' DistanceComputer.SegmentToSegment(                  new Coordinate(0' 0)' new Coordinate(9.9' 1.4)'                  new Coordinate(11.88' 1.68)' new Coordinate(21.78' 3.08))' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: Coordinate[] coords =              {                  new Coordinate(24824.045318333192'38536.15071012041)'                  new Coordinate(26157.378651666528'37567.42733944659)'                  new Coordinate(26666.666666666668'36000.0)'                  new Coordinate(26157.378651666528'34432.57266055341)'                  new Coordinate(24824.045318333192'33463.84928987959)'                  new Coordinate(23175.954681666804'33463.84928987959)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: var pt = new Coordinate(21842.621348333472' 34432.57266055341);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,DistanceComputerTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\DistanceComputerTest.cs,TestDistancePointToSegmentStringConsistency,The following statement contains a magic number: var pt = new Coordinate(21842.621348333472' 34432.57266055341);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,InteriorPointTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\InteriorPointTest.cs,TestPolygonZeroArea,The following statement contains a magic number: CheckInteriorPoint(Read("POLYGON ((10 10' 10 10' 10 10' 10 10))")' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,InteriorPointTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\InteriorPointTest.cs,TestPolygonZeroArea,The following statement contains a magic number: CheckInteriorPoint(Read("POLYGON ((10 10' 10 10' 10 10' 10 10))")' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,LengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\LengthTest.cs,TestLength,The following statement contains a magic number: CheckLengthOfLine("LINESTRING (100 200' 200 200' 200 100' 100 100' 100 200)"' 400.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoint,The following statement contains a magic number: DoMinimumBoundingCircleTest("POINT (10 10)"' "MULTIPOINT ((10 10))"' new Coordinate(10' 10)' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoint,The following statement contains a magic number: DoMinimumBoundingCircleTest("POINT (10 10)"' "MULTIPOINT ((10 10))"' new Coordinate(10' 10)' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints2,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20))"' "MULTIPOINT ((10 10)' (20 20))"' new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints2,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20))"' "MULTIPOINT ((10 10)' (20 20))"' new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints2,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20))"' "MULTIPOINT ((10 10)' (20 20))"' new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPointsInLine,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (30 30))"' "MULTIPOINT ((10 10)' (30 30))"'              new Coordinate(20' 20)' 14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPointsInLine,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (30 30))"' "MULTIPOINT ((10 10)' (30 30))"'              new Coordinate(20' 20)' 14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPointsInLine,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (30 30))"' "MULTIPOINT ((10 10)' (30 30))"'              new Coordinate(20' 20)' 14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints3,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'              new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints3,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'              new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestPoints3,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'              new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestObtuseTriangle,The following statement contains a magic number: DoMinimumBoundingCircleTest("POLYGON ((100 100' 200 100' 150 90' 100 100))"' "MULTIPOINT ((100 100)' (200 100))"'                  new Coordinate(150' 100)' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestObtuseTriangle,The following statement contains a magic number: DoMinimumBoundingCircleTest("POLYGON ((100 100' 200 100' 150 90' 100 100))"' "MULTIPOINT ((100 100)' (200 100))"'                  new Coordinate(150' 100)' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestObtuseTriangle,The following statement contains a magic number: DoMinimumBoundingCircleTest("POLYGON ((100 100' 200 100' 150 90' 100 100))"' "MULTIPOINT ((100 100)' (200 100))"'                  new Coordinate(150' 100)' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestTriangleWithMiddlePoint,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20)' (15 19))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'                  new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestTriangleWithMiddlePoint,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20)' (15 19))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'                  new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumBoundingCircleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumBoundingCircleTest.cs,TestTriangleWithMiddlePoint,The following statement contains a magic number: DoMinimumBoundingCircleTest("MULTIPOINT ((10 10)' (20 20)' (10 20)' (15 19))"' "MULTIPOINT ((10 10)' (20 20)' (10 20))"'                  new Coordinate(15' 15)' 7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter1,The following statement contains a magic number: DoMinimumDiameterTest(true' "POINT (0 240)"' new Coordinate(0' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter1,The following statement contains a magic number: DoMinimumDiameterTest(true' "POINT (0 240)"' new Coordinate(0' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter2,The following statement contains a magic number: DoMinimumDiameterTest(true' "LINESTRING (0 240' 220 240)"' new Coordinate(0' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter2,The following statement contains a magic number: DoMinimumDiameterTest(true' "LINESTRING (0 240' 220 240)"' new Coordinate(0' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter3,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter3,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter3,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter4,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter4,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter4,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 220 240' 220 0' 0 0' 0 240))"' new Coordinate(220' 240)' new Coordinate(0' 240));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter5,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 160 140' 220 0' 0 0' 0 240))"' new Coordinate(185.86206896551724' 79.65517241379311)' new Coordinate(0' 0));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter5,The following statement contains a magic number: DoMinimumDiameterTest(true' "POLYGON ((0 240' 160 140' 220 0' 0 0' 0 240))"' new Coordinate(185.86206896551724' 79.65517241379311)' new Coordinate(0' 0));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter6,The following statement contains a magic number: DoMinimumDiameterTest(false' "LINESTRING ( 39 119' 162 197' 135 70' 95 35' 33 66' 111 82' 97 131' 48 160' -4 182' 57 195' 94 202' 90 174' 75 134' 47 114' 0 100' 59 81' 123 60' 136 43' 163 75' 145 114' 93 136' 92 159' 105 175 )"' new Coordinate(64.46262341325811' 196.41184767277855)' new Coordinate(95' 35));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter6,The following statement contains a magic number: DoMinimumDiameterTest(false' "LINESTRING ( 39 119' 162 197' 135 70' 95 35' 33 66' 111 82' 97 131' 48 160' -4 182' 57 195' 94 202' 90 174' 75 134' 47 114' 0 100' 59 81' 123 60' 136 43' 163 75' 145 114' 93 136' 92 159' 105 175 )"' new Coordinate(64.46262341325811' 196.41184767277855)' new Coordinate(95' 35));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter6,The following statement contains a magic number: DoMinimumDiameterTest(false' "LINESTRING ( 39 119' 162 197' 135 70' 95 35' 33 66' 111 82' 97 131' 48 160' -4 182' 57 195' 94 202' 90 174' 75 134' 47 114' 0 100' 59 81' 123 60' 136 43' 163 75' 145 114' 93 136' 92 159' 105 175 )"' new Coordinate(64.46262341325811' 196.41184767277855)' new Coordinate(95' 35));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,TestMinimumDiameter6,The following statement contains a magic number: DoMinimumDiameterTest(false' "LINESTRING ( 39 119' 162 197' 135 70' 95 35' 33 66' 111 82' 97 131' 48 160' -4 182' 57 195' 94 202' 90 174' 75 134' 47 114' 0 100' 59 81' 123 60' 136 43' 163 75' 145 114' 93 136' 92 159' 105 175 )"' new Coordinate(64.46262341325811' 196.41184767277855)' new Coordinate(95' 35));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,MinimumDiameterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\MinimumDiameterTest.cs,DoMinimumDiameterTest,The following statement contains a magic number: double tolerance = 1E-10;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustCGAlgorithms,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustCGAlgorithms.cs,IsPointInRing,The following statement contains a magic number: (crossings%2) == 1
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,NonRobustCGAlgorithms,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\NonRobustCGAlgorithms.cs,IsCCW,The following statement contains a magic number: nPts < 4
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(1.4540766091864998' -7.989685402102996)'                                     new Coordinate(23.131039116367354' -7.004368924503866)'                                     new Coordinate(1.4540766091865' -7.989685402102996)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW2,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(219.3649559090992' 140.84159161824724)'                                     new Coordinate(168.9018919682399' -5.713787599646864)'                                     new Coordinate(186.80814046338352' 46.28973405831556)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW3,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(279.56857838488514' -186.3790522565901)'                                     new Coordinate(-20.43142161511487' 13.620947743409914)'                                     new Coordinate(0' 0)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW3,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(279.56857838488514' -186.3790522565901)'                                     new Coordinate(-20.43142161511487' 13.620947743409914)'                                     new Coordinate(0' 0)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW3,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(279.56857838488514' -186.3790522565901)'                                     new Coordinate(-20.43142161511487' 13.620947743409914)'                                     new Coordinate(0' 0)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW3,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(279.56857838488514' -186.3790522565901)'                                     new Coordinate(-20.43142161511487' 13.620947743409914)'                                     new Coordinate(0' 0)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW4,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-26.2' 188.7)'                                     new Coordinate(37.0' 290.7)'                                     new Coordinate(21.2' 265.2)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW5,The following statement contains a magic number: Coordinate[] pts = {                                     new Coordinate(-5.9' 163.1)'                                     new Coordinate(76.1' 250.7)'                                     new Coordinate(14.6' 185)                                     //new Coordinate(96.6' 272.6)                                 };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-0.9575' 0.4511)'          new Coordinate(-0.9295' 0.3291)'          new Coordinate(-0.8945' 0.1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW7_2,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-9575' 4511)'          new Coordinate(-9295' 3291)'          new Coordinate(-8945' 1766)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,TestBadCCW6,The following statement contains a magic number: Coordinate[] pts = {          new Coordinate(-140.8859438214298' 140.88594382142983)'          new Coordinate(-57.309236848216706' 57.30923684821671)'          new Coordinate(-190.9188309203678' 190.91883092036784)      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: int[] orient = new int[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: orient[0] = CGAlgorithmsDD.OrientationIndex(pts[0]' pts[1]' pts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: orient[1] = CGAlgorithmsDD.OrientationIndex(pts[1]' pts[2]' pts[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: orient[2] = CGAlgorithmsDD.OrientationIndex(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: orient[2] = CGAlgorithmsDD.OrientationIndex(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualDD,The following statement contains a magic number: return orient[0] == orient[1] && orient[0] == orient[2];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualSD,The following statement contains a magic number: int orient0 = ShewchuksDeterminant.OrientationIndex(pts[0]' pts[1]' pts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualSD,The following statement contains a magic number: int orient1 = ShewchuksDeterminant.OrientationIndex(pts[1]' pts[2]' pts[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualSD,The following statement contains a magic number: int orient2 = ShewchuksDeterminant.OrientationIndex(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: int[] orient = new int[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: orient[0] = RobustDeterminant.OrientationIndex(pts[0]' pts[1]' pts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: orient[1] = RobustDeterminant.OrientationIndex(pts[1]' pts[2]' pts[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: orient[2] = RobustDeterminant.OrientationIndex(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: orient[2] = RobustDeterminant.OrientationIndex(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexFailureTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexFailureTest.cs,IsAllOrientationsEqualRD,The following statement contains a magic number: return orient[0] == orient[1] && orient[0] == orient[2];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,TestCCW2,The following statement contains a magic number: Coordinate[] pts2 = {        new Coordinate(1.0000000000004998' -7.989685402102996)'        new Coordinate(10.0' -7.004368924503866)'        new Coordinate(1.0000000000005' -7.989685402102996)'      };
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: int[] orient = new int[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[0] = (int)Orientation.Index(pts[0]' pts[1]' pts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[1] = (int)Orientation.Index(pts[1]' pts[2]' pts[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[2] = (int)Orientation.Index(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: orient[2] = (int)Orientation.Index(pts[2]' pts[0]' pts[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,OrientationIndexTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\OrientationIndexTest.cs,IsAllOrientationsEqual,The following statement contains a magic number: return orient[0] == orient[1] && orient[0] == orient[2];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PerturbedGridPolygonBuilder,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PerturbedGridPolygonBuilder.cs,BuildGrid,The following statement contains a magic number: var lines = new LineString[_numLines * 2];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PerturbedGridPolygonBuilder,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PerturbedGridPolygonBuilder.cs,BuildGrid,The following statement contains a magic number: var wktWriter = new WKTWriter(2) {Formatted = true' MaxCoordinatesPerLine = 6};
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PerturbedGridPolygonBuilder,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PerturbedGridPolygonBuilder.cs,BuildGrid,The following statement contains a magic number: var wktWriter = new WKTWriter(2) {Formatted = true' MaxCoordinatesPerLine = 6};
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnVertex,The following statement contains a magic number: this.CheckOnLine(20' 20' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 30 30 30 30)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnVertex,The following statement contains a magic number: this.CheckOnLine(20' 20' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 30 30 30 30)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnSegment,The following statement contains a magic number: this.CheckOnLine(10' 10' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 0 40 40 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnSegment,The following statement contains a magic number: this.CheckOnLine(10' 10' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 0 40 40 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnSegment,The following statement contains a magic number: this.CheckOnLine(10' 30' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 0 40 40 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestOnSegment,The following statement contains a magic number: this.CheckOnLine(10' 30' "LINESTRINGZM (0 0 0 0' 20 20 20 20' 0 40 40 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOn4DLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOn4DLineTest.cs,TestNotOnLine,The following statement contains a magic number: this.CheckOnLine(0' 100' "LINESTRINGZM (10 10 10 10' 20 10 10 10' 30 10 10 10)"' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnVertex,The following statement contains a magic number: CheckOnLine(20' 20' "LINESTRING (0 00' 20 20' 30 30)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnVertex,The following statement contains a magic number: CheckOnLine(20' 20' "LINESTRING (0 00' 20 20' 30 30)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnSegment,The following statement contains a magic number: CheckOnLine(10' 10' "LINESTRING (0 0' 20 20' 0 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnSegment,The following statement contains a magic number: CheckOnLine(10' 10' "LINESTRING (0 0' 20 20' 0 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnSegment,The following statement contains a magic number: CheckOnLine(10' 30' "LINESTRING (0 0' 20 20' 0 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestOnSegment,The following statement contains a magic number: CheckOnLine(10' 30' "LINESTRING (0 0' 20 20' 0 40)"' true);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocationOnLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocationOnLineTest.cs,TestNotOnLine,The following statement contains a magic number: CheckOnLine(0' 100' "LINESTRING (10 10' 20 10' 30 10)"' false);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocatorTest.cs,TestBox,The following statement contains a magic number: RunPtLocator(Location.Interior' new Coordinate(10' 10)'                  "POLYGON ((0 0' 0 20' 20 20' 20 0' 0 0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocatorTest.cs,TestBox,The following statement contains a magic number: RunPtLocator(Location.Interior' new Coordinate(10' 10)'                  "POLYGON ((0 0' 0 20' 20 20' 20 0' 0 0))");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocatorTest.cs,TestPointLocatorPointInsideLinearRing,The following statement contains a magic number: RunPtLocator(Location.Exterior' new Coordinate(11' 11)'                  "LINEARRING(10 10' 10 20' 20 10' 10 10)");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,PointLocatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\PointLocatorTest.cs,TestPointLocatorPointInsideLinearRing,The following statement contains a magic number: RunPtLocator(Location.Exterior' new Coordinate(11' 11)'                  "LINEARRING(10 10' 10 20' 20 10' 10 10)");
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Test300Points,The following statement contains a magic number: test.Init(300);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(5);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(30);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(30);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(100);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(300);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(600);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,TestPerformance,The following statement contains a magic number: test.RunBoth(6000);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,CreateTestPoints,The following statement contains a magic number: var circle = pt.Buffer(2*rectSize' nPts/4);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RectangleLineIntersectorValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,CreateTestPoints,The following statement contains a magic number: var circle = pt.Buffer(2*rectSize' nPts/4);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,InitCorners,The following statement contains a magic number: _corner[2] = new Coordinate(rectEnv.MinX' rectEnv.MinY);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,InitCorners,The following statement contains a magic number: _corner[3] = new Coordinate(rectEnv.MaxX' rectEnv.MinY);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Intersects,The following statement contains a magic number: _li.ComputeIntersection(p0' p1' _corner[1]' _corner[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Intersects,The following statement contains a magic number: _li.ComputeIntersection(p0' p1' _corner[2]' _corner[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Intersects,The following statement contains a magic number: _li.ComputeIntersection(p0' p1' _corner[2]' _corner[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,SimpleRectangleIntersector,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RectangleIntersectsTest.cs,Intersects,The following statement contains a magic number: _li.ComputeIntersection(p0' p1' _corner[3]' _corner[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestRoundedPointsNotAltered,The following statement contains a magic number: CheckInputNotAltered(                  "LINESTRING (-58.00593335955 -1.43739086465' -513.86101637525 -457.29247388035)"'                  "LINESTRING (-215.22279674875 -158.65425425385' -218.1208801283 -160.68343590235)"'                  100000);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestDaveSkeaCase,The following statement contains a magic number: CheckIntersection(                  "LINESTRING ( 2089426.5233462777 1180182.3877339689' 2085646.6891757075 1195618.7333999649 )"'                  "LINESTRING ( 1889281.8148903656 1997547.0560044837' 2259977.3672235999 483675.17050843034 )"'                  2'                  new Coordinate[]                  {                      new Coordinate(2087536.6062609926' 1187900.560566967)                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestDaveSkeaCase,The following statement contains a magic number: CheckIntersection(                  "LINESTRING ( 2089426.5233462777 1180182.3877339689' 2085646.6891757075 1195618.7333999649 )"'                  "LINESTRING ( 1889281.8148903656 1997547.0560044837' 2259977.3672235999 483675.17050843034 )"'                  2'                  new Coordinate[]                  {                      new Coordinate(2087536.6062609926' 1187900.560566967)                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestDaveSkeaCase,The following statement contains a magic number: CheckIntersection(                  "LINESTRING ( 2089426.5233462777 1180182.3877339689' 2085646.6891757075 1195618.7333999649 )"'                  "LINESTRING ( 1889281.8148903656 1997547.0560044837' 2259977.3672235999 483675.17050843034 )"'                  2'                  new Coordinate[]                  {                      new Coordinate(2087536.6062609926' 1187900.560566967)                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseWKT,The following statement contains a magic number: CheckIntersection(                  "LINESTRING (4348433.262114629 5552595.478385733' 4348440.849387404 5552599.272022122 )"'                  "LINESTRING (4348433.26211463  5552595.47838573'  4348440.8493874   5552599.27202212  )"'                  1'                  new[]                  {                      new Coordinate(4348437.0557510145' 5552597.375203926)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseWKT,The following statement contains a magic number: CheckIntersection(                  "LINESTRING (4348433.262114629 5552595.478385733' 4348440.849387404 5552599.272022122 )"'                  "LINESTRING (4348433.26211463  5552595.47838573'  4348440.8493874   5552599.27202212  )"'                  1'                  new[]                  {                      new Coordinate(4348437.0557510145' 5552597.375203926)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,TestCmp5CaseRaw,The following statement contains a magic number: CheckIntersection(                  new[]                  {                      new Coordinate(4348433.262114629' 5552595.478385733)'                      new Coordinate(4348440.849387404' 5552599.272022122)'                        new Coordinate(4348433.26211463' 5552595.47838573)'                      new Coordinate(4348440.8493874' 5552599.27202212)                  }'                  1'                  new[]                  {                      new Coordinate(4348440.8493874' 5552599.27202212)'                  }'                  0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckIntersection,The following statement contains a magic number: li.ComputeIntersection(pt[0]' pt[1]' pt[2]' pt[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckIntersection,The following statement contains a magic number: li.ComputeIntersection(pt[0]' pt[1]' pt[2]' pt[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckInputNotAltered,The following statement contains a magic number: var savePt = new Coordinate[4];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckInputNotAltered,The following statement contains a magic number: i < 4
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckInputNotAltered,The following statement contains a magic number: li.ComputeIntersection(pt[0]' pt[1]' pt[2]' pt[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckInputNotAltered,The following statement contains a magic number: li.ComputeIntersection(pt[0]' pt[1]' pt[2]' pt[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectionTest.cs,CheckInputNotAltered,The following statement contains a magic number: i < 4
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var p2 = new Coordinate(20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var p2 = new Coordinate(20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var q1 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var q1 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var q2 = new Coordinate(10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var q2 = new Coordinate(10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var x = new Coordinate(15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,Test2Lines,The following statement contains a magic number: var x = new Coordinate(15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var q1 = new Coordinate(22' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var q1 = new Coordinate(22' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear1,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var q1 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var q1 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear2,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var p1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var q1 = new Coordinate(15' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var q1 = new Coordinate(15' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear3,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var p1 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var p1 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var p2 = new Coordinate(20' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var q1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var q1 = new Coordinate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestCollinear4,The following statement contains a magic number: var q2 = new Coordinate(30' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(100' 100)' new Coordinate(10' 100)'              new Coordinate(100' 10)' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(190' 50)' new Coordinate(120' 100)'              new Coordinate(120' 100)' new Coordinate(50' 150));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: Assert.AreEqual(new Coordinate(120' 100)' i.GetIntersection(1));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestEndpointIntersection2,The following statement contains a magic number: Assert.AreEqual(new Coordinate(120' 100)' i.GetIntersection(1));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(180' 200)' new Coordinate(160' 180)'              new Coordinate(220' 240)' new Coordinate(140' 160));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestOverlap,The following statement contains a magic number: Assert.AreEqual(2' i.IntersectionNum);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper1,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(30' 10)' new Coordinate(30' 30)'              new Coordinate(10' 10)' new Coordinate(90' 11));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsProper2,The following statement contains a magic number: i.ComputeIntersection(new Coordinate(10' 30)' new Coordinate(10' 0)'              new Coordinate(11' 90)' new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.CounterClockwise' Orientation.Index(              new Coordinate(-123456789' -40)'              new Coordinate(0' 0)'              new Coordinate(381039468754763d' 123456789)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.CounterClockwise' Orientation.Index(              new Coordinate(-123456789' -40)'              new Coordinate(0' 0)'              new Coordinate(381039468754763d' 123456789)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.CounterClockwise' Orientation.Index(              new Coordinate(-123456789' -40)'              new Coordinate(0' 0)'              new Coordinate(381039468754763d' 123456789)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.CounterClockwise' Orientation.Index(              new Coordinate(-123456789' -40)'              new Coordinate(0' 0)'              new Coordinate(381039468754763d' 123456789)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW2,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.Collinear' Orientation.Index(              new Coordinate(10' 10)'              new Coordinate(20' 20)'              new Coordinate(0' 0)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW2,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.Collinear' Orientation.Index(              new Coordinate(10' 10)'              new Coordinate(20' 20)'              new Coordinate(0' 0)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW2,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.Collinear' Orientation.Index(              new Coordinate(10' 10)'              new Coordinate(20' 20)'              new Coordinate(0' 0)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestIsCCW2,The following statement contains a magic number: Assert.AreEqual(OrientationIndex.Collinear' Orientation.Index(              new Coordinate(10' 10)'              new Coordinate(20' 20)'              new Coordinate(0' 0)));
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestA,The following statement contains a magic number: var p1 = new Coordinate(-123456789' -40);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestA,The following statement contains a magic number: var p1 = new Coordinate(-123456789' -40);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestA,The following statement contains a magic number: var p2 = new Coordinate(381039468754763d' 123456789);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,RobustLineIntersectorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\RobustLineIntersectorTest.cs,TestA,The following statement contains a magic number: var p2 = new Coordinate(381039468754763d' 123456789);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orientationIndexFilter,The following statement contains a magic number: double ERR_BOUND = 1e-15;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orientationIndexFilter,The following statement contains a magic number: return 2;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double[] B = new double[4];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: B[2] = Two_Two_Diff__x2(detleft' detlefttail' detright' detrighttail);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: B[3] = Two_Two_Diff__x3(detleft' detlefttail' detright' detrighttail);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double det = B[0] + B[1] + B[2] + B[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double det = B[0] + B[1] + B[2] + B[3];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double[] u = new double[4];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[2] = Two_Two_Diff__x2(s1' s0' t1' t0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[3] = u3;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double[] C1 = new double[8];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: int C1length = fast_expansion_sum_zeroelim(4' B' 4' u' C1);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: int C1length = fast_expansion_sum_zeroelim(4' B' 4' u' C1);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[2] = Two_Two_Diff__x2(s1' s0' t1' t0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[3] = u3;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double[] C2 = new double[12];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: int C2length = fast_expansion_sum_zeroelim(C1length' C1' 4' u' C2);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[2] = Two_Two_Diff__x2(s1' s0' t1' t0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: u[3] = u3;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: double[] D = new double[16];
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,orient2dadapt,The following statement contains a magic number: int Dlength = fast_expansion_sum_zeroelim(C2length' C2' 4' u' D);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: const double half = 0.5d;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: splitter_temp *= 2.0;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: resulterrbound = (3.0 + 8.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: resulterrbound = (3.0 + 8.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundA = (3.0 + 16.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundA = (3.0 + 16.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundB = (2.0 + 12.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundB = (2.0 + 12.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundC = (9.0 + 64.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: ccwerrboundC = (9.0 + 64.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundA = (7.0 + 56.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundA = (7.0 + 56.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundB = (3.0 + 28.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundB = (3.0 + 28.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundC = (26.0 + 288.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: o3derrboundC = (26.0 + 288.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundA = (10.0 + 96.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundA = (10.0 + 96.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundB = (4.0 + 48.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundB = (4.0 + 48.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundC = (44.0 + 576.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: iccerrboundC = (44.0 + 576.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundA = (16.0 + 224.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundA = (16.0 + 224.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundB = (5.0 + 72.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundB = (5.0 + 72.0 * epsilon_temp) * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundC = (71.0 + 1408.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm,ShewchuksDeterminant,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\ShewchuksDeterminant.cs,ShewchuksDeterminant,The following statement contains a magic number: isperrboundC = (71.0 + 1408.0 * epsilon_temp) * epsilon_temp * epsilon_temp;
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm.Distance,DiscreteHausdorffDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\Distance\DiscreteHausdorffDistanceTest.cs,TestLineSegments2,The following statement contains a magic number: RunTest("LINESTRING (0 0' 2 0)"' "LINESTRING (0 1' 1 2' 2 1)"' 2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm.Distance,DiscreteHausdorffDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\Distance\DiscreteHausdorffDistanceTest.cs,TestLinesShowingDiscretenessEffect,The following statement contains a magic number: RunTest("LINESTRING (130 0' 0 0' 0 150)"' "LINESTRING (10 10' 10 150' 130 10)"' 14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm.Distance,DiscreteHausdorffDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\Distance\DiscreteHausdorffDistanceTest.cs,TestLinesShowingDiscretenessEffect,The following statement contains a magic number: RunTest("LINESTRING (130 0' 0 0' 0 150)"' "LINESTRING (10 10' 10 150' 130 10)"' 0.5' 70.0);
Magic Number,NetTopologySuite.Tests.NUnit.Algorithm.Distance,DiscreteHausdorffDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Algorithm\Distance\DiscreteHausdorffDistanceTest.cs,TestLinesShowingDiscretenessEffect,The following statement contains a magic number: RunTest("LINESTRING (130 0' 0 0' 0 150)"' "LINESTRING (10 10' 10 150' 130 10)"' 0.5' 70.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,IsIndexValid,The following statement contains a magic number: switch (ordinate)              {                  case 0:                  case 1:                      return true;                    case 2 when ZIndex.HasValue:                      ordinate = ZIndex.Value;                      return true;                    case 2 when MIndex == 2:                      ordinate = 4; // just pick something way out there                      return false;                    case 3 when MIndex.HasValue:                      ordinate = MIndex.Value;                      return true;                    default:                      return false;              }
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,IsIndexValid,The following statement contains a magic number: switch (ordinate)              {                  case 0:                  case 1:                      return true;                    case 2 when ZIndex.HasValue:                      ordinate = ZIndex.Value;                      return true;                    case 2 when MIndex == 2:                      ordinate = 4; // just pick something way out there                      return false;                    case 3 when MIndex.HasValue:                      ordinate = MIndex.Value;                      return true;                    default:                      return false;              }
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,IsIndexValid,The following statement contains a magic number: switch (ordinate)              {                  case 0:                  case 1:                      return true;                    case 2 when ZIndex.HasValue:                      ordinate = ZIndex.Value;                      return true;                    case 2 when MIndex == 2:                      ordinate = 4; // just pick something way out there                      return false;                    case 3 when MIndex.HasValue:                      ordinate = MIndex.Value;                      return true;                    default:                      return false;              }
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,IsIndexValid,The following statement contains a magic number: switch (ordinate)              {                  case 0:                  case 1:                      return true;                    case 2 when ZIndex.HasValue:                      ordinate = ZIndex.Value;                      return true;                    case 2 when MIndex == 2:                      ordinate = 4; // just pick something way out there                      return false;                    case 3 when MIndex.HasValue:                      ordinate = MIndex.Value;                      return true;                    default:                      return false;              }
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,IsIndexValid,The following statement contains a magic number: switch (ordinate)              {                  case 0:                  case 1:                      return true;                    case 2 when ZIndex.HasValue:                      ordinate = ZIndex.Value;                      return true;                    case 2 when MIndex == 2:                      ordinate = 4; // just pick something way out there                      return false;                    case 3 when MIndex.HasValue:                      ordinate = MIndex.Value;                      return true;                    default:                      return false;              }
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: Assert.AreEqual(350.2' c.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: Assert.AreEqual(4566.8' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: T c = CreateCoordinate2D(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: T c = CreateCoordinate2D(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: Assert.AreEqual(350.2' c.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: Assert.AreEqual(4566.8' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: CheckGetter(2' Coordinate.NullOrdinate' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDefaultConstructor,The following statement contains a magic number: CheckGetter(2' Coordinate.NullOrdinate' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDefaultConstructor,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: Assert.AreEqual(350.2' c.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: Assert.AreEqual(4566.8' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: var orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: var orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: var orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(350.2' c.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(4566.8' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCopyMethod,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: T orig = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: Assert.AreEqual(c.X' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: Assert.AreEqual(c.Y' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: CheckGetter(2' 5266.3' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: CheckGetter(3' Coordinate.NullOrdinate' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: T c = CreateCoordinate2D(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: T c = CreateCoordinate2D(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: Assert.AreEqual(c[0]' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: Assert.AreEqual(c[1]' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: CheckIndexer(c' 2' double.NaN);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2D,The following statement contains a magic number: CheckIndexer(c' 3' double.NaN);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: T c = CreateCoordinate3D(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: Assert.AreEqual(c[0]' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: Assert.AreEqual(c[1]' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: CheckIndexer(c' 2' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: CheckIndexer(c' 2' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3D,The following statement contains a magic number: CheckIndexer(c' 3' double.NaN);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: T c = CreateCoordinate3DM(350.2' 4566.8' 5266.3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: T c = CreateCoordinate3DM(350.2' 4566.8' 5266.3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: T c = CreateCoordinate3DM(350.2' 4566.8' 5266.3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: T c = CreateCoordinate3DM(350.2' 4566.8' 5266.3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: Assert.AreEqual(c[0]' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: Assert.AreEqual(c[1]' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: CheckIndexer(c' 2' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: CheckIndexer(c' 2' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: CheckIndexer(c' 3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate3DM,The following statement contains a magic number: CheckIndexer(c' 3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: T c = CreateCoordinate2DM(350.2' 4566.8' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: T c = CreateCoordinate2DM(350.2' 4566.8' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: T c = CreateCoordinate2DM(350.2' 4566.8' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: Assert.AreEqual(c[0]' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: Assert.AreEqual(c[1]' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: CheckIndexer(c' 2' double.NaN);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: CheckIndexer(c' 3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestGetOrdinate2DM,The following statement contains a magic number: CheckIndexer(c' 3' 6226.4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[0] = 111;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[1] = 222;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[ZIndex.Value] = 333;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[MIndex.Value] = 444;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[0]' 111.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[1]' 222.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: CheckIndexer(c' 2' 333d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: CheckIndexer(c' 2' 333d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: CheckIndexer(c' 3' 444d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: CheckIndexer(c' 3' 444d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: T c1 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: T c1 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: T c2 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: T c2 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c1 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c1 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c2 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c2 = CreateCoordinate3D(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c3 = CreateCoordinate3D(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2D,The following statement contains a magic number: T c3 = CreateCoordinate3D(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T c = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T c = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T c = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T aBitOff = CreateCoordinate3D(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T aBitOff = CreateCoordinate3D(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: T aBitOff = CreateCoordinate3D(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: Assert.IsTrue(c.Equals2D(aBitOff' 0.2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T lowest = CreateCoordinate3D(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T lowest = CreateCoordinate3D(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T lowest = CreateCoordinate3D(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T highest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T highest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T highest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T equalToHighest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T equalToHighest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T equalToHighest = CreateCoordinate3D(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T higherStill = CreateCoordinate3D(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T higherStill = CreateCoordinate3D(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestCompareTo,The following statement contains a magic number: T higherStill = CreateCoordinate3D(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = CreateCoordinate3DM(100' 200' 50' 25).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = CreateCoordinate3DM(100' 200' 50' 25).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = CreateCoordinate3DM(100' 200' 50' 25).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = CreateCoordinate3DM(100' 200' 50' 25).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance,The following statement contains a magic number: T coord2 = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance,The following statement contains a magic number: T coord2 = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance,The following statement contains a magic number: T coord2 = CreateCoordinate3D(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance,The following statement contains a magic number: Assert.AreEqual(223.60679774997897' distance' 0.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance,The following statement contains a magic number: Assert.AreEqual(223.60679774997897' distance' 0.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.DoesNotThrow(() => c[Ordinate.Y] = 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(2d' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.DoesNotThrow(() => c[Ordinate.Z] = 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(3d' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.DoesNotThrow(() => c[Ordinate.M] = 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(4d' c.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateBaseTest<T>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(4d' c[MIndex.Value]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,CoordinateMTest,The following statement contains a magic number: MIndex = 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,CoordinateZTest,The following statement contains a magic number: ZIndex = 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(229.128784747792' distance' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(229.128784747792' distance' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c4 = new CoordinateZ(1' 2' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c4 = new CoordinateZ(1' 2' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: Assert.IsTrue(c.EqualInZ(withSameZ' 0.2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,CoordinateZMTest,The following statement contains a magic number: ZIndex = 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,CoordinateZMTest,The following statement contains a magic number: MIndex = 3;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(229.128784747792' distance' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(229.128784747792' distance' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c4 = new CoordinateZ(1' 2' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c4 = new CoordinateZ(1' 2' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateZMTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AdditionalCoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: Assert.IsTrue(c.EqualInZ(withSameZ' 0.2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestLength,The following statement contains a magic number: checkLength("LINESTRING (220 140' 180 280)"' 145.6021977);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestLength,The following statement contains a magic number: checkLength("LINESTRING (0 0' 100 100)"' 141.4213562373095);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestLength,The following statement contains a magic number: checkLength("POLYGON ((20 20' 40 20' 40 40' 20 40' 20 20))"' 80.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestLength,The following statement contains a magic number: checkLength("POLYGON ((20 20' 40 20' 40 40' 20 40' 20 20)' (25 35' 35 35' 35 25' 25 25' 25 35))"' 120.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestArea,The following statement contains a magic number: checkArea("POLYGON ((20 20' 40 20' 40 40' 20 40' 20 20))"' 400.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,AreaLengthTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\AreaLengthTest.cs,TestArea,The following statement contains a magic number: checkArea("POLYGON ((20 20' 40 20' 40 40' 20 40' 20 20)' (25 35' 35 35' 35 25' 25 25' 25 35))"' 300.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(1' 2)' new Coordinate(1' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: Assert.IsTrue(list.Equals2D(new Coordinate(2' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList1,The following statement contains a magic number: Assert.IsTrue(list.Equals2D(new Coordinate(2' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestPtNotInList2,The following statement contains a magic number: var list = CoordinateArrays.PointNotInList(                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2)' new Coordinate(3' 3) }                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestEnvelope1,The following statement contains a magic number: Assert.AreEqual(CoordinateArrays.Envelope(Coords1)' new Envelope(1' 3' 1' 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestEnvelope1,The following statement contains a magic number: Assert.AreEqual(CoordinateArrays.Envelope(Coords1)' new Envelope(1' 3' 1' 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelope1,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(1' 2' 1' 2))'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2) }                  ));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelope1,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(1' 2' 1' 2))'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2) }                  ));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelope1,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(1' 2' 1' 2))'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2) }                  ));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelope1,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(1' 2' 1' 2))'                  new[] { new Coordinate(1' 1)' new Coordinate(2' 2) }                  ));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelopeDisjoint,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(10' 20' 10' 20))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelopeDisjoint,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(10' 20' 10' 20))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelopeDisjoint,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(10' 20' 10' 20))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_envelopeDisjoint,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Coords1' new Envelope(10' 20' 10' 20))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_empty_envelope,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Empty' new Envelope(1' 2' 1' 2))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateArraysTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateArraysTest.cs,TestIntersection_empty_envelope,The following statement contains a magic number: Assert.IsTrue(CoordinateArrays.Equals(                  CoordinateArrays.Intersection(Empty' new Envelope(1' 2' 1' 2))' Empty)                  );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToLargerDim,The following statement contains a magic number: var cs2D = CreateTestSequence(csFactory' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToLargerDim,The following statement contains a magic number: var cs2D = CreateTestSequence(csFactory' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToLargerDim,The following statement contains a magic number: var cs3D = csFactory.Create(10' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToLargerDim,The following statement contains a magic number: var cs3D = csFactory.Create(10' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToSmallerDim,The following statement contains a magic number: var cs3D = CreateTestSequence(csFactory' 10' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToSmallerDim,The following statement contains a magic number: var cs3D = CreateTestSequence(csFactory' 10' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToSmallerDim,The following statement contains a magic number: var cs2D = csFactory.Create(10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopyToSmallerDim,The following statement contains a magic number: var cs2D = csFactory.Create(10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(CoordinateArraySequenceFactory.Instance' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(PackedCoordinateSequenceFactory.DoubleFactory' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(PackedCoordinateSequenceFactory.DoubleFactory' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(PackedCoordinateSequenceFactory.FloatFactory' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScrollRing,The following statement contains a magic number: DoTestScrollRing(PackedCoordinateSequenceFactory.FloatFactory' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(CoordinateArraySequenceFactory.Instance' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(PackedCoordinateSequenceFactory.DoubleFactory' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(PackedCoordinateSequenceFactory.DoubleFactory' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(PackedCoordinateSequenceFactory.FloatFactory' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestScroll,The following statement contains a magic number: DoTestScroll(PackedCoordinateSequenceFactory.FloatFactory' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIndexOf,The following statement contains a magic number: DoTestIndexOf(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIndexOf,The following statement contains a magic number: DoTestIndexOf(PackedCoordinateSequenceFactory.DoubleFactory' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIndexOf,The following statement contains a magic number: DoTestIndexOf(PackedCoordinateSequenceFactory.FloatFactory' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestMinCoordinateIndex,The following statement contains a magic number: DoTestMinCoordinateIndex(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestMinCoordinateIndex,The following statement contains a magic number: DoTestMinCoordinateIndex(PackedCoordinateSequenceFactory.DoubleFactory' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestMinCoordinateIndex,The following statement contains a magic number: DoTestMinCoordinateIndex(PackedCoordinateSequenceFactory.FloatFactory' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIsRing,The following statement contains a magic number: DoTestIsRing(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIsRing,The following statement contains a magic number: DoTestIsRing(PackedCoordinateSequenceFactory.DoubleFactory' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestIsRing,The following statement contains a magic number: DoTestIsRing(PackedCoordinateSequenceFactory.FloatFactory' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopy,The following statement contains a magic number: DoTestCopy(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopy,The following statement contains a magic number: DoTestCopy(PackedCoordinateSequenceFactory.DoubleFactory' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestCopy,The following statement contains a magic number: DoTestCopy(PackedCoordinateSequenceFactory.FloatFactory' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestReverse,The following statement contains a magic number: DoTestReverse(CoordinateArraySequenceFactory.Instance' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestReverse,The following statement contains a magic number: DoTestReverse(PackedCoordinateSequenceFactory.DoubleFactory' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,TestReverse,The following statement contains a magic number: DoTestReverse(PackedCoordinateSequenceFactory.FloatFactory' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateTestSequence,The following statement contains a magic number: cs.SetOrdinate(i' d' i*Math.Pow(10' d));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestCopy,The following statement contains a magic number: sequence.Count <= 7
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestCopy,The following statement contains a magic number: var partialCopy = factory.Create(sequence.Count - 5' dimension);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestCopy,The following statement contains a magic number: CoordinateSequences.Copy(sequence' 2' partialCopy' 0' partialCopy.Count);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestCopy,The following statement contains a magic number: CheckCoordinateAt(sequence' 2 + i' partialCopy' i' dimension);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var ring = CreateCircle(factory' dimension' new Coordinate()' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var noRing = CreateCircularString(factory' dimension' new Coordinate()' 5'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var noRing = CreateCircularString(factory' dimension' new Coordinate()' 5'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var noRing = CreateCircularString(factory' dimension' new Coordinate()' 5'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var incomplete2 = CreateAlmostRing(factory' dimension' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var incomplete3 = CreateAlmostRing(factory' dimension' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestIsRing,The following statement contains a magic number: var incomplete4a = CreateAlmostRing(factory' dimension' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: sequence.Count <= 6
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: int minIndex = sequence.Count / 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: sequence.SetOrdinate(minIndex' 0' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: sequence.SetOrdinate(minIndex' 1' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: Assert.AreEqual(minIndex' CoordinateSequences.MinCoordinateIndex(sequence' 2' sequence.Count - 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestMinCoordinateIndex,The following statement contains a magic number: Assert.AreEqual(minIndex' CoordinateSequences.MinCoordinateIndex(sequence' 2' sequence.Count - 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: var sequence = CreateCircularString(factory' dimension' new Coordinate(20' 20)' 7d'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: var sequence = CreateCircularString(factory' dimension' new Coordinate(20' 20)' 7d'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: var sequence = CreateCircularString(factory' dimension' new Coordinate(20' 20)' 7d'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: var sequence = CreateCircularString(factory' dimension' new Coordinate(20' 20)' 7d'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: var sequence = CreateCircularString(factory' dimension' new Coordinate(20' 20)' 7d'                      0.1' 22);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: CoordinateSequences.Scroll(scrolled' 12);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScroll,The following statement contains a magic number: int io = 12;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScrollRing,The following statement contains a magic number: var sequence = CreateCircle(factory' dimension' new Coordinate(10' 10)' 9d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScrollRing,The following statement contains a magic number: var sequence = CreateCircle(factory' dimension' new Coordinate(10' 10)' 9d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScrollRing,The following statement contains a magic number: var sequence = CreateCircle(factory' dimension' new Coordinate(10' 10)' 9d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScrollRing,The following statement contains a magic number: CoordinateSequences.Scroll(scrolled' 12);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,DoTestScrollRing,The following statement contains a magic number: int io = 12;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: num = 4;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: num > 4
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(0' Ordinate.X' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(0' Ordinate.Y' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(1' Ordinate.X' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(1' Ordinate.Y' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: num == 2
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(2' Ordinate.X' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(2' Ordinate.X' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(2' Ordinate.Y' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(2' Ordinate.Y' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: num == 3
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(3' Ordinate.X' 10.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(3' Ordinate.X' 10.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(3' Ordinate.Y'  9.99999);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateAlmostRing,The following statement contains a magic number: sequence.SetOrdinate(3' Ordinate.Y'  9.99999);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,FillNonPlanarDimensions,The following statement contains a magic number: seq.Dimension < 3
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,FillNonPlanarDimensions,The following statement contains a magic number: seq.SetOrdinate(i' j' i * Math.Pow(10' j - 1));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircle,The following statement contains a magic number: var res = CreateCircularString(factory' dimension' center' radius' 0d' 49);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircle,The following statement contains a magic number: res.SetOrdinate(48' (Ordinate)i' res.GetOrdinate(0' (Ordinate)i));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircularString,The following statement contains a magic number: const int numSegmentsCircle = 48;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircularString,The following statement contains a magic number: const double angleCircle = 2 * Math.PI;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircularString,The following statement contains a magic number: var pm = new PrecisionModel(100);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateSequencesTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateSequencesTest.cs,CreateCircularString,The following statement contains a magic number: sequence.SetOrdinate(i' j' Math.Pow(10' j - 1) * i);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.X' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.Y' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.Z' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: Assert.AreEqual(c.X' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestConstructor2D,The following statement contains a magic number: Assert.AreEqual(c.Y' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.X' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.Y' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCopyConstructor3D,The following statement contains a magic number: Assert.AreEqual(c.Z' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: var orig = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: Assert.AreEqual(c.X' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: Assert.AreEqual(c.Y' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetCoordinate,The following statement contains a magic number: Assert.AreEqual(c.Z' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: var c = new CoordinateZ(350.2' 4566.8' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.X]' 350.2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.Y]' 4566.8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestGetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.Z]' 5266.3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[Ordinate.X] = 111;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[Ordinate.Y] = 222;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: c[Ordinate.Z] = 333;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.X]' 111.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.Y]' 222.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSetOrdinate,The following statement contains a magic number: Assert.AreEqual(c[Ordinate.Z]' 333.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c1 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c2 = new CoordinateZ(1' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals3D,The following statement contains a magic number: var c3 = new CoordinateZ(1' 22' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var aBitOff = new CoordinateZ(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var aBitOff = new CoordinateZ(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: var aBitOff = new CoordinateZ(100.1' 200.1' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEquals2DWithinTolerance,The following statement contains a magic number: Assert.IsTrue(c.Equals2D(aBitOff' 0.2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: var withSameZ = new CoordinateZ(100.1' 200.1' 50.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestEqualsInZ,The following statement contains a magic number: Assert.IsTrue(c.EqualInZ(withSameZ' 0.2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var lowest = new CoordinateZ(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var lowest = new CoordinateZ(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var lowest = new CoordinateZ(10.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var highest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var highest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var highest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var equalToHighest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var equalToHighest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var equalToHighest = new CoordinateZ(20.0' 100.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var higherStill = new CoordinateZ(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var higherStill = new CoordinateZ(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCompareTo,The following statement contains a magic number: var higherStill = new CoordinateZ(20.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = new CoordinateZ(100' 200' 50).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = new CoordinateZ(100' 200' 50).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestToString,The following statement contains a magic number: string actualResult = new CoordinateZ(100' 200' 50).ToString();
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestClone,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestClone,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestClone,The following statement contains a magic number: var c = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance,The following statement contains a magic number: Assert.AreEqual(distance' 223.60679774997897' 0.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance,The following statement contains a magic number: Assert.AreEqual(distance' 223.60679774997897' 0.00001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance3D,The following statement contains a magic number: var coord2 = new CoordinateZ(100.0' 200.0' 50.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(distance' 229.128784747792' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestDistance3D,The following statement contains a magic number: Assert.AreEqual(distance' 229.128784747792' 0.000001);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.DoesNotThrow(() => c[Ordinate.Y] = 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(2d' c.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.DoesNotThrow(() => c[Ordinate.Z] = 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.AreEqual(3d' c.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestSettingOrdinateValuesViaIndexer,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => c[Ordinate.M] = 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,CoordinateTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\CoordinateTest.cs,TestCoordinateXYZM,The following statement contains a magic number: Assert.That(xyzm.Z' Is.EqualTo(coord.Z).Within(0.000001));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(0' e1.Width' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(0' e1.Height' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(200' 202);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(200' 202);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(150' 151);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: e1.ExpandToInclude(150' 151);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(200' e1.MaxX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(200' e1.MaxX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(202' e1.MaxY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(202' e1.MaxY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.MinX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.MinX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.MinY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.MinY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(e1.Contains(120' 120));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(e1.Contains(120' 120));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(e1.Contains(120' 101));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(e1.Contains(120' 101));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(!e1.Contains(120' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.IsTrue(!e1.Contains(120' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.Height' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.Height' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.Width' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.Width' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e2 = new Envelope(499' 500' 500' 501);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e2 = new Envelope(499' 500' 500' 501);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e2 = new Envelope(499' 500' 500' 501);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e2 = new Envelope(499' 500' 500' 501);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(500' e1.MaxX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(500' e1.MaxX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(501' e1.MaxY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(501' e1.MaxY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.MinX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(100' e1.MinX' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.MinY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: Assert.AreEqual(101' e1.MinY' 1E-3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e3 = new Envelope(300' 700' 300' 700);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e3 = new Envelope(300' 700' 300' 700);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e3 = new Envelope(300' 700' 300' 700);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e3 = new Envelope(300' 700' 300' 700);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e4 = new Envelope(300' 301' 300' 301);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e4 = new Envelope(300' 301' 300' 301);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e4 = new Envelope(300' 301' 300' 301);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEverything,The following statement contains a magic number: var e4 = new Envelope(300' 301' 300' 301);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 2' 2' 3' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersects,The following statement contains a magic number: CheckIntersectsPermuted(1' 1' 2' 2' 3' 3' 4' 4' false);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Intersects(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestIntersectsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Intersects(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(-5' 5' -5' 5).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope().Contains(new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestContainsEmpty,The following statement contains a magic number: Assert.IsTrue(!new Envelope(100' 101' 100' 101).Contains(new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope(-5'                      5' -5' 5)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(-5' 5' -5' 5)' ExpandToInclude(new Envelope()'                      new Envelope(-5' 5' -5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope()' new Envelope(100' 101' 100' 101)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestExpandToIncludeEmpty,The following statement contains a magic number: Assert.AreEqual(new Envelope(100' 101' 100' 101)' ExpandToInclude(                      new Envelope(100' 101' 100' 101)' new Envelope()));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEmpty,The following statement contains a magic number: var e = new Envelope(100' 101' 100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEmpty,The following statement contains a magic number: var e = new Envelope(100' 101' 100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEmpty,The following statement contains a magic number: var e = new Envelope(100' 101' 100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEmpty,The following statement contains a magic number: var e = new Envelope(100' 101' 100' 101);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: var g = geometryFactory.CreatePoint(new Coordinate(5' 6))                      .Envelope;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: var g = geometryFactory.CreatePoint(new Coordinate(5' 6))                      .Envelope;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(5' p.X' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(5' p.X' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(6' p.Y' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(6' p.Y' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(5' poly.ExteriorRing.NumPoints);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' poly.ExteriorRing.GetCoordinateN(                      0));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' poly.ExteriorRing.GetCoordinateN(                      0));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 40)' poly.ExteriorRing.GetCoordinateN(                      1));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 40)' poly.ExteriorRing.GetCoordinateN(                      1));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 40)' poly.ExteriorRing.GetCoordinateN(                      2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 40)' poly.ExteriorRing.GetCoordinateN(                      2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 40)' poly.ExteriorRing.GetCoordinateN(                      2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 10)' poly.ExteriorRing.GetCoordinateN(                      3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 10)' poly.ExteriorRing.GetCoordinateN(                      3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 10)' poly.ExteriorRing.GetCoordinateN(                      3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' poly.ExteriorRing.GetCoordinateN(                      4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' poly.ExteriorRing.GetCoordinateN(                      4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestAsGeometry,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' poly.ExteriorRing.GetCoordinateN(                      4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestSetToNull,The following statement contains a magic number: e1.ExpandToInclude(5' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestSetToNull,The following statement contains a magic number: e1.ExpandToInclude(5' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e2 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e2 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e2 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e3 = new Envelope(1' 2' 3' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e3 = new Envelope(1' 2' 3' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals,The following statement contains a magic number: var e3 = new Envelope(1' 2' 3' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(new Envelope(1' 2' 1' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(new Envelope(1' 2' 1' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(new Envelope(1' 2' 1' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(new Envelope(1' 2' 1' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(!new Envelope(1' 2' 1.5' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(!new Envelope(1' 2' 1.5' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(!new Envelope(1' 2' 1.5' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(!new Envelope(1' 2' 1.5' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestEquals2,The following statement contains a magic number: Assert.IsTrue(!new Envelope(1' 2' 1.5' 2).Equals(new Envelope(1' 2' 1' 2)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(1' e2.MinX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(2' e2.MaxX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(2' e2.MaxX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(3' e2.MinY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(3' e2.MinY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(4' e2.MaxY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.AreEqual(4' e2.MaxY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: var e1 = new Envelope(1' 2' 3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(1' e2.MinX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(2' e2.MaxX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(2' e2.MaxX' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(3' e2.MinY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(3' e2.MinY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(4' e2.MaxY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCopyMethod,The following statement contains a magic number: Assert.AreEqual(4' e2.MaxY' 1E-5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(0' new Envelope(1' 2' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(0' new Envelope(1' 2' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(0' new Envelope(1' 2' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(0' new Envelope(1' 2' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 2)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(-1' new Envelope(1' 2' 1' 2)' new Envelope(2' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(-1' new Envelope(1' 2' 1' 2)' new Envelope(2' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(-1' new Envelope(1' 2' 1' 2)' new Envelope(2' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(-1' new Envelope(1' 2' 1' 2)' new Envelope(2' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(-1' new Envelope(1' 2' 1' 2)' new Envelope(2' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(1' 2' 1' 3)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(1' 2' 1' 3)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(1' 2' 1' 3)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(1' 2' 1' 3)' new Envelope(1' 2' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 3)' new Envelope(1' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 3)' new Envelope(1' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 3)' new Envelope(1' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 3)' new Envelope(1' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestCompareTo,The following statement contains a magic number: CheckCompareTo(1' new Envelope(2' 3' 1' 3)' new Envelope(1' 3' 1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10' 10))' "Env[10 : 10' 10 : 10]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10' 10))' "Env[10 : 10' 10 : 10]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 10.1))' "Env[10.1 : 10.1' 10.1 : 10.1]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 10.1))' "Env[10.1 : 10.1' 10.1 : 10.1]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1))' "Env[10.1 : 19.9' 10.1 : 19.9]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1))' "Env[10.1 : 19.9' 10.1 : 19.9]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1))' "Env[10.1 : 19.9' 10.1 : 19.9]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestToString,The following statement contains a magic number: TestToString(new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1))' "Env[10.1 : 19.9' 10.1 : 19.9]");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10 : 10' 10 : 10]"' new Envelope(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10 : 10' 10 : 10]"' new Envelope(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 10.1' 10.1 : 10.1]"' new Envelope(new Coordinate(10.1' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 10.1' 10.1 : 10.1]"' new Envelope(new Coordinate(10.1' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 19.9' 10.1 : 19.9]"' new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 19.9' 10.1 : 19.9]"' new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 19.9' 10.1 : 19.9]"' new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,EnvelopeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\EnvelopeTest.cs,TestParse,The following statement contains a magic number: TestParse("Env[10.1 : 19.9' 10.1 : 19.9]"' new Envelope(new Coordinate(10.1' 19.9)' new Coordinate(19.9' 10.1)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,GeometryCollectionImplTest,The following statement contains a magic number: precisionModel = new PrecisionModel(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(4' g.NumPoints);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(4' coordinates.Length);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' coordinates[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' coordinates[0]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[3]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetLength,The following statement contains a magic number: Assert.AreEqual(112' g.Length' 1E-15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCollectionImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCollectionImplTest.cs,TestGetLength,The following statement contains a magic number: Assert.AreEqual(112' g.Length' 1E-15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,CheckCopy,The following statement contains a magic number: int SRID = 123;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,TestCopyDoesNotChangeFactory,The following statement contains a magic number: var gf = new GeometryFactory(new PrecisionModel()' 4325);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,TestCopyDoesNotChangeFactory,The following statement contains a magic number: var pt1 = gf.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,TestCopyDoesNotChangeFactory,The following statement contains a magic number: var pt1 = gf.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,TestCopyDoesNotChangeFactory,The following statement contains a magic number: pt2.SRID = 4326;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryCopyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryCopyTest.cs,TestCopyDoesNotChangeFactory,The following statement contains a magic number: pt1.SRID = 4326;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationSetting,The following statement contains a magic number: TestShellRingOrientationSetter(gf' (LinearRingOrientation)(-2)' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationSetting,The following statement contains a magic number: TestShellRingOrientationSetter(gf' (LinearRingOrientation)2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationSetting,The following statement contains a magic number: TestShellRingOrientationSetter(gf' LinearRingOrientation.RightHandRule' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationSetting,The following statement contains a magic number: TestShellRingOrientationSetter(gf' LinearRingOrientation.DontCare' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestEnvelopeToGeometry,The following statement contains a magic number: var env = new Envelope(-10' 10' -8' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestEnvelopeToGeometry,The following statement contains a magic number: var env = new Envelope(-10' 10' -8' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestEnvelopeToGeometry,The following statement contains a magic number: var env = new Envelope(-10' 10' -8' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestEnvelopeToGeometry,The following statement contains a magic number: var env = new Envelope(-10' 10' -8' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationEnforcement,The following statement contains a magic number: var origHolesSequences = new[]              {                  CreateRing(cf' 1' ringOrientation)'                  CreateRing(cf' 2' ringOrientation)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationEnforcement,The following statement contains a magic number: var b = c.Buffer(10d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationEnforcement,The following statement contains a magic number: var s = c.Buffer(6d);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(0' 0)' new Coordinate(10' 0)'                      new Coordinate(10' 10)' new Coordinate(0' 10)'                      new Coordinate(0' 0)};
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(0' 0)' new Coordinate(10' 0)'                      new Coordinate(10' 10)' new Coordinate(0' 10)'                      new Coordinate(0' 0)};
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(0' 0)' new Coordinate(10' 0)'                      new Coordinate(10' 10)' new Coordinate(0' 10)'                      new Coordinate(0' 0)};
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(0' 0)' new Coordinate(10' 0)'                      new Coordinate(10' 10)' new Coordinate(0' 10)'                      new Coordinate(0' 0)};
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(2' 1)' new Coordinate(9' 1)'                      new Coordinate(9' 8)' new Coordinate(2' 1)                  };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(2' 1)' new Coordinate(9' 1)'                      new Coordinate(9' 8)' new Coordinate(2' 1)                  };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(2' 1)' new Coordinate(9' 1)'                      new Coordinate(9' 8)' new Coordinate(2' 1)                  };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(2' 1)' new Coordinate(9' 1)'                      new Coordinate(9' 8)' new Coordinate(2' 1)                  };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                      new Coordinate(2' 1)' new Coordinate(9' 1)'                      new Coordinate(9' 8)' new Coordinate(2' 1)                  };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                  new Coordinate(1' 2)' new Coordinate(8' 9)'                  new Coordinate(1' 9)' new Coordinate(1' 2)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                  new Coordinate(1' 2)' new Coordinate(8' 9)'                  new Coordinate(1' 9)' new Coordinate(1' 2)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                  new Coordinate(1' 2)' new Coordinate(8' 9)'                  new Coordinate(1' 9)' new Coordinate(1' 2)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                  new Coordinate(1' 2)' new Coordinate(8' 9)'                  new Coordinate(1' 9)' new Coordinate(1' 2)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,CreateCcwRing,The following statement contains a magic number: return new Coordinate[]{                  new Coordinate(1' 2)' new Coordinate(8' 9)'                  new Coordinate(1' 9)' new Coordinate(1' 2)              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestDeepCopy,The following statement contains a magic number: g.CoordinateSequence.SetOrdinate(0' 0' 99);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCopyGeometryWithNonDefaultDimension,The following statement contains a magic number: var mpSeq = gf.CoordinateSequenceFactory.Create(1' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCopyGeometryWithNonDefaultDimension,The following statement contains a magic number: mpSeq.SetOrdinate(0' Ordinate.X' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCopyGeometryWithNonDefaultDimension,The following statement contains a magic number: mpSeq.SetOrdinate(0' Ordinate.Y' -2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCopyGeometryWithNonDefaultDimension,The following statement contains a magic number: Assert.AreEqual(2' gSeq.Dimension);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryTest.cs,TestCopyGeometryWithNonDefaultDimension,The following statement contains a magic number: Assert.AreEqual(2' g2Seq.Dimension);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(0' 50' 0' 50)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(0' 50' 0' 50)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(0' 50' 0' 50)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(0' 50' 0' 50)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(1' 51' 1' 51)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestInvalidateEnvelope,The following statement contains a magic number: Assert.AreEqual(new Envelope(1' 51' 1' 51)' g.EnvelopeInternal);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsInHashBasedCollection,The following statement contains a magic number: Assert.AreEqual(3' hashSet1.Count);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsInHashBasedCollection,The following statement contains a magic number: Assert.AreEqual(3' hashSet2.Count);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var x = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var x = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var x = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLinearRings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLinearRing(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)' new Coordinate(0' 0)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var x = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var x = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var x = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 100)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForLineStrings,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreateLineString(new Coordinate[] {                          new Coordinate(0' 0)' new Coordinate(100' 0)'                          new Coordinate(100' 555)                      });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var x = geometryFactory.CreatePoint(new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var x = geometryFactory.CreatePoint(new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreatePoint(new Coordinate(                          100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var somethingExactlyEqual = geometryFactory.CreatePoint(new Coordinate(                          100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreatePoint(new Coordinate(                          999' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryImplTest.cs,TestEqualsExactForPoints,The following statement contains a magic number: var somethingNotEqualButSameClass = geometryFactory.CreatePoint(new Coordinate(                          999' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateBox,The following statement contains a magic number: var pts = new Coordinate[4 * nSide + 1];
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateCircle,The following statement contains a magic number: double len = size / 2.0;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateCircle,The following statement contains a magic number: double ang = i * (2 * Math.PI / nPts);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: double armBaseLen = size / 2 - armLen;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: armBaseLen = 0.5;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: double angInc = 2 * Math.PI / nArms;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: nArmPt = 5;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: nArmPt < 5
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: double ang = iArmPt * (2 * Math.PI / nArmPt);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,GeometryTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryTestFactory.cs,CreateSineStar,The following statement contains a magic number: double len = armLen * (1 - Math.Cos(ang) / 2) + armBaseLen;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(5' 10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(5' 10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(5' 10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(5' 10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(5' 10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsBasic,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(5' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(7' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(7' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(10).Overlaps(Interval.Create(11' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(!Interval.Create(11' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10).Overlaps(Interval.Create(10' 12)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestIntersectsZeroWidthInterval,The following statement contains a magic number: Assert.IsTrue(Interval.Create(10' 12).Overlaps(Interval.Create(10)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(3' 4)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(3' 4)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(3' 4)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(3' 4)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(Interval.Create(3' 4))));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(Interval.Create(3' 4))));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(Interval.Create(3' 4))));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCopyConstructor,The following statement contains a magic number: Assert.IsTrue(IntervalsAreEqual(Interval.Create(3' 4)' Interval.Create(Interval.Create(3' 4))));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCentre,The following statement contains a magic number: Assert.AreEqual(6.5' Interval.Create(4' 9).Centre' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCentre,The following statement contains a magic number: Assert.AreEqual(6.5' Interval.Create(4' 9).Centre' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCentre,The following statement contains a magic number: Assert.AreEqual(6.5' Interval.Create(4' 9).Centre' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestCentre,The following statement contains a magic number: Assert.AreEqual(6.5' Interval.Create(4' 9).Centre' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: var expected = Interval.Create(3' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: var expected = Interval.Create(3' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: var actual = Interval.Create(3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: var actual = Interval.Create(3' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(7' 8));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(7' 8));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: expected = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: expected = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(4' 5));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(4' 5));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: expected = Interval.Create(3' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: expected = Interval.Create(3' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = Interval.Create(3' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(4' 8));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,IntervalTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\IntervalTest.cs,TestExpandToInclude,The following statement contains a magic number: actual = actual.ExpandedByInterval(Interval.Create(4' 8));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: var seg = new LineSegment(10' 0' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: var seg = new LineSegment(10' 0' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(seg.ProjectionFactor(new Coordinate(11' 0))));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: var seg2 = new LineSegment(10' 0' 20' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: var seg2 = new LineSegment(10' 0' 20' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: Assert.IsTrue(seg2.ProjectionFactor(new Coordinate(11' 0)) == 0.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestProjectionFactor,The following statement contains a magic number: Assert.IsTrue(seg2.ProjectionFactor(new Coordinate(11' 0)) == 0.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.0' ROOT2' -1' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.0' ROOT2' -1' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.0' -ROOT2' 1' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.0' -ROOT2' 1' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 1.0' ROOT2' 9' 11);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 1.0' ROOT2' 9' 11);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 1.0' ROOT2' 9' 11);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 1.0' ROOT2' 9' 11);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' ROOT2' 4' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' ROOT2' 4' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' ROOT2' 4' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' ROOT2' 4' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' ROOT2' 4' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 0.5' -ROOT2' 6' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' ROOT2' 19' 21);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' ROOT2' 19' 21);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' ROOT2' 19' 21);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' ROOT2' 19' 21);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' ROOT2' 19' 21);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' -ROOT2' 21' 19);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' -ROOT2' 21' 19);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' -ROOT2' 21' 19);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' -ROOT2' 21' 19);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' -ROOT2' 21' 19);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' 2.0' 5 * ROOT2' 15' 25);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOffset,The following statement contains a magic number: CheckOffset(0' 0' 10' 10' -2.0' 5 * ROOT2' -25' -15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,CheckOffset,The following statement contains a magic number: Assert.IsTrue(EqualsTolerance(new Coordinate(expectedX' expectedY)' p' 0.000001));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: var seg = new LineSegment(0' 0' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: var seg = new LineSegment(0' 0' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 10' 11' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 10' 11' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 10' 9' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 10' 9' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 11' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 11' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 11.0000001' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 11.0000001' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 10.9999999' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' 11' 10.9999999' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' -2' -1.9999999' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' -2' -1.9999999' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' -2' -2.0000001' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexCoordinate,The following statement contains a magic number: CheckOrientationIndex(seg' -2' -2.0000001' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: var seg = new LineSegment(100' 100' 110' 110);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: var seg = new LineSegment(100' 100' 110' 110);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: var seg = new LineSegment(100' 100' 110' 110);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: var seg = new LineSegment(100' 100' 110' 110);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 101' 105' 106' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 101' 105' 106' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 101' 105' 106' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 101' 105' 106' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 99' 105' 96' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 99' 105' 96' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 99' 105' 96' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 100' 99' 105' 96' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 200' 200' 210' 210' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 200' 200' 210' 210' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 200' 200' 210' 210' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineSegmentTest.cs,TestOrientationIndexSegment,The following statement contains a magic number: CheckOrientationIndex(seg' 200' 200' 210' 210' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,LineStringImplTest,The following statement contains a magic number: precisionModel = new PrecisionModel(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestIsCoordinate,The following statement contains a magic number: Assert.IsTrue(!l.IsCoordinate(new Coordinate(5' 0)));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestUnclosedLinearRing,The following statement contains a magic number: geometryFactory.CreateLinearRing(new Coordinate[]{                  new Coordinate(0' 0)' new Coordinate(1' 0)' new Coordinate(1' 1)' new Coordinate(2' 1)});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(5.555' 6.666)' coordinates[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestGetCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(5.555' 6.666)' coordinates[1]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestEquals8,The following statement contains a magic number: var reader = new WKTReader(new GeometryFactory(new PrecisionModel(1000)' 0));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestLinearRingConstructor,The following statement contains a magic number: var ring =                    new GeometryFactory().CreateLinearRing(                      new Coordinate[] {                      new Coordinate(0' 0)'                      new Coordinate(10' 10)'                      new Coordinate(0' 0)});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,LineStringImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\LineStringImplTest.cs,TestLinearRingConstructor,The following statement contains a magic number: var ring =                    new GeometryFactory().CreateLinearRing(                      new Coordinate[] {                      new Coordinate(0' 0)'                      new Coordinate(10' 10)'                      new Coordinate(0' 0)});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,MultiPointImplTest,The following statement contains a magic number: precisionModel = new PrecisionModel(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetGeometryN,The following statement contains a magic number: Assert.AreEqual(3.333' externalCoordinate.X' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetGeometryN,The following statement contains a magic number: Assert.AreEqual(3.333' externalCoordinate.X' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetGeometryN,The following statement contains a magic number: Assert.AreEqual(4.444' externalCoordinate.Y' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetGeometryN,The following statement contains a magic number: Assert.AreEqual(4.444' externalCoordinate.Y' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(1.111' e.MinX' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(1.111' e.MinX' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(3.333' e.MaxX' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(3.333' e.MaxX' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(2.222' e.MinY' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(2.222' e.MinY' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(4.444' e.MaxY' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,MultiPointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\MultiPointImplTest.cs,TestGetEnvelope,The following statement contains a magic number: Assert.AreEqual(4.444' e.MaxY' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizePoint,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 30)' point.Coordinate);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,NormalizeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\NormalizeTest.cs,TestNormalizePoint,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 30)' point.Coordinate);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PointImplTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PointImplTest.cs,PointImplTest,The following statement contains a magic number: precisionModel = new PrecisionModel(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestParameterlessConstructor,The following statement contains a magic number: Assert.AreEqual(0' p.Scale' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestGetMaximumSignificantDigits,The following statement contains a magic number: Assert.AreEqual(16' new PrecisionModel(PrecisionModels.Floating).MaximumSignificantDigits);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestGetMaximumSignificantDigits,The following statement contains a magic number: Assert.AreEqual(6' new PrecisionModel(PrecisionModels.FloatingSingle).MaximumSignificantDigits);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestGetMaximumSignificantDigits,The following statement contains a magic number: Assert.AreEqual(4' new PrecisionModel(1000).MaximumSignificantDigits);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestGetMaximumSignificantDigits,The following statement contains a magic number: Assert.AreEqual(4' new PrecisionModel(1000).MaximumSignificantDigits);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: var pm10 = new PrecisionModel(0.1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1200.4' 1240.4' 1200' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1200.4' 1240.4' 1200' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1200.4' 1240.4' 1200' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1200.4' 1240.4' 1200' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1209.4' 1240.4' 1210' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1209.4' 1240.4' 1210' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1209.4' 1240.4' 1210' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePrecise,The following statement contains a magic number: PreciseCoordinateTester(pm10' 1209.4' 1240.4' 1210' 1240);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -10' -10' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -10' -10' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -10' -10' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -10' -10' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.9' -9.9' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.9' -9.9' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.9' -9.9' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.9' -9.9' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.5' -9.5' -9' -9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.5' -9.5' -9' -9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.5' -9.5' -9' -9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,PrecisionModelTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\PrecisionModelTest.cs,TestMakePreciseNegative,The following statement contains a magic number: PreciseCoordinateTester(pm1' -9.5' -9.5' -9' -9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,RectanglePredicateSyntheticTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\RectanglePredicateSyntheticTest.cs,TestDenseLines,The following statement contains a magic number: var denseLine = (LineString)densifier.Densify(testGeomSize / 400);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,RectanglePredicateSyntheticTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\RectanglePredicateSyntheticTest.cs,getTestGeometries,The following statement contains a magic number: var testGeoms = CreateTestGeometries(testEnv' 5' testGeomSize);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,RectanglePredicateSyntheticTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\RectanglePredicateSyntheticTest.cs,CreateTestGeometries,The following statement contains a magic number: testGeoms.Add(CreateAngle(baseCoord' size' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,RectanglePredicateSyntheticTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\RectanglePredicateSyntheticTest.cs,CreateTestGeometries,The following statement contains a magic number: testGeoms.Add(CreateAngle(baseCoord' size' 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.5' 1.5)' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.5' 1.5)' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.5' 1.5)' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.2' 1.2)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.2' 1.2)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(1.2' 1.2)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestInterpolateZ,The following statement contains a magic number: CheckInterpolateZ("LINESTRING(1 1 0' 2 1 0' 1 2 10)"' new Coordinate(0' 0)' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,CheckInterpolateZ,The following statement contains a magic number: var t = new Triangle(pt[0]' pt[1]' pt[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestArea3D,The following statement contains a magic number: CheckArea3D("POLYGON((0 0 10' 100 0 110' 100 100 110' 0 0 10))"'                          7071.067811865475);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestArea3D,The following statement contains a magic number: CheckArea3D("POLYGON((0 0 10' 100 0 10' 50 100 110' 0 0 10))"'                          7071.067811865475);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,CheckArea3D,The following statement contains a magic number: var t = new Triangle(pt[0]' pt[1]' pt[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestArea,The following statement contains a magic number: CheckArea("POLYGON((10 10' 20 20' 20 10' 10 10))"' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,TestArea,The following statement contains a magic number: CheckArea("POLYGON((10 10' 20 10' 20 20' 10 10))"' -50);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,CheckArea,The following statement contains a magic number: var t = new Triangle(pt[0]' pt[1]' pt[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries,TriangleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\TriangleTest.cs,CheckAcute,The following statement contains a magic number: var t = new Triangle(pt[0]' pt[1]' pt[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(cs.HasZ' Is.EqualTo(spatial > 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: var random = new Random(8675309);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordCopy[dim] += 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordCopyReversed[dim] += 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordCopyReversed2[dim] += 2;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordToFill[dim] += 3;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordToFillReversed[dim] += 3;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: coordToFillReversed2[dim] += 3;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordCopy[dim]' Is.EqualTo(coordinateTemplate[dim] + 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordCopyReversed[dim]' Is.EqualTo(coordinateTemplate[dim] + 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordCopyReversed2[dim]' Is.EqualTo(coordinateTemplate[dim] + 2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordToFill[dim]' Is.EqualTo(coordinateTemplate[dim] + 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordToFillReversed[dim]' Is.EqualTo(coordinateTemplate[dim] + 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following statement contains a magic number: Assert.That(coordToFillReversed2[dim]' Is.EqualTo(coordinateTemplate[dim] + 3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestClone,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(                  new[] { new Coordinate(1' 2)' new Coordinate(3' 4) });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestClone,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(                  new[] { new Coordinate(1' 2)' new Coordinate(3' 4) });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestClone,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(                  new[] { new Coordinate(1' 2)' new Coordinate(3' 4) });
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension2,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension2,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension2,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.Y' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension2,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.X' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension2,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.Y' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.Y' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.Z' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.X' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.Y' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension3,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.Z' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: var s1 = CoordinateArraySequenceFactory.Instance.Create(2' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.Y' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.Z' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(0' Ordinate.M' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.X' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.Y' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.Z' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestCloneDimension4,The following statement contains a magic number: s1.SetOrdinate(1' Ordinate.M' 200);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestLengthWithXYM,The following statement contains a magic number: CoordinateM[] coords =              {                  new CoordinateM(1' 1' 1)'                  new CoordinateM(2' 1' 2)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BasicCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BasicCoordinateSequenceTest.cs,TestLengthWithXYM,The following statement contains a magic number: CoordinateM[] coords =              {                  new CoordinateM(1' 1' 1)'                  new CoordinateM(2' 1' 2)'              };
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: var sequence = factory.Create(10' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: var sequence = factory.Create(10' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 4' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 4' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 4' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 4' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 4' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 5' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 5' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: sequence = factory.Create(10' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestFactoryLimits,The following statement contains a magic number: Assert.That(sequence.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: var seq = factory.Create(5' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: var seq = factory.Create(5' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(2));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.X' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Y' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(array[4]' Is.EqualTo(coord));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.X' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Y' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Z' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(array[4]' Is.EqualTo(coord));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 3' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 3' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.X' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Y' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.M' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(array[4]' Is.EqualTo(coord));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.X' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Y' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.Z' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(coord.M' Is.EqualTo(4));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(array[4]' Is.EqualTo(coord));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: seq = factory.Create(5' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestDimensionAndMeasure,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: var coord2 = new Coordinate(2.0' 2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: var coord2 = new Coordinate(2.0' 2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: var coord3 = new CoordinateM(3.0' 3.0' 3.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: var coord3 = new CoordinateM(3.0' 3.0' 3.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: var coord3 = new CoordinateM(3.0' 3.0' 3.0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: Assert.That(seq.Dimension' Is.EqualTo(3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: Assert.That(seq.GetCoordinate(2)' Is.EqualTo(coord3));
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateArraySequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateArraySequenceTest.cs,TestMixedCoordinates,The following statement contains a magic number: Assert.That(seq.GetCoordinate(3)' Is.Null);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestCoordinateArraySequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.CoordinateArraySequence(                  new[] {new Coordinate(0' 0)' new Coordinate(10' 10)' new Coordinate(10' 0)' new Coordinate(0' 0)'});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestCoordinateArraySequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.CoordinateArraySequence(                  new[] {new Coordinate(0' 0)' new Coordinate(10' 10)' new Coordinate(10' 0)' new Coordinate(0' 0)'});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestCoordinateArraySequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.CoordinateArraySequence(                  new[] {new Coordinate(0' 0)' new Coordinate(10' 10)' new Coordinate(10' 0)' new Coordinate(0' 0)'});
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestDotSpatialAffineCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence(                  new[] { 0d' 0d' 10d' 10d' 10d' 0d' 0d' 0d' }' new []{ 1d' 2' 3' 4 }' new [] { 4' 3' 2' 1d} );
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedDoubleCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence(                  new[] { 0d' 0d' 1d' 4d' 10d' 10d' 2d' 3d' 10d' 0d' 3d' 2d' 0d' 0d' 4d' 1d}' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,TestPackedFloatCoordinateSequence,The following statement contains a magic number: var csf = new NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence(                  new[] { 0f' 0f' 1f' 4f' 10f' 10f' 2f' 3f' 10f' 0f' 3f' 2f' 0d' 0d' 4d' 1d }' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,DoTest,The following statement contains a magic number: const double eps = 1e-12;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceReversedTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceReversedTest.cs,ToOrdinateArray,The following statement contains a magic number: i < 32
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,TestZeroLength,The following statement contains a magic number: var seq = CsFactory.Create(0' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,TestCreateBySizeAndModify,The following statement contains a magic number: var seq = CsFactory.Create(Size' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,Test2DZOrdinate,The following statement contains a magic number: var seq = CsFactory.Create(Size' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: seq.SetOrdinate(0' dim' 10 + dim);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: double expectedX = 10;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: double expectedY = 11;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: double expectedZ = seq.HasZ ? 12 : Coordinate.NullOrdinate;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: double expectedM = seq.HasM ? seq.HasZ ? 13 : 12 : Coordinate.NullOrdinate;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,NamedAndOrdinateGettersShouldBeConsistent,The following statement contains a magic number: double expectedM = seq.HasM ? seq.HasZ ? 13 : 12 : Coordinate.NullOrdinate;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,CreateArray,The following statement contains a magic number: double baseUnits = 2 * 1;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,CreateArray,The following statement contains a magic number: coords[i] = new CoordinateZ(baseUnits' baseUnits + 1' baseUnits + 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: coord[2] != seq.GetOrdinate(i' 2)
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: coord[2] != seq.GetOrdinate(i' 2)
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: seq.Dimension > 2
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: coord[3] != seq.GetOrdinate(i' 3)
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: coord[3] != seq.GetOrdinate(i' 3)
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsAllCoordsEqual,The following statement contains a magic number: seq.Dimension > 3
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: !coords[i][2].Equals(seq.GetOrdinate(i' 2))
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: !coords[i][2].Equals(seq.GetOrdinate(i' 2))
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: seq.Dimension > 2
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: !coords[i][3].Equals(seq.GetOrdinate(i' 3))
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: !coords[i][3].Equals(seq.GetOrdinate(i' 3))
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,CoordinateSequenceTestBase,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\CoordinateSequenceTestBase.cs,IsEqual,The following statement contains a magic number: seq.Dimension > 3
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckAll,The following statement contains a magic number: CheckDim2(5' factory);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim2,The following statement contains a magic number: var seq = factory.Create(size' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim2,The following statement contains a magic number: Assert.AreEqual(2' seq.Dimension' "Dimension should be 2");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: var seq = factory.Create(5' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: var seq = factory.Create(5' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.AreEqual(3' seq.Dimension' "Dimension should be 3");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: var coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.AreEqual(4.0' coord.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.AreEqual(4.0' coord.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.AreEqual(4.0' coordZ.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.AreEqual(coord' array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3,The following statement contains a magic number: Assert.IsTrue(coord != array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: var seq = factory.Create(5' 3' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: var seq = factory.Create(5' 3' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.AreEqual(3' seq.Dimension' "Dimension should be 3");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: var coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coord.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coord.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coordM.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.AreEqual(coord' array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim3_M1,The following statement contains a magic number: Assert.IsTrue(coord != array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: var seq = factory.Create(5' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: var seq = factory.Create(5' 4' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(4' seq.Dimension' "Dimension should be 4");
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: var coord = seq.GetCoordinate(4);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coord.X);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coord.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coordZM.Z);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(4.0' coordZM.M);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.AreEqual(coord' array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDim4_M1,The following statement contains a magic number: Assert.IsTrue(coord != array[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDimInvalid,The following statement contains a magic number: var seq = factory.Create(5' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Implementation,PackedCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\PackedCoordinateSequenceTest.cs,CheckDimInvalid,The following statement contains a magic number: var seq = factory.Create(5' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,Test,The following statement contains a magic number: Run(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,Run,The following statement contains a magic number: var poly = CreateSineStar(new Coordinate(0' 0)' 100' nPts);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,CreateSineStar,The following statement contains a magic number: gsf.ArmLengthRatio = 0.1;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,CreateSineStar,The following statement contains a magic number: gsf.NumArms = 20;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,Test,The following statement contains a magic number: var line = CreateTestLine(g.EnvelopeInternal' 10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonIntersectsStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonIntersectsStressTest.cs,Test,The following statement contains a magic number: var line = CreateTestLine(g.EnvelopeInternal' 10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,PreparedPolygonPredicateStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\PreparedPolygonStressTest.cs,Test,The following statement contains a magic number: tester.Run(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,Run,The following statement contains a magic number: var poly = CreateSineStar(new Coordinate(0' 0)' 100' _numTargetPts);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,CreateSineStar,The following statement contains a magic number: gsf.ArmLengthRatio = 0.1;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,CreateSineStar,The following statement contains a magic number: gsf.NumArms = 20;
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,CreateRandomTestGeometry,The following statement contains a magic number: test is Polygon && rnd.NextDouble() > 0.5
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,Run,The following statement contains a magic number: var test = CreateRandomTestGeometry(target.EnvelopeInternal' 10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Prepared,StressTestHarness,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Prepared\StressTestHarness.cs,Run,The following statement contains a magic number: var test = CreateRandomTestGeometry(target.EnvelopeInternal' 10' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestScale1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  0' 0' 2' 0' 0' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestScale1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  0' 0' 2' 0' 0' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTranslate1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  5' 6' 6' 6' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestLinear1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  0' 0' 0' 0' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestLinear1,The following statement contains a magic number: Run(0' 0' 1' 0' 0' 1'                  0' 0' 0' 0' 5' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular2,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 30' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular3,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 10' 10' 20' 20);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular1,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 1' 2' 1' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular1,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 1' 2' 1' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular1,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 1' 2' 1' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingular1,The following statement contains a magic number: RunSingular(0' 0' 1' 1' 2' 2'                          0' 0' 1' 2' 1' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingleControl1,The following statement contains a magic number: Run(0' 0'                  5' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestSingleControl1,The following statement contains a magic number: Run(0' 0'                  5' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlTranslation,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlTranslation,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlTranslation,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlTranslation,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlGeneral,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlGeneral,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlGeneral,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestDualControlGeneral,The following statement contains a magic number: Run(0' 0' 1' 1'                      5' 5' 6' 9);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform1,The following statement contains a magic number: trans.Translate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform1,The following statement contains a magic number: trans.Translate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform1,The following statement contains a magic number: trans.Scale(2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform1,The following statement contains a magic number: trans.Scale(2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Rotate(3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Translate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Translate(10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Scale(2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Scale(2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Shear(5' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Shear(5' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Reflect(5' 8' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Reflect(5' 8' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Reflect(5' 8' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,TestTransform2,The following statement contains a magic number: trans.Reflect(5' 8' 10' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,AssertEqualPoint,The following statement contains a magic number: Assert.AreEqual(p.X' q.X' 0.00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationBuilderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationBuilderTest.cs,AssertEqualPoint,The following statement contains a magic number: Assert.AreEqual(p.Y' q.Y' 0.00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: var t = AffineTransformation.RotationInstance(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotate2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: var t = AffineTransformation.RotationInstance(Math.PI/2' 1' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(0' 10' t' -8' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(0' 10' t' -8' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(10' 0' t' 2' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(0' 10' t' -8' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(0' 10' t' -8' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestRotateAroundPoint2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 12' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(0' 10' t' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(0' 10' t' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-3' -4' t' -4' -3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-3' -4' t' -4' -3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-3' -4' t' -4' -3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy1,The following statement contains a magic number: CheckTransformation(-3' -4' t' -4' -3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(10' 0' t' 0' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(0' 10' t' -10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-10' -10' t' 10' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-3' -4' t' 4' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-3' -4' t' 4' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-3' -4' t' 4' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXy2,The following statement contains a magic number: CheckTransformation(-3' -4' t' 4' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: var t = AffineTransformation.ReflectionInstance(0' 5' 5' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: var t = AffineTransformation.ReflectionInstance(0' 5' 5' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(5' 0' t' 5' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(5' 0' t' 5' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(0' 0' t' 5' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(0' 0' t' 5' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestReflectXyxy1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 15' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: var t = AffineTransformation.ScaleInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: var t = AffineTransformation.ScaleInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(10' 0' t' 20' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(10' 0' t' 20' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(0' 10' t' 0' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(0' 10' t' 0' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -20' -30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -20' -30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -20' -30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestScale1,The following statement contains a magic number: CheckTransformation(-10' -10' t' -20' -30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestShear1,The following statement contains a magic number: var t = AffineTransformation.ShearInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestShear1,The following statement contains a magic number: var t = AffineTransformation.ShearInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestShear1,The following statement contains a magic number: CheckTransformation(10' 0' t' 10' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestShear1,The following statement contains a magic number: CheckTransformation(10' 0' t' 10' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestShear1,The following statement contains a magic number: CheckTransformation(10' 0' t' 10' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: var t = AffineTransformation.TranslationInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: var t = AffineTransformation.TranslationInstance(2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(1' 0' t' 3' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(1' 0' t' 3' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(0' 0' t' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(0' 0' t' 2' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(-10' -5' t' -8' -2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(-10' -5' t' -8' -2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(-10' -5' t' -8' -2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslate1,The following statement contains a magic number: CheckTransformation(-10' -5' t' -8' -2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: var t = AffineTransformation.TranslationInstance(3' 3)                                              .Rotate(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: var t = AffineTransformation.TranslationInstance(3' 3)                                              .Rotate(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: var t = AffineTransformation.TranslationInstance(3' 3)                                              .Rotate(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(10' 0' t' -3' 13);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(10' 0' t' -3' 13);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(10' 0' t' -3' 13);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 7' -7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 7' -7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 7' -7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestTranslateRotate1,The following statement contains a magic number: CheckTransformation(-10' -10' t' 7' -7);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose1,The following statement contains a magic number: var t0 = AffineTransformation.TranslationInstance(10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose1,The following statement contains a magic number: t0.Rotate(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose1,The following statement contains a magic number: t0.Translate(0' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose1,The following statement contains a magic number: t1.Rotate(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose3,The following statement contains a magic number: var t0 = AffineTransformation.ReflectionInstance(0' 10' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose3,The following statement contains a magic number: var t0 = AffineTransformation.ReflectionInstance(0' 10' 10' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose3,The following statement contains a magic number: t0.Translate(-10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,TestCompose3,The following statement contains a magic number: t0.Translate(-10' -10);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(xp' p2.X' .00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(yp' p2.Y' .00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(x' pInv.X' .00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(y' pInv.Y' .00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(det' 1.0 / detInv' .00005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: var trans = AffineTransformation                  .RotationInstance(Math.PI / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: bool isEqual = geom.EqualsExact(transGeom' 0.0005);
Magic Number,NetTopologySuite.Tests.NUnit.Geometries.Utility,AffineTransformationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Utility\AffineTransformationTest.cs,CheckTransformation,The following statement contains a magic number: Assert.AreEqual(m0[i]' m1[i]' 0.000005);
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestInitialized,The following statement contains a magic number: var nts =                  new NtsGeometryServices(                      NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Instance'                      new PrecisionModel(10d)' 4326);
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestInitialized,The following statement contains a magic number: var nts =                  new NtsGeometryServices(                      NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Instance'                      new PrecisionModel(10d)' 4326);
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: int[] srids = new[] {4326' 31467' 3857' 27700};
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: int[] srids = new[] {4326' 31467' 3857' 27700};
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: int[] srids = new[] {4326' 31467' 3857' 27700};
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: int[] srids = new[] {4326' 31467' 3857' 27700};
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: var precisionModels = new[]                      {                          new PrecisionModel(PrecisionModels.Floating)'                          new PrecisionModel(PrecisionModels.FloatingSingle)'                          new PrecisionModel(1)'                          new PrecisionModel(10)'                          new PrecisionModel(100)'                      };
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: var precisionModels = new[]                      {                          new PrecisionModel(PrecisionModels.Floating)'                          new PrecisionModel(PrecisionModels.FloatingSingle)'                          new PrecisionModel(1)'                          new PrecisionModel(10)'                          new PrecisionModel(100)'                      };
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestThreading,The following statement contains a magic number: const int numWorkItems = 30;
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestFacories,The following statement contains a magic number: var wh = (AutoResetEvent) parameters[2];
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestFacories,The following statement contains a magic number: int workItemId = (int) parameters[3];
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestFacories,The following statement contains a magic number: bool verbose = (bool) parameters[4];
Magic Number,NetTopologySuite.Tests.NUnit,GeometryServiceProviderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\GeometryServiceProviderTest.cs,TestFacories,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: list.Add(geometryFactory.CreatePoint(new Coordinate(10' 0)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: list.Add(geometryFactory.CreatePoint(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: list.Add(geometryFactory.CreatePoint(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: list.Add(geometryFactory.CreatePoint(new Coordinate(0' 10)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: Assert.AreEqual(10' points[1].X' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: Assert.AreEqual(10' points[1].X' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testToPointArray,The following statement contains a magic number: Assert.AreEqual(0' points[1].Y' 1E-1);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPolygonCoordinates,The following statement contains a magic number: Assert.AreEqual(10' p.NumPoints);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPolygonCoordinates,The following statement contains a magic number: Assert.AreEqual(10' coordinates.Length);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPolygonCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[9]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPolygonCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[9]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPolygonCoordinates,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' coordinates[9]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testEmptyPolygon,The following statement contains a magic number: Assert.AreEqual(2' (int) p.Dimension);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testEmptyMultiPolygon,The following statement contains a magic number: Assert.AreEqual(2' (int) g.Dimension);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testLinearRingIsSimple,The following statement contains a magic number: Coordinate[] coordinates =                  {                      new CoordinateZ(10' 10' 0)'                      new CoordinateZ(10' 20' 0)'                      new CoordinateZ(20' 20' 0)'                      new CoordinateZ(20' 15' 0)'                      new CoordinateZ(10' 10' 0)                  };
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: var c2 = new Coordinate(3' 4);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: var c2 = new Coordinate(3' 4);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(3' c2.X' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(3' c2.X' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(4' c2.Y' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(4' c2.Y' 1E-10);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new Coordinate(3' 5)' new Coordinate(3' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new Coordinate(3' 5)' new Coordinate(3' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new Coordinate(3' 5)' new Coordinate(3' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new Coordinate(3' 5)' new Coordinate(3' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new CoordinateZ(3' 5' double.NaN)' new CoordinateZ(3' 5' double.NaN));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new CoordinateZ(3' 5' double.NaN)' new CoordinateZ(3' 5' double.NaN));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new CoordinateZ(3' 5' double.NaN)' new CoordinateZ(3' 5' double.NaN));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.AreEqual(new CoordinateZ(3' 5' double.NaN)' new CoordinateZ(3' 5' double.NaN));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.IsTrue(new CoordinateZ(3' 5' 0).Equals(new CoordinateZ(3' 5' double.NaN)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.IsTrue(new CoordinateZ(3' 5' 0).Equals(new CoordinateZ(3' 5' double.NaN)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.IsTrue(new CoordinateZ(3' 5' 0).Equals(new CoordinateZ(3' 5' double.NaN)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testCoordinateNaN,The following statement contains a magic number: Assert.IsTrue(new CoordinateZ(3' 5' 0).Equals(new CoordinateZ(3' 5' double.NaN)));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPredicatesReturnFalseForEmptyGeometries,The following statement contains a magic number: var p2 = new GeometryFactory().CreatePoint(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest.cs,testPredicatesReturnFalseForEmptyGeometries,The following statement contains a magic number: var p2 = new GeometryFactory().CreatePoint(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(true' new Coordinate(1' 2)' new Coordinate(1' 2));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(true' new Coordinate(1' 2)' new Coordinate(1' 2));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 4));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 4));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 4));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(1' 4));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(1' 4));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 2));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 2));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(3' 2));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testCoordinateHash,The following statement contains a magic number: doTestCoordinateHash(false' new Coordinate(1' 2)' new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(3' f.Coordinates.Length);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' f.Coordinates[0]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(10' 10)' f.Coordinates[0]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' f.Coordinates[1]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(20' 20)' f.Coordinates[1]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 30)' f.Coordinates[2]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 30)' f.Coordinates[2]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testUniqueCoordinateArrayFilter,The following statement contains a magic number: Assert.AreEqual(new Coordinate(30' 30)' f.Coordinates[2]);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocatorLinearRingLineString,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(10' 10)' gc));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocatorLinearRingLineString,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(10' 10)' gc));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Exterior' pointLocator.Locate(new Coordinate(420' 340)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Exterior' pointLocator.Locate(new Coordinate(420' 340)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(350' 50)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(350' 50)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(410' 50)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Boundary' pointLocator.Locate(new Coordinate(410' 50)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Interior' pointLocator.Locate(new Coordinate(190' 150)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testPointLocator,The following statement contains a magic number: Assert.AreEqual(Location.Interior' pointLocator.Locate(new Coordinate(190' 150)' polygon));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(PointLocation.IsOnLine(new Coordinate(10' 10)'                                                  new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(PointLocation.IsOnLine(new Coordinate(10' 10)'                                                  new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(PointLocation.IsOnLine(new Coordinate(10' 10)'                                                  new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(PointLocation.IsOnLine(new Coordinate(10' 10)'                                                  new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(PointLocation.IsOnLine(new Coordinate(10' 10)'                                                  new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(!PointLocation.IsOnLine(new Coordinate(30' 10)'                                                   new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(!PointLocation.IsOnLine(new Coordinate(30' 10)'                                                   new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(!PointLocation.IsOnLine(new Coordinate(30' 10)'                                                   new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(!PointLocation.IsOnLine(new Coordinate(30' 10)'                                                   new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,test1,The following statement contains a magic number: Assert.IsTrue(!PointLocation.IsOnLine(new Coordinate(30' 10)'                                                   new Coordinate[] {new Coordinate(0'10)' new Coordinate(20'10)}));
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(20' 20))' new Coordinate(20' 20)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(20' 20))' new Coordinate(20' 20)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(20' 20))' new Coordinate(20' 20)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeComparator,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(20' 20))' new Coordinate(20' 20)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d1 = new DirectedEdge(new Node(new Coordinate(0' 0))'                                        new Node(new Coordinate(10' 10))' new Coordinate(10' 10)' true);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(20' 0))'                                        new Node(new Coordinate(20' 10))' new Coordinate(20' 10)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(20' 0))'                                        new Node(new Coordinate(20' 10))' new Coordinate(20' 10)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(20' 0))'                                        new Node(new Coordinate(20' 10))' new Coordinate(20' 10)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(20' 0))'                                        new Node(new Coordinate(20' 10))' new Coordinate(20' 10)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: var d2 = new DirectedEdge(new Node(new Coordinate(20' 0))'                                        new Node(new Coordinate(20' 10))' new Coordinate(20' 10)' false);
Magic Number,NetTopologySuite.Tests.NUnit,MiscellaneousTest2,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\MiscellaneousTest2.cs,testDirectedEdgeToEdges,The following statement contains a magic number: Assert.AreEqual(2' edges.Count);
Magic Number,NetTopologySuite.Tests.NUnit.Hull,ChiShapeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Hull\ChiShapeTest.cs,TestSimple,The following statement contains a magic number: CheckHull(                  "POLYGON ((100 200' 200 180' 300 200' 200 190' 100 200))"'                  150'                  "POLYGON ((100 200' 200 180' 300 200' 200 190' 100 200))"                  );
Magic Number,NetTopologySuite.Tests.NUnit.Hull,ChiShapeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Hull\ChiShapeTest.cs,TestTurf,The following statement contains a magic number: CheckHull(                  "LINESTRING (-63.601226 44.642643' -63.591442 44.651436' -63.580799 44.648749' -63.573589 44.641788' -63.587665 44.64533' -63.595218 44.64765)"'                  0.0145'                  "POLYGON ((-63.601226 44.642643' -63.587665 44.64533' -63.573589 44.641788' -63.580799 44.648749' -63.591442 44.651436' -63.601226 44.642643))"                  );
Magic Number,NetTopologySuite.Tests.NUnit.Hull,ConcaveHullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Hull\ConcaveHullTest.cs,TestSimple,The following statement contains a magic number: CheckHull(                  "POLYGON ((100 200' 200 180' 300 200' 200 190' 100 200))"'                  150'                  "POLYGON ((100 200' 200 180' 300 200' 200 190' 100 200))"                  );
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSinglePoint,The following statement contains a magic number: var index = new KdTree<object>(.001);
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSinglePoint,The following statement contains a magic number: var queryEnv = new Envelope(0' 10' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSinglePoint,The following statement contains a magic number: var queryEnv = new Envelope(0' 10' 0' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSinglePoint,The following statement contains a magic number: Assert.IsTrue(node.Count == 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(383' 381)' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(383' 381)' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(349' 168)' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(349' 168)' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(473' 223)' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(473' 223)' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(227' 44)' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(227' 44)' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(273' 214)' "E");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(273' 214)' "E");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(493' 87)' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(493' 87)' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(502' 290)' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: kd.Insert(new Coordinate(502' 290)' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: var res = kd.NearestNeighbor(new Coordinate(297' 133));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: var res = kd.NearestNeighbor(new Coordinate(297' 133));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: res = kd.NearestNeighbor(new Coordinate(272' 216));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: res = kd.NearestNeighbor(new Coordinate(272' 216));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: res = kd.NearestNeighbor(new Coordinate(635' 377));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestEndlessLoop,The following statement contains a magic number: res = kd.NearestNeighbor(new Coordinate(635' 377));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(12' 16)' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(12' 16)' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(15' 8)' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(15' 8)' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(5' 18)' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(5' 18)' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(18' 5)' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(18' 5)' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(16' 15)' "E");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(16' 15)' "E");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(2' 5)' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(2' 5)' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(7' 10)' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(7' 10)' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(8' 7)' "H");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(8' 7)' "H");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(5' 5)' "I");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(5' 5)' "I");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(19' 12)' "J");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(19' 12)' "J");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(10' 2)' "K");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: kd.Insert(new Coordinate(10' 2)' "K");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: var res = kd.NearestNeighbor(new Coordinate(13' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestNearestNeighbor,The following statement contains a magic number: var res = kd.NearestNeighbor(new Coordinate(13' 2));
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestMultiplePoint,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2) )"' 0'                  new Envelope(0' 10' 0' 10)'                  "MULTIPOINT ( (1 1)' (2 2) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestMultiplePoint,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2) )"' 0'                  new Envelope(0' 10' 0' 10)'                  "MULTIPOINT ( (1 1)' (2 2) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSubset,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2)' (3 3)' (4 4) )"' 0'                  new Envelope(1.5' 3.4' 1.5' 3.5)'                  "MULTIPOINT ( (2 2)' (3 3) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSubset,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2)' (3 3)' (4 4) )"' 0'                  new Envelope(1.5' 3.4' 1.5' 3.5)'                  "MULTIPOINT ( (2 2)' (3 3) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSubset,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2)' (3 3)' (4 4) )"' 0'                  new Envelope(1.5' 3.4' 1.5' 3.5)'                  "MULTIPOINT ( (2 2)' (3 3) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSubset,The following statement contains a magic number: TestQuery("MULTIPOINT ( (1 1)' (2 2)' (3 3)' (4 4) )"' 0'                  new Envelope(1.5' 3.4' 1.5' 3.5)'                  "MULTIPOINT ( (2 2)' (3 3) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance,The following statement contains a magic number: TestQuery("MULTIPOINT ( (0 0)' (-.1 1)' (.1 1) )"'                  1'                  new Envelope(-9' 9' -9' 9)'                  "MULTIPOINT ( (0 0)' (-.1 1) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance,The following statement contains a magic number: TestQuery("MULTIPOINT ( (0 0)' (-.1 1)' (.1 1) )"'                  1'                  new Envelope(-9' 9' -9' 9)'                  "MULTIPOINT ( (0 0)' (-.1 1) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance,The following statement contains a magic number: TestQuery("MULTIPOINT ( (0 0)' (-.1 1)' (.1 1) )"'                  1'                  new Envelope(-9' 9' -9' 9)'                  "MULTIPOINT ( (0 0)' (-.1 1) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance,The following statement contains a magic number: TestQuery("MULTIPOINT ( (0 0)' (-.1 1)' (.1 1) )"'                  1'                  new Envelope(-9' 9' -9' 9)'                  "MULTIPOINT ( (0 0)' (-.1 1) )");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 60)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 60)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 60)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 60)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 60)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 60)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2_perturbedY,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 61)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 61)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2_perturbedY,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 61)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 61)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestTolerance2_perturbedY,The following statement contains a magic number: TestQuery("MULTIPOINT ((10 60)' (20 61)' (30 60)' (30 63))"'                  9'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ((10 60)' (20 61)' (30 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSnapToNearest,The following statement contains a magic number: TestQueryRepeated("MULTIPOINT ( (10 60)' (20 60)' (16 60))"'                  5'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ( (10 60)' (20 60)' (20 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSnapToNearest,The following statement contains a magic number: TestQueryRepeated("MULTIPOINT ( (10 60)' (20 60)' (16 60))"'                  5'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ( (10 60)' (20 60)' (20 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.KdTree,KdTreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\KdTree\KdTreeTest.cs,TestSnapToNearest,The following statement contains a magic number: TestQueryRepeated("MULTIPOINT ( (10 60)' (20 60)' (16 60))"'                  5'                  new Envelope(0' 99' 0' 99)'                  "MULTIPOINT ( (10 60)' (20 60)' (20 60))");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,DoubleBitsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\DoubleBitsTest.cs,TestExponent,The following statement contains a magic number: Assert.IsTrue(DoubleBits.GetExponent(8.0) == 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,DoubleBitsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\DoubleBitsTest.cs,TestExponent,The following statement contains a magic number: Assert.IsTrue(DoubleBits.GetExponent(8.0) == 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,DoubleBitsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\DoubleBitsTest.cs,TestExponent,The following statement contains a magic number: Assert.IsTrue(DoubleBits.GetExponent(128.0) == 7);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,DoubleBitsTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\DoubleBitsTest.cs,TestExponent,The following statement contains a magic number: Assert.IsTrue(DoubleBits.GetExponent(128.0) == 7);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,QuadtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\QuadtreeTest.cs,TestNullQuery,The following statement contains a magic number: qt.Insert(new Envelope(0' 10' 0' 10)' "some data");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Quadtree,QuadtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Quadtree\QuadtreeTest.cs,TestNullQuery,The following statement contains a magic number: qt.Insert(new Envelope(0' 10' 0' 10)' "some data");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: var t = new TestTree(2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 6' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 6' "A");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "B");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 3' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 3' "C");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "D");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(2' 4' "F");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(5' 6' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: t.Insert(5' 6' "G");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' t.Root().Level);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(4' t.BoundablesAtLevel(0).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' t.BoundablesAtLevel(1).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(1' t.BoundablesAtLevel(2).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(1' t.Query(0.5' 0.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(1' t.Query(0.5' 0.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(0' t.Query(1.5' 1.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(0' t.Query(1.5' 1.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' t.Query(4.5' 5.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' t.Query(4.5' 5.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' t.Query(4.5' 5.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,TestEmptyTree,The following statement contains a magic number: var t = new TestTree(2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,TestEmptyTree,The following statement contains a magic number: Assert.AreEqual(0' t.Query(0.5' 0.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,SIRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\SIRtreeTest.cs,TestEmptyTree,The following statement contains a magic number: Assert.AreEqual(0' t.Query(0.5' 0.5).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestSpatialIndex,The following statement contains a magic number: var tester = new SpatialIndexTester { SpatialIndex = new STRtree(4) };
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestSerialization,The following statement contains a magic number: var tester = new SpatialIndexTester { SpatialIndex = new STRtree(4) };
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(5' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(5' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestCreateParentsFromVerticalSlice,The following statement contains a magic number: DoTestCreateParentsFromVerticalSlice(5' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestDisallowedInserts,The following statement contains a magic number: var t = new STRtree(5);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(0' 0)' new Coordinate(10' 10)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(0' 0)' new Coordinate(10' 10)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: geometries.Add(_factory.CreateLineString(new Coordinate[]                                                           {                                                               new Coordinate(20' 20)' new Coordinate(30' 30)                                                           }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: var t = new STRtree(4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(1' t.Query(new Envelope(5' 6' 5' 6)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(1' t.Query(new Envelope(5' 6' 5' 6)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(1' t.Query(new Envelope(5' 6' 5' 6)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(1' t.Query(new Envelope(5' 6' 5' 6)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(0' t.Query(new Envelope(20' 30' 0' 10)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(0' t.Query(new Envelope(20' 30' 0' 10)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(0' t.Query(new Envelope(20' 30' 0' 10)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(2' t.Query(new Envelope(25' 26' 25' 26)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(2' t.Query(new Envelope(25' 26' 25' 26)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(2' t.Query(new Envelope(25' 26' 25' 26)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(2' t.Query(new Envelope(25' 26' 25' 26)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(2' t.Query(new Envelope(25' 26' 25' 26)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(3' t.Query(new Envelope(0' 100' 0' 100)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(3' t.Query(new Envelope(0' 100' 0' 100)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestQuery,The following statement contains a magic number: Assert.AreEqual(3' t.Query(new Envelope(0' 100' 0' 100)).Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(3' 2' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(4' 2' 2' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(5' 3' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(5' 3' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestVerticalSlices,The following statement contains a magic number: DoTestVerticalSlices(5' 3' 2' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(0' 10' 0' 10)' "1");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(0' 10' 0' 10)' "1");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' "2");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' "2");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' "2");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' "2");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' "3");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' "3");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' "3");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' "3");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' "4");
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemove,The following statement contains a magic number: Assert.AreEqual(3' tree.Count);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(0' 10' 0' 10)' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(0' 10' 0' 10)' 1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(5' 15' 5' 15)' 2);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(10' 20' 10' 20)' 3);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Insert(new Envelope(15' 25' 15' 25)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: tree.Remove(new Envelope(10' 20' 10' 20)' 4);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: Assert.That(tree.ItemsTree().OfType<int>()' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestRemoveValueType,The following statement contains a magic number: Assert.That(tree.ItemsTree().OfType<int>()' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: int topK = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: int totalRecords = 10000;
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: var coordinate = new Coordinate(10.1' -10.1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: var coordinate = new Coordinate(10.1' -10.1);
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: int valueRange = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: coordinate = new Coordinate(-100 + random.Next(valueRange) * 1.1' random.Next(valueRange) * (-5.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: coordinate = new Coordinate(-100 + random.Next(valueRange) * 1.1' random.Next(valueRange) * (-5.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: coordinate = new Coordinate(-100 + random.Next(valueRange) * 1.1' random.Next(valueRange) * (-5.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,TestKNearestNeighbors,The following statement contains a magic number: strtree.Query(new Envelope(1 + 0.1' 1 + 0.1' 2 + 0.1' 2 + 0.1));
Magic Number,NetTopologySuite.Tests.NUnit.Index.Strtree,STRtreeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Index\Strtree\STRtreeTest.cs,DoTestVerticalSlices,The following statement contains a magic number: var t = new STRtreeDemo.TestTree(2);
Magic Number,NetTopologySuite.Tests.NUnit.IO.GML2,GMLReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\GML2\GMLReaderTest.cs,DoTest,The following statement contains a magic number: Assert.IsTrue(gc.NumGeometries == 25);
Magic Number,NetTopologySuite.Tests.NUnit.IO.GML2,GMLReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\GML2\GMLReaderTest.cs,DoTest,The following statement contains a magic number: i < 25
Magic Number,NetTopologySuite.Tests.NUnit.IO.GML2,GMLReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\GML2\GMLReaderTest.cs,GetReadMethods,The following statement contains a magic number: var result = new List<Func<GMLReader' string' Geometry>>(5)              {                  (reader' xml) => reader.Read(xml)'                  (reader' xml) => reader.Read(new StringReader(xml))'                  (reader' xml) => reader.Read(XmlReader.Create(new StringReader(xml)))              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,SerializabilityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\SerializabilityTest.cs,TestSerializable,The following statement contains a magic number: gsf.Size = 250;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,BigEndianTest,The following statement contains a magic number: RunGeometry(g' 2' ByteOrder.BigEndian' false' 100);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,BigEndianTest,The following statement contains a magic number: RunGeometry(g' 2' ByteOrder.BigEndian' false' 100);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestBigPolygon,The following statement contains a magic number: shapeFactory.Size = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestBigPolygon,The following statement contains a magic number: shapeFactory.NumPoints = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,TestBigPolygon,The following statement contains a magic number: RunWKBTest(geom' 2' false);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestPackedCoordinate,The following statement contains a magic number: RunWKBTest(g' 2' true);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestPackedCoordinate,The following statement contains a magic number: RunWKBTest(g' 2' false);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: g = SetDimension(g' 2);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: RunWKBTest(g' 2' true);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: RunWKBTest(g' 2' false);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: g = SetDimension(g' 3);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: RunWKBTest(g' 3' true);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTestCoordinateArray,The following statement contains a magic number: RunWKBTest(g' 3' false);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTest,The following statement contains a magic number: dimension > 2
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTest,The following statement contains a magic number: RunGeometry((Geometry)g' dimension' byteOrder' toHex' 100);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunWKBTest,The following statement contains a magic number: RunGeometry((Geometry)g' dimension' byteOrder' toHex' 101010);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunGeometry,The following statement contains a magic number: var wkbWriter = new WKBWriter(byteOrder' includeSRID' dimension==2 ? false : true);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKBTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,RunGeometry,The following statement contains a magic number: var comp = (dimension == 2) ? Comp2 : Comp3;
Magic Number,NetTopologySuite.Tests.NUnit.IO,AverageOrdinate2Filter,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,Filter,The following statement contains a magic number: coord[2] = (coord.X + coord.Y) / 2;
Magic Number,NetTopologySuite.Tests.NUnit.IO,AverageOrdinate2Filter,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKBTest.cs,Filter,The following statement contains a magic number: coord[2] = (coord.X + coord.Y) / 2;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,TestGoodBasicExp,The following statement contains a magic number: ReadGoodCheckCoordinate("POINT ( 1e01 -1E02)"' 1E01' -1E02);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,TestGoodBasicExp,The following statement contains a magic number: ReadGoodCheckCoordinate("POINT ( 1e01 -1E02)"' 1E01' -1E02);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,TestGoodWithExpSign,The following statement contains a magic number: ReadGoodCheckCoordinate("POINT ( 1e-04 1E-05)"' 1e-04' 1e-05);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,TestGoodWithExpSign,The following statement contains a magic number: ReadGoodCheckCoordinate("POINT ( 1e-04 1E-05)"' 1e-04' 1e-05);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,ReadGoodCheckCoordinate,The following statement contains a magic number: Assert.AreEqual(pt.X' x' 0.0001);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderExpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderExpTest.cs,ReadGoodCheckCoordinate,The following statement contains a magic number: Assert.AreEqual(pt.Y' y' 0.0001);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadNaN,The following statement contains a magic number: var seq = CreateSequence(Ordinates.XYZ' new double[] { 10' 10 });
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadNaN,The following statement contains a magic number: var seq = CreateSequence(Ordinates.XYZ' new double[] { 10' 10 });
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPoint,The following statement contains a magic number: double[] coordinates = { 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPoint,The following statement contains a magic number: double[] coordinates = { 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLineString,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLinearRing,The following statement contains a magic number: double[] coordinates = { 10' 10' 20' 20' 30' 40' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] shell = { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring1 = { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: double[] ring2 = { 11' 19' 11' 18' 12' 18' 12' 19' 11' 19 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[0]' poly2D[2].ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[1]' poly2D[2].GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[2]' poly2D[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[2]' poly2D[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DE' poly2DE.ExteriorRing.CoordinateSequence' 2));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[0]' poly3D[2].ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[1]' poly3D[2].GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[2]' poly3D[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[2]' poly3D[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[0]' poly2DM[2].ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[1]' poly2DM[2].GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[2]' poly2DM[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[2]' poly2DM[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[0]' poly3DM[2].ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[1]' poly3DM[2].GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[2]' poly3DM[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[2]' poly3DM[2].GetInteriorRingN(1).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPoint,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 20' 20 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPoint,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 20' 20 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPoint,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 20' 20 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPoint,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 20' 20 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiLineString,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10' 20' 20 }'                  new double[] { 15' 15' 30' 15 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell1 = new double[] { 10' 10' 10' 20' 20' 20' 20' 15' 10' 10 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] ring1 = new double[] { 11' 11' 12' 11' 12' 12' 12' 11' 11' 11 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: double[] shell2 = new double[] { 60' 60' 70' 70' 80' 60' 60' 60 };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[0]' ((Polygon)poly2D[2].GetGeometryN(0)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[1]' ((Polygon)poly2D[2].GetGeometryN(0)).GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[2]' ((Polygon)poly2D[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2D[2]' ((Polygon)poly2D[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[0]' ((Polygon)poly3D[2].GetGeometryN(0)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[1]' ((Polygon)poly3D[2].GetGeometryN(0)).GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[2]' ((Polygon)poly3D[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3D[2]' ((Polygon)poly3D[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[0]' ((Polygon)poly2DM[2].GetGeometryN(0)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[1]' ((Polygon)poly2DM[2].GetGeometryN(0)).GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[2]' ((Polygon)poly2DM[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly2DM[2]' ((Polygon)poly2DM[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[0]' ((Polygon)poly3DM[2].GetGeometryN(0)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[1]' ((Polygon)poly3DM[2].GetGeometryN(0)).GetInteriorRingN(0).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[2]' ((Polygon)poly3DM[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadMultiPolygon,The following statement contains a magic number: Assert.That(CheckEqual(csPoly3DM[2]' ((Polygon)poly3DM[2].GetGeometryN(1)).ExteriorRing.CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: double[][] coordinates =              {                  new double[] { 10' 10 }'                  new double[] { 30' 30 }'                  new double[] { 15' 15' 20' 20 }'                  Array.Empty<double>()'                  new double[] { 10' 10' 20' 20' 30' 40' 10' 10 }'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: CoordinateSequence[] css =              {                  CreateSequence(Ordinates.XY' coordinates[0])'                  CreateSequence(Ordinates.XY' coordinates[1])'                  CreateSequence(Ordinates.XY' coordinates[2])'                  CreateSequence(Ordinates.XY' coordinates[3])'                  CreateSequence(Ordinates.XY' coordinates[4])'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: CoordinateSequence[] css =              {                  CreateSequence(Ordinates.XY' coordinates[0])'                  CreateSequence(Ordinates.XY' coordinates[1])'                  CreateSequence(Ordinates.XY' coordinates[2])'                  CreateSequence(Ordinates.XY' coordinates[3])'                  CreateSequence(Ordinates.XY' coordinates[4])'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: CoordinateSequence[] css =              {                  CreateSequence(Ordinates.XY' coordinates[0])'                  CreateSequence(Ordinates.XY' coordinates[1])'                  CreateSequence(Ordinates.XY' coordinates[2])'                  CreateSequence(Ordinates.XY' coordinates[3])'                  CreateSequence(Ordinates.XY' coordinates[4])'              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc0.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc0.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[3]' ((LinearRing)gc1.GetGeometryN(1)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc1.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc1.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[4]' ((LinearRing)gc2.GetGeometryN(1)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc2.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadGeometryCollection,The following statement contains a magic number: Assert.That(CheckEqual(css[2]' ((LineString)gc2.GetGeometryN(2)).CoordinateSequence));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLargeNumbers,The following statement contains a magic number: var precisionModel = new PrecisionModel(1E9);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLargeNumbers,The following statement contains a magic number: var point2 = geometryFactory.CreatePoint(new Coordinate(123456789.01234567890' 10)).CoordinateSequence;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLargeNumbers,The following statement contains a magic number: var point2 = geometryFactory.CreatePoint(new Coordinate(123456789.01234567890' 10)).CoordinateSequence;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLargeNumbers,The following statement contains a magic number: Assert.That(point1.GetOrdinate(0' Ordinate.X)' Is.EqualTo(point2.GetOrdinate(0' Ordinate.X)).Within(1E-7));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,TestReadLargeNumbers,The following statement contains a magic number: Assert.That(point1.GetOrdinate(0' Ordinate.Y)' Is.EqualTo(point2.GetOrdinate(0' Ordinate.Y)).Within(1E-7));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,RequiredDimension,The following statement contains a magic number: switch (ordinateFlags)              {                  case Ordinates.XY:                      return 2;                    case Ordinates.XYZ:                  case Ordinates.XYM:                      return 3;                    default:                      return 4;              }
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,RequiredDimension,The following statement contains a magic number: switch (ordinateFlags)              {                  case Ordinates.XY:                      return 2;                    case Ordinates.XYZ:                  case Ordinates.XYM:                      return 3;                    default:                      return 4;              }
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,RequiredDimension,The following statement contains a magic number: switch (ordinateFlags)              {                  case Ordinates.XY:                      return 2;                    case Ordinates.XYZ:                  case Ordinates.XYM:                      return 3;                    default:                      return 4;              }
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,InjectZM,The following statement contains a magic number: int size = xy.Length / 2;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,InjectZM,The following statement contains a magic number: res[k++] = 10;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReaderTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReaderTest.cs,InjectZM,The following statement contains a magic number: res[k++] = 11;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,WKTReadWriteTest,The following statement contains a magic number: _writer = new WKTWriter(4) { OutputOrdinates = Ordinates.XY };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadPointZ,The following statement contains a magic number: Assert.AreEqual(10' pt.Coordinate.X);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadPointZ,The following statement contains a magic number: Assert.AreEqual(10' pt.Coordinate.Y);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReadPointZ,The following statement contains a magic number: Assert.AreEqual(10' pt.Coordinate.Z);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,RepeatedTestThreading,The following statement contains a magic number: i < 10
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The following statement contains a magic number: int[] srids = {4326' 31467' 3857};
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The following statement contains a magic number: int[] srids = {4326' 31467' 3857};
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The following statement contains a magic number: int[] srids = {4326' 31467' 3857};
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The following statement contains a magic number: const int numJobs = 30;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,DoTestThreading,The following statement contains a magic number: WaitHandle.WaitAll(waitHandles' 10000);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReaderInThreadedContext,The following statement contains a magic number: int[] srids = (int[]) parameters[2];
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReaderInThreadedContext,The following statement contains a magic number: int jobId = (int) parameters[3];
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTReadWriteTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTReadWriteTest.cs,TestReaderInThreadedContext,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToPoint,The following statement contains a magic number: var cs = new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToPoint,The following statement contains a magic number: var cs = new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToPoint,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: int size = 2 + _rnd.Next(10);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: int size = 2 + _rnd.Next(10);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: var cs = GeometryTestCase.GetCSFactory(Ordinates.XY).Create(size' 2' 0);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: cs.SetOrdinate(j' Ordinate.X' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: cs.SetOrdinate(j' Ordinate.Y' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromSequence,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromCoordinateArray,The following statement contains a magic number: int size = 2 + _rnd.Next(10);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromCoordinateArray,The following statement contains a magic number: int size = 2 + _rnd.Next(10);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromCoordinateArray,The following statement contains a magic number: cs[j] = new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromCoordinateArray,The following statement contains a magic number: cs[j] = new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble());
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromCoordinateArray,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoords,The following statement contains a magic number: Coordinate[] cs =                  {                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())'                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())                  };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoords,The following statement contains a magic number: Coordinate[] cs =                  {                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())'                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())                  };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoords,The following statement contains a magic number: Coordinate[] cs =                  {                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())'                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())                  };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoords,The following statement contains a magic number: Coordinate[] cs =                  {                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())'                      new Coordinate(100 * _rnd.NextDouble()' 100 * _rnd.NextDouble())                  };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoords,The following statement contains a magic number: i < 1000
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoordsUsingSpecialValues,The following statement contains a magic number: const double RoundTripTestValue1 = 0.84551240822557006;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterStaticFnTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterStaticFnTest.cs,TestStaticToLineStringFromTwoCoordsUsingSpecialValues,The following statement contains a magic number: const double RoundTripTestValue2 = 0.000073552131687082412;
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePointWithDecimals,The following statement contains a magic number: var point = _factory.CreatePoint(new Coordinate(10.5' 10.5));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePointWithDecimals,The following statement contains a magic number: var point = _factory.CreatePoint(new Coordinate(10.5' 10.5));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePoint,The following statement contains a magic number: var point = _factory.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePoint,The following statement contains a magic number: var point = _factory.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLineString,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(30' 40' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWritePolygon,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPoint,The following statement contains a magic number: Point[] points =              {                  _factory.CreatePoint(new CoordinateZ(10' 10' 0))'                  _factory.CreatePoint(new CoordinateZ(20' 20' 0))              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPoint,The following statement contains a magic number: Point[] points =              {                  _factory.CreatePoint(new CoordinateZ(10' 10' 0))'                  _factory.CreatePoint(new CoordinateZ(20' 20' 0))              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPoint,The following statement contains a magic number: Point[] points =              {                  _factory.CreatePoint(new CoordinateZ(10' 10' 0))'                  _factory.CreatePoint(new CoordinateZ(20' 20' 0))              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPoint,The following statement contains a magic number: Point[] points =              {                  _factory.CreatePoint(new CoordinateZ(10' 10' 0))'                  _factory.CreatePoint(new CoordinateZ(20' 20' 0))              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(30' 15' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(30' 15' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(30' 15' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiLineString,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(30' 15' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates1 =              {                  new CoordinateZ(10' 10' 0)'                  new CoordinateZ(10' 20' 0)'                  new CoordinateZ(20' 20' 0)'                  new CoordinateZ(20' 15' 0)'                  new CoordinateZ(10' 10' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteMultiPolygon,The following statement contains a magic number: Coordinate[] coordinates2 =              {                  new CoordinateZ(60' 60' 0)'                  new CoordinateZ(70' 70' 0)'                  new CoordinateZ(80' 60' 0)'                  new CoordinateZ(60' 60' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: var point1 = _factory.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: var point1 = _factory.CreatePoint(new Coordinate(10' 10));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: var point2 = _factory.CreatePoint(new Coordinate(30' 30));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: var point2 = _factory.CreatePoint(new Coordinate(30' 30));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteGeometryCollection,The following statement contains a magic number: Coordinate[] coordinates =              {                  new CoordinateZ(15' 15' 0)'                  new CoordinateZ(20' 20' 0)              };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers1,The following statement contains a magic number: PrecisionModel precisionModel = new PrecisionModel(1E9);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers1,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(123456789012345678d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers1,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(123456789012345678d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers1,The following statement contains a magic number: Assert.AreEqual(123456789012345680d' point1.X);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers1,The following statement contains a magic number: Assert.AreEqual(10000000000d' point1.Y);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers2,The following statement contains a magic number: PrecisionModel precisionModel = new PrecisionModel(1E9);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers2,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(1234d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers2,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(1234d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers3,The following statement contains a magic number: PrecisionModel precisionModel = new PrecisionModel(1E9);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers3,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(123456789012345678000000E9d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers3,The following statement contains a magic number: var point1 = geometryFactory.CreatePoint(new Coordinate(123456789012345678000000E9d' 10E9));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers3,The following statement contains a magic number: Assert.AreEqual(123456789012345690000000000000000d' point1.X);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWriteLargeNumbers3,The following statement contains a magic number: Assert.AreEqual(10000000000d' point1.Y);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWrite3D_withNaN,The following statement contains a magic number: Coordinate[] coordinates = { new Coordinate(1' 1)'                                   new CoordinateZ(2' 2' 2) };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWrite3D_withNaN,The following statement contains a magic number: Coordinate[] coordinates = { new Coordinate(1' 1)'                                   new CoordinateZ(2' 2' 2) };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestWrite3D_withNaN,The following statement contains a magic number: Coordinate[] coordinates = { new Coordinate(1' 1)'                                   new CoordinateZ(2' 2' 2) };
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestProperties,The following statement contains a magic number: var writer3DM = new WKTWriter(4);
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt2D = GeometryFactory.Default.CreatePoint(new Coordinate(1' 2));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt3D = GeometryFactory.Default.CreatePoint(new CoordinateZ(1' 2' 3));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt3D = GeometryFactory.Default.CreatePoint(new CoordinateZ(1' 2' 3));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt2DM = GeometryFactory.Default.CreatePoint(new CoordinateM(1' 2' 4));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt2DM = GeometryFactory.Default.CreatePoint(new CoordinateM(1' 2' 4));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt3DM = GeometryFactory.Default.CreatePoint(new CoordinateZM(1' 2' 3' 4));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt3DM = GeometryFactory.Default.CreatePoint(new CoordinateZM(1' 2' 3' 4));
Magic Number,NetTopologySuite.Tests.NUnit.IO,WKTWriterTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\IO\WKTWriterTest.cs,TestMicrosoftSqlServer,The following statement contains a magic number: var pt3DM = GeometryFactory.Default.CreatePoint(new CoordinateZM(1' 2' 3' 4));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPoint,The following statement contains a magic number: RunOffsetTest("LINESTRING (0 0' 10 10' 20 20)"' "POINT(10 10)"' 5.0' "POINT (6.464466094067262 13.535533905932738)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,TestOffsetStartPoint,The following statement contains a magic number: RunOffsetTest("LINESTRING (0 0' 10 10' 20 20)"' "POINT(10 10)"' -5.0' "POINT (13.535533905932738 6.464466094067262)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,AbstractIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\AbstractIndexedLineTest.cs,CheckExpected,The following statement contains a magic number: bool isEqual = result.EqualsExact(subLine' 1.0e-5);
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBeyondRange,The following statement contains a magic number: CheckExtractLine("LINESTRING (0 0' 10 10)"' -100' 100' "LINESTRING (0 0' 10 10)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBeyondRange,The following statement contains a magic number: CheckExtractLine("LINESTRING (0 0' 10 10)"' -100' 100' "LINESTRING (0 0' 10 10)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineReverse,The following statement contains a magic number: CheckExtractLine("LINESTRING (0 0' 10 0)"' 9' 1' "LINESTRING (9 0' 1 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineReverseMulti,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  19' 1' "MULTILINESTRING ((29 0' 25 0' 20 0)' (10 0' 1 0))");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineNegative,The following statement contains a magic number: CheckExtractLine("LINESTRING (0 0' 10 0)"' -9' -1' "LINESTRING (1 0' 9 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineNegativeReverse,The following statement contains a magic number: CheckExtractLine("LINESTRING (0 0' 10 0)"' -1' -9' "LINESTRING (9 0' 1 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpoint,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  10' -1' "LINESTRING (20 0' 25 0' 29 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  10' -1' "LINESTRING (20 0' 25 0' 29 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  5' 10' "LINESTRING (5 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  5' 10' "LINESTRING (5 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  10' -10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineIndexAtEndpointWithZeroLenComponents,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (10 0' 10 0)' (20 0' 25 0' 30 0))"'                  10' -10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBothIndicesAtEndpoint,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBothIndicesAtEndpoint,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBothIndicesAtEndpointNegative,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  -10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractLineBothIndicesAtEndpointNegative,The following statement contains a magic number: CheckExtractLine("MULTILINESTRING ((0 0' 10 0)' (20 0' 25 0' 30 0))"'                                  -10' 10' "LINESTRING (10 0' 10 0)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractPointBeyondRange,The following statement contains a magic number: var pt = indexedLine.ExtractPoint(100);
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractPointBeyondRange,The following statement contains a magic number: Assert.IsTrue(pt.Equals(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestExtractPointBeyondRange,The following statement contains a magic number: Assert.IsTrue(pt.Equals(new Coordinate(10' 10)));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestProjectPointWithDuplicateCoords,The following statement contains a magic number: double projIndex = indexedLine.Project(new Coordinate(10' 1));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestProjectPointWithDuplicateCoords,The following statement contains a magic number: Assert.IsTrue(projIndex == 10.0);
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The following statement contains a magic number: RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' 5.0' "POINT (6.464466094067262 13.535533905932738)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestOffsetStartPointRepeatedPoint,The following statement contains a magic number: RunOffsetTest("LINESTRING (0 0' 10 10' 10 10' 20 20)"' "POINT(10 10)"' -5.0' "POINT (13.535533905932738 6.464466094067262)");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZ,The following statement contains a magic number: double projIndex = indexedLine.Project(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZ,The following statement contains a magic number: double projIndex = indexedLine.Project(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZ,The following statement contains a magic number: Assert.IsTrue(((CoordinateZ)projPt).Equals3D(new CoordinateZ(5' 5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZ,The following statement contains a magic number: Assert.IsTrue(((CoordinateZ)projPt).Equals3D(new CoordinateZ(5' 5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZ,The following statement contains a magic number: Assert.IsTrue(((CoordinateZ)projPt).Equals3D(new CoordinateZ(5' 5' 5)));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZNaN,The following statement contains a magic number: double projIndex = indexedLine.Project(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LengthIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LengthIndexedLineTest.cs,TestComputeZNaN,The following statement contains a magic number: double projIndex = indexedLine.Project(new Coordinate(5' 5));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestZeroLengthLineString,The following statement contains a magic number: var loc0 = indexedLine.IndexOf(new Coordinate(11' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestRepeatedCoordsLineString,The following statement contains a magic number: var loc0 = indexedLine.IndexOf(new Coordinate(11' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestRepeatedCoordsLineString,The following statement contains a magic number: Assert.IsTrue(loc0.CompareTo(new LinearLocation(1' 0.1)) == 0);
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentLineString,The following statement contains a magic number: var loc0_5 = indexedLine.IndexOf(new Coordinate(5' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentLineString,The following statement contains a magic number: var loc1 = indexedLine.IndexOf(new Coordinate(10' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentLineString,The following statement contains a magic number: var loc2 = indexedLine.IndexOf(new Coordinate(20' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentLineString,The following statement contains a magic number: var loc2_5 = indexedLine.IndexOf(new Coordinate(25' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentLineString,The following statement contains a magic number: var loc3 = indexedLine.IndexOf(new Coordinate(30' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentMultiLineString,The following statement contains a magic number: var loc0_5 = indexedLine.IndexOf(new Coordinate(5' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentMultiLineString,The following statement contains a magic number: var loc1 = indexedLine.IndexOf(new Coordinate(10' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentMultiLineString,The following statement contains a magic number: var loc2 = indexedLine.IndexOf(new Coordinate(20' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentMultiLineString,The following statement contains a magic number: var loc2_5 = indexedLine.IndexOf(new Coordinate(25' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestSameSegmentMultiLineString,The following statement contains a magic number: var loc3 = indexedLine.IndexOf(new Coordinate(30' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var loc0_5 = indexedLine.IndexOf(new Coordinate(5' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var loc1 = indexedLine.IndexOf(new Coordinate(10' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var loc2 = indexedLine.IndexOf(new Coordinate(20' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var loc2_5 = indexedLine.IndexOf(new Coordinate(25' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var loc3 = indexedLine.IndexOf(new Coordinate(30' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var seg0 = new LineSegment(new Coordinate(0' 0)' new Coordinate(10' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var seg1 = new LineSegment(new Coordinate(10' 0)' new Coordinate(20' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var seg1 = new LineSegment(new Coordinate(10' 0)' new Coordinate(20' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var seg2 = new LineSegment(new Coordinate(20' 0)' new Coordinate(30' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LinearLocationTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LinearLocationTest.cs,TestGetSegmentMultiLineString,The following statement contains a magic number: var seg2 = new LineSegment(new Coordinate(20' 0)' new Coordinate(30' 0));
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestMultiLineStringSimple,The following statement contains a magic number: RunExtractLine("MULTILINESTRING ((0 0' 10 10)' (20 20' 30 30))"'                              new LinearLocation(0' 0' .5)'                              new LinearLocation(1' 0' .5)'                              "MULTILINESTRING ((5 5' 10 10)' (20 20' 25 25))");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestMultiLineStringSimple,The following statement contains a magic number: RunExtractLine("MULTILINESTRING ((0 0' 10 10)' (20 20' 30 30))"'                              new LinearLocation(0' 0' .5)'                              new LinearLocation(1' 0' .5)'                              "MULTILINESTRING ((5 5' 10 10)' (20 20' 25 25))");
Magic Number,NetTopologySuite.Tests.NUnit.LinearReferencing,LocationIndexedLineTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\LinearReferencing\LocationIndexedLineTest.cs,TestMultiLineString2,The following statement contains a magic number: RunExtractLine("MULTILINESTRING ((0 0' 10 10)' (20 20' 30 30))"'                              new LinearLocation(0' 0' 1.0)'                              new LinearLocation(1' 0' .5)'                              "MULTILINESTRING ((10 10' 10 10)' (20 20' 25 25))");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestAddMult2,The following statement contains a magic number: CheckAddMult2(new DD(3));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(DD.PI' DD.E' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(DD.TwoPi' DD.E' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(DD.PiHalf' DD.E' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestMultiplyDivide,The following statement contains a magic number: CheckMultiplyDivide(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestDivideMultiply,The following statement contains a magic number: CheckDivideMultiply(DD.PI' DD.E' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestDivideMultiply,The following statement contains a magic number: CheckDivideMultiply(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestDivideMultiply,The following statement contains a magic number: CheckDivideMultiply(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestDivideMultiply,The following statement contains a magic number: CheckDivideMultiply(new DD(39.4)' new DD(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestSqrt,The following statement contains a magic number: CheckSqrt(DD.PI' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestSqrt,The following statement contains a magic number: CheckSqrt(DD.E' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestSqrt,The following statement contains a magic number: CheckSqrt(new DD(999.0)' 1e-28);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestSqrt,The following statement contains a magic number: CheckSqrt(new DD(999.0)' 1e-28);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(1e16) - DD.ValueOf(1)'                         DD.ValueOf(1e16) - DD.ValueOf(1));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(1e16) - DD.ValueOf(1)'                         DD.ValueOf(1e16) - DD.ValueOf(1));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.PI' DD.ValueOf(3));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(999.999)' DD.ValueOf(999));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(999.999)' DD.ValueOf(999));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(-DD.E' DD.ValueOf(-2));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(-999.999)' DD.ValueOf(-999));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestTrunc,The following statement contains a magic number: CheckTrunc(DD.ValueOf(-999.999)' DD.ValueOf(-999));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(0' 3' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(0' 3' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(14' 3' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(14' 3' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(14' 3' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' 5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' 5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' 5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(-3' -5' 16*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(0.12345' -5' 1e5*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(0.12345' -5' 1e5*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestPow,The following statement contains a magic number: CheckPow(0.12345' -5' 1e5*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestReciprocal,The following statement contains a magic number: CheckReciprocal(3.0' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestReciprocal,The following statement contains a magic number: CheckReciprocal(99.0' 1e-29);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestReciprocal,The following statement contains a magic number: CheckReciprocal(99.0' 1e-29);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestReciprocal,The following statement contains a magic number: CheckReciprocal(999.0' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestReciprocal,The following statement contains a magic number: CheckReciprocal(314159269.0' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(100.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(10000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(100000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1000000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1e8' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1e10' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1e14' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(1e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(5e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(5e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(5e14' 345291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinom,The following statement contains a magic number: CheckBinomialSquare(5e14' 345291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,CheckAddMult2,The following statement contains a magic number: var prod = dd * new DD(2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,PrintBinomialSquareDouble,The following statement contains a magic number: double sum = 2*a*b + b*b;
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(100.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(10000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(100000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1000000.0' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1e8' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1e10' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1e14' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(1e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(5e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(5e14' 291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(5e14' 345291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDBasicTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDBasicTest.cs,TestBinomial2,The following statement contains a magic number: CheckBinomial2(5e14' 345291.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,TestEByTaylorSeries,The following statement contains a magic number: Assert.IsTrue(err < 64*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ComputeEByTaylorSeries,The following statement contains a magic number: var s = DD.ValueOf(2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,TestPiByMachin,The following statement contains a magic number: Assert.IsTrue(err < 8*DD.Epsilon);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ComputePiByMachin,The following statement contains a magic number: var t1 = DD.ValueOf(1.0) / DD.ValueOf(5.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ComputePiByMachin,The following statement contains a magic number: var t2 = DD.ValueOf(1.0) / DD.ValueOf(239.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ComputePiByMachin,The following statement contains a magic number: var pi4 = DD.ValueOf(4.0)                  * ArcTan(t1)                  - ArcTan(t2);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ComputePiByMachin,The following statement contains a magic number: var pi = DD.ValueOf(4.0) * pi4;
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDComputeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDComputeTest.cs,ArcTan,The following statement contains a magic number: var two = new DD(2.0);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(1e12) - DD.ValueOf(1)' "999999999999.0");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(1e14) - DD.ValueOf(1)' "99999999999999.0");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(1e16) - DD.ValueOf(1)' "9999999999999999.0");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: var num8Dec = DD.ValueOf(-379363639) / DD.ValueOf(100000000);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: var num8Dec = DD.ValueOf(-379363639) / DD.ValueOf(100000000);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(new DD(-3.79363639' 8.039137357367426E-17)'                  "-3.7936363900000000000000000");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(new DD(-3.79363639' 8.039137357367426E-17)'                  "-3.7936363900000000000000000");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(34) / DD.ValueOf(1000)' "0.034");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(34) / DD.ValueOf(1000)' "0.034");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(1.05e3' "1050.0");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(0.34' "0.34000000000000002442490654175344");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(34) / DD.ValueOf(100)' "0.34");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(DD.ValueOf(34) / DD.ValueOf(100)' "0.34");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteStandardNotation,The following statement contains a magic number: CheckStandardNotation(14' "14.0");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteSciNotation,The following statement contains a magic number: CheckSciNotation(1.05e10' "1.05E10");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteSciNotation,The following statement contains a magic number: CheckSciNotation(0.34' "3.4000000000000002442490654175344E-1");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteSciNotation,The following statement contains a magic number: CheckSciNotation(DD.ValueOf(34) / DD.ValueOf(100)' "3.4E-1");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteSciNotation,The following statement contains a magic number: CheckSciNotation(DD.ValueOf(34) / DD.ValueOf(100)' "3.4E-1");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteSciNotation,The following statement contains a magic number: CheckSciNotation(14' "1.4E1");
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("0"' 0' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("00"' 0' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("000"' 0' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("1"' 1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("100"' 100' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("100"' 100' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("00100"' 100' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("00100"' 100' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-1"' -1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-01"' -1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-123"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-123"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-00123"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParse,The following statement contains a magic number: CheckParse("-00123"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1.0000000"' 1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1.0"' 1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1."' 1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("01."' 1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-1.0"' -1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-1."' -1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-01.0"' -1' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-123.0"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-123.0"' -123' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1.4"' DD.ValueOf(14) / DD.ValueOf(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1.4"' DD.ValueOf(14) / DD.ValueOf(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("1.4"' DD.ValueOf(14) / DD.ValueOf(10)' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("39.5"' 39.5' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("39.5"' 39.5' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-39.5"' -39.5' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseStandardNotation,The following statement contains a magic number: CheckParse("-39.5"' -39.5' 1e-30);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e10"' 1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e10"' 1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("01.05e10"' 1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("01.05e10"' 1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("12.05e10"' 1.205E11' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("12.05e10"' 1.205E11' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e10"' -1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e10"' -1.05E10' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e-10"' DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10)' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e-10"' DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10)' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e-10"' DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10)' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("1.05e-10"' DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10)' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e-10"' -(DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10))' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e-10"' -(DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10))' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e-10"' -(DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10))' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestParseSciNotation,The following statement contains a magic number: CheckParse("-1.05e-10"' -(DD.ValueOf(105.0) / DD.ValueOf(100.0) / DD.ValueOf(1.0E10))' 1e-32);
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestRepeatedSqrt,The following statement contains a magic number: WriteRepeatedSqrt(DD.ValueOf(.999999999999));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestRepeatedSqrt,The following statement contains a magic number: WriteRepeatedSqrt(DD.PI / DD.ValueOf(10));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,WriteRepeatedSqrt,The following statement contains a magic number: Math.Abs(distFrom1) < 1.0e-40
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,WriteRepeatedSqrt,The following statement contains a magic number: xdd.ToDoubleValue() > 1e-300
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteRepeatedSqr,The following statement contains a magic number: WriteRepeatedSqr(DD.ValueOf(0.9));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteRepeatedSqr,The following statement contains a magic number: WriteRepeatedSqr(DD.PI / DD.ValueOf(10));
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,WriteRepeatedSqr,The following statement contains a magic number: xdd.ToDoubleValue() > 1e-300
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,TestWriteIOSquaresStress,The following statement contains a magic number: i < 10000
Magic Number,NetTopologySuite.Tests.NUnit.Mathematics,DDIOTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Mathematics\DDIOTest.cs,WriteAndReadSqrt,The following statement contains a magic number: Assert.IsTrue(err < 1e-10);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(100' 150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant0,The following statement contains a magic number: CheckSegment(0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(100' -150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant4,The following statement contains a magic number: CheckSegment(0' -100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant1,The following statement contains a magic number: CheckSegment(-100' 150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' 0);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -50);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -100);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,TestQuadrant2,The following statement contains a magic number: CheckSegment(-100' -150);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,CheckSegment,The following statement contains a magic number: CheckPointsAtDistance(seg' dist' dist + 2.0 * gridSize);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,CheckSegment,The following statement contains a magic number: CheckPointsAtDistance(seg' dist' dist + 3.0 * gridSize);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,CheckSegment,The following statement contains a magic number: CheckPointsAtDistance(seg' dist' dist + 4.0 * gridSize);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorFullTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorFullTest.cs,CheckSegment,The following statement contains a magic number: i < 4
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorTest.cs,TestOctant0,The following statement contains a magic number: checkNodePosition(Octants.Zero' 1' 1' 2' 2' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Noding,SegmentPointComparatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\SegmentPointComparatorTest.cs,TestOctant0,The following statement contains a magic number: checkNodePosition(Octants.Zero' 1' 1' 2' 2' -1);
Magic Number,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestML,The following statement contains a magic number: const double scale = 2.0E10;
Magic Number,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,TestML,The following statement contains a magic number: const double roughTolerance = 10.0;
Magic Number,NetTopologySuite.Tests.NUnit.Noding.Snaparound,SnapRoundingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Noding\Snapround\SnapRoundingTest.cs,IsSnapped,The following statement contains a magic number: dist < SnapTolerance / 2.05
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,Test2TouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' true'                      new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,Test2TouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.EndpointBoundaryRule' true'                      new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,Test3TouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' true'                      new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,Test3TouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.EndpointBoundaryRule' true'                      new Coordinate(2' 1));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestCross,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' false'                      new Coordinate(70' 70));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestCross,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' false'                      new Coordinate(70' 70));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestCross,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.EndpointBoundaryRule' false'                      new Coordinate(70' 70));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestCross,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.EndpointBoundaryRule' false'                      new Coordinate(70' 70));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestMultiLineStringWithRingTouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' false' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Operation,IsSimpleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\SimpleTest.cs,TestMultiLineStringWithRingTouchAtEndpoint,The following statement contains a magic number: RunIsSimpleTest(a' BoundaryNodeRules.Mod2BoundaryRule' false' new Coordinate(100' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringDepthFailure,The following statement contains a magic number: new BufferValidator(                15'                "MULTILINESTRING ((1335558.59524 631743.01449' 1335572.28215 631775.89056' 1335573.2578018496 631782.1915185435)'  (1335573.2578018496 631782.1915185435' 1335576.62035 631803.90754)' (1335558.59524 631743.01449' 1335573.2578018496 631782.1915185435)' (1335573.2578018496 631782.1915185435' 1335580.70187 631802.08139))")                .TestEmptyBufferExpected(false)                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringSeparateBuffersFloating,The following statement contains a magic number: new BufferValidator(                0.01'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                .TestBufferHolesExpected(false)                .TestEmptyBufferExpected(false)                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString2BuffersTouchToMakeHoleFloating,The following statement contains a magic number: new BufferValidator(                0.037'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                .TestBufferHolesExpected(true)                .TestEmptyBufferExpected(false)                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString3HoleVanishesFloating,The following statement contains a magic number: new BufferValidator(                0.16'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                .TestBufferHolesExpected(false)                .TestEmptyBufferExpected(false)                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString4ReallyBigDistanceFloating,The following statement contains a magic number: new BufferValidator(                  1E10'                  "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                  .TestContains()                  .TestBufferHolesExpected(false)                  .TestEmptyBufferExpected(false)                  .TestContains().Test();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineStringSeparateBuffersFloatingSingle,The following statement contains a magic number: new BufferValidator(                  0.01'                  "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))"'                  true)              .TestBufferHolesExpected(false)              .TestEmptyBufferExpected(true)              .SetPrecisionModel(new PrecisionModel(PrecisionModels.FloatingSingle))              .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString2BuffersTouchToMakeHoleFloatingSingle,The following statement contains a magic number: new BufferValidator(                0.037'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))"' true)              .TestBufferHolesExpected(false)              .TestEmptyBufferExpected(true)              .SetPrecisionModel(new PrecisionModel(PrecisionModels.FloatingSingle))              .TestContains()              .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString3HoleVanishesFloatingSingle,The following statement contains a magic number: new BufferValidator(                0.16'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                .TestBufferHolesExpected(false)                .TestEmptyBufferExpected(true)                .SetPrecisionModel(new PrecisionModel(PrecisionModels.FloatingSingle))                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestMultiLineString4ReallyBigDistanceFloatingSingle,The following statement contains a magic number: new BufferValidator(                1E10'                "MULTILINESTRING (( 635074.5418406526 6184832.4888257105' 635074.5681951842 6184832.571842485' 635074.6472587794 6184832.575795664 )' ( 635074.6657069515 6184832.53889932' 635074.6933792098 6184832.451929366' 635074.5642420045 6184832.474330718 ))")                .TestBufferHolesExpected(false)                .TestEmptyBufferExpected(false)                .SetPrecisionModel(new PrecisionModel(PrecisionModels.FloatingSingle))                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestPolygonMultipleHoles,The following statement contains a magic number: new BufferValidator(                10.0'                "POLYGON (( 78 82' 78 282' 312 282' 312 82' 78 82 )' ( 117 242' 122 242' 122 248' 117 248' 117 242 )' ( 156 104' 288 104' 288 210' 156 210' 156 104 ))")                .TestBufferHolesExpected(true)                .TestEmptyBufferExpected(false)                .SetPrecisionModel(new PrecisionModel(PrecisionModels.Floating))                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test3,The following statement contains a magic number: new BufferValidator(                10'                "LINESTRING (100 100' 200 100' 200 200' 100 200' 100 100)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test4,The following statement contains a magic number: new BufferValidator(                50'                "LINESTRING (40 40' 160 40' 100 180' 40 80)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test6,The following statement contains a magic number: new BufferValidator(                10'                "POLYGON ((60 300' 60 160' 240 160' 240 300' 60 300))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test7,The following statement contains a magic number: new BufferValidator(                10'                "POLYGON ((80 300' 280 300' 280 80' 80 80' 80 300)' (260 280' 180 200' 100 280' 100 100' 260 100' 260 280))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test8,The following statement contains a magic number: new BufferValidator(                200'                "POLYGON ((80 300' 280 300' 280 80' 80 80' 80 300)' (260 280' 180 200' 100 280' 100 100' 260 100' 260 280))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test9,The following statement contains a magic number: new BufferValidator(                -10'                "POLYGON ((80 300' 280 300' 280 80' 80 80' 80 300))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test10,The following statement contains a magic number: new BufferValidator(                10'                "POLYGON ((100 300' 300 300' 300 100' 100 100' 100 300)' (220 220' 180 220' 180 180' 220 180' 220 220))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test11,The following statement contains a magic number: new BufferValidator(                5'                "POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400)' (260 320' 240 260' 220 220' 160 180' 220 160' 200 100' 260 160' 300 140' 320 180' 260 200' 260 320))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test12,The following statement contains a magic number: new BufferValidator(                -17'                "POLYGON ((260 320' 240 260' 220 220' 160 180' 220 160' 260 160' 260 200' 260 320))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test13,The following statement contains a magic number: new BufferValidator(                -17'                "POLYGON ((260 320' 240 260' 220 220' 260 160' 260 320))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test14,The following statement contains a magic number: new BufferValidator(                -14'                "POLYGON ((260 320' 240 260' 220 220' 260 160' 260 320))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test15,The following statement contains a magic number: new BufferValidator(                26'                "LINESTRING (260 160' 260 200' 260 320' 240 260' 220 220)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test16,The following statement contains a magic number: new BufferValidator(                -7'                "POLYGON ((260 400' 220 300' 80 300' 180 220' 40 200' 180 160' 60 20' 200 80' 280 20' 260 140' 440 20' 340 180' 520 160' 280 220' 460 340' 300 300' 260 400)' (260 320' 240 260' 220 220' 160 180' 220 160' 200 100' 260 160' 300 140' 320 180' 260 200' 260 320))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test17,The following statement contains a magic number: new BufferValidator(                -183'                "POLYGON ((32 136' 27 163' 30 236' 34 252' 49 291' 72 326' 83 339' 116 369' 155 391' 176 400' 219 414' 264 417' 279 416' 339 401' 353 395' 380 381' 394 372' 441 328' 458 303' 463 294' 480 251' 486 205' 486 183' 473 115' 469 105' 460 85' 454 74' 423 33' 382 2' 373 -3' 336 -19' 319 -24' 275 -31' 252 -32' 203 -27' 190 -24' 149 -10' 139 -5' 84 37' 76 46' 52 81' 36 121' 32 136))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test18,The following statement contains a magic number: new BufferValidator(                20'                "POLYGON((-4 225' -17 221' -16 223' -15 224' -13 227' -4 225))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test19,The following statement contains a magic number: new BufferValidator(                21'                "POLYGON ((184 369' 181 368' 180 368' 179 367' 176 366' 185 357' 184 369 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test20,The following statement contains a magic number: new BufferValidator(                1000'                "POLYGON ((13841 1031' 13851 903' 13853 885' 13853 875' 13856 862' 13859 831' 13670 900' 13841 1031))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test21,The following statement contains a magic number: new BufferValidator(                18'                "POLYGON ((164 84' 185 91' 190 75' 187 76' 182 77' 179 79' 178 79' 174 81' 173 81' 172 82' 169 83'  164 84 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test22,The following statement contains a magic number: new BufferValidator(                15'                "POLYGON ((224 271' 225 261' 214 258' 210 266' 212 267' 214 267' 217 268' 218 268' 219 268' 221 269' 222 270'  224 271 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test23,The following statement contains a magic number: new BufferValidator(                25'                "POLYGON ((484 76' 474 79' 492 122' 502 119' 501 117' 500 112' 499 111' 498 107' 497 104' 496 103' 494 98' 493 96' 491 92' 490 90' 489 86' 487 81' 486 79' 485 77' 484 76 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test24,The following statement contains a magic number: new BufferValidator(                160'                "POLYGON ((20 60' 20 20' 240 20' 40 21' 240 22' 40 22' 240 23' 240 60' 20 60))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test25,The following statement contains a magic number: new BufferValidator(                -3'                "POLYGON ((233 195' 232 195' 231 194' 222 188' 226 187' 227 187' 229 187' 230 186' 232 186' 234 185' 236 184' 237 183' 238 182' 237 184' 236 185' 236 186' 235 187' 235 188' 234 189' 234 191' 234 192' 233 193' 233 195 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test26,The following statement contains a magic number: new BufferValidator(                6'                "LINESTRING (233 195' 232 195' 231 194' 222 188' 226 187' 227 187' 229 187' 230 186' 232 186' 234 185' 236 184' 237 183' 238 182' 237 184' 236 185' 236 186' 235 187' 235 188' 234 189' 234 191' 234 192' 233 193' 233 195 )")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test27,The following statement contains a magic number: new BufferValidator(                -30'                "POLYGON ((2330 1950' 2320 1950' 2310 1940' 2220 1880' 2260 1870' 2270 1870' 2290 1870' 2300 1860' 2320 1860' 2340 1850' 2360 1840' 2370 1830' 2380 1820' 2370 1840' 2360 1850' 2360 1860' 2350 1870' 2350 1880' 2340 1890' 2340 1910' 2340 1920' 2330 1930' 2330 1950 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test28,The following statement contains a magic number: new BufferValidator(                30'                "LINESTRING (2330 1950' 2320 1950' 2310 1940' 2220 1880' 2260 1870' 2270 1870' 2290 1870' 2300 1860' 2320 1860' 2340 1850' 2360 1840' 2370 1830' 2380 1820' 2370 1840' 2360 1850' 2360 1860' 2350 1870' 2350 1880' 2340 1890' 2340 1910' 2340 1920' 2330 1930' 2330 1950 )")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test29,The following statement contains a magic number: new BufferValidator(                26'                "POLYGON ((440 -93' 440 -67' 475 -67' 471 -71' 469 -72' 468 -73' 467 -74' 463 -78' 459 -81' 458 -82' 454 -84' 453 -85' 452 -86' 450 -86' 449 -87' 448 -88' 444 -90' 443 -91' 441 -92' 440 -93 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test30,The following statement contains a magic number: new BufferValidator(                260'                "POLYGON ((4400 -930' 4400 -670' 4750 -670' 4710 -710' 4690 -720' 4680 -730' 4670 -740' 4630 -780' 4590 -810' 4580 -820' 4540 -840' 4530 -850' 4520 -860' 4500 -860' 4490 -870' 4480 -880' 4440 -900' 4430 -910' 4410 -920' 4400 -930 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test31,The following statement contains a magic number: new BufferValidator(                  0.1'                  "POLYGON ((635074.6769928858 6184832.427381967' 635075.6723193424 6184799.950949265' 634717.5983159657 6184655.107092909' 634701.0176852546 6184648.498845058' 634697.7188197445 6184647.20632975' 634694.416887708 6184645.922033237' 634691.1138635761 6184644.642692243' 634687.8077729489 6184643.371570057' 634684.498667351 6184642.107006015' 634681.1875340013 6184640.847368483' 634677.8742698929 6184639.595978798' 634674.5570551592 6184638.351118257' 634671.2386969016 6184637.112873929' 634667.9173237421 6184635.881187774' 634664.5938713895 6184634.656088823' 634661.2674041622 6184633.437548058' 634657.9388577675 6184632.2255945075' 634654.6082322216 6184631.02022817' 634651.2745403448 6184629.823080709' 634647.9388208436 6184628.630859804' 634644.6000865338 6184627.4451971175' 634641.2592216335 6184626.267782336' 634637.9163291481 6184625.095294129' 634634.5713061031 6184623.931053837' 634631.2232683088 6184622.773371783' 634636.1918816608 6184608.365992378' 634633.2495506873 6184607.353869728' 634630.3051410569 6184606.348333739' 634627.3587557608 6184605.346063082' 634624.4102918282 6184604.3503790945' 634621.4607364619 6184603.359650123' 634618.5091539674 6184602.37384716' 634615.5564800596 6184601.392999219' 634612.6017790422 6184600.417077295' 634609.6450509242 6184599.446081388' 634606.6862442375 6184598.481672177' 634603.7263976521 6184597.52055733' 634600.7654082242 6184596.566058185' 634597.80145603 6184595.61645607' 634594.8364124894 6184594.671808995' 634591.8702261405 6184593.733777636' 634588.9020642313 6184592.799011653' 634585.9318238292 6184591.870832384' 634582.960543591 6184590.945947501' 634579.9871848791 6184590.027649342' 634577.0127348808 6184589.11430624' 634574.0362578988 6184588.205889201' 634571.0586381858 6184587.304087893' 634568.0790429743 6184586.405551985' 634565.0983050519 6184585.513631817' 634562.115540186 6184584.626637723' 634559.1316840936 6184583.744598703' 634556.1458010782 6184582.867485766' 634553.1587753976 6184581.996988578' 634550.1697742692 6184581.12975681' 634547.1796305005 6184580.269140797' 634544.1874598458 6184579.41345088' 634541.194198027 6184578.562716054' 634538.1998450506 6184577.716936321' 634535.2034137691 6184576.877743362' 634532.2059428038 6184576.041844833' 634529.2063935531 6184575.212533085' 634526.2057531879 6184574.388176442' 634523.2040217179 6184573.568774906' 634520.2002119992 6184572.755960159' 634517.1953626422 6184571.946439856' 634514.1893707667 6184571.143535337' 634510.267712847 6184585.871039091' 634281.9449709259 6184525.076957544' 633860.4859191478 6184412.861324424' 633664.3557212166 6184360.639468017' 633645.5884675509 6184355.641948889' 633486.222 6184313.208' 633485.7474265156 6184328.852301474' 633485.2749953512 6184344.496113185' 633650.4562371405 6184388.478170839' 633669.5206846121 6184393.553017912' 633852.6461183216 6184442.312440121' 634280.9949861752 6184556.364455' 634502.4254528129 6184615.324425217' 634505.716566367 6184616.204307566' 634509.0065372197 6184617.090806118' 634512.2953653594 6184617.983920872' 634515.5812308139 6184618.88193318' 634518.8659020835 6184619.788222348' 634522.1484948951 6184620.7010987215' 634525.4299963829 6184621.61893061' 634528.7093679372 6184622.545010364' 634531.9867124417 6184623.476016638' 634535.2619784358 6184624.413610098' 634538.5360501477 6184625.3594804' 634541.807159074 6184626.310248219' 634545.0771251463 6184627.267632202' 634548.3459483465 6184628.231632348' 634551.611808724 6184629.200529998' 634554.8764747474 6184630.177704472' 634558.138126462 6184631.161437107' 634561.3986867118 6184632.150125222' 634564.6571168633 6184633.147061154' 634567.9135198268 6184634.14892356' 634571.1678441261 6184635.157373106' 634574.421025444 6184636.172438785' 634577.6711923747 6184637.194062597' 634580.9192805979 6184638.222273537' 634584.1662257991 6184639.257100599' 634587.410208043 6184640.296825108' 634590.6529957657 6184641.3448264' 634593.8928205046 6184642.397725132' 634597.131502168 6184643.457239971' 634600.3671178726 6184644.524973575' 634603.6016934284 6184645.596001944' 634605.6958877691 6184646.2958191885' 634606.946276627 6184646.713661825' 634608.6177147877 6184647.275847967' 634610.2887808911 6184647.8379089665' 634613.6292576884 6184648.967082693' 634616.9666683461 6184650.104475331' 634620.3029357173 6184651.248484221' 634623.6361369188 6184652.4007120095' 634626.9663749042 6184653.557837355' 634630.2954695637 6184654.721578941' 634633.6214980055 6184655.893539405' 634636.9454988878 6184657.070426424' 634640.2664335228 6184658.255532312' 634643.5852890809 6184659.44722541' 634646.9020655481 6184660.6455057105' 634650.2167629072 6184661.850373212' 634653.5284454564 6184663.061798892' 634656.8370616816 6184664.2814434115' 634660.1436502574 6184665.506014449' 634663.4481081718 6184666.7388333315' 634666.7496027217 6184667.976549702' 634670.0489665787 6184669.222513908' 634673.3453155413 6184670.475036258' 634676.6396367943 6184671.732485097' 634679.9308916207 6184672.9981527375' 634683.2200672035 6184674.270407524' 634686.5062278372 6184675.54922043' 634689.789322 6184676.8362521175' 634693.0703883899 6184678.128210268' 634696.3493754807 6184679.426755545' 634699.6253475712 6184680.731858918' 634702.8982531315 6184682.04518105' 634706.1681951834 6184683.363400595' 635074.6769928858 6184832.427381967))")                  .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test32,The following statement contains a magic number: new BufferValidator(                30'                "MULTILINESTRING ((80 285' 85.5939933259177 234.65406006674084 )' (85.5939933259177 234.65406006674084' 98 123' 294 92' 344.3694502052736 126.0884157954882 )' (344.3694502052736 126.0884157954882' 393 159 )' (51 235' 85.5939933259177 234.65406006674084 )' (85.5939933259177 234.65406006674084' 251 233' 344.3694502052736 126.0884157954882 )' (344.3694502052736 126.0884157954882' 382 83 ))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test35,The following statement contains a magic number: new BufferValidator(                20'                "GEOMETRYCOLLECTION (POINT (100 100)' POLYGON ((400 260' 280 380' 240 220' 120 300' 120 100' 260 40' 200 160' 400 260))' LINESTRING (260 400' 220 280' 120 400' 20 280' 160 160' 60 40' 160 20' 360 140))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test36,The following statement contains a magic number: new BufferValidator(                20'                "GEOMETRYCOLLECTION (POINT (100 100)' POLYGON ((400 260' 120 300' 120 100' 400 260))' LINESTRING (20 280' 160 160' 60 40))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test37,The following statement contains a magic number: new BufferValidator(                300'                "POLYGON ((-140 700' 880 1120' 1280 -120' 300 -600' -480 -480' -140 700)'   (0 360' 780 500' 240 -220' 0 360))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test38,The following statement contains a magic number: new BufferValidator(                300'                "POLYGON ((-140 700' 880 1120' 1280 -120' 300 -600' -480 -480' -140 700)'   (0 360' 240 -220' 780 500' 0 360))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,Test39,The following statement contains a magic number: new BufferValidator(                30'                "MULTIPOLYGON (((0 400' 440 400' 440 0' 0 0' 0 400)'(380 360' 160 120' 260 80' 380 360))' ((360 320' 200 120' 240 100' 360 320)))")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision1,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (331771 5530174' 331776 5530175' 331782 5530177' 331787 5530177' 331791 5530178' 331796 5530178' 331800 5530178' 331805 5530177' 331811 5530176' 331817 5530175' 331823 5530173' 331828 5530171' 331832 5530169' 331835 5530167' 331839 5530163' 331843 5530160' 331846 5530157' 331849 5530154' 331853 5530150' 331855 5530145' 331857 5530141)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision2,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (317091 5557033' 317079 5557042' 317067 5557053' 317055 5557065' 317045 5557078' 317037 5557091' 317029 5557098' 317016 5557108' 317002 5557118' 316990 5557129' 316986 5557131' 316978 5557133' 316968 5557133' 316965 5557131' 316954 5557120' 316952 5557115' 316951 5557108' 316949 5557092' 316948 5557076' 316946 5557063' 316944 5557057' 316937 5557042' 316924 5557029' 316911 5557019' 316896 5557009' 316881 5557001' 316865 5556997' 316849 5556992' 316834 5556988' 316817 5556985' 316801 5556983' 316766 5556983' 316751 5556982' 316733 5556980' 316716 5556976' 316702 5556968' 316699 5556964' 316691 5556951' 316680 5556934' 316670 5556922' 316660 5556911' 316642 5556885' 316637 5556881)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision3,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (300181 5547255' 300183 5547252' 300203 5547253' 300209 5547261' 300237 5547277' 300262 5547286' 300280 5547292' 300288 5547297' 300293 5547303' 300297 5547311' 300299 5547319' 300299 5547334' 300306 5547349' 300320 5547367)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision4,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (301546 5537924' 301547 5537922' 301551 5537919' 301555 5537919' 301559 5537918' 301565 5537918' 301569 5537917' 301573 5537915' 301580 5537912' 301583 5537909' 301587 5537906' 301594 5537900' 301598 5537897' 301601 5537893' 301605 5537889' 301608 5537885' 301609 5537880' 301612 5537876' 301614 5537873' 301616 5537869' 301620 5537865' 301624 5537860' 301632 5537852' 301640 5537842' 301643 5537836' 301644 5537829' 301644 5537822' 301646 5537815' 301647 5537808' 301650 5537802' 301650 5537796' 301651 5537791' 301653 5537786' 301654 5537780' 301656 5537773' 301658 5537767' 301662 5537761)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision5,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (334797 5560136' 334781 5560129' 334777 5560128' 334762 5560122' 334760 5560121' 334752 5560116' 334745 5560109' 334742 5560103' 334741 5560098' 334736 5560087' 334731 5560082' 334726 5560081' 334708 5560072' 334691 5560063' 334674 5560052' 334660 5560048' 334655 5560048' 334633 5560049' 334621 5560046' 334616 5560043' 334596 5560034' 334586 5560025' 334573 5560009' 334562 5559982' 334549 5559943' 334543 5559923' 334538 5559905' 334535 5559887' 334530 5559869' 334536 5559853)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision6,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (316640 5563099' 316639 5563114' 316642 5563132' 316644 5563137' 316650 5563144' 316653 5563147' 316663 5563159' 316665 5563164' 316667 5563172' 316667 5563193' 316668 5563209' 316672 5563214' 316678 5563228' 316679 5563230' 316679 5563236' 316678 5563252' 316676 5563256' 316671 5563270' 316669 5563289' 316667 5563304' 316666 5563308' 316656 5563323' 316646 5563336' 316639 5563347)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision7,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (301178 5534835' 301189 5534837' 301218 5534837' 301229 5534836' 301237 5534836' 301245 5534838' 301268 5534838' 301273 5534837' 301279 5534838' 301286 5534838' 301289 5534839' 301296 5534842' 301302 5534844' 301306 5534846' 301309 5534850' 301313 5534853' 301316 5534856' 301319 5534868' 301320 5534873' 301323 5534877' 301326 5534882' 301334 5534896' 301340 5534902' 301344 5534908' 301348 5534913' 301352 5534919' 301357 5534925' 301363 5534932' 301369 5534937' 301375 5534941' 301382 5534949' 301386 5534955' 301397 5534964' 301402 5534967' 301407 5534972' 301411 5534975' 301414 5534980' 301418 5534986' 301419 5534989' 301422 5534994' 301426 5535000' 301438 5535012' 301444 5535017' 301456 5535030' 301457 5535033)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision8,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (303722 5533544' 303713 5533542' 303706 5533539' 303697 5533537' 303694 5533534' 303677 5533527' 303673 5533525' 303670 5533524' 303669 5533523' 303664 5533519' 303654 5533513' 303647 5533507' 303644 5533506' 303634 5533504' 303633 5533504' 303627 5533502)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision9,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (309969 5563538' 309955 5563542' 309941 5563548' 309913 5563562' 309896 5563569' 309883 5563576' 309868 5563586' 309855 5563594' 309841 5563603' 309830 5563614' 309818 5563624' 309805 5563635' 309791 5563645' 309778 5563654' 309766 5563663' 309752 5563672' 309722 5563692' 309709 5563699' 309681 5563713' 309667 5563721' 309651 5563728' 309631 5563734' 309615 5563739' 309602 5563747' 309589 5563756' 309578 5563766' 309566 5563775' 309554 5563785' 309542 5563796' 309538 5563801' 309535 5563810' 309532 5563828' 309533 5563833' 309540 5563855' 309546 5563868' 309552 5563884' 309556 5563900' 309559 5563916' 309561 5563933' 309561 5563970' 309559 5563988' 309554 5564003' 309550 5564018' 309546 5564032' 309542 5564047' 309538 5564061' 309531 5564074' 309528 5564077' 309518 5564090' 309507 5564101' 309493 5564110' 309492 5564111' 309480 5564119' 309474 5564121' 309458 5564123' 309443 5564125' 309426 5564125' 309408 5564123' 309393 5564123' 309377 5564126' 309373 5564129' 309364 5564139' 309360 5564147' 309359 5564151' 309359 5564155' 309362 5564159)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision10,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (299331 5536963' 299335 5536956' 299335 5536953' 299336 5536949' 299338 5536942' 299345 5536933' 299349 5536927' 299352 5536924' 299358 5536922' 299364 5536919' 299369 5536916' 299375 5536912' 299380 5536908' 299387 5536905' 299391 5536904' 299395 5536902' 299399 5536899' 299402 5536896' 299405 5536892' 299415 5536886' 299425 5536882' 299435 5536880' 299449 5536874' 299455 5536869' 299461 5536865' 299468 5536862' 299474 5536859' 299480 5536855' 299491 5536846' 299497 5536842' 299502 5536838' 299508 5536835' 299513 5536834' 299523 5536830' 299527 5536826' 299532 5536824' 299542 5536821' 299548 5536818' 299552 5536814' 299556 5536812' 299566 5536808' 299574 5536804' 299588 5536798' 299594 5536796' 299602 5536792' 299611 5536789' 299625 5536784' 299632 5536782' 299648 5536780' 299657 5536785' 299672 5536798' 299678 5536801' 299688 5536801' 299696 5536802' 299711 5536807' 299729 5536807' 299739 5536808' 299748 5536807' 299766 5536810' 299777 5536813' 299801 5536816' 299825 5536811' 299850 5536810' 299867 5536809' 299875 5536811' 299887 5536811' 299895 5536815' 299913 5536822)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision11,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (325089 5534737' 325089 5534733' 325093 5534723' 325099 5534718' 325118 5534712' 325129 5534709' 325147 5534709' 325164 5534732' 325164 5534740' 325162 5534746' 325159 5534749' 325144 5534760' 325143 5534763' 325145 5534782' 325162 5534800' 325184 5534812' 325187 5534815' 325190 5534831' 325196 5534852' 325205 5534867' 325214 5534876' 325219 5534878' 325239 5534880' 325251 5534890' 325259 5534892' 325282 5534887' 325294 5534883' 325314 5534864)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision12,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (307468 5557827' 307467 5557842' 307466 5557854' 307463 5557874' 307459 5557889' 307454 5557902' 307447 5557922' 307440 5557944' 307428 5557965' 307417 5557986' 307411 5557996' 307404 5558020' 307398 5558031' 307390 5558056' 307387 5558066' 307384 5558084' 307383 5558093' 307385 5558102' 307389 5558110' 307394 5558116' 307404 5558121' 307421 5558122' 307443 5558121' 307464 5558127' 307486 5558133' 307502 5558142' 307508 5558150)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision13,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (301395 5535820' 301412 5535803' 301416 5535798' 301420 5535786' 301423 5535782' 301427 5535778' 301432 5535771' 301437 5535768' 301444 5535763' 301447 5535760' 301452 5535757' 301459 5535754' 301462 5535753' 301468 5535750' 301473 5535747' 301481 5535742' 301487 5535739' 301494 5535734' 301499 5535730' 301508 5535725' 301514 5535721' 301521 5535716' 301527 5535714' 301533 5535711' 301538 5535707' 301542 5535703' 301554 5535693' 301559 5535688' 301563 5535681)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferTest.cs,TestFloatingPrecision14,The following statement contains a magic number: new BufferValidator(                100'                "LINESTRING (331384 5535032' 331397 5535031' 331415 5535025' 331426 5535022' 331436 5535016' 331451 5534999' 331460 5534994' 331468 5534993' 331474 5534996' 331479 5535001' 331482 5535015' 331486 5535019' 331493 5535018' 331504 5535011' 331508 5535011' 331519 5535022' 331526 5535023' 331542 5535019' 331547 5535016' 331549 5534994' 331558 5534975' 331562 5534968' 331565 5534966' 331571 5534967' 331575 5534970' 331576 5534978' 331575 5534987' 331568 5535005' 331564 5535022' 331565 5535030' 331570 5535038' 331578 5535044' 331582 5535046' 331592 5535046' 331602 5535043' 331613 5535038' 331631 5535027' 331640 5535021' 331645 5535020' 331654 5535020' 331662 5535022' 331669 5535028' 331676 5535040' 331674 5535065' 331668 5535089' 331659 5535108' 331655 5535118' 331655 5535123' 331662 5535143' 331662 5535147' 331651 5535167' 331646 5535181' 331642 5535198' 331640 5535210' 331641 5535234' 331642 5535245' 331645 5535255' 331648 5535276' 331651 5535287' 331663 5535309' 331665 5535316' 331666 5535324' 331671 5535337' 331677 5535344)")                .TestContains();
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferValidator.cs,BufferValidator,The following statement contains a magic number: SetFactory(new PrecisionModel()' 888);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferValidator.cs,AddTestContains,The following statement contains a magic number: AddTest(                  new TestCase("Contains"' 10)                      {                          TestMethod = () =>                              {                                  if (GetOriginal() is GeometryCollection)                                      return;                                    Assert.IsTrue(GetOriginal().IsValid);                                  if (_bufferDistance > 0)                                  {                                      Assert.IsTrue(                                          Contains(GetBuffer()' GetOriginal())'                                          Supplement("Expected buffer to contain original"));                                  }                                  else                                  {                                      Assert.IsTrue(                                          Contains(GetOriginal()' GetBuffer())'                                          Supplement("Expected original to contain buffer"));                                  }                              }                      });
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,BufferValidator,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\BufferValidator.cs,AddBufferResultValidatorTest,The following statement contains a magic number: AddTest(new TestCase("Buffer result validator"' 20)                  {                      TestMethod = () =>                          {                              if (GetOriginal() is GeometryCollection)                              {                                  return;                              }                              Assert.IsTrue(                                  BufferResultValidator.IsValid(GetOriginal()' _bufferDistance' GetBuffer())'                                  Supplement("BufferResultValidator failure"));                          }                  });
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds0 = depthSeg(0.7' 0.2' 1.4' 0.9);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds0 = depthSeg(0.7' 0.2' 1.4' 0.9);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds0 = depthSeg(0.7' 0.2' 1.4' 0.9);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds0 = depthSeg(0.7' 0.2' 1.4' 0.9);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds1 = depthSeg(0.3' 1.1' 0.7' 0.2);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds1 = depthSeg(0.3' 1.1' 0.7' 0.2);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds1 = depthSeg(0.3' 1.1' 0.7' 0.2);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContractTipToTail,The following statement contains a magic number: var ds1 = depthSeg(0.3' 1.1' 0.7' 0.2);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds0 = depthSeg(0.1' 1.9' 0.5' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds0 = depthSeg(0.1' 1.9' 0.5' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds0 = depthSeg(0.1' 1.9' 0.5' 1.0);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds1 = depthSeg(1.0' 0.9' 1.9' 1.4);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds1 = depthSeg(1.0' 0.9' 1.9' 1.4);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,DepthSegmentTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\DepthSegmentTest.cs,TestContract2,The following statement contains a magic number: var ds1 = depthSeg(1.0' 0.9' 1.9' 1.4);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom =                  new Polygon(                      new LinearRing(new Coordinate[]                                         {                                             new Coordinate(0' 0)' new Coordinate(0' 10)' new Coordinate(10' 10)'                                             new Coordinate(10' 0)' new Coordinate(0' 0)                                         }));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom =                  new Polygon(                      new LinearRing(new Coordinate[]                                         {                                             new Coordinate(0' 0)' new Coordinate(0' 10)' new Coordinate(10' 10)'                                             new Coordinate(10' 0)' new Coordinate(0' 0)                                         }));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom =                  new Polygon(                      new LinearRing(new Coordinate[]                                         {                                             new Coordinate(0' 0)' new Coordinate(0' 10)' new Coordinate(10' 10)'                                             new Coordinate(10' 0)' new Coordinate(0' 0)                                         }));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom =                  new Polygon(                      new LinearRing(new Coordinate[]                                         {                                             new Coordinate(0' 0)' new Coordinate(0' 10)' new Coordinate(10' 10)'                                             new Coordinate(10' 0)' new Coordinate(0' 0)                                         }));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom2 = geom.Buffer(2d);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Buffer,Test,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Buffer\Test.cs,Buffer,The following statement contains a magic number: var geom3 = geom2.Buffer(-2);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPointFlat,The following statement contains a magic number: CheckDistance("POINT (10 10 0 )"'                  "POINT (20 20 0 )"'                  14.1421356);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPointFlat,The following statement contains a magic number: CheckDistance("POINT (10 10 0 )"'                  "POINT (20 20 0 )"'                  14.1421356);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPoint,The following statement contains a magic number: CheckDistance("POINT (10 10 1 )"'                  "POINT (11 11 2 )"'                  1.7320508075688772);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPoint,The following statement contains a magic number: CheckDistance("POINT (10 10 0 )"'                  "POINT (10 20 10 )"'                  14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointSegFlat,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 0' 10 20 0 )"'                  "POINT (20 15 0 )"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointSeg,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 10' 20 20 20 )"'                  "POINT (11 11 10 )"'                  0.816496580927726);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestCrossSegmentsRobust,The following statement contains a magic number: CheckDistance("LINESTRING (0 0 0' 10000000 10000000 1 )"'                  "LINESTRING (0 0 1' 10000000 10000000 0 )"'                  0' 0.001);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestCrossSegmentsRobust,The following statement contains a magic number: CheckDistance("LINESTRING (-10000000 -10000000 0' 10000000 10000000 1 )"'                  "LINESTRING (-10000000 -10000000 1' 10000000 10000000 0 )"'                  0' 0.02);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestTSegmentsFlat,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 0' 10 20 0 )"'                  "LINESTRING (20 15 0' 25 15 0 )"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestParallelSegmentsFlat,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 0' 20 20 0 )"'                  "LINESTRING (10 20 0' 20 30 0 )"'                  7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestParallelSegments,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 0' 20 10 0 )"'                  "LINESTRING (10 20 10' 20 20 10 )"'                  14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestParallelSegments,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 0' 20 20 0 )"'                  "LINESTRING (10 20 10' 20 30 10 )"'                  12.24744871391589 );
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestLineLine,The following statement contains a magic number: CheckDistance("LINESTRING (10 10 20' 20 20 30' 20 20 1' 30 30 5 )"'                  "LINESTRING (1 80 10' 0 39 5' 39 0 5' 80 1 20)"'                  0.7071067811865476);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygon,The following statement contains a magic number: CheckDistance("POINT (150 150 10)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygon,The following statement contains a magic number: CheckDistance("POINT (150 150 -10)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygon,The following statement contains a magic number: CheckDistance("POINT (10 150 150)"'                  "POLYGON ((0 100 200' 0 200 200' 0 200 100' 0 100 100' 0 100 200))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygonFlat,The following statement contains a magic number: CheckDistance("POINT (250 250 0)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  70.71067811865476);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestLinePolygonFlat,The following statement contains a magic number: CheckDistance("LINESTRING (200 250 0' 260 260 0)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  50);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestLinePolygonSimple,The following statement contains a magic number: CheckDistance("LINESTRING (200 200 10' 260 260 100)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestLinePolygonHoleFlat,The following statement contains a magic number: CheckDistance("LINESTRING (150 150 10' 150 150 -10)"' PolyHoleFlat' 30);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestLinePolygonHoleFlat,The following statement contains a magic number: CheckDistance("LINESTRING (130 130 10' 150 150 100)"' PolyHoleFlat' 14.14213562373095);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckDistance("POINT (130 130 10)"' PolyHoleFlat' 14.14213562373095);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckDistance("POINT (130 130 -10)"' PolyHoleFlat' 14.14213562373095);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckDistance("POINT (110 110 100)"' PolyHoleFlat' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestPolygonPolygonLinkedThruHoles,The following statement contains a magic number: CheckDistance(                  // polygon with two holes                  Poly2HoleFlat'                  // boundary of polygon parallel to XZ plane with shell passing through holes                  "LINESTRING (120 120 -10' 120 120 100' 180 120 100' 180 120 -10' 120 120 -10)"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,Distance3DOpTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\Distance3DOpTest.cs,TestMultiPolygon,The following statement contains a magic number: CheckDistance(                  // Polygons parallel to XZ plane                  "MULTIPOLYGON ( ((120 120 -10' 120 120 100' 180 120 100' 180 120 -10' 120 120 -10))' ((120 200 -10' 120 200 190' 180 200 190' 180 200 -10' 120 200 -10)) )"'                  // Polygons parallel to XY plane                  "MULTIPOLYGON ( ((100 200 200' 200 200 200' 200 100 200' 100 100 200' 100 200 200))' ((100 200 210' 200 200 210' 200 100 210' 100 100 210' 100 200 210)) )"'                  10                  );
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPoint,The following statement contains a magic number: CheckWithinDistance("POINT (0 0 0 )"'                  "POINT (0 0 1 )"'                  0.5' false);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPoint,The following statement contains a magic number: CheckWithinDistance("POINT (10 10 1 )"'                  "POINT (11 11 2 )"'                  1.733);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPoint,The following statement contains a magic number: CheckWithinDistance("POINT (10 10 0 )"'                  "POINT (10 20 10 )"'                  14.143);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointSeg,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 10' 20 20 20 )"'                  "POINT (11 11 10 )"'                  0.8' false);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestTSegmentsFlat,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 0' 10 20 0 )"'                          "LINESTRING (20 15 0' 25 15 0 )"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestParallelSegmentsFlat,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 0' 20 20 0 )"'                  "LINESTRING (10 20 0' 20 30 0 )"'                  7.0710678118654755);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestParallelSegments,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 0' 20 10 0 )"'                  "LINESTRING (10 20 10' 20 20 10 )"'                  14.142135623730951);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestParallelSegments,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 0' 20 20 0 )"'                  "LINESTRING (10 20 10' 20 30 10 )"'                  12.24744871391589 );
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestLineLine,The following statement contains a magic number: CheckWithinDistance("LINESTRING (10 10 20' 20 20 30' 20 20 1' 30 30 5 )"'                  "LINESTRING (1 80 10' 0 39 5' 39 0 5' 80 1 20)"'                  0.7071067811865476);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygon,The following statement contains a magic number: CheckWithinDistance("POINT (150 150 10)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygon,The following statement contains a magic number: CheckWithinDistance("POINT (150 150 -10)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygon,The following statement contains a magic number: CheckWithinDistance("POINT (10 150 150)"'                  "POLYGON ((0 100 200' 0 200 200' 0 200 100' 0 100 100' 0 100 200))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygonFlat,The following statement contains a magic number: CheckWithinDistance("POINT (250 250 0)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  70.71067811865476);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestLinePolygonFlat,The following statement contains a magic number: CheckWithinDistance("LINESTRING (200 250 0' 260 260 0)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  50);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestLinePolygonSimple,The following statement contains a magic number: CheckWithinDistance("LINESTRING (200 200 10' 260 260 100)"'                  "POLYGON ((100 200 0' 200 200 0' 200 100 0' 100 100 0' 100 200 0))"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestLinePolygonHoleFlat,The following statement contains a magic number: CheckWithinDistance("LINESTRING (150 150 10' 150 150 -10)"' polyHoleFlat' 20' false);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckWithinDistance("POINT (130 130 10)"' polyHoleFlat' 14.143);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckWithinDistance("POINT (130 130 -10)"' polyHoleFlat' 14.143);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestPointPolygonHoleFlat,The following statement contains a magic number: CheckWithinDistance("POINT (110 110 100)"' polyHoleFlat' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance3d,WithinDistance3DTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance3D\WithinDistance3DTest.cs,TestMultiPolygon,The following statement contains a magic number: CheckWithinDistance(                  // Polygons parallel to XZ plane                  "MULTIPOLYGON ( ((120 120 -10' 120 120 100' 180 120 100' 180 120 -10' 120 120 -10))' ((120 200 -10' 120 200 190' 180 200 190' 180 200 -10' 120 200 -10)) )"'                  // Polygons parallel to XY plane                  "MULTIPOLYGON ( ((100 200 200' 200 200 200' 200 100 200' 100 100 200' 100 200 200))' ((100 200 210' 200 200 210' 200 100 210' 100 100 210' 100 200 210)) )"'                  10);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestDisjointCollinearSegments,The following statement contains a magic number: Assert.That(g1.Distance(g2)' Is.EqualTo(2.23606).Within(0.0001));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestDisjointCollinearSegments,The following statement contains a magic number: Assert.That(g1.Distance(g2)' Is.EqualTo(2.23606).Within(0.0001));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestEverything,The following statement contains a magic number: Assert.That(g1.Distance(g2)' Is.EqualTo(18.97366596).Within(1E-5));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestEverything,The following statement contains a magic number: Assert.That(g1.Distance(g2)' Is.EqualTo(18.97366596).Within(1E-5));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestEverything,The following statement contains a magic number: Assert.That(g1.Distance(g2)' Is.Zero.Within(1E-5));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestEverything,The following statement contains a magic number: Assert.That(l1.Distance(l2)' Is.Zero.Within(1E-5));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Distance,AbstractDistanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Distance\AbstractDistanceTest.cs,TestClosestPoints,The following statement contains a magic number: const double Tolerance = 1E-10;
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Overlay,SnapRoundOverlayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Overlay\SnapRoundOverlayTest.cs,Test,The following statement contains a magic number: const double scaleFactor = 1e10;
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Overlay,SnapRoundOverlayTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Overlay\SnapRoundOverlayTest.cs,CreateAffineTransformation,The following statement contains a magic number: double growHeight = (env.Width / imageRatio - env.Height) / 2;
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: Test(500);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: Test(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: Test(2000);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: Test(100000);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: const double size = 100;
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: var sinePolyCrinkly = GeometryPrecisionReducer.Reduce(sinePoly'                                                                    new PrecisionModel(size/10));
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,Test,The following statement contains a magic number: TestRectangles(target' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,CreateSineStar,The following statement contains a magic number: var gsf = new SineStarFactory                            {Centre = origin' Size = size' NumPoints = nPts' ArmLengthRatio = 2' NumArms = 20};
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Predicate,RectangleIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Predicate\RectangleIntersectsPerformance.cs,CreateSineStar,The following statement contains a magic number: var gsf = new SineStarFactory                            {Centre = origin' Size = size' NumPoints = nPts' ArmLengthRatio = 2' NumArms = 20};
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Union,CascadedPolygonUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\CascadedPolygonUnionTest.cs,TestDiscs1,The following statement contains a magic number: var geoms = CreateDiscs(5' 0.7);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Union,CascadedPolygonUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\CascadedPolygonUnionTest.cs,TestDiscs1,The following statement contains a magic number: var geoms = CreateDiscs(5' 0.7);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Union,CascadedPolygonUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\CascadedPolygonUnionTest.cs,TestDiscs2,The following statement contains a magic number: var geoms = CreateDiscs(5' 0.55);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Union,CascadedPolygonUnionTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\CascadedPolygonUnionTest.cs,TestDiscs2,The following statement contains a magic number: var geoms = CreateDiscs(5' 0.55);
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Union,CascadedPolygonUnionTester,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Union\CascadedPolygonUnionTester.cs,UnionIterated,The following statement contains a magic number: count % 100 == 0
Magic Number,NetTopologySuite.Tests.NUnit.Operation.Valid,ValidClosedRingTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Operation\Valid\ValidClosedRingTest.cs,UpdateNonClosedRing,The following statement contains a magic number: pts[0].X += 0.0001;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DDOrientationIndexAccuracyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DDOrientationIndexAccuracyTest.cs,TestRightTriangleForDeterminant,The following statement contains a magic number: CheckLine45(1' 100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DDOrientationIndexAccuracyTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DDOrientationIndexAccuracyTest.cs,TestRightTriangleForDeterminant,The following statement contains a magic number: CheckLine45(1' 100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,TestRandomDisjointCollinearSegments,The following statement contains a magic number: int n = 1000000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,TestRandomDisjointCollinearSegments,The following statement contains a magic number: 0 == DistanceComputer.SegmentToSegment(seg[0]' seg[1]' seg[2]' seg[3])
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,TestRandomDisjointCollinearSegments,The following statement contains a magic number: 0 == DistanceComputer.SegmentToSegment(seg[0]' seg[1]' seg[2]' seg[3])
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,RandomDisjointCollinearSegments,The following statement contains a magic number: var seg = new Coordinate[4];
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,RandomDisjointCollinearSegments,The following statement contains a magic number: double x1 = 10;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,RandomDisjointCollinearSegments,The following statement contains a magic number: double x3 = x1 + gap + 10;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,RandomDisjointCollinearSegments,The following statement contains a magic number: seg[2] = new Coordinate(x2' slope*x2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,DistanceLineLineStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\DistanceLineLineStressTest.cs,RandomDisjointCollinearSegments,The following statement contains a magic number: seg[3] = new Coordinate(x3' slope*x3);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,IndexedPointInAreaStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\IndexedPointInAreaStressTest.cs,TestGrid,The following statement contains a magic number: var gridBuilder = new PerturbedGridPolygonBuilder(geomFactory)                                    {                                        NumLines = 20'                                        LineWidth = 10.0'                                        Seed = 1185072199                                        ' Verbose =  false                                    };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,IndexedPointInAreaStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\IndexedPointInAreaStressTest.cs,TestGrid,The following statement contains a magic number: var gridBuilder = new PerturbedGridPolygonBuilder(geomFactory)                                    {                                        NumLines = 20'                                        LineWidth = 10.0'                                        Seed = 1185072199                                        ' Verbose =  false                                    };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,IndexedPointInAreaStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\IndexedPointInAreaStressTest.cs,TestGrid,The following statement contains a magic number: var gridBuilder = new PerturbedGridPolygonBuilder(geomFactory)                                    {                                        NumLines = 20'                                        LineWidth = 10.0'                                        Seed = 1185072199                                        ' Verbose =  false                                    };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,IndexedPointInAreaStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\IndexedPointInAreaStressTest.cs,TestGrid,The following statement contains a magic number: var gridTester = new PointInAreaStressTester(geomFactory' area)                                   {                                       NumPoints = 100000'                                       TestPointInAreaLocator = pia                                   };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,InteriorPointAreaPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\InteriorPointAreaPerfTest.cs,InteriorPointAreaPerfTest,The following statement contains a magic number: this.RunSize = new[] { 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,MinimumBoundingCircleStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\MinimumBoundingCircleStressTest.cs,TestStressRun,The following statement contains a magic number: int count = 100;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,MinimumBoundingCircleStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\MinimumBoundingCircleStressTest.cs,TestStressRun,The following statement contains a magic number: int n = random.Next(0' 10000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,MinimumBoundingCircleStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\MinimumBoundingCircleStressTest.cs,Run,The following statement contains a magic number: checkWithinCircle(randPts' centre' radius' 0.0001);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,MinimumBoundingCircleStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\MinimumBoundingCircleStressTest.cs,CreateRandomPoints,The following statement contains a magic number: double x = 100 * random.NextDouble();
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,MinimumBoundingCircleStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\MinimumBoundingCircleStressTest.cs,CreateRandomPoints,The following statement contains a magic number: double y = 100*random.NextDouble();
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRightTriangles,The following statement contains a magic number: CheckRightTriangles(200' 100' 1000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRightTriangles,The following statement contains a magic number: CheckRightTriangles(200' 100' 1000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRightTriangles,The following statement contains a magic number: CheckRightTriangles(200' 100' 1000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRandomTriangles,The following statement contains a magic number: CheckRandomTriangles(1000' 100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRandomTriangles,The following statement contains a magic number: CheckRandomTriangles(1000' 100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,TestRandomTriangles,The following statement contains a magic number: CheckRandomTriangles(1000' 100' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,CheckTriangleConsistent,The following statement contains a magic number: var seg = new LineSegment(triPts[1]' triPts[2]);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,CheckTriangleConsistent,The following statement contains a magic number: var orientation = Orientation.Index(triPts[1]' triPts[2]' pt);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,PointInRingRobustnessTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\PointInRingRobustnessTest.cs,CheckTriangleConsistent,The following statement contains a magic number: Console.WriteLine("Inconsistent: "                                    + "PIR=" + isPointInRing + " Orient=" + orientation                                    + "  Pt: " + WKTWriter.ToPoint(pt)                                    + "  seg: " + WKTWriter.ToLineString(triPts[1]' triPts[2])                                    + "  tri: " + ToPolygon(triPts));
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,SimpleRayCrossingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\SimpleRayCrossingStressTest.cs,TestGrid,The following statement contains a magic number: gridBuilder.NumLines = 20;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,SimpleRayCrossingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\SimpleRayCrossingStressTest.cs,TestGrid,The following statement contains a magic number: gridBuilder.LineWidth = 10.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Algorithm,SimpleRayCrossingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Algorithm\SimpleRayCrossingStressTest.cs,TestGrid,The following statement contains a magic number: gridTester.NumPoints = 100000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: const double originX = 1000000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: const double originY = 5000000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: var vertex = new Coordinate(originX + (1d + Math.Sin( i/(double) nrVertices*2*Math.PI))'                                                  originY + (1d + Math.Cos( i/(double) nrVertices*2*Math.PI)));
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: var vertex = new Coordinate(originX + (1d + Math.Sin( i/(double) nrVertices*2*Math.PI))'                                                  originY + (1d + Math.Cos( i/(double) nrVertices*2*Math.PI)));
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: double exactArea = 0.5 * nrVertices * Math.Sin(2 * Math.PI / nrVertices);
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: double exactArea = 0.5 * nrVertices * Math.Sin(2 * Math.PI / nrVertices);
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,TestAreaPrecisionPerformance,The following statement contains a magic number: nrVertices <= 5000000
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,OriginalSignedArea,The following statement contains a magic number: ring.Length < 3
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,OriginalSignedArea,The following statement contains a magic number: return -sum/2.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,AccurateSignedArea,The following statement contains a magic number: ring.Length < 3
Magic Number,NetTopologySuite.Tests.NUnit.Performance,AreaPrecisionPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\AreaPrecisionPerformanceTest.cs,AccurateSignedArea,The following statement contains a magic number: return sum/2.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance,ExamplePerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\ExamplePerformanceTest.cs,ExamplePerformanceTest,The following statement contains a magic number: RunSize = new[] {5' 10' 20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance,ExamplePerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\ExamplePerformanceTest.cs,ExamplePerformanceTest,The following statement contains a magic number: RunSize = new[] {5' 10' 20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance,ExamplePerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\ExamplePerformanceTest.cs,ExamplePerformanceTest,The following statement contains a magic number: RunSize = new[] {5' 10' 20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance,ExamplePerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\ExamplePerformanceTest.cs,ExamplePerformanceTest,The following statement contains a magic number: RunIterations = 10;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Dissolve,LineDissolveStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Dissolve\LineDissolveStressTest.cs,Test,The following statement contains a magic number: const int maxTimes = 5;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,Setup,The following statement contains a magic number: var sinePoly = CreateSineStar(new Coordinate(0' 0)' 100000.0' nPts);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,CreateSineStar,The following statement contains a magic number: var gsf = new NetTopologySuite.Geometries.Utilities.SineStarFactory(_factory)                  {Centre = origin' Size = size' NumPoints = numberOfPoints' ArmLengthRatio = 0.1' NumArms = 20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,CreateSineStar,The following statement contains a magic number: var gsf = new NetTopologySuite.Geometries.Utilities.SineStarFactory(_factory)                  {Centre = origin' Size = size' NumPoints = numberOfPoints' ArmLengthRatio = 0.1' NumArms = 20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedGeometryThreadSafeTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedGeometryThreadSafeTest.cs,GetRunnable,The following statement contains a magic number: return delegate(object parameter)                  {                      var pg = (IPreparedGeometry) parameter;                        for (int i = 0; i < 20; i++)                      {                          var g = CreateSineStar(new Coordinate(Rnd.Next(-10' 10)' Rnd.Next(-10' 10))' 100000.0' Rnd.Next(75' 110));                          bool intersects = pg.Intersects(g);                          Console.WriteLine("ThreadId {0} Test {1} Result {2}"' threadIndex' i' intersects);                      }                        ((AutoResetEvent) WaitHandles[threadIndex]).Set();                  };
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedLineIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedLineIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(5);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedLineIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedLineIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(10);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedLineIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedLineIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(500);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedLineIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedLineIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedLineIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedLineIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(2000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(5);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(10);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(500);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(2000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: Test(4000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,Test,The following statement contains a magic number: var sinePoly = CreateSineStar(new Coordinate(0' 0)' 100' nPts);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,CreateSineStar,The following statement contains a magic number: gsf.ArmLengthRatio = 0.1;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,PreparedPolygonIntersectsPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\PreparedPolygonIntersectsPerformanceTest.cs,CreateSineStar,The following statement contains a magic number: gsf.NumArms = 50;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,TestDataBuilder,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\TestDataBuilder.cs,CreateSineStar,The following statement contains a magic number: gsf.ArmLengthRatio = 0.1;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Geometries.Prepared,TestDataBuilder,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Geometries\Prepared\TestDataBuilder.cs,CreateSineStar,The following statement contains a magic number: gsf.NumArms = 20;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,Test,The following statement contains a magic number: Run(1000000);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,Run,The following statement contains a magic number: n = 1000000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDouble,The following statement contains a magic number: double a = 9.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDouble,The following statement contains a magic number: const double factor = 10.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDecimal,The following statement contains a magic number: decimal a = new decimal(9.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDecimal,The following statement contains a magic number: decimal factor = new decimal(10.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDouble,The following statement contains a magic number: var a = new DD(9.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDouble,The following statement contains a magic number: var factor = new DD(10.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDoubleSelf,The following statement contains a magic number: double a = 9.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDoubleSelf,The following statement contains a magic number: double factor = 10.0;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDoubleSelf,The following statement contains a magic number: var c = new DD(9.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,DDExpressionPerformance,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\DDExpressionPerformance.cs,RunDoubleDoubleSelf,The following statement contains a magic number: var b = new DD(9.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Mathematics,InCirclePerf,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Mathematics\InCirclePerformance.cs,Test,The following statement contains a magic number: int n = 1000000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,DepthSegmentStressTest,The following statement contains a magic number: RunSize = new int[] {20};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,DepthSegmentStressTest,The following statement contains a magic number: RunIterations = 100;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,XXrunSort,The following statement contains a magic number: var segs = CreateRandomDepthSegments(100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,RunMin,The following statement contains a magic number: var segs = CreateRandomDepthSegments(100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,CreateRandomDepthSegment,The following statement contains a magic number: double scale = 10;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,CreateRandomDepthSegment,The following statement contains a magic number: int max = 10;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,DepthSegmentStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\DepthSegmentStressTest.cs,CreateRandomDepthSegment,The following statement contains a magic number: double ang = 2*Math.PI*_rnd.NextDouble();
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,FileBufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\FileBufferResultValidatorTest.cs,RunTest,The following statement contains a magic number: RunAll(polys' 0.01);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,FileBufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\FileBufferResultValidatorTest.cs,RunTest,The following statement contains a magic number: RunAll(polys' 0.1);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,FileBufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\FileBufferResultValidatorTest.cs,RunTest,The following statement contains a magic number: RunAll(polys' 10.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,FileBufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\FileBufferResultValidatorTest.cs,RunTest,The following statement contains a magic number: RunAll(polys' 100.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Buffer,FileBufferResultValidatorTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Buffer\FileBufferResultValidatorTest.cs,RunTest,The following statement contains a magic number: RunAll(polys' 1000.0);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Distance,TestPerfDistanceLinesPoints,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Distance\TestPerfDistanceLinePoints.cs,Test,The following statement contains a magic number: Test(100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Distance,TestPerfDistanceLinesPoints,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Distance\TestPerfDistanceLinePoints.cs,CreateDiagonalCircles,The following statement contains a magic number: circles[i] = (Polygon) pt.Buffer(inc/2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryStar,The following statement contains a magic number: var rr1 = rrFact.CreateRectangle(100' 20' angle1);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryStar,The following statement contains a magic number: var rr1 = rrFact.CreateRectangle(100' 20' angle1);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryStar,The following statement contains a magic number: var rr2 = rrFact.CreateRectangle(100' 20' angle2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryStar,The following statement contains a magic number: var rr2 = rrFact.CreateRectangle(100' 20' angle2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryAccum,The following statement contains a magic number: double basex = angle2 * MAX_DISPLACEMENT - (MAX_DISPLACEMENT / 2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryAccum,The following statement contains a magic number: var rr1 = rrFact.CreateRectangle(100' 20' angle1' baseCoord);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,OverlayNodingStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,GenerateGeometryAccum,The following statement contains a magic number: var rr1 = rrFact.CreateRectangle(100' 20' angle1' baseCoord);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,RotatedRectangleFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,CreateRectangle,The following statement contains a magic number: double posx = length / 2 * Math.Cos(angle);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,RotatedRectangleFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,CreateRectangle,The following statement contains a magic number: double posy = length / 2 * Math.Sin(angle);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,RotatedRectangleFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,CreateRectangle,The following statement contains a magic number: double widthOffsetx = (width / 2) * Math.Cos(angle + PiOver2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,RotatedRectangleFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,CreateRectangle,The following statement contains a magic number: double widthOffsety = (width / 2) * Math.Sin(angle + PiOver2);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Overlay,RotatedRectangleFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Overlay\OverlayNodingStressTest.cs,CreateRectangle,The following statement contains a magic number: pts[4] = pts[0].Copy();
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,RelateMonotoneLinesPerfTest,The following statement contains a magic number: RunSize = new int[] {2' 4' 8' 16' 32' 64' 128' 256' 512};
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Relate,RelateMonotoneLinesPerfTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Relate\RelateMonotoneLinesPerfTest.cs,CreateLine,The following statement contains a magic number: double distanceTolerance = 100.0/nVertices;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Union,UnionPerfTester,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Union\UnionPerfTester.cs,unionAllSimple,The following statement contains a magic number: count%100 == 0
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runComb,The following statement contains a magic number: const int size = 400;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runComb,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runComb,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossRing,The following statement contains a magic number: const int size = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossRing,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossRing,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossPoly,The following statement contains a magic number: const int size = 1000;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossPoly,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,ValidStressTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,runStarCrossPoly,The following statement contains a magic number: var env = new Envelope(0' 100' 0' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,StarCross,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,Star,The following statement contains a magic number: double len = 0.5 * System.Math.Min(env.Height' env.Width);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,StarCross,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,Star,The following statement contains a magic number: double angInc = System.Math.PI + 2 * System.Math.PI / nSeg;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CrossedComb,The following statement contains a magic number: var trans = AffineTransformation.RotationInstance(0.5 * System.Math.PI' centre.X' centre.Y);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: int npts = 4 * (nArms - 1) + 2 + 2 + 1;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: int npts = 4 * (nArms - 1) + 2 + 2 + 1;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: int npts = 4 * (nArms - 1) + 2 + 2 + 1;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: double armWidth = env.Width / (2 * nArms - 1);
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: double x1 = xBase + i * 2 * armWidth;
Magic Number,NetTopologySuite.Tests.NUnit.Performance.Operation.Valid,Comb,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Valid\ValidStressTest.cs,CreateComb,The following statement contains a magic number: pts[ipts++] = new Coordinate(x1 + 2 * armWidth' yBase + armWidth);
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestPolygonNoReduction,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestPolygonReductionWithSplit,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestPolygonReduction,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestPolygonWithTouchingHole,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .SetExpectedResult(resStr)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestFlattishPolygon,The following statement contains a magic number: new GeometryOperationValidator(                  DPSimplifierResult.GetResult(                      geomStr'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestTinySquare,The following statement contains a magic number: new GeometryOperationValidator(                  DPSimplifierResult.GetResult(                      geomStr'                      10.0))              .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestTinyHole,The following statement contains a magic number: new GeometryOperationValidator(                  DPSimplifierResult.GetResult(                      geomStr'                      30.0))              .TestEmpty(false);
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestTinyLineString,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestMultiPoint,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .SetExpectedResult(geomStr)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestMultiLineString,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestMultiLineStringWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  DPSimplifierResult.GetResult(                      "MULTILINESTRING( EMPTY' (0 0' 50 0' 70 0' 80 0' 100 0)' (0 0' 50 1' 60 1' 100 0) )"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestMultiPolygonWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  DPSimplifierResult.GetResult(                      "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DouglasPeuckerSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,TestGeometryCollection,The following statement contains a magic number: new GeometryOperationValidator(                      DPSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,DPSimplifierResult,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\DouglasPeuckerSimplifierTest.cs,GetResult,The following statement contains a magic number: var ioGeom = new Geometry[2];
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiPolygonWithSmallComponents,The following statement contains a magic number: var geometry = TPSimplifierResult.GetResult(                  geomStr'                  0.0057);
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonWithSpike,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      geomStr'                      2.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonNoReduction,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "POLYGON ((20 220' 40 220' 60 220' 80 220' 100 220' 120 220' 140 220' 140 180' 100 180' 60 180'     20 180' 20 220))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonNoReductionWithConflicts,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "POLYGON ((40 240' 160 241' 280 240' 280 160' 160 240' 40 140' 40 240))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonWithTouchingHole,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "POLYGON ((80 200' 240 200' 240 60' 80 60' 80 200)' (120 120' 220 120' 180 199' 160 200' 140 199' 120 120))"'                      10.0))                  .SetExpectedResult("POLYGON ((80 200' 240 200' 240 60' 80 60' 80 200)' (120 120' 220 120' 180 199' 160 200' 140 199' 120 120))")                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestFlattishPolygon,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "POLYGON ((0 0' 50 0' 53 0' 55 0' 100 0' 70 1'  60 1' 50 1' 40 1' 0 0))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestPolygonWithFlattishHole,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      geomStr'                      20.0))                  .SetExpectedResult(geomStr)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestTinySquare,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                "POLYGON ((0 5' 5 5' 5 0' 0 0' 0 1' 0 5))"'                  10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestTinyLineString,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "LINESTRING (0 5' 1 5' 2 5' 5 5)"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestTinyClosedLineString,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      geomStr'                      10))                  .SetExpectedResult(geomStr)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiPoint,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      geomStr'                      10.0))                  .SetExpectedResult(geomStr)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiLineString,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "MULTILINESTRING( (0 0' 50 0' 70 0' 80 0' 100 0)' (0 0' 50 1' 60 1' 100 0) )"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiLineStringWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "MULTILINESTRING( EMPTY' (0 0' 50 0' 70 0' 80 0' 100 0)' (0 0' 50 1' 60 1' 100 0) )"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestMultiPolygonWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TopologyPreservingSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,TestGeometryCollection,The following statement contains a magic number: new GeometryOperationValidator(                  TPSimplifierResult.GetResult(                      "GEOMETRYCOLLECTION ("                      + "MULTIPOINT (80 200' 240 200' 240 60' 80 60' 80 200' 140 199' 120 120)'"                      + "POLYGON ((80 200' 240 200' 240 60' 80 60' 80 200))'"                      + "LINESTRING (80 200' 240 200' 240 60' 80 60' 80 200' 140 199' 120 120)"                      + ")"                      ' 10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,TPSimplifierResult,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\TopologyPreservingSimplifierTest.cs,GetResult,The following statement contains a magic number: var ioGeom = new Geometry[2];
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonNoReduction,The following statement contains a magic number: new GeometryOperationValidator(                      VWSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInShell,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      geomStr'                      10.0))                  .SetExpectedResult(result)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonSpikeInHole,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      geomStr'                      10.0))                  .SetExpectedResult(result)                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonReductionWithSplit,The following statement contains a magic number: new GeometryOperationValidator(                      VWSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestPolygonReduction,The following statement contains a magic number: new GeometryOperationValidator(                      VWSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestFlattishPolygon,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      geomStr'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestTinySquare,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      geomStr'                      10.0))              .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestTinyHole,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      geomStr'                      30.0))              .TestEmpty(false);
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestTinyLineString,The following statement contains a magic number: new GeometryOperationValidator(                      VWSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestMultiLineString,The following statement contains a magic number: new GeometryOperationValidator(                      VWSimplifierResult.GetResult(                          geomStr'                          10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestMultiLineStringWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      "MULTILINESTRING( EMPTY' (0 0' 50 0' 70 0' 80 0' 100 0)' (0 0' 50 1' 60 1' 100 0) )"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestMultiPolygonWithEmpty,The following statement contains a magic number: new GeometryOperationValidator(                  VWSimplifierResult.GetResult(                      "MULTIPOLYGON (EMPTY' ((-36 91.5' 4.5 91.5' 4.5 57.5' -36 57.5' -36 91.5))' ((25.5 57.5' 61.5 57.5' 61.5 23.5' 25.5 23.5' 25.5 57.5)))"'                      10.0))                  .Test();
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,TestNewResultsIdenticalToOldResults,The following statement contains a magic number: const double DistanceTolerance = 0.02;
Magic Number,NetTopologySuite.Tests.NUnit.Simplify,VWSimplifierResult,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Simplify\VWSimplifierTest.cs,GetResult,The following statement contains a magic number: var ioGeom = new Geometry[2];
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTS,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(0' 100)'                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTS,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(0' 100)'                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTS,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(0' 100)'                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTS,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(0' 100)'                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTS,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(0' 100)'                  new Coordinate(0' 0)'                  new Coordinate(50' 0)'                  new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedNTSConforming,The following statement contains a magic number: coordinates[coordinates.Length - 1].X -= 1e-7;
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedNTSConforming,The following statement contains a magic number: coordinates[coordinates.Length - 1].Y -= 1e-7;
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(0' 100)'                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(0' 100)'                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(0' 100)'                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(0' 100)'                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: var atb = new AffineTransformationBuilder(                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(0' 100)'                  new Coordinate(0' 0)' new Coordinate(50' 0)' new Coordinate(20' 100));
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: coordinates[coordinates.Length - 1].X -= 1e-7;
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,BasicFunctionalityTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\BasicFunctionalityTest.cs,TestInvertedItalicNTSConforming,The following statement contains a magic number: coordinates[coordinates.Length - 1].Y -= 1e-7;
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(10);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(10);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(100);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(1000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(10000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(20000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunShortTests,The following statement contains a magic number: Run(30000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunLongerTests,The following statement contains a magic number: Run(100000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunLongerTests,The following statement contains a magic number: Run(200000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunLongerTests,The following statement contains a magic number: Run(300000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunVeryLongTests,The following statement contains a magic number: Run(1000000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunVeryLongTests,The following statement contains a magic number: Run(2000000);
Magic Number,NetTopologySuite.Tests.NUnit.Triangulate,DelaunayPerformanceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Triangulate\DelaunayPerformanceTest.cs,RunVeryLongTests,The following statement contains a magic number: Run(3000000);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestEnumeration,The following statement contains a magic number: const int NodeCount = 18;
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: addRandomItems(q' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: CheckOrder(q' nodesToKeep: 3);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: addRandomItems(q' 33);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: addRandomItems(q' 13);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: q.ChangePriority(q.Head' 6);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: q.ChangePriority(q.Head' 7);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestLongSequenceOfOperations,The following statement contains a magic number: q.ChangePriority(q.Head' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: addRandomItems(q1' 178);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: addRandomItems(q2' 28);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: CheckOrder(q1' nodesToKeep: 42);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: addRandomItems(q1' 39);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: CheckOrder(q2' nodesToKeep: 2);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestCopiedQueue,The following statement contains a magic number: addRandomItems(q2' 18);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestDifferentComparer,The following statement contains a magic number: addRandomItems(q' 15);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestContainsConsistency,The following statement contains a magic number: addRandomItems(q' 150);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestContainsConsistency,The following statement contains a magic number: var missingNode = new PriorityQueueNode<int' int>(14);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestContainsConsistency,The following statement contains a magic number: var presentNode = new PriorityQueueNode<int' int>(14);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestContainsConsistency,The following statement contains a magic number: q.Enqueue(presentNode' 75);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(10)' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(10)' 10);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(5)' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(5)' 5);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(8)' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Enqueue(new PriorityQueueNode<int' int>(8)' 8);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,AlternativePriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\AlternativePriorityQueueTest.cs,TestOrderRandom1,The following statement contains a magic number: addRandomItems(q' 100);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Contains only nulls"' new Geometry[4]);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Four points in one polygon"' new Geometry[]              {                  null'                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  null'                  null'                  null'                  null'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Four points in one polygon"' new Geometry[]              {                  null'                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  null'                  null'                  null'                  null'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Four points in one polygon"' new Geometry[]              {                  null'                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  null'                  null'                  null'                  null'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Eight points in two polygons"' new Geometry[]              {                  factory.ToGeometry(new Envelope(1' 2' 3' 4))'                  null'                  factory.ToGeometry(new Envelope(4' 3' 2' 1))'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Nine random points in three polygons"' new Geometry[]              {                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Nine random points in three polygons"' new Geometry[]              {                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PointwiseGeometryAggregationTestCases,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PointwiseGeometryAggregationTestCases.cs,GetTestCases,The following statement contains a magic number: yield return ("Nine random points in three polygons"' new Geometry[]              {                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'                  new RandomPointsBuilder(factory) { NumPoints = 3 }.GetGeometry()'              });
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Add(10);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Add(5);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PriorityQueueTest.cs,TestOrder1,The following statement contains a magic number: q.Add(8);
Magic Number,NetTopologySuite.Tests.NUnit.Utilities,PriorityQueueTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Utilities\PriorityQueueTest.cs,TestOrderRandom1,The following statement contains a magic number: addRandomItems(q' 100);
Missing Default,NetTopologySuite.Tests.NUnit.Geometries,GeometryFactoryExTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\GeometryFactoryExTest.cs,TestShellRingOrientationEnforcement,The following switch statement is missing a default case: switch (ringOrientation)              {                  case LinearRingOrientation.CW:                      if (polygon.Shell.IsCCW)                          Assert.Fail($"Shell ring orientation requested {LinearRingOrientation.CW}' was CCW");                      if (!polygon.Holes[0].IsCCW)                          Assert.Fail($"Hole[0] ring orientation requested {LinearRingOrientation.CCW}' was CW"); ;                      if (!polygon.Holes[1].IsCCW)                          Assert.Fail($"Hole[1] ring orientation requested {LinearRingOrientation.CCW}' was CW"); ;                      break;                  case LinearRingOrientation.CCW:                      if (!polygon.Shell.IsCCW)                          Assert.Fail($"Shell ring orientation requested {LinearRingOrientation.CCW}' was CW");                      if (polygon.Holes[0].IsCCW)                          Assert.Fail($"Hole[0] ring orientation requested {LinearRingOrientation.CW}' was CCW"); ;                      if (polygon.Holes[1].IsCCW)                          Assert.Fail($"Hole[1] ring orientation requested {LinearRingOrientation.CW}' was CCW"); ;                      break;                  case LinearRingOrientation.DontCare:                      if (polygon.Shell.IsCCW != Orientation.IsCCW(origShellSequence))                          Assert.Fail($"Shell ring orientation flipped");                      if (polygon.Holes[0].IsCCW != Orientation.IsCCW(origHolesSequences[0]))                          Assert.Fail($"Hole[0] ring orientation flipped");                      if (polygon.Holes[1].IsCCW != Orientation.IsCCW(origHolesSequences[1]))                          Assert.Fail($"Hole[1] ring orientation flipped");                      break;              }
Missing Default,NetTopologySuite.Tests.NUnit.Geometries.Implementation,BaseCoordinateSequenceTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Geometries\Implementation\BaseCoordinateSequenceTest.cs,TestBaseBehaviorUsingDummySequence,The following switch statement is missing a default case: switch (ord)                      {                          case Ordinate.X:                              Assert.That(cs.GetX(i)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed.GetX(j)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed2.GetX(i)' Is.EqualTo(expectedOrdinateValue));                              if (expectedOrdinateValue < minX)                              {                                  minX = expectedOrdinateValue;                              }                                if (expectedOrdinateValue > maxX)                              {                                  maxX = expectedOrdinateValue;                              }                                break;                            case Ordinate.Y:                              Assert.That(cs.GetY(i)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed.GetY(j)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed2.GetY(i)' Is.EqualTo(expectedOrdinateValue));                              if (expectedOrdinateValue < minY)                              {                                  minY = expectedOrdinateValue;                              }                                if (expectedOrdinateValue > maxY)                              {                                  maxY = expectedOrdinateValue;                              }                                break;                            case Ordinate.Z:                              Assert.That(cs.GetZ(i)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed.GetZ(j)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed2.GetZ(i)' Is.EqualTo(expectedOrdinateValue));                              break;                            case Ordinate.M:                              Assert.That(cs.GetM(i)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed.GetM(j)' Is.EqualTo(expectedOrdinateValue));                              Assert.That(reversed2.GetM(i)' Is.EqualTo(expectedOrdinateValue));                              break;                      }
Missing Default,NetTopologySuite.Tests.NUnit.Performance.Operation.Union,UnionPerfTester,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.Tests.NUnit\Performance\Operation\Union\UnionPerfTester.cs,run,The following switch statement is missing a default case: switch (testType)                  {                      case CASCADED:                          union = unionCascaded(_polys);                          break;                      case ITERATED:                          union = unionAllSimple(_polys);                          break;                      case BUFFER0:                          union = unionAllBuffer(_polys);                          break;                  }
