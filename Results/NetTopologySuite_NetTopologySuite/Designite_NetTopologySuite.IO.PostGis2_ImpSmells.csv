Implementation smell,Namespace,Class,File,Method,Description
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: uint geometrySize = 8;
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: if (HasBoundingBox)                  geometrySize += 2*Dimension*8;
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: if (HasBoundingBox)                  geometrySize += 2*Dimension*8;
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputeSize,The following statement contains a magic number: switch (geometry.OgcGeometryType)              {                  case OgcGeometryType.Point:                      geometrySize += 4 + 4 + Dimension*8;                      break;                  case OgcGeometryType.LineString:                  case OgcGeometryType.CircularString:                      geometrySize += 4 + 4 + Dimension * 8 * (uint)geometry.NumPoints;                      break;                  case OgcGeometryType.Polygon:                      geometrySize += 4 + 4 + ComputePolygonSize((IPolygon) geometry);                      break;                  default:                      for (var i = 0; i < geometry.NumGeometries; i++)                          geometrySize += ComputeSize(geometry.GetGeometryN(i));                      break;              }
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputePolygonSize,The following statement contains a magic number: if ((rings % 2) != 0) rings++;
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputePolygonSize,The following statement contains a magic number: return (uint)(4*rings + points*Dimension*8);
Magic Number,NetTopologySuite.IO,PostGis2GeometryHeader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2GeometryHeader.cs,ComputePolygonSize,The following statement contains a magic number: return (uint)(4*rings + points*Dimension*8);
Magic Number,NetTopologySuite.IO,PostGis2Writer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2Writer.cs,WritePolygon,The following statement contains a magic number: if (numRings % 2 != 0)                  writer.Write(0);
Magic Number,NetTopologySuite.IO,PostGis2Reader,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO.PostGis2\PostGis2Reader.cs,ReadPolygon,The following statement contains a magic number: if (numRings % 2 != 0) reader.ReadInt32();
