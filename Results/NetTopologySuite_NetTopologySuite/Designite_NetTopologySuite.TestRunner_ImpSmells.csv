Implementation smell,Namespace,Class,File,Method,Description
Long Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,RunTest,The method has 133 lines of code.
Long Method,Open.Topology.TestRunner,XmlTestDocument,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestDocument.cs,LoadFile,The method has 153 lines of code.
Long Method,Open.Topology.TestRunner,XmlTestDocument,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestDocument.cs,ParseCaseNode,The method has 100 lines of code.
Complex Method,Open.Topology.TestRunner.Operations,ArgumentConverter,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\ArgumentConverter.cs,ConvertFromString,Cyclomatic complexity of the method is 9
Complex Method,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,StripHTMLTags,Cyclomatic complexity of the method is 8
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,RunTest,Cyclomatic complexity of the method is 46
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestBoundary,Cyclomatic complexity of the method is 9
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestBuffer,Cyclomatic complexity of the method is 12
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestCentroid,Cyclomatic complexity of the method is 9
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestConvexHull,Cyclomatic complexity of the method is 8
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestDifference,Cyclomatic complexity of the method is 17
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestIntersection,Cyclomatic complexity of the method is 17
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestSymDifference,Cyclomatic complexity of the method is 17
Complex Method,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,TestUnion,Cyclomatic complexity of the method is 17
Complex Method,Open.Topology.TestRunner,XmlTestDocument,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestDocument.cs,LoadFile,Cyclomatic complexity of the method is 19
Complex Method,Open.Topology.TestRunner,XmlTestDocument,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestDocument.cs,ParseCaseNode,Cyclomatic complexity of the method is 21
Complex Method,Open.Topology.TestRunner,XmlTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestFactory.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,Open.Topology.TestRunner,XmlTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestFactory.cs,ParseType,Cyclomatic complexity of the method is 41
Long Parameter List,Open.Topology.TestRunner.Functions,BaseGeometryFunction,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\BaseGeometryFunction.cs,BaseGeometryFunction,The method has 5 parameters. Parameters: category' name' parameterNames' parameterTypes' returnType
Long Parameter List,Open.Topology.TestRunner.Functions,BufferFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\BufferFunctions.cs,BufferWithParams,The method has 6 parameters. Parameters: g' distance' quadrantSegments' capStyle' joinStyle' mitreLimit
Long Parameter List,Open.Topology.TestRunner.Functions,BufferFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\BufferFunctions.cs,BufferOffsetCurveWithParams,The method has 6 parameters. Parameters: g' distance' quadrantSegments' capStyle' joinStyle' mitreLimit
Long Parameter List,Open.Topology.TestRunner.Functions,StaticMethodGeometryFunction,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\StaticMethodGeometryFunction.cs,StaticMethodGeometryFunction,The method has 6 parameters. Parameters: category' name' parameterNames' parameterTypes' returnType' method
Long Parameter List,Open.Topology.TestRunner.Result,BufferResultMatcher,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\BufferResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,BufferResultMatcher,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\BufferResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,EqualityResultMatcher<TResult>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\EqualityResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,EqualityResultMatcher<TResult>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\EqualityResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,IResultMatcher,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\IResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,IResultMatcher,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\IResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,NullResultMatcher<TResult>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\NullResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner.Result,NullResultMatcher<TResult>,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\NullResultMatcher.cs,IsMatch,The method has 6 parameters. Parameters: geom' opName' args' actualResult' expectedResult' tolerance
Long Parameter List,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,XmlTest,The method has 5 parameters. Parameters: description' bIsDefaultTarget' tolerance' geometryOperation' resultMatcher
Long Statement,Open.Topology.TestRunner.Functions,NodingFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NodingFunctions.cs,FindNodePoints,The length of the statement  "            return FunctionsUtil.GetFactoryOrDefault((Geometry)null).CreateMultiPointFromCoords(CoordinateArrays.ToCoordinateArray(intPts)); " is 128.
Long Statement,Open.Topology.TestRunner.Operations,OverlayValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\OverlayValidatedGeometryOperation.cs,OverlayOpCode,The length of the statement  "            if (methodName.Equals("intersection"' StringComparison.InvariantCultureIgnoreCase) ) return SpatialFunction.Intersection; " is 121.
Long Statement,Open.Topology.TestRunner.Operations,OverlayValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\OverlayValidatedGeometryOperation.cs,OverlayOpCode,The length of the statement  "            if (methodName.Equals("symDifference"' StringComparison.InvariantCultureIgnoreCase)) return SpatialFunction.SymDifference; " is 122.
Complex Conditional,Open.Topology.TestRunner.Operations,GeometryMethodOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\GeometryMethodOperation.cs,GetGeometryReturnType,The conditional expression  "returnClass == typeof (bool)                          || typeof (Geometry).IsAssignableFrom(returnClass)                          || returnClass == typeof (double) || returnClass == typeof (int)"  is complex.
Complex Conditional,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,Replace,The conditional expression  "orig == null || o == null || o.Length == 0 || n == null"  is complex.
Empty Catch Block,Open.Topology.TestRunner.Operations,GeometryMethodOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\GeometryMethodOperation.cs,convertArgFromString,The method has an empty catch block.
Empty Catch Block,Open.Topology.TestRunner.Operations,GeometryMethodOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\GeometryMethodOperation.cs,convertArgFromString,The method has an empty catch block.
Magic Number,Open.Topology.TestRunner.Functions,CGAlgorithmFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CGAlgorithmFunctions.cs,OrientationIndex,The following statement contains a magic number: segment.NumPoints != 2 || ptGeom.NumPoints != 1
Magic Number,Open.Topology.TestRunner.Functions,CGAlgorithmFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CGAlgorithmFunctions.cs,OrientationIndexDd,The following statement contains a magic number: segment.NumPoints != 2 || ptGeom.NumPoints != 1
Magic Number,Open.Topology.TestRunner.Functions,CGAlgorithmFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CGAlgorithmFunctions.cs,SegmentIntersection,The following statement contains a magic number: switch (ri.IntersectionNum)              {                  case 0:                      // no intersection => return empty point                      return g1.Factory.CreatePoint((Coordinate)null);                  case 1:                      // return point                      return g1.Factory.CreatePoint(ri.GetIntersection(0));                  case 2:                      // return line                      return g1.Factory.CreateLineString(                          new Coordinate[] {                              ri.GetIntersection(0)'                              ri.GetIntersection(1)                          });              }
Magic Number,Open.Topology.TestRunner.Functions,ConstructionFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\ConstructionFunctions.cs,MaximumDiameterLength,The following statement contains a magic number: return 2 * (new MinimumBoundingCircle(g)).GetRadius();
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomRadialPoints,The following statement contains a magic number: double rMax = Math.Min(xLen' yLen) / 2.0;
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomRadialPoints,The following statement contains a magic number: double centreX = env.MinX + xLen / 2;
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomRadialPoints,The following statement contains a magic number: double centreY = env.MinY + yLen / 2;
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomRadialPoints,The following statement contains a magic number: double ang = 2 * Math.PI * RND.NextDouble();
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,HaltonPoints,The following statement contains a magic number: return HaltonPointsWithBases(g' nPts' 2' 3);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,HaltonPoints,The following statement contains a magic number: return HaltonPointsWithBases(g' nPts' 2' 3);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,HaltonPoints57,The following statement contains a magic number: return HaltonPointsWithBases(g' nPts' 5' 7);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,HaltonPoints57,The following statement contains a magic number: return HaltonPointsWithBases(g' nPts' 5' 7);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomQuadrant,The following statement contains a magic number: int quad = (int)(RND.NextDouble() * 4);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomQuadrant,The following statement contains a magic number: quad = 3;
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomQuadrant,The following statement contains a magic number: quad > 3
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomPtAround,The following statement contains a magic number: double x0 = basePt.X + xLen * (RND.NextDouble() - 0.5);
Magic Number,Open.Topology.TestRunner.Functions,CreateRandomGeometryFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateRandomGeometries.cs,RandomPtAround,The following statement contains a magic number: double y0 = basePt.Y + yLen * (RND.NextDouble() - 0.5);
Magic Number,Open.Topology.TestRunner.Functions,CreateShapeFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateShapeFunctions.cs,Supercircle3,The following statement contains a magic number: return Supercircle(g' nPts' 3);
Magic Number,Open.Topology.TestRunner.Functions,CreateShapeFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateShapeFunctions.cs,Squircle,The following statement contains a magic number: return Supercircle(g' nPts' 4);
Magic Number,Open.Topology.TestRunner.Functions,CreateShapeFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateShapeFunctions.cs,Supercircle5,The following statement contains a magic number: return Supercircle(g' nPts' 5);
Magic Number,Open.Topology.TestRunner.Functions,CreateShapeFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CreateShapeFunctions.cs,SupercirclePoint5,The following statement contains a magic number: return Supercircle(g' nPts' 0.5);
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateJ,The following statement contains a magic number: gsf.Base = new Coordinate(J_WIDTH - 2 * J_RADIUS' 0);
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateJ,The following statement contains a magic number: gsf.Size = 2 * J_RADIUS;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateJ,The following statement contains a magic number: gsf.NumPoints = 10;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateJ,The following statement contains a magic number: var jArc = gsf.CreateArc(1.5 * Math.PI' 0.5 * Math.PI);
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateJ,The following statement contains a magic number: var jArc = gsf.CreateArc(1.5 * Math.PI' 0.5 * Math.PI);
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateT,The following statement contains a magic number: var tTop = new[]                             {                                 new Coordinate(J_WIDTH' HEIGHT)'                                 new Coordinate(WIDTH - S_RADIUS - 5' HEIGHT)                             };
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateT,The following statement contains a magic number: var tBottom = new[]                                {                                    new Coordinate(J_WIDTH + 0.5*T_WIDTH' HEIGHT)'                                    new Coordinate(J_WIDTH + 0.5*T_WIDTH' 0)                                };
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateT,The following statement contains a magic number: var tBottom = new[]                                {                                    new Coordinate(J_WIDTH + 0.5*T_WIDTH' HEIGHT)'                                    new Coordinate(J_WIDTH + 0.5*T_WIDTH' 0)                                };
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: var bottom = new[]                               {                                   new Coordinate(centreX' 0)'                                   new Coordinate(WIDTH - 2*S_RADIUS' 0)                               };
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: gsf.Size = 2 * S_RADIUS;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: gsf.NumPoints = 10;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: var arcTop = gsf.CreateArc(0.5 * Math.PI' Math.PI);
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: gsf2.Size = 2 * S_RADIUS;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: gsf2.NumPoints = 10;
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: var arcBottom = (LineString)((Geometry)gsf2.CreateArc(1.5 * Math.PI' Math.PI)).Reverse();
Magic Number,Open.Topology.TestRunner.Functions,NTSFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\NTSFunctions.cs,CreateS,The following statement contains a magic number: coordList.Add(new Coordinate(centreX' HEIGHT / 2));
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,Circumcentre,The following statement contains a magic number: var cc = Triangle.Circumcentre(pts[0]' pts[1]' pts[2]);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,PerpendicularBisectors,The following statement contains a magic number: var cc = Triangle.Circumcentre(pts[0]' pts[1]' pts[2]);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,PerpendicularBisectors,The following statement contains a magic number: var line = new LineString[3];
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,PerpendicularBisectors,The following statement contains a magic number: var p0 = (new LineSegment(pts[1]' pts[2])).ClosestPoint(cc);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,PerpendicularBisectors,The following statement contains a magic number: var p1 = (new LineSegment(pts[0]' pts[2])).ClosestPoint(cc);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,PerpendicularBisectors,The following statement contains a magic number: line[2] = geomFact.CreateLineString(new[] { p2' cc });
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,Incentre,The following statement contains a magic number: var t = new Triangle(pts[0]' pts[1]' pts[2]);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,AngleBisectors,The following statement contains a magic number: var t = new Triangle(pts[0]' pts[1]' pts[2]);
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,AngleBisectors,The following statement contains a magic number: var line = new LineString[3];
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,AngleBisectors,The following statement contains a magic number: line[2] = geomFact.CreateLineString(new[] { pts[2]' cc });
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,AngleBisectors,The following statement contains a magic number: line[2] = geomFact.CreateLineString(new[] { pts[2]' cc });
Magic Number,Open.Topology.TestRunner.Functions,TriangleFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\TestCaseGeometryFunctions.cs,TrianglePts,The following statement contains a magic number: pts.Length < 3
Magic Number,Open.Topology.TestRunner.Operations,BufferValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\BufferValidatedGeometryOperation.cs,ParseArgs,The following statement contains a magic number: _argCount >= 2
Magic Number,Open.Topology.TestRunner.Operations,BufferValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\BufferValidatedGeometryOperation.cs,ParseArgs,The following statement contains a magic number: _endCapStyle = (EndCapStyle)int.Parse((string)args[2]);
Magic Number,Open.Topology.TestRunner.Operations,BufferValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\BufferValidatedGeometryOperation.cs,ParseArgs,The following statement contains a magic number: _argCount >= 3
Magic Number,Open.Topology.TestRunner.Operations,BufferValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\BufferValidatedGeometryOperation.cs,InvokeBuffer,The following statement contains a magic number: _argCount == 2
Magic Number,Open.Topology.TestRunner.Operations,BufferValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\BufferValidatedGeometryOperation.cs,IsEmptyBufferExpected,The following statement contains a magic number: bool isNegativeBufferOfNonAreal = (int) geom.Dimension < 2 && _distance <= 0.0;
Magic Number,Open.Topology.TestRunner.Result,BufferResultMatcher,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Result\BufferResultMatcher.cs,IsBoundaryHausdorffDistanceInTolerance,The following statement contains a magic number: var haus = new DiscreteHausdorffDistance(actualBdy' expectedBdy) {DensifyFraction = 0.25};
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: long days = remainder/86400000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: remainder = remainder%86400000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: long hours = remainder/3600000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: remainder = remainder%3600000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: long minutes = remainder/60000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: remainder = remainder%60000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,GetTimeString,The following statement contains a magic number: long seconds = remainder/1000;
Magic Number,Open.Topology.TestRunner.Utility,StringUtil,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Utility\StringUtility.cs,Format,The following statement contains a magic number: double factor = Math.Pow(10' decimals);
Magic Number,Open.Topology.TestRunner,XmlTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTest.cs,ToArguments,The following statement contains a magic number: var ret = new System.Collections.Generic.List<object>(2);
Magic Number,Open.Topology.TestRunner,XmlTestDocument,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestDocument.cs,LoadFile,The following statement contains a magic number: strPrecision == "FIXED" && precisionAttributes.Count == 4
Missing Default,Open.Topology.TestRunner.Functions,CGAlgorithmFunctions,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Functions\CGAlgorithmFunctions.cs,SegmentIntersection,The following switch statement is missing a default case: switch (ri.IntersectionNum)              {                  case 0:                      // no intersection => return empty point                      return g1.Factory.CreatePoint((Coordinate)null);                  case 1:                      // return point                      return g1.Factory.CreatePoint(ri.GetIntersection(0));                  case 2:                      // return line                      return g1.Factory.CreateLineString(                          new Coordinate[] {                              ri.GetIntersection(0)'                              ri.GetIntersection(1)                          });              }
Missing Default,Open.Topology.TestRunner.Operations,OverlayValidatedGeometryOperation,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\Operations\OverlayValidatedGeometryOperation.cs,InvokeGeometryOverlayMethod,The following switch statement is missing a default case: switch (opCode)              {                  case SpatialFunction.Intersection:                      return g0.Intersection(g1);                  case SpatialFunction.Union:                      return g0.Union(g1);                  case SpatialFunction.Difference:                      return g0.Difference(g1);                  case SpatialFunction.SymDifference:                      return g0.SymmetricDifference(g1);              }
Missing Default,Open.Topology.TestRunner,XmlTestFactory,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\test\NetTopologySuite.TestRunner\XmlTestFactory.cs,ParseGeometry,The following switch statement is missing a default case: switch (targetType)              {                  case Target.A:                      xmlTestItem.A = geom;                      break;                    case Target.B:                      xmlTestItem.B = geom;                      break;              }
