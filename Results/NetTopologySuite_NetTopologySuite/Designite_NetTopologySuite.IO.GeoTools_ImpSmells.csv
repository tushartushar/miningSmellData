Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,InsertCoordinate,Cyclomatic complexity of the method is 8
Complex Method,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,Cyclomatic complexity of the method is 10
Long Parameter List,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,AddCoordinate,The method has 5 parameters. Parameters: x' y' z' m' allowRepeated
Long Parameter List,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,InsertCoordinate,The method has 6 parameters. Parameters: index' x' y' z' m' allowRepeated
Complex Conditional,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The conditional expression  "_coordinates[i][0] != other._coordinates[i][0] ||                      _coordinates[i][1] != other._coordinates[i][1] ||                      !_coordinates[i][2].Equals(other._coordinates[i][2]) ||                      !_coordinates[i][3].Equals(other._coordinates[i][3])"  is complex.
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToCoordinateArray,The following statement contains a magic number: var zIndex = HasM ? 3 : 2;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToCoordinateArray,The following statement contains a magic number: var zIndex = HasM ? 3 : 2;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToSequence,The following statement contains a magic number: foreach (var coordinate in _coordinates)              {                  sequence.SetOrdinate(i' Ordinate.X' coordinate[0]);                  sequence.SetOrdinate(i' Ordinate.Y' coordinate[1]);                  if ((useOrdinates & Ordinates.Z) == Ordinates.Z)                      sequence.SetOrdinate(i' Ordinate.Z' coordinate[2]);                  if ((useOrdinates & Ordinates.M) == Ordinates.M)                      sequence.SetOrdinate(i' Ordinate.M' coordinate[3]);                  i++;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToSequence,The following statement contains a magic number: foreach (var coordinate in _coordinates)              {                  sequence.SetOrdinate(i' Ordinate.X' coordinate[0]);                  sequence.SetOrdinate(i' Ordinate.Y' coordinate[1]);                  if ((useOrdinates & Ordinates.Z) == Ordinates.Z)                      sequence.SetOrdinate(i' Ordinate.Z' coordinate[2]);                  if ((useOrdinates & Ordinates.M) == Ordinates.M)                      sequence.SetOrdinate(i' Ordinate.M' coordinate[3]);                  i++;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToSequences,The following statement contains a magic number: for (var s = 0; s < markers.Count; s++)              {                  // compute the length of the current sequence                  var length = markers[s] - offset;                                    // create a sequence of the apropriate size                  var sequence = res[s] = factory.Create(length' useOrdinates);                  var i = 0;                    // fill the sequence                  foreach (var coordinate in _coordinates.GetRange(offset' length))                  {                      sequence.SetOrdinate(i' Ordinate.X' coordinate[0]);                      sequence.SetOrdinate(i' Ordinate.Y' coordinate[1]);                      if ((useOrdinates & Ordinates.Z) == Ordinates.Z)                          sequence.SetOrdinate(i' Ordinate.Z' coordinate[2]);                      if ((useOrdinates & Ordinates.M) == Ordinates.M)                          sequence.SetOrdinate(i' Ordinate.M' coordinate[3]);                      i++;                  }                  //Move the offset                  offset = offset + length;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToSequences,The following statement contains a magic number: for (var s = 0; s < markers.Count; s++)              {                  // compute the length of the current sequence                  var length = markers[s] - offset;                                    // create a sequence of the apropriate size                  var sequence = res[s] = factory.Create(length' useOrdinates);                  var i = 0;                    // fill the sequence                  foreach (var coordinate in _coordinates.GetRange(offset' length))                  {                      sequence.SetOrdinate(i' Ordinate.X' coordinate[0]);                      sequence.SetOrdinate(i' Ordinate.Y' coordinate[1]);                      if ((useOrdinates & Ordinates.Z) == Ordinates.Z)                          sequence.SetOrdinate(i' Ordinate.Z' coordinate[2]);                      if ((useOrdinates & Ordinates.M) == Ordinates.M)                          sequence.SetOrdinate(i' Ordinate.M' coordinate[3]);                      i++;                  }                  //Move the offset                  offset = offset + length;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,SetZ,The following statement contains a magic number: _coordinates[index][2] = z;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,SetM,The following statement contains a magic number: _coordinates[index][3] = m;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXY,The following statement contains a magic number: var xy = new double[Count * 2];
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYZ,The following statement contains a magic number: var xy = new double[Count * 2];
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYZ,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  xy[j++] = _coordinates[i][0];                  xy[j++] = _coordinates[i][1];                  if (hasZ) z[i] = _coordinates[i][2];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYM,The following statement contains a magic number: var xy = new double[Count * 2];
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYM,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  xy[j++] = _coordinates[i][0];                  xy[j++] = _coordinates[i][1];                  if (hasM) m[i] = _coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYZM,The following statement contains a magic number: var xy = new double[Count*2];
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYZM,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  xy[j++] = _coordinates[i][0];                  xy[j++] = _coordinates[i][1];                  if (hasZ) z[i] = _coordinates[i][2];                  if (hasM) m[i] = _coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToXYZM,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  xy[j++] = _coordinates[i][0];                  xy[j++] = _coordinates[i][1];                  if (hasZ) z[i] = _coordinates[i][2];                  if (hasM) m[i] = _coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToPackedArray,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  ordinateValues[j++] = _coordinates[i][0];                  ordinateValues[j++] = _coordinates[i][1];                  if (hasZ) ordinateValues[j++] = _coordinates[i][2];                  if (hasM) ordinateValues[j++] = _coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToPackedArray,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  ordinateValues[j++] = _coordinates[i][0];                  ordinateValues[j++] = _coordinates[i][1];                  if (hasZ) ordinateValues[j++] = _coordinates[i][2];                  if (hasM) ordinateValues[j++] = _coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToPackedArray,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  ordinateValues[j++] = (float)_coordinates[i][0];                  ordinateValues[j++] = (float)_coordinates[i][1];                  if (hasZ) ordinateValues[j++] = (float)_coordinates[i][2];                  if (hasM) ordinateValues[j++] = (float)_coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,ToPackedArray,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  ordinateValues[j++] = (float)_coordinates[i][0];                  ordinateValues[j++] = (float)_coordinates[i][1];                  if (hasZ) ordinateValues[j++] = (float)_coordinates[i][2];                  if (hasM) ordinateValues[j++] = (float)_coordinates[i][3];              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other._coordinates[i][0] ||                      _coordinates[i][1] != other._coordinates[i][1] ||                      !_coordinates[i][2].Equals(other._coordinates[i][2]) ||                      !_coordinates[i][3].Equals(other._coordinates[i][3]))                      return false;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other._coordinates[i][0] ||                      _coordinates[i][1] != other._coordinates[i][1] ||                      !_coordinates[i][2].Equals(other._coordinates[i][2]) ||                      !_coordinates[i][3].Equals(other._coordinates[i][3]))                      return false;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other._coordinates[i][0] ||                      _coordinates[i][1] != other._coordinates[i][1] ||                      !_coordinates[i][2].Equals(other._coordinates[i][2]) ||                      !_coordinates[i][3].Equals(other._coordinates[i][3]))                      return false;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other._coordinates[i][0] ||                      _coordinates[i][1] != other._coordinates[i][1] ||                      !_coordinates[i][2].Equals(other._coordinates[i][2]) ||                      !_coordinates[i][3].Equals(other._coordinates[i][3]))                      return false;              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other.GetOrdinate(i' Ordinate.X) ||                      _coordinates[i][1] != other.GetOrdinate(i' Ordinate.Y))                      return false;                    if (HasZ)                  {                      if ((other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][2].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                        if (HasM && (other.Ordinates & Ordinates.M) == Ordinates.M)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.M))) return false;                  }                  else                  {                      if (HasM && (other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                  }              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other.GetOrdinate(i' Ordinate.X) ||                      _coordinates[i][1] != other.GetOrdinate(i' Ordinate.Y))                      return false;                    if (HasZ)                  {                      if ((other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][2].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                        if (HasM && (other.Ordinates & Ordinates.M) == Ordinates.M)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.M))) return false;                  }                  else                  {                      if (HasM && (other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                  }              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: for (var i = 0; i < _coordinates.Count; i++)              {                  if (_coordinates[i][0] != other.GetOrdinate(i' Ordinate.X) ||                      _coordinates[i][1] != other.GetOrdinate(i' Ordinate.Y))                      return false;                    if (HasZ)                  {                      if ((other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][2].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                        if (HasM && (other.Ordinates & Ordinates.M) == Ordinates.M)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.M))) return false;                  }                  else                  {                      if (HasM && (other.Ordinates & Ordinates.Z) == Ordinates.Z)                          if (!_coordinates[i][3].Equals(other.GetOrdinate(i' Ordinate.Z))) return false;                  }              }
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,GetHashCode,The following statement contains a magic number: return 685146 ^ _coordinates.Count ^ _extents.GetHashCode();
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,RemoveRepeated,The following statement contains a magic number: foreach (var coordinate in _coordinates)                  res.AddCoordinate(coordinate[0]' coordinate[1]' coordinate[2]' coordinate[3]' checkZM);
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,RemoveRepeated,The following statement contains a magic number: foreach (var coordinate in _coordinates)                  res.AddCoordinate(coordinate[0]' coordinate[1]' coordinate[2]' coordinate[3]' checkZM);
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: if (!c1[2].Equals(c2[2])) return false;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: if (!c1[2].Equals(c2[2])) return false;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: if (!c1[3].Equals(c2[3])) return false;
Magic Number,NetTopologySuite.Geometries,CoordinateBuffer,C:\repos\NetTopologySuite_NetTopologySuite\NetTopologySuite.IO\NetTopologySuite.IO\Geometries\CoordinateBuffer.cs,Equals,The following statement contains a magic number: if (!c1[3].Equals(c2[3])) return false;
