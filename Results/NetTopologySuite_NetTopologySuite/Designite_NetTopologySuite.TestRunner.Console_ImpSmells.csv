Implementation smell,Namespace,Class,File,Method,Description
Long Method,ConsoleTestRunner,TestOptionsParser,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestOptionsParser.cs,ParseXmlTestType,The method has 128 lines of code.
Complex Method,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,Cyclomatic complexity of the method is 13
Complex Method,ConsoleTestRunner,TestOptionsParser,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestOptionsParser.cs,ParseProject,Cyclomatic complexity of the method is 15
Complex Method,ConsoleTestRunner,TestOptionsParser,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestOptionsParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,ConsoleTestRunner,TestOptionsParser,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestOptionsParser.cs,ParseXmlTestType,Cyclomatic complexity of the method is 32
Long Statement,ConsoleTestRunner,ConsoleTest,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\ConsoleTest.cs,RunInteractive,The length of the statement  "                                                       "<?xml version=\"1.0\" encoding=\"utf-8\" ?><project><test verbose=\"false\" exception=\"true\" interactive=\"false\" filter=\"none\"><dirs><dir>{0}</dir></dirs></test></project>"' " is 180.
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: Parts = Spliter.Split(Txt'3);
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
Magic Number,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
Magic Number,ConsoleTestRunner,TestRunner,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestRunner.cs,RunTestFile,The following statement contains a magic number: Console.WriteLine("Duration in milliseconds: {0}"' timer.Duration * 1000);
Magic Number,ConsoleTestRunner,TestRunner,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\TestRunner.cs,RunTestFile,The following statement contains a magic number: elapsedTime += (timer.Duration * 1000);
Missing Default,ConsoleTestRunner,Arguments,C:\research\architectureSmells\repos\NetTopologySuite_NetTopologySuite\src\NetTopologySuite.TestRunner.Console\Arguments.cs,Arguments,The following switch statement is missing a default case: switch (Parts.Length)                  {                          // Found a value (for the last parameter found (space separator))                      case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] = Remover.Replace(Parts[0]'"$1");                                  Parameters.Add(Parameter'Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                          break;                            // Found just a parameter                      case 2:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter = Parts[1];                          break;                            // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting. With no value' set it to true.                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter'"true");                          }                          Parameter=Parts[1];                          // Remove possible enclosing characters ("'')                          if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2]=Remover.Replace(Parts[2]'"$1");                              Parameters.Add(Parameter'Parts[2]);                          }                          Parameter = null;                          break;                  }
