Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LibNbt.Queries,TagQuery,C:\repos\aphistic_libnbt\LibNbt\Queries\TagQuery.cs,SetQuery,Cyclomatic complexity of the method is 9
Magic Number,LibNbt,NbtFile,C:\repos\aphistic_libnbt\LibNbt\NbtFile.cs,LoadFile,The following statement contains a magic number: if (compressed)              {                  using (var decStream = new GZipStream(fileStream' CompressionMode.Decompress))                  {                      using (var memStream = new MemoryStream((int)fileStream.Length))                      {                          var buffer = new byte[4096];                          int bytesRead;                          while ((bytesRead = decStream.Read(buffer' 0' buffer.Length)) != 0)                          {                              memStream.Write(buffer' 0' bytesRead);                          }                            LoadFileInternal(memStream);                      }                  }              }              else              {                  LoadFileInternal(fileStream);              }
Magic Number,LibNbt,NbtFile,C:\repos\aphistic_libnbt\LibNbt\NbtFile.cs,SaveFile,The following statement contains a magic number: using (var saveStream = new MemoryStream())              {                  SaveFile(saveStream' compressed);                    saveStream.Seek(0' SeekOrigin.Begin);                    if (File.Exists(fileName)) { File.Delete(fileName); }                  using (FileStream saveFile = File.OpenWrite(fileName))                  {                      var buffer = new byte[4096];                      int bytesRead;                      while ((bytesRead = saveStream.Read(buffer' 0' buffer.Length)) != 0)                      {                          saveFile.Write(buffer' 0' bytesRead);                      }                  }              }
Magic Number,LibNbt.Tags,NbtDouble,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtDouble.cs,ReadTag,The following statement contains a magic number: var buffer = new byte[8];
Magic Number,LibNbt.Tags,NbtDouble,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtDouble.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 8)) < 8)  			{ }
Magic Number,LibNbt.Tags,NbtDouble,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtDouble.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 8)) < 8)  			{ }
Magic Number,LibNbt.Tags,NbtFloat,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtFloat.cs,ReadTag,The following statement contains a magic number: var buffer = new byte[4];
Magic Number,LibNbt.Tags,NbtFloat,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtFloat.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 4)) < 4)  			{ }
Magic Number,LibNbt.Tags,NbtFloat,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtFloat.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 4)) < 4)  			{ }
Magic Number,LibNbt.Tags,NbtInt,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtInt.cs,ReadTag,The following statement contains a magic number: var buffer = new byte[4];
Magic Number,LibNbt.Tags,NbtInt,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtInt.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 4)) < 4)  			{ }
Magic Number,LibNbt.Tags,NbtInt,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtInt.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 4)) < 4)  			{ }
Magic Number,LibNbt.Tags,NbtLong,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtLong.cs,ReadTag,The following statement contains a magic number: var buffer = new byte[8];
Magic Number,LibNbt.Tags,NbtLong,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtLong.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 8)) < 8)  			{ }
Magic Number,LibNbt.Tags,NbtLong,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtLong.cs,ReadTag,The following statement contains a magic number: while ((totalRead += readStream.Read(buffer' totalRead' 8)) < 8)  			{ }
Magic Number,LibNbt.Tags,NbtShort,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtShort.cs,ReadTag,The following statement contains a magic number: var buffer = new byte[2];
Magic Number,LibNbt.Tags,NbtShort,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtShort.cs,ReadTag,The following statement contains a magic number: if (numRead == 2)  			{  				Value = BitConverter.ToInt16(buffer' 0);  			}
Missing Default,LibNbt.Tags,NbtList,C:\repos\aphistic_libnbt\LibNbt\Tags\NbtList.cs,ReadTag,The following switch statement is missing a default case: switch ((NbtTagType)tagId.Value)                 {                     case NbtTagType.TAG_Byte:                         var nextByte = new NbtByte();                         nextByte.ReadTag(readStream' false);                         Tags.Add(nextByte);                         break;                     case NbtTagType.TAG_Short:                         var nextShort = new NbtShort();                         nextShort.ReadTag(readStream' false);                         Tags.Add(nextShort);                         break;                     case NbtTagType.TAG_Int:                         var nextInt = new NbtInt();                         nextInt.ReadTag(readStream' false);                         Tags.Add(nextInt);                         break;                     case NbtTagType.TAG_Long:                         var nextLong = new NbtLong();                         nextLong.ReadTag(readStream' false);                         Tags.Add(nextLong);                         break;                     case NbtTagType.TAG_Float:                         var nextFloat = new NbtFloat();                         nextFloat.ReadTag(readStream' false);                         Tags.Add(nextFloat);                         break;                     case NbtTagType.TAG_Double:                         var nextDouble = new NbtDouble();                         nextDouble.ReadTag(readStream' false);                         Tags.Add(nextDouble);                         break;                     case NbtTagType.TAG_Byte_Array:                         var nextByteArray = new NbtByteArray();                         nextByteArray.ReadTag(readStream' false);                         Tags.Add(nextByteArray);                         break;                     case NbtTagType.TAG_String:                         var nextString = new NbtString();                         nextString.ReadTag(readStream' false);                         Tags.Add(nextString);                         break;                     case NbtTagType.TAG_List:                         var nextList = new NbtList();                         nextList.ReadTag(readStream' false);                         Tags.Add(nextList);                         break;                     case NbtTagType.TAG_Compound:                         var nextCompound = new NbtCompound();                         nextCompound.ReadTag(readStream' false);                         Tags.Add(nextCompound);                         break;                 }
