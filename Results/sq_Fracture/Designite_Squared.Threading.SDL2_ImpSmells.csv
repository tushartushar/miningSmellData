Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Squared.Threading,ThreadGroup,C:\repos\sq_Fracture\Squared\Threading\ThreadGroup.cs,ThreadGroup,The method has 5 parameters. Parameters: minimumThreads' maximumThreads' createBackgroundThreads' timeProvider' comThreadingModel
Long Statement,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,SetResult2,The length of the statement  "                _ErrorInfo = ExceptionDispatchInfo.Capture(task.Exception.InnerExceptions.Count == 1 ? task.Exception.InnerException : task.Exception); " is 135.
Long Statement,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,SetResult2,The length of the statement  "                _ErrorInfo = ExceptionDispatchInfo.Capture(task.Exception.InnerExceptions.Count == 1 ? task.Exception.InnerException : task.Exception); " is 135.
Magic Number,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,SpinWait,The following statement contains a magic number: if ((iterationCount < 5) && (ProcessorCount > 1)) {                  Thread.SpinWait(7 * iterationCount);              } else if (iterationCount < 7) {                  Thread.Sleep(0);              } else {                  Thread.Sleep(1);              }
Magic Number,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,SpinWait,The following statement contains a magic number: if ((iterationCount < 5) && (ProcessorCount > 1)) {                  Thread.SpinWait(7 * iterationCount);              } else if (iterationCount < 7) {                  Thread.Sleep(0);              } else {                  Thread.Sleep(1);              }
Magic Number,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,SpinWait,The following statement contains a magic number: if ((iterationCount < 5) && (ProcessorCount > 1)) {                  Thread.SpinWait(7 * iterationCount);              } else if (iterationCount < 7) {                  Thread.Sleep(0);              } else {                  Thread.Sleep(1);              }
Missing Default,Squared.Threading,Future<T>,C:\repos\sq_Fracture\Squared\Threading\Future.cs,ToString,The following switch statement is missing a default case: switch (state) {                  case State_Empty:                      stateText = "Empty";                      break;                  case State_Indeterminate:                      stateText = "Indeterminate";                      break;                  case State_CompletedWithValue:                      stateText = "CompletedWithValue";                      break;                  case State_CompletedWithError:                      stateText = "CompletedWithError";                      break;                  case State_Disposed:                      stateText = "Disposed";                      break;              }
