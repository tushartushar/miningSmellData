Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,GetGlyph,Cyclomatic complexity of the method is 16
Magic Number,Squared.Render.Text,FreeTypeFont,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Initialize,The following statement contains a magic number: DPIPercent = 100;
Magic Number,Squared.Render.Text,FreeTypeFont,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Initialize,The following statement contains a magic number: DefaultSize = new FontSize(this' 12);
Magic Number,Squared.Render.Text,FreeTypeFont,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Initialize,The following statement contains a magic number: TabSize = 4;
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: var widthW = width + (Font.GlyphMargin * 2);
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: var heightW = rows + (Font.GlyphMargin * 2);
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: var newAtlas = new DynamicAtlas<Color>(                          Font.RenderCoordinator' AtlasWidth' AtlasHeight'                           SurfaceFormat.Color' 4' Font.MipMapping ? PickMipGenerator(Font) : null                      );
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,Upload,The following statement contains a magic number: switch (bitmap.PixelMode) {                          case PixelMode.Gray:                              var table = Font.GammaTable;                                for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (var x = 0; x < width; x++) {                                      var g = table[pSrc[x + yPitch]];                                      pDestRow[3] = pDestRow[2] = pDestRow[1] = pDestRow[0] = g;                                      pDestRow += 4;                                  }                              }                              break;                            case PixelMode.Mono:                              for (var y = 0; y < rows; y++) {                                  var rowOffset = result.Atlas.Width * (y + result.Y + Font.GlyphMargin) + (result.X + Font.GlyphMargin);                                  var pDestRow = pDest + (rowOffset * 4);                                  int yPitch = y * pitch;                                    for (int x = 0; x < pitch; x++' pDestRow += (8 * 4)) {                                      var bits = pSrc[x + yPitch];                                        for (int i = 0; i < 8; i++) {                                          int iy = 7 - i;                                          byte g = ((bits & (1 << iy)) != 0) ? (byte)255 : (byte)0;                                          var pElt = pDestRow + (i * 4);                                          pElt[3] = pElt[2] = pElt[1] = pElt[0] = g;                                      }                                  }                              }                              break;                            default:                              throw new NotImplementedException("Unsupported pixel mode: " + bitmap.PixelMode);                      }
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,GetGlyph,The following statement contains a magic number: Font.Face.SetCharSize(                      0' _SizePoints'                       (uint)(BaseDPI * Font.DPIPercent / 100)' (uint)(BaseDPI * Font.DPIPercent / 100)                  );
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,GetGlyph,The following statement contains a magic number: Font.Face.SetCharSize(                      0' _SizePoints'                       (uint)(BaseDPI * Font.DPIPercent / 100)' (uint)(BaseDPI * Font.DPIPercent / 100)                  );
Magic Number,Squared.Render.Text,FontSize,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.Freetype\FTFont.cs,GetGlyph,The following statement contains a magic number: var scaleFactor = 100f / Font.DPIPercent;
