Implementation smell,Namespace,Class,File,Method,Description
Magic Number,LargeBufferTest,PerformanceStats,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\PerformanceStats.cs,GenerateText,The following statement contains a magic number: var fpsAverage = 1000.0 / totalAverage;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,LargeBufferTestGame,The following statement contains a magic number: Graphics.PreferredBackBufferWidth = 1280;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,LargeBufferTestGame,The following statement contains a magic number: Graphics.PreferredBackBufferHeight = 720;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,LargeBufferTestGame,The following statement contains a magic number: BitmapBatch.AdjustPoolCapacities(                  null' 1024000'                  null' 16              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,LargeBufferTestGame,The following statement contains a magic number: BitmapBatch.AdjustPoolCapacities(                  null' 1024000'                  null' 16              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,OnLoadContent,The following statement contains a magic number: Font = new FreeTypeFont(                  RenderCoordinator'                  Environment.GetFolderPath(Environment.SpecialFolder.Windows) + "\\Fonts\\arial.ttf"              ) {                  DPIPercent = 100'                  SizePoints = 10f'                  Hinting = false              };
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,OnLoadContent,The following statement contains a magic number: Font = new FreeTypeFont(                  RenderCoordinator'                  Environment.GetFolderPath(Environment.SpecialFolder.Windows) + "\\Fonts\\arial.ttf"              ) {                  DPIPercent = 100'                  SizePoints = 10f'                  Hinting = false              };
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: const int width = 1280;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: const int height = 720;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: var tex = ((x % 2) == 0) ? WhitePixel : GrayPixel;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: SpriteBatch.Draw(                          tex' pos' new Color(255' x % 255' y % 255)                      );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: SpriteBatch.Draw(                          tex' pos' new Color(255' x % 255' y % 255)                      );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,PerformSpriteBatchDraw,The following statement contains a magic number: SpriteBatch.Draw(                          tex' pos' new Color(255' x % 255' y % 255)                      );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Console.WriteLine(                      "managed: {0:0000000}kb    vertex: {1:0000000}kb    index: {2:0000000}kb"'                      (stats.ManagedIndexBytes + stats.ManagedVertexBytes) / 1024.0'                      stats.UnmanagedVertexBytes / 1024.0'                      stats.UnmanagedIndexBytes / 1024.0                  );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Console.WriteLine(                      "managed: {0:0000000}kb    vertex: {1:0000000}kb    index: {2:0000000}kb"'                      (stats.ManagedIndexBytes + stats.ManagedVertexBytes) / 1024.0'                      stats.UnmanagedVertexBytes / 1024.0'                      stats.UnmanagedIndexBytes / 1024.0                  );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Console.WriteLine(                      "managed: {0:0000000}kb    vertex: {1:0000000}kb    index: {2:0000000}kb"'                      (stats.ManagedIndexBytes + stats.ManagedVertexBytes) / 1024.0'                      stats.UnmanagedVertexBytes / 1024.0'                      stats.UnmanagedIndexBytes / 1024.0                  );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: const int width = 1280;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: const int height = 720;
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Parallel.For(                  0' height' options'                  // One batch per worker thread                  () => {                      var bb = BitmapBatch.New(                          frame'                          // Suppress batch combining                          Interlocked.Increment(ref layer)'                          Materials.ScreenSpaceBitmap'                          capacity: width * height / 8                      );                      bb.DisableSortKeys = true;                      return bb;                  }'                  (y' loopState' bb) => {                      var drawCall = new BitmapDrawCall(WhitePixel' new Vector2(0' y));                      float fx = 0;                      var range = bb.ReserveSpace(width);                      var array = range.Array;                      var offset = range.Offset;                        for (int x = 0; x < width; x++' fx++) {                          drawCall.Texture = ((x % 2) == 0) ? WhitePixel : GrayPixel;                          drawCall.Position.X = fx;                          drawCall.MultiplyColor = new Color(255' x % 255' y % 255);                            array[offset + x] = drawCall;                      }                        return bb;                  }'                  (bb) =>                       bb.Dispose()              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Parallel.For(                  0' height' options'                  // One batch per worker thread                  () => {                      var bb = BitmapBatch.New(                          frame'                          // Suppress batch combining                          Interlocked.Increment(ref layer)'                          Materials.ScreenSpaceBitmap'                          capacity: width * height / 8                      );                      bb.DisableSortKeys = true;                      return bb;                  }'                  (y' loopState' bb) => {                      var drawCall = new BitmapDrawCall(WhitePixel' new Vector2(0' y));                      float fx = 0;                      var range = bb.ReserveSpace(width);                      var array = range.Array;                      var offset = range.Offset;                        for (int x = 0; x < width; x++' fx++) {                          drawCall.Texture = ((x % 2) == 0) ? WhitePixel : GrayPixel;                          drawCall.Position.X = fx;                          drawCall.MultiplyColor = new Color(255' x % 255' y % 255);                            array[offset + x] = drawCall;                      }                        return bb;                  }'                  (bb) =>                       bb.Dispose()              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Parallel.For(                  0' height' options'                  // One batch per worker thread                  () => {                      var bb = BitmapBatch.New(                          frame'                          // Suppress batch combining                          Interlocked.Increment(ref layer)'                          Materials.ScreenSpaceBitmap'                          capacity: width * height / 8                      );                      bb.DisableSortKeys = true;                      return bb;                  }'                  (y' loopState' bb) => {                      var drawCall = new BitmapDrawCall(WhitePixel' new Vector2(0' y));                      float fx = 0;                      var range = bb.ReserveSpace(width);                      var array = range.Array;                      var offset = range.Offset;                        for (int x = 0; x < width; x++' fx++) {                          drawCall.Texture = ((x % 2) == 0) ? WhitePixel : GrayPixel;                          drawCall.Position.X = fx;                          drawCall.MultiplyColor = new Color(255' x % 255' y % 255);                            array[offset + x] = drawCall;                      }                        return bb;                  }'                  (bb) =>                       bb.Dispose()              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Parallel.For(                  0' height' options'                  // One batch per worker thread                  () => {                      var bb = BitmapBatch.New(                          frame'                          // Suppress batch combining                          Interlocked.Increment(ref layer)'                          Materials.ScreenSpaceBitmap'                          capacity: width * height / 8                      );                      bb.DisableSortKeys = true;                      return bb;                  }'                  (y' loopState' bb) => {                      var drawCall = new BitmapDrawCall(WhitePixel' new Vector2(0' y));                      float fx = 0;                      var range = bb.ReserveSpace(width);                      var array = range.Array;                      var offset = range.Offset;                        for (int x = 0; x < width; x++' fx++) {                          drawCall.Texture = ((x % 2) == 0) ? WhitePixel : GrayPixel;                          drawCall.Position.X = fx;                          drawCall.MultiplyColor = new Color(255' x % 255' y % 255);                            array[offset + x] = drawCall;                      }                        return bb;                  }'                  (bb) =>                       bb.Dispose()              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: Parallel.For(                  0' height' options'                  // One batch per worker thread                  () => {                      var bb = BitmapBatch.New(                          frame'                          // Suppress batch combining                          Interlocked.Increment(ref layer)'                          Materials.ScreenSpaceBitmap'                          capacity: width * height / 8                      );                      bb.DisableSortKeys = true;                      return bb;                  }'                  (y' loopState' bb) => {                      var drawCall = new BitmapDrawCall(WhitePixel' new Vector2(0' y));                      float fx = 0;                      var range = bb.ReserveSpace(width);                      var array = range.Array;                      var offset = range.Offset;                        for (int x = 0; x < width; x++' fx++) {                          drawCall.Texture = ((x % 2) == 0) ? WhitePixel : GrayPixel;                          drawCall.Position.X = fx;                          drawCall.MultiplyColor = new Color(255' x % 255' y % 255);                            array[offset + x] = drawCall;                      }                        return bb;                  }'                  (bb) =>                       bb.Dispose()              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,Draw,The following statement contains a magic number: var ir = new ImperativeRenderer(                  frame' Materials'                   blendState: BlendState.Opaque'                   depthStencilState: DepthStencilState.None'                   rasterizerState: RasterizerState.CullNone'                  worldSpace: false'                  layer: 9999              );
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,DrawPerformanceStats,The following statement contains a magic number: var position = new Vector2(30f' 30f);
Magic Number,LargeBufferTest,LargeBufferTestGame,D:\research\architectureSmells\repos1\sq_Fracture\Squared\LargeBufferTest\LargeBufferTest\LargeBufferTestGame.cs,DrawPerformanceStats,The following statement contains a magic number: var position = new Vector2(30f' 30f);
