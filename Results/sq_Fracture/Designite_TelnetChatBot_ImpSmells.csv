Implementation smell,Namespace,Class,File,Method,Description
Magic Number,TelnetChatBot,Program,C:\repos\sq_Fracture\Squared\Examples\TelnetChatBot\Program.cs,SendTask,The following statement contains a magic number: while (true) {                  var f = output.WriteLine(nextMessageText);                  yield return f;                    if (f.Failed) {                      Disconnected = true;                      throw new DisconnectedException();                  }                    i += 1;                    if ((i % 1000) == 0)                      Console.WriteLine("Sent: {0}"' i);                    nextMessageText = String.Format("Message {0}"' i);                  yield return new Sleep(SendRate);              }
Magic Number,TelnetChatBot,Program,C:\repos\sq_Fracture\Squared\Examples\TelnetChatBot\Program.cs,ReceiveTask,The following statement contains a magic number: while (true) {                                  var f = input.ReadLine();                  yield return f;                    if (!f.GetResult(out message))                      throw new DisconnectedException();                    if (message == null)                      throw new DisconnectedException();                  else                      i += 1;                    if ((i % 1000) == 0)                      Console.WriteLine("Recieved: {0}"' i);              }
Magic Number,TelnetChatBot,Program,C:\repos\sq_Fracture\Squared\Examples\TelnetChatBot\Program.cs,Main,The following statement contains a magic number: try {                  Console.WriteLine("Connecting to server...");                  var f = Network.ConnectTo("localhost"' 1234);                  f.GetCompletionEvent().Wait();                  Console.WriteLine("Connected.");                  TcpClient client = f.Result as TcpClient;                  client.Client.Blocking = false;                  client.Client.NoDelay = true;                  SocketDataAdapter adapter = new SocketDataAdapter(client.Client);                  adapter.ThrowOnDisconnect = false;                  adapter.ThrowOnFullSendBuffer = false;                    Scheduler.Start(ReceiveTask(adapter)' TaskExecutionPolicy.RunAsBackgroundTask);                  Scheduler.Start(SendTask(adapter)' TaskExecutionPolicy.RunAsBackgroundTask);                    while (!Disconnected) {                      Scheduler.Step();                      Scheduler.WaitForWorkItems();                  }                  Console.WriteLine("Disconnected.");              } catch (Exception ex) {                  if (ex is TaskException && ex.InnerException is DisconnectedException) {                  } else {                      Console.WriteLine(ex.ToString());                  }              }
