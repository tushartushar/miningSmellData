Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_from_memory,The method has 6 parameters. Parameters: buffer' len' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_from_callbacks,The method has 6 parameters. Parameters: clbk' user' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_from_memory_with_palette,The method has 6 parameters. Parameters: buffer' len' x' y' palette' palette_len
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_from_callbacks_with_palette,The method has 6 parameters. Parameters: clbk' user' x' y' palette' palette_len
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_16_from_memory,The method has 6 parameters. Parameters: buffer' len' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_load_16_from_callbacks,The method has 6 parameters. Parameters: clbk' user' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_loadf_from_memory,The method has 6 parameters. Parameters: buffer' len' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_loadf_from_callbacks,The method has 6 parameters. Parameters: clbk' user' x' y' channels' desired_channels
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_info_from_memory,The method has 5 parameters. Parameters: buffer' len' x' y' comp
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_info_from_callbacks,The method has 5 parameters. Parameters: clbk' user' x' y' comp
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_write_png_to_func,The method has 7 parameters. Parameters: callback' user' w' h' comp' data' strideInBytes
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_write_bmp_to_func,The method has 6 parameters. Parameters: callback' user' w' h' comp' data
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_write_tga_to_func,The method has 6 parameters. Parameters: callback' user' w' h' comp' data
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_write_jpg_to_func,The method has 7 parameters. Parameters: callback' user' w' h' comp' data' quality
Long Parameter List,Squared.Render.STB.Native,API,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\Native.cs,stbi_write_hdr_to_func,The method has 6 parameters. Parameters: callback' user' w' h' comp' data
Long Parameter List,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,Image,The method has 5 parameters. Parameters: stream' ownsStream' premultiply' asFloatingPoint' palette
Long Parameter List,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,InitializeFromBuffer,The method has 6 parameters. Parameters: buffer' offset' length' premultiply' asFloatingPoint' palette
Long Parameter List,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The method has 7 parameters. Parameters: buffer' width' height' sourceFormat' stream' format' jpegQuality
Long Statement,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,InitializeFromBuffer,The length of the statement  "                        Data = Native.API.stbi_load_from_memory_with_palette(pBuffer + offset' length' out Width' out Height' pPalette' palette.Length); " is 128.
Long Statement,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,CreatePaletteTexture,The length of the statement  "                result.SetDataPointerEXT(0' new Rectangle(0' 0' Palette.Length' 1)' pin.AddrOfPinnedObject()' Palette.Length * sizeof(UInt32)); " is 127.
Long Statement,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,CreatePaletteTexture,The length of the statement  "                Render.Evil.TextureUtils.SetDataFast(result' 0' (void*)pin.AddrOfPinnedObject()' Palette.Length' height' (uint)(Palette.Length * sizeof(UInt32))); " is 146.
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,InitializeFromBuffer,The following statement contains a magic number: message += ": " + Encoding.UTF8.GetString(reason' 128);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyFPData,The following statement contains a magic number: var a = pData[3];
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyFPData,The following statement contains a magic number: pData[2] *= a;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: var a = (value & 0xFF000000) >> 24;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: var g = (value & 0xFF00) >> 8;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: var b = (value & 0xFF0000) >> 16;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: pBytes[0] = (byte)(r * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: pBytes[1] = (byte)(g * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: pBytes[2] = (byte)(b * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyData,The following statement contains a magic number: pBytes[2] = (byte)(b * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: var a = (value & 0xFF000000) >> 24;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: var g = (value & 0xFF00) >> 8;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: var b = (value & 0xFF0000) >> 16;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: pBytes[0] = (byte)(b * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: pBytes[1] = (byte)(g * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: pBytes[2] = (byte)(r * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,PremultiplyAndChannelSwapData,The following statement contains a magic number: pBytes[2] = (byte)(r * a / 255);
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,ChannelSwapData,The following statement contains a magic number: pBytes[0] = pBytes[2];
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,ChannelSwapData,The following statement contains a magic number: pBytes[2] = r;
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,UploadWithMips,The following statement contains a magic number: fixed (Color* pScratch = scratch.Data)              for (uint level = 0; (levelWidth >= 1) && (levelHeight >= 1); level++) {                  if (level > 0) {                      pLevelData = pScratch;                        MipGenerator.Color(pPreviousLevelData' previousLevelWidth' previousLevelHeight' pLevelData' levelWidth' levelHeight);                  }                    lock (coordinator.UseResourceLock)                      Evil.TextureUtils.SetDataFast(result' level' pLevelData' levelWidth' levelHeight' (uint)(levelWidth * SizeofPixel));                    previousLevelWidth = levelWidth;                  previousLevelHeight = levelHeight;                  var newWidth = levelWidth / 2;                  var newHeight = levelHeight / 2;                  levelWidth = newWidth;                  levelHeight = newHeight;                  var temp = pPreviousLevelData;                  if (temp == pLevelData) {                      pLevelData = pScratch;                  } else {                      pPreviousLevelData = pLevelData;                      pLevelData = pPreviousLevelData;                  }              }
Magic Number,Squared.Render.STB,Image,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBI.cs,UploadWithMips,The following statement contains a magic number: fixed (Color* pScratch = scratch.Data)              for (uint level = 0; (levelWidth >= 1) && (levelHeight >= 1); level++) {                  if (level > 0) {                      pLevelData = pScratch;                        MipGenerator.Color(pPreviousLevelData' previousLevelWidth' previousLevelHeight' pLevelData' levelWidth' levelHeight);                  }                    lock (coordinator.UseResourceLock)                      Evil.TextureUtils.SetDataFast(result' level' pLevelData' levelWidth' levelHeight' (uint)(levelWidth * SizeofPixel));                    previousLevelWidth = levelWidth;                  previousLevelHeight = levelHeight;                  var newWidth = levelWidth / 2;                  var newHeight = levelHeight / 2;                  levelWidth = newWidth;                  levelHeight = newHeight;                  var temp = pPreviousLevelData;                  if (temp == pLevelData) {                      pLevelData = pScratch;                  } else {                      pPreviousLevelData = pLevelData;                      pLevelData = pPreviousLevelData;                  }              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,GetBytesPerPixelAndComponents,The following statement contains a magic number: switch (format) {                  case SurfaceFormat.Alpha8:                      numComponents = 1;                      return 1;                  case SurfaceFormat.Color:                      numComponents = 4;                      return 4;                  case SurfaceFormat.Rgba64:                      numComponents = 4;                      return 8;                  case SurfaceFormat.Vector4:                      numComponents = 4;                      return 16;                  default:                      throw new ArgumentException("Surface format " + format + " not implemented");              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The following statement contains a magic number: fixed (byte * pBuffer = buffer)              fixed (byte * _pScratch = scratch.Data) {                  Native.WriteCallback callback = (pScratch' pData' count) => {                      int offset = 0;                      while (count > 0) {                          var copySize = Math.Min(count' scratch.Data.Length);                          Buffer.MemoryCopy(pData + offset' pScratch' copySize' copySize);                          stream.Write(scratch.Data' 0' copySize);                          count -= copySize;                          offset += copySize;                      }                  };                    switch (format) {                      case ImageWriteFormat.HDR:                          if (bytesPerPixel != 16)                              throw new NotImplementedException("Non-vector4");                          Native.API.stbi_write_hdr_to_func(callback' _pScratch' width' height' numComponents' (float*)(void*)pBuffer);                          break;                      case ImageWriteFormat.PNG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_png_to_func(callback' _pScratch' width' height' numComponents' pBuffer' width * bytesPerPixel);                          break;                      case ImageWriteFormat.BMP:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_bmp_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.TGA:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_tga_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.JPEG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_jpg_to_func(callback' _pScratch' width' height' numComponents' pBuffer' jpegQuality);                          break;                      default:                          throw new ArgumentOutOfRangeException("format");                  }              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The following statement contains a magic number: fixed (byte * pBuffer = buffer)              fixed (byte * _pScratch = scratch.Data) {                  Native.WriteCallback callback = (pScratch' pData' count) => {                      int offset = 0;                      while (count > 0) {                          var copySize = Math.Min(count' scratch.Data.Length);                          Buffer.MemoryCopy(pData + offset' pScratch' copySize' copySize);                          stream.Write(scratch.Data' 0' copySize);                          count -= copySize;                          offset += copySize;                      }                  };                    switch (format) {                      case ImageWriteFormat.HDR:                          if (bytesPerPixel != 16)                              throw new NotImplementedException("Non-vector4");                          Native.API.stbi_write_hdr_to_func(callback' _pScratch' width' height' numComponents' (float*)(void*)pBuffer);                          break;                      case ImageWriteFormat.PNG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_png_to_func(callback' _pScratch' width' height' numComponents' pBuffer' width * bytesPerPixel);                          break;                      case ImageWriteFormat.BMP:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_bmp_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.TGA:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_tga_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.JPEG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_jpg_to_func(callback' _pScratch' width' height' numComponents' pBuffer' jpegQuality);                          break;                      default:                          throw new ArgumentOutOfRangeException("format");                  }              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The following statement contains a magic number: fixed (byte * pBuffer = buffer)              fixed (byte * _pScratch = scratch.Data) {                  Native.WriteCallback callback = (pScratch' pData' count) => {                      int offset = 0;                      while (count > 0) {                          var copySize = Math.Min(count' scratch.Data.Length);                          Buffer.MemoryCopy(pData + offset' pScratch' copySize' copySize);                          stream.Write(scratch.Data' 0' copySize);                          count -= copySize;                          offset += copySize;                      }                  };                    switch (format) {                      case ImageWriteFormat.HDR:                          if (bytesPerPixel != 16)                              throw new NotImplementedException("Non-vector4");                          Native.API.stbi_write_hdr_to_func(callback' _pScratch' width' height' numComponents' (float*)(void*)pBuffer);                          break;                      case ImageWriteFormat.PNG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_png_to_func(callback' _pScratch' width' height' numComponents' pBuffer' width * bytesPerPixel);                          break;                      case ImageWriteFormat.BMP:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_bmp_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.TGA:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_tga_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.JPEG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_jpg_to_func(callback' _pScratch' width' height' numComponents' pBuffer' jpegQuality);                          break;                      default:                          throw new ArgumentOutOfRangeException("format");                  }              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The following statement contains a magic number: fixed (byte * pBuffer = buffer)              fixed (byte * _pScratch = scratch.Data) {                  Native.WriteCallback callback = (pScratch' pData' count) => {                      int offset = 0;                      while (count > 0) {                          var copySize = Math.Min(count' scratch.Data.Length);                          Buffer.MemoryCopy(pData + offset' pScratch' copySize' copySize);                          stream.Write(scratch.Data' 0' copySize);                          count -= copySize;                          offset += copySize;                      }                  };                    switch (format) {                      case ImageWriteFormat.HDR:                          if (bytesPerPixel != 16)                              throw new NotImplementedException("Non-vector4");                          Native.API.stbi_write_hdr_to_func(callback' _pScratch' width' height' numComponents' (float*)(void*)pBuffer);                          break;                      case ImageWriteFormat.PNG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_png_to_func(callback' _pScratch' width' height' numComponents' pBuffer' width * bytesPerPixel);                          break;                      case ImageWriteFormat.BMP:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_bmp_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.TGA:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_tga_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.JPEG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_jpg_to_func(callback' _pScratch' width' height' numComponents' pBuffer' jpegQuality);                          break;                      default:                          throw new ArgumentOutOfRangeException("format");                  }              }
Magic Number,Squared.Render.STB,ImageWrite,D:\research\architectureSmells\repos1\sq_Fracture\Squared\Render.STB\STBIW.cs,WriteImage,The following statement contains a magic number: fixed (byte * pBuffer = buffer)              fixed (byte * _pScratch = scratch.Data) {                  Native.WriteCallback callback = (pScratch' pData' count) => {                      int offset = 0;                      while (count > 0) {                          var copySize = Math.Min(count' scratch.Data.Length);                          Buffer.MemoryCopy(pData + offset' pScratch' copySize' copySize);                          stream.Write(scratch.Data' 0' copySize);                          count -= copySize;                          offset += copySize;                      }                  };                    switch (format) {                      case ImageWriteFormat.HDR:                          if (bytesPerPixel != 16)                              throw new NotImplementedException("Non-vector4");                          Native.API.stbi_write_hdr_to_func(callback' _pScratch' width' height' numComponents' (float*)(void*)pBuffer);                          break;                      case ImageWriteFormat.PNG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_png_to_func(callback' _pScratch' width' height' numComponents' pBuffer' width * bytesPerPixel);                          break;                      case ImageWriteFormat.BMP:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_bmp_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.TGA:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_tga_to_func(callback' _pScratch' width' height' numComponents' pBuffer);                          break;                      case ImageWriteFormat.JPEG:                          if (bytesPerPixel != 4)                              throw new NotImplementedException("Non-rgba32");                          Native.API.stbi_write_jpg_to_func(callback' _pScratch' width' height' numComponents' pBuffer' jpegQuality);                          break;                      default:                          throw new ArgumentOutOfRangeException("format");                  }              }
