Implementation smell,Namespace,Class,File,Method,Description
Long Method,Trader.Client.Infrastucture,MenuItems,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\MenuItems.cs,MenuItems,The method has 105 lines of code.
Long Parameter List,Trader.Client.Infrastucture,MenuItem,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\MenuItem.cs,MenuItem,The method has 5 parameters. Parameters: title' description' action' link' content
Long Parameter List,Trader.Client.Infrastucture,MenuItem,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\MenuItem.cs,MenuItem,The method has 6 parameters. Parameters: title' description' action' category' link' content
Long Statement,Trader.Client.Infrastucture,AnimatedWrapPanel,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\AnimatedWrapPanel.cs,ArrangeOverride,The length of the statement  "                trans.BeginAnimation(TranslateTransform.XProperty' new DoubleAnimation(curX' _animationLength)' HandoffBehavior.Compose); " is 121.
Long Statement,Trader.Client.Infrastucture,AnimatedWrapPanel,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\AnimatedWrapPanel.cs,ArrangeOverride,The length of the statement  "                trans.BeginAnimation(TranslateTransform.YProperty' new DoubleAnimation(curY' _animationLength)' HandoffBehavior.Compose); " is 121.
Long Statement,Trader.Client.Views,LiveTradesView,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\LiveTradesView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Trader.Client;component/views/livetradesview.xaml"' System.UriKind.Relative); " is 123.
Long Statement,Trader.Client.Views,NearToMarketView,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\NearToMarketView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Trader.Client;component/views/neartomarketview.xaml"' System.UriKind.Relative); " is 125.
Long Statement,Trader.Client.Views,RecentTrades,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\RecentTrades.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Trader.Client;component/views/recenttrades.xaml"' System.UriKind.Relative); " is 121.
Long Statement,Trader.Client.Views,VisibleRowsView,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\VisibleRowsView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Trader.Client;component/views/visiblerowsview.xaml"' System.UriKind.Relative); " is 124.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\RolandPheasant_TradingDemo\Trader.Client\obj\Debug\net461\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,Trader.Client.Infrastucture,LogEntryProxy,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\LogEntryProxy.cs,LogEntryProxy,The following statement contains a magic number: _recent = Observable.Create<bool>(observer =>              {                  var isRecent = DateTime.Now.Subtract(original.TimeStamp).TotalSeconds < 2;                  if (!isRecent) return Disposable.Empty;                  observer.OnNext(true);                  return Observable.Timer(TimeSpan.FromSeconds(2)).Select(_ => false).SubscribeSafe(observer);              }).ToProperty(this' lep => lep.Recent'deferSubscription:true);
Magic Number,Trader.Client.Infrastucture,LogEntryProxy,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\LogEntryProxy.cs,LogEntryProxy,The following statement contains a magic number: _recent = Observable.Create<bool>(observer =>              {                  var isRecent = DateTime.Now.Subtract(original.TimeStamp).TotalSeconds < 2;                  if (!isRecent) return Disposable.Empty;                  observer.OnNext(true);                  return Observable.Timer(TimeSpan.FromSeconds(2)).Select(_ => false).SubscribeSafe(observer);              }).ToProperty(this' lep => lep.Recent'deferSubscription:true);
Magic Number,Trader.Client.Views,LiveTradesViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\LiveTradesViewer.cs,LiveTradesViewer,The following statement contains a magic number: var loader = tradeService.Live.Connect()                  .Filter(filter) // apply user filter                  //if targeting dotnet 4.5 can parallelise 'cause it's quicker                  .Transform(trade => new TradeProxy(trade)'new ParallelisationOptions(ParallelType.Ordered'5))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)'SortOptimisations.ComparesImmutableValuesOnly' 25)                  .ObserveOnDispatcher()                  .Bind(out _data)   // update observable collection bindings                  .DisposeMany() //since TradeProxy is disposable dispose when no longer required                  .Subscribe();
Magic Number,Trader.Client.Views,LiveTradesViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\LiveTradesViewer.cs,LiveTradesViewer,The following statement contains a magic number: var loader = tradeService.Live.Connect()                  .Filter(filter) // apply user filter                  //if targeting dotnet 4.5 can parallelise 'cause it's quicker                  .Transform(trade => new TradeProxy(trade)'new ParallelisationOptions(ParallelType.Ordered'5))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)'SortOptimisations.ComparesImmutableValuesOnly' 25)                  .ObserveOnDispatcher()                  .Bind(out _data)   // update observable collection bindings                  .DisposeMany() //since TradeProxy is disposable dispose when no longer required                  .Subscribe();
Magic Number,Trader.Client.Views,LogEntryViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\LogEntryViewer.cs,LogEntryViewer,The following statement contains a magic number: var filter = this.WhenAnyValue(x => x.SearchText)                  .Throttle(TimeSpan.FromMilliseconds(250))                  .Select(BuildFilter);
Magic Number,Trader.Client.Views,LogEntryViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\LogEntryViewer.cs,LogEntryViewer,The following statement contains a magic number: var loader = logEntryService.Items.Connect()                  .Transform(le => new LogEntryProxy(le))                  .DelayRemove(TimeSpan.FromSeconds(0.75)' proxy => proxy.FlagForRemove())                  .Filter(filter)                  .Sort(SortExpressionComparer<LogEntryProxy>.Descending(le => le.TimeStamp).ThenByDescending(l => l.Key)' SortOptions.UseBinarySearch)                  .ObserveOn(RxApp.MainThreadScheduler)                  .Bind(Data)                  .DisposeMany()                  .Subscribe();
Magic Number,Trader.Client.Views,PagedDataViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\PagedDataViewer.cs,PagedDataViewer,The following statement contains a magic number: var filter = this.WhenValueChanged(t => t.SearchText)                  .Throttle(TimeSpan.FromMilliseconds(250))                  .Select(BuildFilter);
Magic Number,Trader.Client.Views,PagedDataViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\PagedDataViewer.cs,PagedDataViewer,The following statement contains a magic number: var pager = PageParameters.WhenChanged(vm=>vm.PageSize'vm=>vm.CurrentPage' (_'size' pge) => new PageRequest(pge' size))                  .StartWith(new PageRequest(1' 25))                  .DistinctUntilChanged()                  .Sample(TimeSpan.FromMilliseconds(100));
Magic Number,Trader.Client.Views,PagedDataViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\PagedDataViewer.cs,PagedDataViewer,The following statement contains a magic number: var pager = PageParameters.WhenChanged(vm=>vm.PageSize'vm=>vm.CurrentPage' (_'size' pge) => new PageRequest(pge' size))                  .StartWith(new PageRequest(1' 25))                  .DistinctUntilChanged()                  .Sample(TimeSpan.FromMilliseconds(100));
Magic Number,Trader.Client.Views,PagedDataViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\PagedDataViewer.cs,PagedDataViewer,The following statement contains a magic number: _cleanUp = tradeService.All.Connect()                  .Filter(filter) // apply user filter                  .Transform(trade => new TradeProxy(trade)' new ParallelisationOptions(ParallelType.Ordered' 5))                  .Sort(sort' SortOptimisations.ComparesImmutableValuesOnly)                  .Page(pager)                  .ObserveOn(schedulerProvider.MainThread)                  .Do(changes => PageParameters.Update(changes.Response))                  .Bind(out _data)        // update observable collection bindings                  .DisposeMany()          // dispose when no longer required                  .Subscribe();
Magic Number,Trader.Client.Views,RecentTradesViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\RecentTradesViewer.cs,RecentTradesViewer,The following statement contains a magic number: _cleanUp = tradeService.All.Connect()                  .SkipInitial()                  .ExpireAfter(trade => TimeSpan.FromSeconds(30))                  .Transform(trade => new TradeProxy(trade))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)' SortOptimisations.ComparesImmutableValuesOnly)                  .ObserveOn(schedulerProvider.MainThread)                  .Bind(out _data)                  .DisposeMany()                  .Subscribe();
Magic Number,Trader.Client.Views,RxUiViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\RxUiViewer.cs,RxUiViewer,The following statement contains a magic number: var filter = this.WhenAnyValue(x => x.SearchText)                  .Throttle(TimeSpan.FromMilliseconds(250))                  .Select(BuildFilter);
Magic Number,Trader.Client.Views,RxUiViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\RxUiViewer.cs,RxUiViewer,The following statement contains a magic number: _cleanUp = tradeService.Live.Connect()                  .Filter(filter) // apply user filter                  //if targetting Net4 or Net45 platform can use parallelisation for transforms 'cause it's quicker                  .Transform(trade => new TradeProxy(trade)' new ParallelisationOptions(ParallelType.Ordered' 5))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)' SortOptimisations.ComparesImmutableValuesOnly' 25)                  .ObserveOn(RxApp.MainThreadScheduler)                  .Bind(_data) //bind the results to the ReactiveList                   .DisposeMany() //since TradeProxy is disposable dispose when no longer required                  .Subscribe();
Magic Number,Trader.Client.Views,RxUiViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\RxUiViewer.cs,RxUiViewer,The following statement contains a magic number: _cleanUp = tradeService.Live.Connect()                  .Filter(filter) // apply user filter                  //if targetting Net4 or Net45 platform can use parallelisation for transforms 'cause it's quicker                  .Transform(trade => new TradeProxy(trade)' new ParallelisationOptions(ParallelType.Ordered' 5))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)' SortOptimisations.ComparesImmutableValuesOnly' 25)                  .ObserveOn(RxApp.MainThreadScheduler)                  .Bind(_data) //bind the results to the ReactiveList                   .DisposeMany() //since TradeProxy is disposable dispose when no longer required                  .Subscribe();
Magic Number,Trader.Client.Views,SearchHints,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\SearchHints.cs,SearchHints,The following statement contains a magic number: var filter = this.WhenValueChanged(t => t.SearchText)                  .Throttle(TimeSpan.FromMilliseconds(250))                  .Select(BuildFilter);
Magic Number,Trader.Client.Views,TradesByPercentViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\TradesByPercentViewer.cs,TradesByPercentViewer,The following statement contains a magic number: _cleanUp = nearToMarketService.Query(() => 4)                  .Synchronize(locker)                  .Group(trade => (int) Math.Truncate(Math.Abs(trade.PercentFromMarket))' grouperRefresher)                  .Transform(group => new Domain.Model.TradesByPercentDiff(group' schedulerProvider' logger))                  .Sort(SortExpressionComparer<Domain.Model.TradesByPercentDiff>.Ascending(t => t.PercentBand)'SortOptimisations.ComparesImmutableValuesOnly)                  .ObserveOn(schedulerProvider.MainThread)                  .Bind(out _data)                  .DisposeMany()                  .Subscribe(_ => { }' ex => logger.Error(ex' ex.Message));
Magic Number,Trader.Client.Views,TradesByTimeViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\TradesByTimeViewer.cs,TradesByTimeViewer,The following statement contains a magic number: _cleanUp = tradeService.All.Connect()                  .Group(trade =>                         {                             var diff = DateTime.Now.Subtract(trade.Timestamp);                             if (diff.TotalSeconds <= 60) return TimePeriod.LastMinute;                             if (diff.TotalMinutes <= 60) return TimePeriod.LastHour;                             return TimePeriod.Older;                         }' grouperRefresher)                  .Transform(group => new TradesByTime(group' schedulerProvider))                  .Sort(SortExpressionComparer<TradesByTime>.Ascending(t => t.Period))                  .ObserveOn(schedulerProvider.MainThread)                  .Bind(out _data)                  .DisposeMany()                  .Subscribe();
Magic Number,Trader.Client.Views,TradesByTimeViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\TradesByTimeViewer.cs,TradesByTimeViewer,The following statement contains a magic number: _cleanUp = tradeService.All.Connect()                  .Group(trade =>                         {                             var diff = DateTime.Now.Subtract(trade.Timestamp);                             if (diff.TotalSeconds <= 60) return TimePeriod.LastMinute;                             if (diff.TotalMinutes <= 60) return TimePeriod.LastHour;                             return TimePeriod.Older;                         }' grouperRefresher)                  .Transform(group => new TradesByTime(group' schedulerProvider))                  .Sort(SortExpressionComparer<TradesByTime>.Ascending(t => t.Period))                  .ObserveOn(schedulerProvider.MainThread)                  .Bind(out _data)                  .DisposeMany()                  .Subscribe();
Magic Number,Trader.Client.Views,VisibleRowsViewer,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\VisibleRowsViewer.cs,VisibleRowsViewer,The following statement contains a magic number: var loader = tradeService.All.Connect()                  .Transform(trade => new TradeProxy(trade)' new ParallelisationOptions(ParallelType.Ordered' 5))                  .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp)' SortOptimisations.ComparesImmutableValuesOnly)                  .ObserveOnDispatcher()                  .Bind(out _data)   // update observable collection bindings                  .DisposeMany() //since TradeProxy is disposable dispose when no longer required                  .Subscribe();
Missing Default,DynamicData,DynamicDataEx,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Infrastucture\DynamicDataEx.cs,DelayRemove,The following switch statement is missing a default case: switch (change.Reason)                                                      {                                                          case ListChangeReason.Add:                                                              innerList.Add(change.Item.Current);                                                              break;                                                          case ListChangeReason.AddRange:                                                              change.Range.ForEach(innerList.Add);                                                              break;                                                          case ListChangeReason.Replace:                                                              innerList.Replace(change.Item.Previous.Value' change.Item.Current);                                                              break;                                                      }
Missing Default,Trader.Client.Views,MenuView,C:\repos\RolandPheasant_TradingDemo\Trader.Client\Views\MenuView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.showLinks = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              }
