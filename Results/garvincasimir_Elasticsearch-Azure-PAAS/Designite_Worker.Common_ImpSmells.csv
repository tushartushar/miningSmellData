Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ElasticsearchWorker.Data,DataBootstrapService,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\Data\DataBootstrapService.cs,_InitTimer_Elapsed,The length of the statement  "                        if (state.StatusCode.GetValueOrDefault() == (int)HttpStatusCode.NotFound || (!state.IsError && DateTime.UtcNow.CompareTo(state.Result.NextUpdate) >0)) " is 150.
Long Statement,ElasticsearchWorker.Core,ElasticsearchService,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\Core\ElasticsearchService.cs,RunAndBlock,The length of the statement  "                Trace.TraceInformation("Attempting to start elasticsearch as node: {0} with JAVA_HOME = {1}"' _Settings.NodeName' javaHome); " is 124.
Long Statement,ElasticsearchWorker.Core,ElasticsearchManager,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\Core\ElasticsearchManager.cs,StartAndBlock,The length of the statement  "                    _process.StartInfo.EnvironmentVariables["ES_JAVA_OPTS"] = string.Format("-Xms{0}m -Xmx{0}m"' _Settings.ComputedHeapSize); " is 121.
Magic Number,ElasticsearchWorker.ClusterApi,ClusterClient,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\ClusterApi\ClusterClient.cs,ClusterClient,The following statement contains a magic number: settings.RequestTimeout(TimeSpan.FromMinutes(30));
Magic Number,ElasticsearchWorker.Core,ElasticsearchServiceSettings,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\Core\ElasticsearchServiceSettings.cs,FromStorage,The following statement contains a magic number: settings._ComputedHeapSize = Convert.ToInt32(totalPhycialBytesInMB / 2);
Magic Number,ElasticsearchWorker.Core,ElasticsearchManager,C:\repos\garvincasimir_Elasticsearch-Azure-PAAS\Worker.Common\Core\ElasticsearchManager.cs,StartAndBlock,The following statement contains a magic number: if (!token.IsCancellationRequested)              {                                    string startupScript = Path.Combine(_ElasticRoot' "bin"' "elasticsearch.bat");                  _process = new Process();                  _process.StartInfo = new ProcessStartInfo                  {                      FileName = startupScript'                      UseShellExecute = false'                      RedirectStandardOutput = true'                      RedirectStandardError = true'                      Arguments = "--silent"                  };                    if (!string.IsNullOrWhiteSpace(javaHome))                  {                      _process.StartInfo.EnvironmentVariables["JAVA_HOME"] = javaHome;                  }                    if(_Settings.ComputedHeapSize > 0 && !_Settings.IsEmulated)                  {                      _process.StartInfo.EnvironmentVariables["ES_JAVA_OPTS"] = string.Format("-Xms{0}m -Xmx{0}m"' _Settings.ComputedHeapSize);                  }                  else if (_Settings.IsEmulated)                  {                      _process.StartInfo.EnvironmentVariables["ES_JAVA_OPTS"] = string.Format("-Xms{0}m -Xmx{0}m"' 250);                  }                    _process.OutputDataReceived += (object sender' DataReceivedEventArgs e) =>                  {                      Trace.TraceInformation(e.Data);                  };                    Trace.TraceInformation("Starting Elasticsearch with script {0}"' startupScript);                    _process.Start();                  _process.BeginOutputReadLine();                    var processEnded = new ManualResetEvent(false);                    processEnded.SafeWaitHandle = new SafeWaitHandle(_process.Handle' false);                     int index = WaitHandle.WaitAny(new[] { processEnded' token.WaitHandle });                  Trace.TraceInformation("Proces handle signaled: " + index);                                        //If the signal came from the caller cancellation token close the window                  if (index == 1)                  {                      Stop();                  }                    var errors = _process.StandardError.ReadToEnd();                  if (!string.IsNullOrWhiteSpace(errors))                  {                      Trace.TraceError("Proccess error output: \n{0} "' errors);                  }              }
