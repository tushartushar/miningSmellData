Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The method has 410 lines of code.
Complex Method,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,Cyclomatic complexity of the method is 14
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,Main,The length of the statement  "                if (string.Compare(parameters[Constants.Parameters.Operation]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)" is 142.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,Main,The length of the statement  "                        if (string.Compare(parameters[Constants.Parameters.Operation]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)" is 142.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,Main,The length of the statement  "                        else if (string.Compare(parameters[Constants.Parameters.Operation]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)" is 148.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                if (args.Count() == 1 && string.Compare(args[0].Substring(1' args[0].Length - 1)' AppConstants.Help' StringComparison.InvariantCultureIgnoreCase) == 0)" is 151.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "            if (string.Compare(args[0].Substring(1' args[0].Length - 1)' Constants.Parameters.Operation' StringComparison.InvariantCultureIgnoreCase) != 0)" is 143.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                    bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);" is 129.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                    bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);" is 129.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                    if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))" is 122.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                    bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);" is 129.
Long Statement,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The length of the statement  "                    if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))" is 122.
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (!(args.Count() % 2 == 0))             {                 if (args.Count() == 1 && string.Compare(args[0].Substring(1' args[0].Length - 1)' AppConstants.Help' StringComparison.InvariantCultureIgnoreCase) == 0)                 {                     ShowCommonHelp(true);                     return false;                 }                 Logger.Error(methodName' StringResources.InvalidNumberOfArguments);                 Console.WriteLine(StringResources.InvalidNumberOfArguments);                 ShowCommonHelp(true);                 return false;             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
Magic Number,Azure.DataCenterMigration.App,Program,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration.App\Program.cs,TryParseCommandLineArguments,The following statement contains a magic number: if (string.Compare(args[1]' Constants.Operations.Export' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() { Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                          Constants.Parameters.SourceSubscriptionID'                                                          Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.QuietMode'                                                                                                                 Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowExportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowExportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                     //Check if GenerateMapperXml parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.GenerateMapperXml' StringComparison.CurrentCultureIgnoreCase) == 0                         && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowExportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter' argument));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                          Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Import input parameters.             else if (string.Compare(args[1]' Constants.Operations.Import' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 parameters.Add(args[0].Substring(1' args[0].Length - 1)' args[1]);                 requiredParameters = new List<string>() {Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.DestinationDCName'                                                         Constants.Parameters.ImportMetadataFilePath'                                                         Constants.Parameters.MapperXmlFilePath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.MissingRequiredParameter);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowImportHelp();                         return false;                     }                      // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowImportHelp();                         return false;                     }                     bool boolValue;                     //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Check if ResumeImport parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.ResumeImport' StringComparison.CurrentCultureIgnoreCase) == 0                          && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowImportHelp();                         return false;                     }                      //Checking mandatary parameters.                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowExportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ImportMetadataFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ImportMetadataFilePath' AppConstants.CommandLineArguments);                         ShowImportHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }             // Validates Migrate input parameters.             else if (string.Compare(args[1]' Constants.Operations.Migrate' StringComparison.InvariantCultureIgnoreCase) == 0)             {                 requiredParameters = new List<string>() { Constants.Parameters.SourceSubscriptionID'                                                         Constants.Parameters.DestinationSubscriptionID'                                                         Constants.Parameters.SourcePublishSettingsFilePath'                                                         Constants.Parameters.DestinationPublishSettingsFilePath'                                                         Constants.Parameters.SourceCertificateThumbprint'                                                         Constants.Parameters.DestinationCertificateThumbprint'                                                         Constants.Parameters.SourceDCName'                                                         Constants.Parameters.DestinationDCName'                                                                                                                 Constants.Parameters.ExportMetadataFolderPath'                                                         Constants.Parameters.RetryCount'                                                         Constants.Parameters.MaxBackoff'                                                         Constants.Parameters.MinBackoff'                                                         Constants.Parameters.DeltaBackoff'                                                         Constants.Parameters.QuietMode'                                                         Constants.Parameters.ResumeImport'                                                         Constants.Parameters.RollBackOnFailure'                                                         Constants.Parameters.DestinationPrefixName                 };                 //Parsing input arguments.                 for (int i = 2; i < args.Length; )                 {                     // Checks if argument is not defined with special character(-).                     if (args[i][0] != '-')                     {                         Logger.Error(methodName' StringResources.InvalidArgumentDeclaration);                         Console.WriteLine(StringResources.InvalidArgumentDeclaration);                         ShowMigrateHelp();                         return false;                     }                     bool boolValue;                     // Checks for valid argument names.                                      string argument = args[i].Substring(1' args[i].Length - 1);                     bool validParameter = requiredParameters.Any(a => string.Compare(a' argument' StringComparison.InvariantCultureIgnoreCase) == 0);                     if (!validParameter)                     {                         Logger.Error(methodName' string.Format(StringResources.InvalidArgumentName' argument));                         Console.WriteLine(StringResources.InvalidArgumentName' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if QuietMode parameter does not contain value other than true/false.                     if (string.Compare(argument' Constants.Parameters.QuietMode' StringComparison.CurrentCultureIgnoreCase) == 0                           && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Check if RollBackOnFailure parameter does not contain value other than true/ false.                     if (string.Compare(argument' Constants.Parameters.RollBackOnFailure' StringComparison.CurrentCultureIgnoreCase) == 0                        && (!bool.TryParse(args[i + 1]' out boolValue)))                     {                         Logger.Error(methodName' string.Format(StringResources.WrongInputForBoolArg' argument));                         Console.WriteLine(StringResources.WrongInputForBoolArg' argument);                         ShowMigrateHelp();                         return false;                     }                      //Checking mandatary parameters.                                         if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationSubscriptionID)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationSubscriptionID' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourcePublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourcePublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationPublishSettingsFilePath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationPublishSettingsFilePath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                     if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.SourceDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.SourceDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.DestinationDCName)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.DestinationDCName' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      if (!args.Contains(string.Format(AppConstants.CommandLineParam' Constants.Parameters.ExportMetadataFolderPath)))                     {                         Logger.Error(methodName' string.Format(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments));                         Console.WriteLine(StringResources.MissingRequiredParameter'                             Constants.Parameters.ExportMetadataFolderPath' AppConstants.CommandLineArguments);                         ShowMigrateHelp();                         return false;                     }                      // Adds valid argument with values in dictionary.                     parameters.Add(argument' args[i + 1]);                     i = i + 2;                 }             }
