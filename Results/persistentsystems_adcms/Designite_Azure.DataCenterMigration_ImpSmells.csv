Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The method has 150 lines of code.
Long Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The method has 259 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The method has 126 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The method has 101 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The method has 125 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The method has 101 lines of code.
Complex Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,Cyclomatic complexity of the method is 23
Complex Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,Cyclomatic complexity of the method is 46
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,Cyclomatic complexity of the method is 20
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,Cyclomatic complexity of the method is 12
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetSourceResourceName,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,Cyclomatic complexity of the method is 13
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,Cyclomatic complexity of the method is 13
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,Cyclomatic complexity of the method is 14
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,Cyclomatic complexity of the method is 31
Complex Method,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,Cyclomatic complexity of the method is 10
Complex Method,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,Cyclomatic complexity of the method is 18
Complex Method,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,Cyclomatic complexity of the method is 16
Long Parameter List,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ExportDataCenterLocations,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,Warning,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The method has 10 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The method has 11 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetDestinationResourceName,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetSourceResourceName,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The method has 25 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,BlobExists,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlob,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlockBlob,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The method has 12 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportBlobs,The method has 8 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateNewResourceName,The method has 5 parameters.
Long Parameter List,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The method has 6 parameters.
Long Parameter List,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The method has 5 parameters.
Long Identifier,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the parameter destinationLocationNamePresent is 30.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the parameter affinityGroupInDestinationSubscription is 38.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the parameter affinityGroupInDestinationSubscription is 38.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the parameter cloudServiceInDestinationSubscription is 37.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the parameter storageAccountInDestinationSubscription is 39.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "	if (!parameters.Keys.Contains (Constants.Parameters.SourcePublishSettingsFilePath) && !parameters.Keys.Contains (Constants.Parameters.SourceCertificateThumbprint)) { " is 165.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 141.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.ExportMetadataFolderPath' Constants.AppConfigArguments)); " is 166.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.SourceSubscriptionID' Constants.AppConfigArguments)); " is 162.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.SourceDCName' Constants.AppConfigArguments)); " is 154.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "	if ((parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourcePublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourceCertificateThumbprint]))) { " is 341.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 141.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.ExportMetadataFolderPath)); " is 132.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.SourceSubscriptionID)); " is 128.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.SourceDCName)); " is 120.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "	if (parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && !File.Exists (parameters [Constants.Parameters.SourcePublishSettingsFilePath])) { " is 164.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.SourcePublishSettingsFilePath)' new FileNotFoundException (StringResources.PublishSettingsFilePathParamException)); " is 221.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.ExportMetadataFolderPath)' new DirectoryNotFoundException (StringResources.ExportMetadataFolderPathParamException)); " is 222.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.XMLParsingException + " =>" + xmlEx.Message' parameters [Constants.Parameters.SourcePublishSettingsFilePath])); " is 173.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		subscription = publishSettingsFile.Subscriptions.FirstOrDefault (a => string.Compare (a.Id' parameters [Constants.Parameters.SourceSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 199.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.SubscriptionIdParamException' parameters [Constants.Parameters.SourceSubscriptionID]' parameters [Constants.Parameters.SourcePublishSettingsFilePath])); " is 214.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingPrivateKeyInCertificate' StringResources.Source' thumbprint)); " is 131.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		var sourceCredentials = new CertificateCloudCredentials (parameters [Constants.Parameters.SourceSubscriptionID]' certificate); " is 126.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "			SubscriptionGetResponse subscriptionResponse = Retry.RetryOperation (() => client.Subscriptions.Get ()' baseParams' ResourceType.None); " is 135.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "	List<string> locations = ExportDataCenterLocations (subscription.Credentials' retryCount' minBackOff' maxBackOff' deltaBackOff); " is 128.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "	bool sourceLocationNamePresent = locations.Any ((l => string.Compare (l' parameters [Constants.Parameters.SourceDCName]' StringComparison.CurrentCultureIgnoreCase) == 0)); " is 171.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.DCParamException' parameters [Constants.Parameters.SourceDCName])); " is 129.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		ExportMetadataFolderPath = Path.Combine (parameters [Constants.Parameters.ExportMetadataFolderPath]' string.Format (Constants.MetadataFileName' parameters [Constants.Parameters.SourceDCName]' DateTime.Now.ToString (Constants.ExportMetadataFileNameFormat)))' " is 257.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "		DestinationPrefixName = parameters.Keys.Contains (Constants.Parameters.DestinationPrefixName) ? parameters [Constants.Parameters.DestinationPrefixName].ToLower () : Constants.DestinationPrefixValue' " is 198.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if (!parameters.Keys.Contains (Constants.Parameters.SourcePublishSettingsFilePath) && !parameters.Keys.Contains (Constants.Parameters.SourceCertificateThumbprint)) { " is 165.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 141.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if (!parameters.Keys.Contains (Constants.Parameters.DestinationPublishSettingsFilePath) && !parameters.Keys.Contains (Constants.Parameters.DestinationCertificateThumbprint)) { " is 175.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Destination' Constants.AppConfigArguments)); " is 146.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.SourceSubscriptionID' Constants.AppConfigArguments)); " is 162.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.DestinationSubscriptionID' Constants.AppConfigArguments)); " is 167.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.DestinationDCName' Constants.AppConfigArguments)); " is 159.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingRequiredParameter' Constants.Parameters.DestinationPrefixName' Constants.AppConfigArguments)); " is 163.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		if (!parameters.Keys.Contains (Constants.Parameters.DestinationPrefixName) && !parameters.Keys.Contains (Constants.Parameters.MapperXmlFilePath)) { " is 147.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingMapperAndPrefix' StringResources.Destination' Constants.AppConfigArguments)); " is 146.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if ((parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourcePublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourceCertificateThumbprint]))) { " is 341.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 141.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if ((parameters.ContainsKey (Constants.Parameters.DestinationPublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationPublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.DestinationCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationCertificateThumbprint]))) { " is 361.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.MissingCredentialsFile' StringResources.Destination' Constants.AppConfigArguments)); " is 146.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.ImportMetadataFilePath)); " is 130.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.DestinationSubscriptionID)); " is 133.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.DestinationDCName)); " is 125.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.EmptyOrNullParameter' Constants.Parameters.DestinationPrefixName)); " is 129.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		if ((parameters.ContainsKey (Constants.Parameters.DestinationPrefixName) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationPrefixName])) || (parameters.ContainsKey (Constants.Parameters.MapperXmlFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.MapperXmlFilePath]))) { " is 305.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingMapperAndPrefix' StringResources.Destination' Constants.AppConfigArguments)); " is 146.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if ((parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && !File.Exists (parameters [Constants.Parameters.SourcePublishSettingsFilePath]))) { " is 166.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.SourcePublishSettingsFilePath)' new FileNotFoundException (StringResources.PublishSettingsFilePathParamException)); " is 221.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if ((parameters.ContainsKey (Constants.Parameters.DestinationPublishSettingsFilePath) && !File.Exists (parameters [Constants.Parameters.DestinationPublishSettingsFilePath]))) { " is 176.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.DestinationPublishSettingsFilePath)' new FileNotFoundException (StringResources.PublishSettingsFilePathParamException)); " is 226.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.MapperXmlFilePath)' new FileNotFoundException (StringResources.MapperFilePathParamException)); " is 200.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		if (!Path.GetExtension (importMapperXmlFilePath).Equals (Constants.MapperFileExtension' StringComparison.InvariantCultureIgnoreCase)) { " is 135.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.InvalidExtensionMapperFile' Constants.Parameters.MapperXmlFilePath)' new FileNotFoundException (StringResources.MapperFilePathParamException)); " is 205.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	destinationPrefix = parameters.Keys.Contains (Constants.Parameters.DestinationPrefixName) ? parameters [Constants.Parameters.DestinationPrefixName].ToLower () : Constants.DestinationPrefixValue; " is 194.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidParameterValue' Constants.Parameters.ImportMetadataFilePath)' new FileNotFoundException (StringResources.ImportMetadataFilePathParamException)); " is 213.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			if (!Path.GetExtension (filePath).Equals (Constants.MetadataFileExtension' StringComparison.InvariantCultureIgnoreCase)) { " is 122.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidExtensionMetadataFile' Constants.Parameters.ImportMetadataFilePath)' new FileNotFoundException (StringResources.ImportMetadataFilePathParamException)); " is 220.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.XMLParsingException + " =>" + xmlEx.Message' parameters [Constants.Parameters.SourcePublishSettingsFilePath])); " is 173.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		sourceSubscription = sourcePublishSettingsFile.Subscriptions.FirstOrDefault (a => string.Compare (a.Id' parameters [Constants.Parameters.SourceSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 211.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.SubscriptionIdParamException' parameters [Constants.Parameters.SourceSubscriptionID]' parameters [Constants.Parameters.SourcePublishSettingsFilePath])); " is 214.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingPrivateKeyInCertificate' StringResources.Source' thumbprint)); " is 131.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		var sourceCredentials = new CertificateCloudCredentials (parameters [Constants.Parameters.SourceSubscriptionID]' certificate); " is 126.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			SubscriptionGetResponse subscriptionResponse = Retry.RetryOperation (() => client.Subscriptions.Get ()' baseParams' ResourceType.None); " is 135.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.XMLParsingException + " =>" + xmlEx.Message' parameters [Constants.Parameters.DestinationPublishSettingsFilePath])); " is 178.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		destSubscription = destPublishSettingsFile.Subscriptions.FirstOrDefault (a => string.Compare (a.Id' parameters [Constants.Parameters.DestinationSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 212.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.SubscriptionIdParamException' parameters [Constants.Parameters.DestinationSubscriptionID]' parameters [Constants.Parameters.DestinationPublishSettingsFilePath])); " is 224.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			throw new ValidationException (string.Format (StringResources.MissingPrivateKeyInCertificate' StringResources.Destination' thumbprint)); " is 136.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		var destCredentials = new CertificateCloudCredentials (parameters [Constants.Parameters.DestinationSubscriptionID]' certificate); " is 129.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "			SubscriptionGetResponse subscriptionResponse = Retry.RetryOperation (() => client.Subscriptions.Get ()' baseParams' ResourceType.None); " is 135.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	List<string> locations = ExportDataCenterLocations (destSubscription.Credentials' retryCount' minBackOff' maxBackOff' deltaBackOff); " is 132.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	bool destinationLocationNamePresent = locations.Any ((l => string.Compare (l' parameters [Constants.Parameters.DestinationDCName]' StringComparison.CurrentCultureIgnoreCase) == 0)); " is 181.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.DCParamException' parameters [Constants.Parameters.DestinationDCName])); " is 134.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "	if (parameters.ContainsKey (Constants.Parameters.DestinationPrefixName) && (parameters [Constants.Parameters.DestinationPrefixName].Length < 1 || parameters [Constants.Parameters.DestinationPrefixName].Length > 5)) { " is 216.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "		throw new ValidationException (string.Format (StringResources.InvalidDestinationPrefixName' parameters [Constants.Parameters.DestinationPrefixName])); " is 150.
Long Statement,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,SetLog,The length of the statement  "	log4net.LogicalThreadContext.Properties [Constants.ResourceType] = string.IsNullOrEmpty (resourceType) ? Constants.StringHyphen : resourceType; " is 143.
Long Statement,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,SetLog,The length of the statement  "	log4net.LogicalThreadContext.Properties [Constants.ResourceName] = string.IsNullOrEmpty (resourceName) ? Constants.StringHyphen : resourceName; " is 143.
Long Statement,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,Warning,The length of the statement  "			log.Warn (string.Format (StringResources.ExceptionOccurred' ex.GetType ().ToString ()' message + ": " + ex.Message' ex.StackTrace)); " is 132.
Long Statement,Azure.DataCenterMigration,PublishSettings,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\PublishSettings.cs,ToPublishSetting,The length of the statement  "	settings.Credentials = new CertificateCloudCredentials (settings.Id' GetCertificate (element' Constants.ManagementCertificate) ?? defaultCertificate); " is 150.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ExportSubscriptionMetadata,The length of the statement  "	File.WriteAllText (exportParameters.ExportMetadataFolderPath' JsonConvert.SerializeObject (subscription' Formatting.Indented)); " is 127.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ExportSubscriptionMetadata,The length of the statement  "		File.WriteAllText (Path.ChangeExtension (exportParameters.ExportMetadataFolderPath' Constants.MapperFileExtension)' resourceHelper.GenerateMapperXml (subscription' exportParameters.DestinationPrefixName)); " is 205.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ExportSubscriptionMetadata,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportMetadataCompleted' exportParameters.ExportMetadataFolderPath)); " is 127.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ImportSubscriptionMetadata,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ImportMetadataStarted' parameters [Constants.Parameters.ImportMetadataFilePath])); " is 140.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ImportSubscriptionMetadata,The length of the statement  "	ReportProgress (string.Format (ProgressResources.ImportMetadataStarted' parameters [Constants.Parameters.ImportMetadataFilePath])); " is 131.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,MigrateSubscription,The length of the statement  "	File.WriteAllText (exportParameters.ExportMetadataFolderPath' JsonConvert.SerializeObject (subscription' Formatting.Indented)); " is 127.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,MigrateSubscription,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportMetadataCompleted' exportParameters.ExportMetadataFolderPath)); " is 127.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,MigrateSubscription,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ImportMetadataStarted' importParameters.ImportMetadataFilePath)); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.ImportDataCenterStarted' importParameters.DestinationDCName)' ResourceType.DataCenter.ToString ()' importParameters.DestinationDCName); " is 193.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "		dcMigration.ReportProgress (string.Format (ProgressResources.ImportDataCenterStarted' importParameters.DestinationDCName)); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "			importParameters.MapperXmlFilePath = Path.ChangeExtension (importParameters.ImportMetadataFilePath' Constants.MapperFileExtension); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "			File.WriteAllText (importParameters.MapperXmlFilePath' resourceHelper.GenerateMapperXml (destSubscriptionMetadata' importParameters.DestinationPrefixName)); " is 156.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "		resourceNameCollection = helper.GetDestinationResourceNames (importParameters.MapperXmlFilePath' out destinationPrefixValue); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "			importParameters.ImportMetadataFilePath = Path.Combine (Path.GetDirectoryName (importParameters.ImportMetadataFilePath)' string.Format (Constants.MetadataFileNewName' Path.GetFileNameWithoutExtension (importParameters.ImportMetadataFilePath))); " is 244.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "			File.WriteAllText (importParameters.ImportMetadataFilePath' JsonConvert.SerializeObject (sourceSubscriptionMetadata' Newtonsoft.Json.Formatting.Indented)); " is 155.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "		dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "			ExcludeVMList = resourceNameCollection.FirstOrDefault (x => x.Key.ToString () == "ExcludeVM").Value.Select (x => x.SourceName.ToString ().ToLower ()).ToList (); " is 160.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				AffinityGroupListResponse affinityGroupResponse = GetAffinityGroupListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "				Logger.Info (methodName' string.Format (ProgressResources.ImportDataCenterCompleted' importParameters.DestinationDCName)); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ChangeAndValidateMetadataFileResources,The length of the statement  "	List<Azure.DataCenterMigration.Models.StorageAccount> storageAccounts = (from datacenter in destSubscriptionMetadata.DataCenters " is 128.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ChangeAndValidateMetadataFileResources,The length of the statement  "	AffinityGroupListResponse affinityGroupResponse = GetAffinityGroupListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ChangeAndValidateMetadataFileResources,The length of the statement  "	HostedServiceListResponse cloudserviceResponse = GetCloudServiceListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 212.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the statement  "	if ((Constants.MaximumLimitAffinityGroups - affinityGroupResponse.AffinityGroups.Count ()) < destSubscriptionMetadata.DataCenters.FirstOrDefault ().AffinityGroups.Where (ag => ag.IsImported != true).Count ()) { " is 210.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the statement  "		affinityGroup.AffinityGroupDetails.Name = GetDestinationResourceName (ResourceType.AffinityGroup' affinityGroup.AffinityGroupDetails.Name); " is 139.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the statement  "			where (string.Compare (ag.Name' affinityGroup.AffinityGroupDetails.Name' StringComparison.CurrentCultureIgnoreCase) == 0) " is 121.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidAffinityGroupNameExist' affinityGroup.AffinityGroupDetails.Name)); " is 135.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "	if (networkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration != null && !networkConfiguration.IsImported) { " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "		NetworkGetConfigurationResponse destinationNetworkResponse = GetNetworkConfigurationFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 220.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "				virtualNetworkSite.AffinityGroup = GetDestinationResourceName (ResourceType.AffinityGroup' virtualNetworkSite.AffinityGroup); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "					var dnsList = networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Where (x => virtualNetworkSite.DnsServersRef.Any (x1 => x1.name == x.name)).ToArray (); " is 165.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "						s.name = GetDestinationResourceName (ResourceType.DnsServer' s.name' ResourceType.VirtualNetworkSite' virtualNetworkSite.name); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "						s.name = GetDestinationResourceName (ResourceType.DnsServer' s.name' ResourceType.VirtualNetworkSite' virtualNetworkSite.name); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "				if (virtualNetworkSite.Gateway != null && virtualNetworkSite.Gateway.ConnectionsToLocalNetwork != null && virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef != null) { " is 189.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "					var localNetworkList = networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Where (x => virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef.name == x.name).ToArray (); " is 202.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "					virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef.name = GetDestinationResourceName (ResourceType.LocalNetworkSite' virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef.name' ResourceType.VirtualNetworkSite' virtualNetworkSite.name); " is 276.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "						s.name = GetDestinationResourceName (ResourceType.LocalNetworkSite' s.name' ResourceType.VirtualNetworkSite' virtualNetworkSite.name); " is 134.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "		if (destinationNetConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) { " is 209.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidVirtualNetworkNameExist' String.Join ("' "' networkNames))); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "			if (networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Select (cs => cs.name).Distinct ().Count () != networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Count ()) { " is 200.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "		if (networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 142.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "			if (destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 195.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "					throw new ValidationException (string.Format (StringResources.InvalidDNSServerNameExist' String.Join ("' "' dnsServerNames))); " is 126.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "			if (networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Select (cs => cs.name).Distinct ().Count () != networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Count ()) { " is 190.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "			if (destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null) { " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "					throw new ValidationException (string.Format (StringResources.InvalidLocalNetworkNameExist' String.Join ("' "' localNetworkNames))); " is 132.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "			if (networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Select (cs => cs.name).Distinct ().Count () != networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Count ()) { " is 196.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "	if (cloudServices.Select (cs => cs.DeploymentDetails).Where (d => d != null).Where (IP => IP.ReservedIPName != null).Select (resip => resip.ReservedIPName).Distinct ().Count () != cloudServices.Select (cs => cs.DeploymentDetails).Where (d => d != null).Where (IP => IP.ReservedIPName != null).Select (resip => resip.ReservedIPName).Count ()) { " is 343.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "		service.CloudServiceDetails.ServiceName = GetDestinationResourceName (ResourceType.CloudService' service.CloudServiceDetails.ServiceName); " is 138.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "			if (!(CheckServiceNameAvailability (service.CloudServiceDetails.ServiceName' importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl))) { " is 203.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidServiceNameExist' service.CloudServiceDetails.ServiceName)); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "		service.CloudServiceDetails.Properties.AffinityGroup = GetDestinationResourceName (ResourceType.AffinityGroup' service.CloudServiceDetails.Properties.AffinityGroup); " is 165.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "				CheckReservedIPNameAvailability (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl' service.DeploymentDetails.ReservedIPName' service.CloudServiceDetails.ServiceName); " is 239.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "			service.DeploymentDetails.VirtualNetworkName = GetDestinationResourceName (ResourceType.VirtualNetworkSite' service.DeploymentDetails.VirtualNetworkName); " is 154.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "			service.DeploymentDetails.Name = GetDestinationResourceName (ResourceType.Deployment' service.DeploymentDetails.Name' ResourceType.CloudService' service.CloudServiceDetails.ServiceName); " is 186.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "			RenameAndValidateDestVirtualMachineNames (service.DeploymentDetails.VirtualMachines' service.CloudServiceDetails.ServiceName); " is 126.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "		virtualMachine.VirtualMachineDetails.RoleName = GetDestinationResourceName (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName); " is 192.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName)); " is 139.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "			string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.')); " is 197.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "			string storageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' storageAccountName).PrimaryKey; " is 149.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "			containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/')); " is 201.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidSourceOSBlob' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri)); " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The length of the statement  "	if (virtualMachines.Select (vm => vm.VirtualMachineDetails.RoleName).Distinct ().Count () != virtualMachines.Count ()) { " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "		SubscriptionGetResponse subscriptionResponse = Retry.RetryOperation (() => client.Subscriptions.Get ()' (BaseParameters)importParameters' ResourceType.None); " is 157.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "		if ((subscriptionResponse.MaximumHostedServices - subscriptionResponse.CurrentHostedServices) < dataCenter.CloudServices.Where (service => service.IsImported != true).Count ()) { " is 178.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "		if ((subscriptionResponse.MaximumStorageAccounts - subscriptionResponse.CurrentStorageAccounts) < dataCenter.StorageAccounts.Where (storage => storage.IsImported != true).Count ()) { " is 182.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "		if (dataCenter.NetworkConfiguration != null && dataCenter.NetworkConfiguration.IsImported == false && dataCenter.NetworkConfiguration.VirtualNetworkConfiguration != null) { " is 172.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "			if (dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && (subscriptionResponse.MaximumVirtualNetworkSites - subscriptionResponse.CurrentVirtualNetworkSites) < dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Count ()) { " is 288.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "			if (dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.Dns != null && dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null && (subscriptionResponse.MaximumDnsServers - subscriptionResponse.CurrentDnsServers) < dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Count ()) { " is 335.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "			if (dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null && (subscriptionResponse.MaximumLocalNetworkSites - subscriptionResponse.CurrentLocalNetworkSites) < dataCenter.NetworkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Count ()) { " is 280.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ValidateSubscriptionCapacity,The length of the statement  "		Dictionary<string' string> roleSizeMaster = GetRoleSizes (importParameters.DestinationSubscriptionSettings.Id' importParameters.DestinationSubscriptionSettings.Credentials.ManagementCertificate); " is 195.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The length of the statement  "		storageAccount.StorageAccountDetails.Name = GetDestinationResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name); " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The length of the statement  "		storageAccount.StorageAccountDetails.Properties.AffinityGroup = GetDestinationResourceName (ResourceType.AffinityGroup' storageAccount.StorageAccountDetails.Properties.AffinityGroup); " is 183.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name)); " is 135.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The length of the statement  "			if (!(CheckStorageNameAvailability (storageAccount.StorageAccountDetails.Name' importParameters.DestinationSubscriptionSettings.Credentials))) { " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The length of the statement  "				throw new ValidationException (string.Format (StringResources.InvalidStorageAccountNameExist' storageAccount.StorageAccountDetails.Name)); " is 138.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetDestinationResourceName,The length of the statement  "				ResourceNameMapper resource = resourceNameCollection [resourceType].Where (s => s.SourceName.Equals (originalResourceName)).FirstOrDefault (); " is 142.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetDestinationResourceName,The length of the statement  "					ResourceNameMapper resourceParent = resourceNameCollection [parentResourceType].Where (s => s.DestinationName.Equals (parentResourceDestinationName)).FirstOrDefault (); " is 168.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetSourceResourceName,The length of the statement  "				ResourceNameMapper resource = resourceNameCollection [resourceType].Where (s => s.DestinationName.Equals (resourceName)).FirstOrDefault (); " is 139.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetSourceResourceName,The length of the statement  "					ResourceNameMapper resourceParent = resourceNameCollection [parentResourceType].Where (s => s.DestinationName.Equals (parentResourceName)).FirstOrDefault (); " is 157.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportAffinityGroupStarted' affinityGroup.AffinityGroupDetails.Name)' ResourceType.AffinityGroup.ToString ()' affinityGroup.AffinityGroupDetails.Name); " is 209.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "					AzureOperationResponse createAffinityGroupResult = Retry.RetryOperation (() => client.AffinityGroups.Create (new AffinityGroupCreateParameters { " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "					})' (BaseParameters)importParameters' ResourceType.AffinityGroup' affinityGroup.AffinityGroupDetails.Name' () => DeleteAffinityGroupIfTaskCancelled (ResourceType.AffinityGroup' affinityGroup.AffinityGroupDetails.Name)); " is 219.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportAffinityGroupCompleted' affinityGroup.AffinityGroupDetails.Name' swSingleAG.Elapsed.Days' swSingleAG.Elapsed.Hours' swSingleAG.Elapsed.Minutes' swSingleAG.Elapsed.Seconds)' ResourceType.AffinityGroup.ToString ()' affinityGroup.AffinityGroupDetails.Name); " is 318.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalAG.Elapsed.Days' swTotalAG.Elapsed.Hours' swTotalAG.Elapsed.Minutes' swTotalAG.Elapsed.Seconds)' ResourceType.AffinityGroup.ToString ()); " is 230.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "			NetworkGetConfigurationResponse destinationNetworkResponse = GetNetworkConfigurationFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 220.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				if (destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 422.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers = destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Union (networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers).ToArray (); " is 227.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				else if (destinationNetConfiguration.VirtualNetworkConfiguration != null && (destinationNetConfiguration.VirtualNetworkConfiguration.Dns == null || destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers == null) && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 429.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers = networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers; " is 137.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				if (destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null) { " is 293.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites = destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Union (networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites).ToArray (); " is 236.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				else if (destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites == null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null) { " is 298.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites = networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites; " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				if (destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) { " is 297.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites = destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Union (networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites).ToArray (); " is 242.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				else if (destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites == null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) { " is 302.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites = networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites; " is 147.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "			using (var vnetClient = new NetworkManagementClient (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl)) { " is 178.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "				OperationStatusResponse response = Retry.RetryOperation (() => vnetClient.Networks.SetConfiguration (new NetworkSetConfigurationParameters { " is 140.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "			Logger.Info (methodName' string.Format (ProgressResources.ImportVirtualNetworkCompleted' swVirtualNet.Elapsed.Days' swVirtualNet.Elapsed.Hours' swVirtualNet.Elapsed.Minutes' swVirtualNet.Elapsed.Seconds)' ResourceType.VirtualNetwork.ToString ()); " is 246.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "	using (var computeManagementClient = new ComputeManagementClient (importParameters.DestinationSubscriptionSettings.Credentials)) { " is 130.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportServiceStarted' service.CloudServiceDetails.ServiceName)' ResourceType.CloudService.ToString ()' service.CloudServiceDetails.ServiceName); " is 202.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					AzureOperationResponse createHostedServiceResult = (service.CloudServiceDetails.Properties.AffinityGroup == null) ? Retry.RetryOperation (() => computeManagementClient.HostedServices.Create (new HostedServiceCreateParameters { " is 226.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					})' (BaseParameters)importParameters' ResourceType.CloudService' service.CloudServiceDetails.ServiceName' () => DeleteCloudServiceIfTaskCancelled (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)) : Retry.RetryOperation (() => computeManagementClient.HostedServices.Create (new HostedServiceCreateParameters { " is 328.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					})' (BaseParameters)importParameters' ResourceType.CloudService' service.CloudServiceDetails.ServiceName' () => DeleteCloudServiceIfTaskCancelled (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)); " is 216.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportServiceCompleted' service.CloudServiceDetails.ServiceName' swSingleService.Elapsed.Days' swSingleService.Elapsed.Hours' swSingleService.Elapsed.Minutes' swSingleService.Elapsed.Seconds)' ResourceType.CloudService.ToString ()' service.CloudServiceDetails.ServiceName); " is 331.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					if (service.DeploymentDetails != null && service.DeploymentDetails.VirtualMachines != null && service.DeploymentDetails.VirtualMachines.Count > 0) { " is 148.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "							dcMigration.ReportProgress (string.Format (ProgressResources.CompletedServices' importedServiceCount + 1' cloudServices.Count ())); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "							Logger.Info (methodName' string.Format (ProgressResources.CompletedServices' importedServiceCount + 1' cloudServices.Count ())' ResourceType.CloudService.ToString ()' service.CloudServiceDetails.ServiceName); " is 208.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "					if (service.DeploymentDetails != null && service.DeploymentDetails.VirtualMachines != null && service.DeploymentDetails.VirtualMachines.Count > 0) { " is 148.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "							dcMigration.ReportProgress (string.Format (ProgressResources.CompletedServices' importedServiceCount + 1' cloudServices.Count ())); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "							Logger.Info (methodName' string.Format (ProgressResources.CompletedServices' importedServiceCount + 1' cloudServices.Count ())' ResourceType.CloudService.ToString ()' service.CloudServiceDetails.ServiceName); " is 208.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalServices.Elapsed.Days' swTotalServices.Elapsed.Hours' swTotalServices.Elapsed.Minutes' swTotalServices.Elapsed.Seconds)' ResourceType.CloudService.ToString ()); " is 253.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "				using (var computeManagementClient = new StorageManagementClient (importParameters.DestinationSubscriptionSettings.Credentials)) { " is 130.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportStorageAccountStarted' storageAccount.StorageAccountDetails.Name)' ResourceType.StorageAccount.ToString ()' storageAccount.StorageAccountDetails.Name); " is 215.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "					OperationStatusResponse createStorageAccountResult = (storageAccount.StorageAccountDetails.Properties.AffinityGroup == null) ? Retry.RetryOperation (() => computeManagementClient.StorageAccounts.Create (new StorageAccountCreateParameters { " is 239.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "					})' (BaseParameters)importParameters' ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name) : Retry.RetryOperation (() => computeManagementClient.StorageAccounts.Create (new StorageAccountCreateParameters { " is 224.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ImportStorageAccountCompleted' storageAccount.StorageAccountDetails.Name' swStorage.Elapsed.Days' swStorage.Elapsed.Hours' swStorage.Elapsed.Minutes' swStorage.Elapsed.Seconds)' ResourceType.StorageAccount.ToString ()' storageAccount.StorageAccountDetails.Name); " is 320.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalStorages.Elapsed.Days' swTotalStorages.Elapsed.Hours' swTotalStorages.Elapsed.Minutes' swTotalStorages.Elapsed.Seconds)' ResourceType.StorageAccount.ToString ()); " is 255.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "	Logger.Info (methodName' ProgressResources.ExecutionStarted' ResourceType.Deployment.ToString ()' deploymentDetails.Name); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "		using (var client = new ComputeManagementClient (importParameters.SourceSubscriptionSettings.Credentials' importParameters.SourceSubscriptionSettings.ServiceUrl)) { " is 164.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "				using (var computeClient = new ComputeManagementClient (importParameters.DestinationSubscriptionSettings.Credentials)) { " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "					for (int virtualMachineNumber = 0; virtualMachineNumber < deploymentDetails.VirtualMachines.Count (); virtualMachineNumber++) { " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "								string sourceStorageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.')); " is 203.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "								containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/')); " is 201.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									MediaLink = new Uri (string.Format (CultureInfo.InvariantCulture' Constants.StorageAccountMediaLink' accountName' containerName' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last ())' UriKind.Absolute)' " is 231.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									Name = string.Format ("{0}{1}"' importParameters.DestinationPrefixName' GetDestinationResourceName (ResourceType.OSDisk' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.Name' ResourceType.CloudService' serviceName))' " is 223.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "										MediaLink = new Uri (string.Format (CultureInfo.InvariantCulture' Constants.StorageAccountMediaLink' accountName' containerName' disk.MediaLink.Segments.Last ())' UriKind.Absolute)' " is 181.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "										Name = string.Format ("{0}{1}"' importParameters.DestinationPrefixName' GetDestinationResourceName (ResourceType.HardDisk' disk.Name' ResourceType.CloudService' serviceName))' " is 175.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "										SourceMediaLink = new Uri (string.Format (CultureInfo.InvariantCulture' Constants.StorageAccountMediaLink' accountName' containerName' disk.MediaLink.Segments.Last ())' UriKind.Absolute) " is 186.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "								Logger.Info (methodName' string.Format (ProgressResources.ImportVirtualMachineStarted' virtualMachine.VirtualMachineDetails.RoleName' deploymentDetails.Name)' ResourceType.VirtualMachine.ToString ()' virtualMachine.VirtualMachineDetails.RoleName); " is 247.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									var deploymentResult = Retry.RetryOperation (() => computeClient.VirtualMachines.CreateDeployment (serviceName' createDeploymentParameters)' (BaseParameters)importParameters' ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName); " is 251.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									UpdateMedatadaFile (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' parentResourceName: serviceName); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									Retry.RetryOperation (() => computeClient.VirtualMachines.Create (serviceName' deploymentDetails.Name' parameters)' (BaseParameters)importParameters' ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' () => DeleteVirtualMachineIfTaskCancelled (ResourceType.VirtualMachine' serviceName' deploymentDetails.Name' virtualMachine.VirtualMachineDetails.RoleName)); " is 383.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "									UpdateMedatadaFile (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' parentResourceName: serviceName); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "								Logger.Info (methodName' string.Format (ProgressResources.ImportVirtualMachineCompleted' virtualMachine.VirtualMachineDetails.RoleName' deploymentDetails.Name' swDeployment.Elapsed.Days' swDeployment.Elapsed.Hours' swDeployment.Elapsed.Minutes' swDeployment.Elapsed.Seconds)' ResourceType.VirtualMachine.ToString ()' virtualMachine.VirtualMachineDetails.RoleName); " is 364.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "								computeClient.VirtualMachines.Shutdown (serviceName' deploymentDetails.Name' virtualMachine.VirtualMachineDetails.RoleName' new VirtualMachineShutdownParameters { " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalDeploymentWithVMs.Elapsed.Days' swTotalDeploymentWithVMs.Elapsed.Hours' swTotalDeploymentWithVMs.Elapsed.Minutes' swTotalDeploymentWithVMs.Elapsed.Seconds)' ResourceType.Deployment.ToString ()' deploymentDetails.Name); " is 311.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	diskUri.AddRange (destSubscriptionMetadata.DataCenters.FirstOrDefault ().CloudServices.Where (d => d.DeploymentDetails != null).Select (dd => dd.DeploymentDetails).SelectMany (vm => vm.VirtualMachines).Where (dds => dds.VirtualMachineDetails.DataVirtualHardDisks != null && !ExcludeVMList.Contains ((dds.VirtualMachineDetails.RoleName.ToString ().ToLower ()))).SelectMany (medialinks => medialinks.VirtualMachineDetails.DataVirtualHardDisks).Select (dds => dds.MediaLink)); " is 473.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	diskUri.AddRange (destSubscriptionMetadata.DataCenters.FirstOrDefault ().CloudServices.Where (d => d.DeploymentDetails != null).Select (dd => dd.DeploymentDetails).SelectMany (vm => vm.VirtualMachines).Where (x => !ExcludeVMList.Contains (x.VirtualMachineDetails.RoleName.ToString ().ToLower ())).Select (medialinks => medialinks.VirtualMachineDetails.OSVirtualHardDisk.MediaLink)); " is 382.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	ExcludeVMVHDList.AddRange (destSubscriptionMetadata.DataCenters.FirstOrDefault ().CloudServices.Where (d => d.DeploymentDetails != null).Select (dd => dd.DeploymentDetails).SelectMany (vm => vm.VirtualMachines).Where (dds => dds.VirtualMachineDetails.DataVirtualHardDisks != null && ExcludeVMList.Contains ((dds.VirtualMachineDetails.RoleName.ToString ().ToLower ()))).SelectMany (medialinks => medialinks.VirtualMachineDetails.DataVirtualHardDisks).Select (dds => dds.MediaLink)); " is 481.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	ExcludeVMVHDList.AddRange (destSubscriptionMetadata.DataCenters.FirstOrDefault ().CloudServices.Where (d => d.DeploymentDetails != null).Select (dd => dd.DeploymentDetails).SelectMany (vm => vm.VirtualMachines).Where (x => ExcludeVMList.Contains (x.VirtualMachineDetails.RoleName.ToString ().ToLower ())).Select (medialinks => medialinks.VirtualMachineDetails.OSVirtualHardDisk.MediaLink)); " is 390.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	using (var client = new ComputeManagementClient (importParameters.SourceSubscriptionSettings.Credentials' importParameters.SourceSubscriptionSettings.ServiceUrl)) { " is 164.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "				var sourceDeployment = client.Deployments.GetBySlot (GetSourceResourceName (ResourceType.CloudService' serviceName)' DeploymentSlot.Production); " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "					string vmSourceName = GetSourceResourceName (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName); " is 161.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ShutDownVm' vmSourceName)' ResourceType.VirtualMachine.ToString ()' vmSourceName); " is 140.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "					if (roleInstance.InstanceStatus != Constants.VMStatusStopped && roleInstance.InstanceStatus != Constants.VMStatusStoppedDeallocated && !ExcludeVMList.Contains (vmSourceName.ToString ().ToLower ())) { " is 199.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "						Retry.RetryOperation ((() => client.VirtualMachines.Shutdown (GetSourceResourceName (ResourceType.CloudService' serviceName)' sourceDeployment.Name' vmSourceName' new VirtualMachineShutdownParameters { " is 201.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "		string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey; " is 161.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "		string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey; " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "			BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' blobName); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 179.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "				Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true); " is 159.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName); " is 272.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "				Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 174.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyAllBlobsOfVM.Elapsed.Days' swCopyAllBlobsOfVM.Elapsed.Hours' swCopyAllBlobsOfVM.Elapsed.Minutes' swCopyAllBlobsOfVM.Elapsed.Seconds)' ResourceType.Blob.ToString ()); " is 257.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "		string sourceStorageAccountName = GetSourceResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "		string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey; " is 161.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "		string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey; " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "		BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "				Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true); " is 241.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "						CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 133.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "								Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName); " is 158.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName); " is 199.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true); " is 174.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "						CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 139.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "								Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName); " is 158.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName); " is 199.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true); " is 180.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "							string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()); " is 241.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "			Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ()); " is 245.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString ()); " is 281.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swAllCopyStorageAccounts.Elapsed.Days' swAllCopyStorageAccounts.Elapsed.Hours' swAllCopyStorageAccounts.Elapsed.Minutes' swAllCopyStorageAccounts.Elapsed.Seconds)' ResourceType.Blob.ToString ()); " is 281.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "				dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100)); " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "		BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName); " is 134.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "					dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100)); " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "				BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName); " is 134.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "					dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100)); " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "				BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The length of the statement  "				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName); " is 134.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlob,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.GetCloudBlobStarted' blobName' storageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 151.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlob,The length of the statement  "	Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (storageAccountName' storageKey)' true); " is 223.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlob,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.CloudBlobInfoRecieved' blobName' storageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlockBlob,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.GetCloudBlobStarted' blobName' storageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 151.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlockBlob,The length of the statement  "	Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (storageAccountName' storageKey)' true); " is 223.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlockBlob,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.CloudBlobInfoRecieved' blobName' storageAccountName)' ResourceType.Blob.ToString ()' blobName); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckServiceNameAvailability,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.CheckServiceNameAvailabilityFromMSAzureStarted' serviceName)' ResourceType.CloudService.ToString ()' serviceName); " is 172.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckServiceNameAvailability,The length of the statement  "		HostedServiceCheckNameAvailabilityResponse availabilityResponse = Retry.RetryOperation (() => client.HostedServices.CheckNameAvailability (serviceName)' (BaseParameters)importParameters' ResourceType.CloudService' serviceName); " is 227.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckServiceNameAvailability,The length of the statement  "		Logger.Info (methodName' String.Format (ProgressResources.CheckServiceNameAvailabilityFromMSAzureCompleted' serviceName)' ResourceType.CloudService.ToString ()' serviceName); " is 174.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckStorageNameAvailability,The length of the statement  "	Logger.Info (methodName' String.Format (ProgressResources.CheckStorageNameAvailabilityFromMSAzureStarted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 188.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckStorageNameAvailability,The length of the statement  "		CheckNameAvailabilityResponse storageResponse = Retry.RetryOperation (() => client.StorageAccounts.CheckNameAvailability (storageAccountName)' (BaseParameters)importParameters' ResourceType.StorageAccount' storageAccountName); " is 226.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckStorageNameAvailability,The length of the statement  "		Logger.Info (methodName' String.Format (ProgressResources.CheckStorageNameAvailabilityFromMSAzureCompleted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 190.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetStorageAccountsFromMSAzureStarted' ResourceType.StorageAccount.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "		StorageAccountListResponse storageResponse = Retry.RetryOperation (() => client.StorageAccounts.List ()' (BaseParameters)importParameters' ResourceType.StorageAccount); " is 168.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "		Logger.Info (methodName' ProgressResources.GetStorageAccountsFromMSAzureCompleted' ResourceType.StorageAccount.ToString ()); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.GetStorageAccountKeysStarted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 170.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		StorageAccountGetKeysResponse storageKeyResponse = Retry.RetryOperation (() => client.StorageAccounts.GetKeys (storageAccountName)' (BaseParameters)importParameters' ResourceType.StorageAccount' storageAccountName); " is 215.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.GetStorageAccountKeysCompleted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 172.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudServiceListResponseFromMSAzure,The length of the statement  "		HostedServiceListResponse serviceResponse = Retry.RetryOperation (() => client.HostedServices.List ()' (BaseParameters)importParameters' ResourceType.CloudService); " is 164.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureStarted' ResourceType.AffinityGroup.ToString ()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "		AffinityGroupListResponse agResponse = Retry.RetryOperation (() => client.AffinityGroups.List ()' (BaseParameters)importParameters' ResourceType.AffinityGroup); " is 160.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "		Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString ()); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "			Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString ()); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetVirtualMachinesFromMSAzureStarted' ResourceType.VirtualMachine.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "		VirtualMachineGetResponse virtualMachineResponse = Retry.RetryOperation (() => client.VirtualMachines.Get (serviceName' deploymentName' virtualMachineName)' (BaseParameters)importParameters' ResourceType.VirtualMachine' virtualMachineName); " is 240.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "		Logger.Info (methodName' ProgressResources.GetVirtualMachinesFromMSAzureCompleted' ResourceType.VirtualMachine.ToString ()); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetDeploymentResponseFromMSAzure,The length of the statement  "		DeploymentGetResponse deploymentResponse = Retry.RetryOperation (() => client.Deployments.GetByName (serviceName' deploymentName)' (BaseParameters)importParameters' ResourceType.Deployment' deploymentName); " is 206.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString ()); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "		else if (reservedIpPresent.ServiceName != null && !(serviceName.Equals (reservedIpPresent.ServiceName' StringComparison.InvariantCultureIgnoreCase))) { " is 151.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "			throw new ValidationException (string.Format (ProgressResources.OccupiedReservedIpName' reservedIPName' reservedIpPresent.ServiceName)); " is 136.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the statement  "	AffinityGroupListResponse affinityGroupResponse = GetAffinityGroupListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials); " is 153.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.DeleteAGOnTaskCancelled' affinityGroupName)' ResourceType.AffinityGroup.ToString ()' affinityGroupName); " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the statement  "		using (var client = new ManagementClient (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl)) { " is 167.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the statement  "	HostedServiceListResponse cloudserviceResponse = GetCloudServiceListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 212.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.DeleteCloudServiceOnTaskCancelled' serviceName)' ResourceType.AffinityGroup.ToString ()' serviceName); " is 160.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteVirtualMachineIfTaskCancelled,The length of the statement  "	if (GetVirtualMachinesResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl' serviceName' deploymentName' virtualMachineName) != null) { " is 225.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteVirtualMachineIfTaskCancelled,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.DeleteVirtualMachineOnTaskCancelled' virtualMachineName)' ResourceType.AffinityGroup.ToString ()' serviceName); " is 169.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteVirtualMachineIfTaskCancelled,The length of the statement  "		using (var computeClient = new ComputeManagementClient (importParameters.DestinationSubscriptionSettings.Credentials)) { " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the statement  "	var storageAccountResponse = GetStorageAccountListResponseFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials); " is 133.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.DeleteStorageAccountOnTaskCancelled' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 177.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "					if (affinityGroup.AffinityGroupDetails.Name.Equals (GetSourceResourceName (ResourceType.AffinityGroup' resourceName)' StringComparison.InvariantCultureIgnoreCase)) { " is 165.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "					if (storageAccount.StorageAccountDetails.Name.Equals (GetSourceResourceName (ResourceType.StorageAccount' resourceName)' StringComparison.InvariantCultureIgnoreCase)) { " is 168.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "					if (service.CloudServiceDetails.ServiceName.Equals (GetSourceResourceName (ResourceType.CloudService' resourceName)' StringComparison.InvariantCultureIgnoreCase)) { " is 164.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "					if (service.DeploymentDetails != null && service.DeploymentDetails.Name.Equals (GetSourceResourceName (ResourceType.Deployment' resourceName' ResourceType.CloudService' parentResourceName)' StringComparison.InvariantCultureIgnoreCase) && service.CloudServiceDetails.ServiceName.Equals (GetSourceResourceName (ResourceType.CloudService' parentResourceName))) { " is 359.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "					if (service.DeploymentDetails != null && service.CloudServiceDetails.ServiceName.Equals (GetSourceResourceName (ResourceType.CloudService' parentResourceName))) { " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "							if (vm.VirtualMachineDetails.RoleName.Equals (GetSourceResourceName (ResourceType.VirtualMachine' resourceName' ResourceType.CloudService' parentResourceName)' // resourceName' " is 176.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The length of the statement  "		File.WriteAllText (importParameters.ImportMetadataFilePath' JsonConvert.SerializeObject (sourceSubscriptionMetadata' Newtonsoft.Json.Formatting.Indented)); " is 155.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportDataCenterStarted' exportParameters.SourceDCName)' ResourceType.DataCenter.ToString ()' exportParameters.SourceDCName); " is 183.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	AffinityGroupListResponse affinityGroupResponse = GetAffinityGroupListResponseFromMSAzure (exportParameters.SourceSubscriptionSettings.Credentials); " is 148.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	HostedServiceListResponse cloudserviceResponse = GetCloudServiceListResponseFromMSAzure (exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl); " is 202.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	NetworkGetConfigurationResponse networkResponse = GetNetworkConfigurationFromMSAzure (exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl); " is 199.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	StorageAccountListResponse storageAccountResponse = GetStorageAccountListResponseFromMSAzure (exportParameters.SourceSubscriptionSettings.Credentials); " is 151.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' stageCount' Constants.ExportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' stageCount' Constants.ExportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' stageCount' Constants.ExportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	dcMigration.ReportProgress (string.Format (ProgressResources.CompletedStages' stageCount' Constants.ExportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportDataCenterCompleted' dataCenter.LocationName)' ResourceType.DataCenter.ToString ()); " is 148.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportAffinityGroups,The length of the statement  "		where (string.Compare (affinityGroup.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0) " is 126.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "	using (var client = new ComputeManagementClient (exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl)) { " is 164.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "			if ((string.Compare (service.Properties.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0) || (service.Properties.Location == null && (dcAffinityGroupNames.Contains (service.Properties.AffinityGroup)))) { " is 243.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "				Logger.Info (methodName' string.Format (ProgressResources.ExportCloudServiceStarted' service.ServiceName)' ResourceType.CloudService.ToString ()' service.ServiceName); " is 167.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.ExportCloudServiceCompleted' service.ServiceName)' ResourceType.CloudService.ToString ()' service.ServiceName); " is 169.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportStorageAccounts,The length of the statement  "		where ((string.Compare (account.Properties.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0) || (account.Properties.Location == null && (dcAffinityGroupNames.Contains (account.Properties.AffinityGroup)))) " is 244.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportStorageAccountContainers,The length of the statement  "		string srcStorageAccountKey = GetStorageAccountKeysFromMSAzure (exportParameters.SourceSubscriptionSettings.Credentials' account.Name).PrimaryKey; " is 146.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportStorageAccountContainers,The length of the statement  "		Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (account.Name' srcStorageAccountKey)' true); " is 227.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportDeployment,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportDeploymentStarted' deploymentResponse.Name' serviceName)' ResourceType.Deployment.ToString ()' deploymentResponse.Name); " is 184.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportDeployment,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.ExportDeploymentCompleted' deploymentResponse.Name' serviceName)' ResourceType.Deployment.ToString ()' deploymentResponse.Name); " is 186.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExportVirtualMachineStarted' serviceName)' ResourceType.VirtualMachine.ToString ()); " is 142.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "			where role.RoleType == Constants.PersistentVMRole && role.RoleName == roleInstance.RoleName && roleInstance.IPAddress != null " is 125.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.ExportVirtualMachineCompleted' serviceName)' ResourceType.VirtualMachine.ToString ()); " is 144.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "		if (netConfiguration.VirtualNetworkConfiguration != null && netConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) { " is 135.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "			var requiredVirtualNetworkSites = (netConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Where (vn => affinityGroupNames.Contains (vn.AffinityGroup) || string.Compare (vn.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0)).ToArray (); " is 284.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "				if (vns.Gateway != null && vns.Gateway.ConnectionsToLocalNetwork != null && vns.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef != null) { " is 144.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "			if (netConfiguration.VirtualNetworkConfiguration.Dns != null && netConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 134.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "				netConfiguration.VirtualNetworkConfiguration.Dns.DnsServers = netConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Where (dns => dnsNames.Distinct ().Contains (dns.name)).ToArray (); " is 189.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "				netConfiguration.VirtualNetworkConfiguration.LocalNetworkSites = netConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Where (lns => localNetNames.Distinct ().Contains (lns.name)).ToArray (); " is 200.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.GetStorageAccountKeysStarted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 170.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		StorageAccountGetKeysResponse storageKeyResponse = Retry.RetryOperation (() => client.StorageAccounts.GetKeys (storageAccountName)' (BaseParameters)exportParameters' ResourceType.StorageAccount' storageAccountName); " is 215.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.GetStorageAccountKeysCompleted' storageAccountName)' ResourceType.StorageAccount.ToString ()' storageAccountName); " is 172.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetCloudServiceListResponseFromMSAzure,The length of the statement  "			////HostedServiceListResponse serviceResponse = Retry.RetryOperation(() => client.HostedServices.List()' exportParameters.RetryCount' exportParameters.MinBackOff' exportParameters.MaxBackOff' exportParameters.DeltaBackOff' ResourceType.CloudService); " is 250.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetCloudServiceListResponseFromMSAzure,The length of the statement  "			HostedServiceListResponse serviceResponse = Retry.RetryOperation (() => client.HostedServices.List ()' (BaseParameters)exportParameters' ResourceType.CloudService); " is 164.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureStarted' ResourceType.AffinityGroup.ToString ()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "			AffinityGroupListResponse agResponse = Retry.RetryOperation (() => client.AffinityGroups.List ()' (BaseParameters)exportParameters' ResourceType.AffinityGroup); " is 160.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "			Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString ()); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "			Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString ()); " is 129.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "			if (string.Compare (cex.Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) { " is 121.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "		Logger.Info (methodName' ProgressResources.GetStorageAccountsFromMSAzureStarted' ResourceType.StorageAccount.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "			StorageAccountListResponse storageResponse = Retry.RetryOperation (() => client.StorageAccounts.List ()' (BaseParameters)exportParameters' ResourceType.StorageAccount); " is 168.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "			Logger.Info (methodName' ProgressResources.GetStorageAccountsFromMSAzureCompleted' ResourceType.StorageAccount.ToString ()); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "			GenerateNewResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name' destinationPrefixValue); " is 121.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "			GenerateNewResourceName (ResourceType.CloudService' cloudService.CloudServiceDetails.ServiceName' destinationPrefixValue); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "			ResourceNameMapper resourceCloudService = resourceNameCollection [ResourceType.CloudService].Where (s => s.SourceName.Equals (cloudService.CloudServiceDetails.ServiceName)).FirstOrDefault (); " is 191.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "					DestinationName = GenerateNewResourceName (ResourceType.Deployment' cloudService.DeploymentDetails.Name' destinationPrefixValue' false)' " is 136.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "						DestinationName = string.Format ("{0}{1}"' destinationPrefixValue' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.Name)' " is 128.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "					ResourceNameMapper resourceVirtualNetworkSite = resourceNameCollection [ResourceType.VirtualNetworkSite].Where (s => s.SourceName.Equals (virtualNetworkSite.name)).FirstOrDefault (); " is 182.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "					if (virtualNetworkSite.Gateway != null && virtualNetworkSite.Gateway.ConnectionsToLocalNetwork != null && virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef != null) { " is 189.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "							DestinationName = GenerateNewResourceName (ResourceType.LocalNetworkSite' virtualNetworkSite.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef.name' destinationPrefixValue' false)' " is 184.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "	var xmlRoot = new XElement ("Resources"' new XAttribute (Constants.Parameters.DestinationPrefixName' destinationPrefixValue)); " is 126.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GetChildResourceName,The length of the statement  "		if (isDestinationNameRequired && res.SourceName.Equals (resourceName) && res.ResourceType.Equals (childResourceType.ToString ())) { " is 131.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GetChildResourceName,The length of the statement  "		else if (!isDestinationNameRequired && res.DestinationName.Equals (resourceName) && res.ResourceType.Equals (childResourceType.ToString ())) { " is 142.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GetAllChildResources,The length of the statement  "	XElement childElement = new XElement (resource.ResourceType' new XAttribute (Constants.ResourceNameMapper.SourceName' resource.SourceName)' new XAttribute (Constants.ResourceNameMapper.DestinationName' resource.DestinationName)//'new XAttribute(Constants.ResourceNameMapper.Import' resource.Import) " is 298.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateNewResourceName,The length of the statement  "			newResourceName = ((Constants.GetMaxLengthForResourceType (resourceType) != -1 && (newResourceName.Length > Constants.GetMaxLengthForResourceType (resourceType)) ? newResourceName.Substring (0' Constants.GetMaxLengthForResourceType (resourceType) - 1) : newResourceName)); " is 272.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "				if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) { " is 138.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "			Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName); " is 136.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "			int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2))); " is 183.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "			int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds); " is 131.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "	Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureStarted' ResourceType.AffinityGroup.ToString ()); " is 120.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "		AffinityGroupListResponse agResponse = Retry.RetryOperation (() => client.AffinityGroups.List ()' (BaseParameters)importParameters' ResourceType.AffinityGroup); " is 160.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "		Logger.Info (methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		RollBackServices (datacenter.CloudServices.Where (csImported => csImported.IsImported == true).Select (cs => resourceImporter.GetDestinationResourceName (ResourceType.CloudService' cs.CloudServiceDetails.ServiceName)).ToList ()); " is 229.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.RollbackCompletedStages' stageCount' Constants.RollBackTotalStages)' ResourceType.CloudService.ToString ()); " is 166.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		dcMigrationManager.ReportProgress (string.Format (ProgressResources.RollbackCompletedStages' stageCount' Constants.RollBackTotalStages)); " is 137.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		RollBackStorageAccounts (datacenter.StorageAccounts.Where (saImported => saImported.IsImported == true).Select (sa => resourceImporter.GetDestinationResourceName (ResourceType.StorageAccount' sa.StorageAccountDetails.Name)).ToList ()); " is 235.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.RollbackCompletedStages' stageCount++' Constants.RollBackTotalStages)' ResourceType.StorageAccount.ToString ()); " is 170.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		dcMigrationManager.ReportProgress (string.Format (ProgressResources.RollbackCompletedStages' stageCount' Constants.RollBackTotalStages)); " is 137.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.RollbackCompletedStages' stageCount++' Constants.RollBackTotalStages)' ResourceType.NetworkConfiguration.ToString ()); " is 176.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		dcMigrationManager.ReportProgress (string.Format (ProgressResources.RollbackCompletedStages' stageCount' Constants.RollBackTotalStages)); " is 137.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		RollBackAffinityGroups (datacenter.AffinityGroups.Where (agImported => agImported.IsImported == true).Select (ag => resourceImporter.GetDestinationResourceName (ResourceType.AffinityGroup' ag.AffinityGroupDetails.Name)).ToList ()); " is 231.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.RollbackCompletedStages' stageCount++' Constants.RollBackTotalStages)' ResourceType.AffinityGroup.ToString ()); " is 169.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackResources,The length of the statement  "		dcMigrationManager.ReportProgress (string.Format (ProgressResources.RollbackCompletedStages' stageCount' Constants.RollBackTotalStages)); " is 137.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "					Retry.RetryOperation (() => client.HostedServices.DeleteAll (cloudService)' (BaseParameters)importParameters' ResourceType.CloudService' cloudService' ignoreResourceNotFoundEx: true); " is 183.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "					CloudService service = subscription.DataCenters.FirstOrDefault ().CloudServices.Where (ser => (ser.CloudServiceDetails.ServiceName == origServiceName)).FirstOrDefault (); " is 170.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "						string deploymentName = resourceImporter.GetDestinationResourceName (ResourceType.Deployment' service.DeploymentDetails.Name' ResourceType.CloudService' resourceImporter.GetDestinationResourceName (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)); " is 267.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "						resourceImporter.UpdateMedatadaFile (ResourceType.Deployment' deploymentName' false' resourceImporter.GetDestinationResourceName (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)); " is 199.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "						Logger.Info (methodName' string.Format (ProgressResources.RollbackDeployment' service.DeploymentDetails.Name' service.DeploymentDetails.Name)' ResourceType.Deployment.ToString ()' service.DeploymentDetails.Name); " is 212.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "							string virtualmachineName = resourceImporter.GetDestinationResourceName (ResourceType.VirtualMachine' vm.VirtualMachineDetails.RoleName' ResourceType.CloudService' resourceImporter.GetDestinationResourceName (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)); " is 278.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "							resourceImporter.UpdateMedatadaFile (ResourceType.VirtualMachine' virtualmachineName' false' resourceImporter.GetDestinationResourceName (ResourceType.CloudService' service.CloudServiceDetails.ServiceName)); " is 207.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "							Logger.Info (methodName' string.Format (ProgressResources.RollbackVirtualMachine' vm.VirtualMachineDetails.RoleName)' ResourceType.VirtualMachine.ToString ()' vm.VirtualMachineDetails.RoleName); " is 194.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.RollbackCloudService' cloudService' swService.Elapsed.Days' swService.Elapsed.Hours' swService.Elapsed.Minutes' swService.Elapsed.Seconds)' ResourceType.CloudService.ToString ()' cloudService); " is 251.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalServices.Elapsed.Days' swTotalServices.Elapsed.Hours' swTotalServices.Elapsed.Minutes' swTotalServices.Elapsed.Seconds)' ResourceType.CloudService.ToString ()); " is 253.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackStorageAccounts,The length of the statement  "					Retry.RetryOperation (() => client.StorageAccounts.Delete (storageAccount)' (BaseParameters)importParameters' ResourceType.StorageAccount' storageAccount' ignoreResourceNotFoundEx: true); " is 187.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackStorageAccounts,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.RollbackStorageAccount' storageAccount' swStorage.Elapsed.Days' swStorage.Elapsed.Hours' swStorage.Elapsed.Minutes' swStorage.Elapsed.Seconds)' ResourceType.StorageAccount.ToString ()' storageAccount); " is 259.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackStorageAccounts,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalstorages.Elapsed.Days' swTotalstorages.Elapsed.Hours' swTotalstorages.Elapsed.Minutes' swTotalstorages.Elapsed.Seconds)' ResourceType.StorageAccount.ToString ()); " is 255.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "	NetworkGetConfigurationResponse destinationNetworkResponse = GetNetworkConfigurationFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 220.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "				if (networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null) { " is 401.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "							string dnsDestination = resourceImporter.GetDestinationResourceName (ResourceType.DnsServer' dns.name' ResourceType.VirtualNetworkSite' resourceImporter.GetDestinationResourceName (ResourceType.VirtualNetworkSite' virtualNetworkSite.name)); " is 240.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "								destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers = destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Where (s => s.name != dnsDestination).ToArray (); " is 193.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "				if (networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null) { " is 272.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "							string localNetworkDestination = resourceImporter.GetDestinationResourceName (ResourceType.LocalNetworkSite' localNetwork.name' ResourceType.VirtualNetworkSite' resourceImporter.GetDestinationResourceName (ResourceType.VirtualNetworkSite' virtualNetworkSite.name)); " is 265.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "								destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites = destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Where (s => s.name != localNetworkDestination).ToArray (); " is 208.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "				if (networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) { " is 276.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "					destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites = destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Where (x => !networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites.Any (x1 => resourceImporter.GetDestinationResourceName (ResourceType.VirtualNetworkSite' x1.name) == x.name)).ToArray (); " is 357.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "		using (var vnetClient = new NetworkManagementClient (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl)) { " is 178.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "			OperationStatusResponse response = Retry.RetryOperation (() => vnetClient.Networks.SetConfiguration (new NetworkSetConfigurationParameters { " is 140.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "		Logger.Info (methodName' ProgressResources.RollbackVirtualNetworksWaiting' ResourceType.NetworkConfiguration.ToString ()); " is 122.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swVirtualNetwork.Elapsed.Days' swVirtualNetwork.Elapsed.Hours' swVirtualNetwork.Elapsed.Minutes' swVirtualNetwork.Elapsed.Seconds)' ResourceType.NetworkConfiguration.ToString ()); " is 265.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "		if (string.Compare (ex.Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) != 0) { " is 120.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "		using (var client = new ManagementClient (importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl)) { " is 167.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "					Retry.RetryOperation (() => client.AffinityGroups.Delete (affinityGroup)' (BaseParameters)importParameters' ResourceType.AffinityGroup' affinityGroup' ignoreResourceNotFoundEx: true); " is 183.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "					Logger.Info (methodName' string.Format (ProgressResources.RollbackAffinityGroup' affinityGroup' swAffinityGroup.Elapsed.Days' swAffinityGroup.Elapsed.Hours' swAffinityGroup.Elapsed.Minutes' swAffinityGroup.Elapsed.Seconds)' ResourceType.AffinityGroup.ToString ()' affinityGroup); " is 279.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swTotalAffGrp.Elapsed.Days' swTotalAffGrp.Elapsed.Hours' swTotalAffGrp.Elapsed.Minutes' swTotalAffGrp.Elapsed.Seconds)' ResourceType.AffinityGroup.ToString ()); " is 246.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "			Logger.Info (methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString ()); " is 129.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The conditional expression  "(parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourcePublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourceCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey (Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourcePublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.SourceCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey (Constants.Parameters.DestinationPublishSettingsFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationPublishSettingsFilePath])) || (parameters.ContainsKey (Constants.Parameters.DestinationCertificateThumbprint) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey (Constants.Parameters.DestinationPrefixName) && string.IsNullOrEmpty (parameters [Constants.Parameters.DestinationPrefixName])) || (parameters.ContainsKey (Constants.Parameters.MapperXmlFilePath) && string.IsNullOrEmpty (parameters [Constants.Parameters.MapperXmlFilePath]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && (destinationNetConfiguration.VirtualNetworkConfiguration.Dns == null || destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers == null) && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites == null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites == null && networkConfiguration.VirtualNetworkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.Dns != null && networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null && destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null && destinationNetConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration != null && destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Magic Number,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The following statement contains a magic number: if (parameters.ContainsKey (Constants.Parameters.DestinationPrefixName) && (parameters [Constants.Parameters.DestinationPrefixName].Length < 1 || parameters [Constants.Parameters.DestinationPrefixName].Length > 5)) {  	throw new ValidationException (string.Format (StringResources.InvalidDestinationPrefixName' parameters [Constants.Parameters.DestinationPrefixName]));  }  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.AffinityGroup' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.StorageAccount' 23);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.CloudService' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.NetworkConfiguration' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.LocalNetworkSite' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.VirtualNetworkSite' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.Deployment' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.VirtualMachine' 63);  
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add (DataCenterMigration.ResourceType.VirtualNetwork' 63);  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: foreach (var virtualMachine in virtualMachines) {  	virtualMachine.VirtualMachineDetails.RoleName = GetDestinationResourceName (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName);  	if (!virtualMachine.IsImported) {  		string blobName;  		string containerName;  		// Check for valid length.  		if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  			throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  		}  		//Check for blob exists  		string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.'));  		string storageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' storageAccountName).PrimaryKey;  		blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last ();  		containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/'));  		if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  			throw new ValidationException (string.Format (StringResources.InvalidSourceOSBlob' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));  		}  		foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks) {  			blobName = disk.MediaLink.Segments.Last ();  			containerName = disk.MediaLink.Segments [1].Substring (0' disk.MediaLink.Segments [1].IndexOf ('/'));  			if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  				throw new ValidationException (string.Format (StringResources.InvalidSourceDataDiskBlob' disk.MediaLink.AbsoluteUri));  			}  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: foreach (var virtualMachine in virtualMachines) {  	virtualMachine.VirtualMachineDetails.RoleName = GetDestinationResourceName (ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName);  	if (!virtualMachine.IsImported) {  		string blobName;  		string containerName;  		// Check for valid length.  		if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  			throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  		}  		//Check for blob exists  		string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.'));  		string storageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' storageAccountName).PrimaryKey;  		blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last ();  		containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/'));  		if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  			throw new ValidationException (string.Format (StringResources.InvalidSourceOSBlob' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));  		}  		foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks) {  			blobName = disk.MediaLink.Segments.Last ();  			containerName = disk.MediaLink.Segments [1].Substring (0' disk.MediaLink.Segments [1].IndexOf ('/'));  			if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  				throw new ValidationException (string.Format (StringResources.InvalidSourceDataDiskBlob' disk.MediaLink.AbsoluteUri));  			}  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: if (!virtualMachine.IsImported) {  	string blobName;  	string containerName;  	// Check for valid length.  	if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  		throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  	}  	//Check for blob exists  	string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.'));  	string storageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' storageAccountName).PrimaryKey;  	blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last ();  	containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/'));  	if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  		throw new ValidationException (string.Format (StringResources.InvalidSourceOSBlob' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));  	}  	foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks) {  		blobName = disk.MediaLink.Segments.Last ();  		containerName = disk.MediaLink.Segments [1].Substring (0' disk.MediaLink.Segments [1].IndexOf ('/'));  		if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  			throw new ValidationException (string.Format (StringResources.InvalidSourceDataDiskBlob' disk.MediaLink.AbsoluteUri));  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: if (!virtualMachine.IsImported) {  	string blobName;  	string containerName;  	// Check for valid length.  	if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  		throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  	}  	//Check for blob exists  	string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf ('.'));  	string storageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' storageAccountName).PrimaryKey;  	blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last ();  	containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].Substring (0' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments [1].IndexOf ('/'));  	if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  		throw new ValidationException (string.Format (StringResources.InvalidSourceOSBlob' virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));  	}  	foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks) {  		blobName = disk.MediaLink.Segments.Last ();  		containerName = disk.MediaLink.Segments [1].Substring (0' disk.MediaLink.Segments [1].IndexOf ('/'));  		if (!BlobExists (blobName' containerName' storageAccountKey' storageAccountName' true)) {  			throw new ValidationException (string.Format (StringResources.InvalidSourceDataDiskBlob' disk.MediaLink.AbsoluteUri));  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  	throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: if (!(CheckForLength (virtualMachine.VirtualMachineDetails.RoleName' 3' 15))) {  	throw new ValidationException (string.Format (StringResources.InvalidVirtualMachineLength' virtualMachine.VirtualMachineDetails.RoleName));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: foreach (Azure.DataCenterMigration.Models.StorageAccount storageAccount in storageAccounts) {  	string originalStorageName = storageAccount.StorageAccountDetails.Name;  	storageAccount.StorageAccountDetails.Name = GetDestinationResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	storageAccount.StorageAccountDetails.Properties.AffinityGroup = GetDestinationResourceName (ResourceType.AffinityGroup' storageAccount.StorageAccountDetails.Properties.AffinityGroup);  	if (!storageAccount.IsImported) {  		// Check for length between 3 to 24 Char   		if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  			throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  		}  		if (!(CheckStorageNameAvailability (storageAccount.StorageAccountDetails.Name' importParameters.DestinationSubscriptionSettings.Credentials))) {  			throw new ValidationException (string.Format (StringResources.InvalidStorageAccountNameExist' storageAccount.StorageAccountDetails.Name));  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: foreach (Azure.DataCenterMigration.Models.StorageAccount storageAccount in storageAccounts) {  	string originalStorageName = storageAccount.StorageAccountDetails.Name;  	storageAccount.StorageAccountDetails.Name = GetDestinationResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	storageAccount.StorageAccountDetails.Properties.AffinityGroup = GetDestinationResourceName (ResourceType.AffinityGroup' storageAccount.StorageAccountDetails.Properties.AffinityGroup);  	if (!storageAccount.IsImported) {  		// Check for length between 3 to 24 Char   		if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  			throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  		}  		if (!(CheckStorageNameAvailability (storageAccount.StorageAccountDetails.Name' importParameters.DestinationSubscriptionSettings.Credentials))) {  			throw new ValidationException (string.Format (StringResources.InvalidStorageAccountNameExist' storageAccount.StorageAccountDetails.Name));  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: if (!storageAccount.IsImported) {  	// Check for length between 3 to 24 Char   	if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  		throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  	}  	if (!(CheckStorageNameAvailability (storageAccount.StorageAccountDetails.Name' importParameters.DestinationSubscriptionSettings.Credentials))) {  		throw new ValidationException (string.Format (StringResources.InvalidStorageAccountNameExist' storageAccount.StorageAccountDetails.Name));  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: if (!storageAccount.IsImported) {  	// Check for length between 3 to 24 Char   	if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  		throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  	}  	if (!(CheckStorageNameAvailability (storageAccount.StorageAccountDetails.Name' importParameters.DestinationSubscriptionSettings.Credentials))) {  		throw new ValidationException (string.Format (StringResources.InvalidStorageAccountNameExist' storageAccount.StorageAccountDetails.Name));  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  	throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: if (!CheckForLength (storageAccount.StorageAccountDetails.Name' 3' 24)) {  	throw new ValidationException (string.Format (StringResources.InvalidStorageAccountLength' storageAccount.StorageAccountDetails.Name));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: Parallel.ForEach (diskUri' blobUri =>  {  	string sourceStorageAccountName = blobUri.Host.Substring (0' blobUri.Host.IndexOf ('.'));  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	//// get storage account key.  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	string blobName = blobUri.Segments.Last ();  	string containerName = blobUri.Segments [1].Substring (0' blobUri.Segments [1].IndexOf ('/'));  	try {  		//// Start stopwatch to calculate total time required for single blob  		Stopwatch swBlob = new Stopwatch ();  		swBlob.Start ();  		bool deletedPendingBlob = false;  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (blobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' blobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		//// if blob is not exists or deleted the pending blob then copy it on destination.  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  			WaitForBlobCopy (destBlob.Container' blobName);  			swBlob.Stop ();  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  		}  		else {  			Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  		}  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' blobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' blobName);  		throw;  	}  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: Parallel.ForEach (diskUri' blobUri =>  {  	string sourceStorageAccountName = blobUri.Host.Substring (0' blobUri.Host.IndexOf ('.'));  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	//// get storage account key.  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	string blobName = blobUri.Segments.Last ();  	string containerName = blobUri.Segments [1].Substring (0' blobUri.Segments [1].IndexOf ('/'));  	try {  		//// Start stopwatch to calculate total time required for single blob  		Stopwatch swBlob = new Stopwatch ();  		swBlob.Start ();  		bool deletedPendingBlob = false;  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (blobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' blobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		//// if blob is not exists or deleted the pending blob then copy it on destination.  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  			WaitForBlobCopy (destBlob.Container' blobName);  			swBlob.Stop ();  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  		}  		else {  			Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  		}  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' blobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' blobName);  		throw;  	}  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: try {  	//// Start stopwatch to calculate total time required for single blob  	Stopwatch swBlob = new Stopwatch ();  	swBlob.Start ();  	bool deletedPendingBlob = false;  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (blobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' blobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	//// if blob is not exists or deleted the pending blob then copy it on destination.  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  		WaitForBlobCopy (destBlob.Container' blobName);  		swBlob.Stop ();  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  	}  	else {  		Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  	}  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' blobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' blobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: try {  	//// Start stopwatch to calculate total time required for single blob  	Stopwatch swBlob = new Stopwatch ();  	swBlob.Start ();  	bool deletedPendingBlob = false;  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (blobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' blobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	//// if blob is not exists or deleted the pending blob then copy it on destination.  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  		WaitForBlobCopy (destBlob.Container' blobName);  		swBlob.Stop ();  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  	}  	else {  		Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  	}  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' blobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' blobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  	//// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  	//// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  	//// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  	WaitForBlobCopy (destBlob.Container' blobName);  	swBlob.Stop ();  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  }  else {  	Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  	//// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (blobName' containerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlob (blobName' containerName' destStorageAccountKey' destStorageAccountName' false);  	//// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);  	//// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' blobUri' destUri));  	WaitForBlobCopy (destBlob.Container' blobName);  	swBlob.Stop ();  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyCompleted' blobUri' destUri));  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName' destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ()' blobName);  }  else {  	Logger.Info (methodName' String.Format (ProgressResources.BlobExistsInDestination' containerName' blobName' destStorageAccountName)' ResourceType.Blob.ToString ()' blobName);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach (storageAccounts' storageAccount =>  {  	string sourceStorageAccountName = GetSourceResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	var containers = storageAccount.Containers.ToList ();  	////Stopwatch for tracking time taken to copy all the blobs in each storage account.  	Stopwatch swCopyEachStorageAccount = new Stopwatch ();  	swCopyEachStorageAccount.Start ();  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	foreach (var container in containers) {  		////Stopwatch for tracking time taken to copy all the blobs in each container.  		Stopwatch swCopyContainer = new Stopwatch ();  		swCopyContainer.Start ();  		//// if the container has no blobs create the empty container  		if (container.BlobDetails.Count == 0) {  			Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  			CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  			CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  			if (!emptyContainer.Exists ()) {  				lock (thisLockContainer) {  					if (!emptyContainer.Exists ()) {  						emptyContainer.Create ();  					}  				}  			}  		}  		foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  			try {  				////Stopwatch for tracking time taken to copy each blob  				Stopwatch swCopyEachBlob = new Stopwatch ();  				swCopyEachBlob.Start ();  				bool deletedPendingBlob = false;  				if (item.BlobType == BlobType.PageBlob.ToString ()) {  					//// get all details of destination blob.  					CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						//// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						//// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						//// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  					// get all details of destination blob.  					CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				swCopyEachBlob.Stop ();  				Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  			}  			catch (AggregateException exAgg) {  				foreach (var ex in exAgg.InnerExceptions) {  					Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  				}  				throw;  			}  			catch (Exception ex) {  				Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  				throw;  			}  		}  		swCopyContainer.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	swCopyEachStorageAccount.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString ());  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach (storageAccounts' storageAccount =>  {  	string sourceStorageAccountName = GetSourceResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	var containers = storageAccount.Containers.ToList ();  	////Stopwatch for tracking time taken to copy all the blobs in each storage account.  	Stopwatch swCopyEachStorageAccount = new Stopwatch ();  	swCopyEachStorageAccount.Start ();  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	foreach (var container in containers) {  		////Stopwatch for tracking time taken to copy all the blobs in each container.  		Stopwatch swCopyContainer = new Stopwatch ();  		swCopyContainer.Start ();  		//// if the container has no blobs create the empty container  		if (container.BlobDetails.Count == 0) {  			Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  			CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  			CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  			if (!emptyContainer.Exists ()) {  				lock (thisLockContainer) {  					if (!emptyContainer.Exists ()) {  						emptyContainer.Create ();  					}  				}  			}  		}  		foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  			try {  				////Stopwatch for tracking time taken to copy each blob  				Stopwatch swCopyEachBlob = new Stopwatch ();  				swCopyEachBlob.Start ();  				bool deletedPendingBlob = false;  				if (item.BlobType == BlobType.PageBlob.ToString ()) {  					//// get all details of destination blob.  					CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						//// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						//// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						//// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  					// get all details of destination blob.  					CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				swCopyEachBlob.Stop ();  				Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  			}  			catch (AggregateException exAgg) {  				foreach (var ex in exAgg.InnerExceptions) {  					Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  				}  				throw;  			}  			catch (Exception ex) {  				Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  				throw;  			}  		}  		swCopyContainer.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	swCopyEachStorageAccount.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString ());  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach (storageAccounts' storageAccount =>  {  	string sourceStorageAccountName = GetSourceResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	var containers = storageAccount.Containers.ToList ();  	////Stopwatch for tracking time taken to copy all the blobs in each storage account.  	Stopwatch swCopyEachStorageAccount = new Stopwatch ();  	swCopyEachStorageAccount.Start ();  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	foreach (var container in containers) {  		////Stopwatch for tracking time taken to copy all the blobs in each container.  		Stopwatch swCopyContainer = new Stopwatch ();  		swCopyContainer.Start ();  		//// if the container has no blobs create the empty container  		if (container.BlobDetails.Count == 0) {  			Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  			CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  			CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  			if (!emptyContainer.Exists ()) {  				lock (thisLockContainer) {  					if (!emptyContainer.Exists ()) {  						emptyContainer.Create ();  					}  				}  			}  		}  		foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  			try {  				////Stopwatch for tracking time taken to copy each blob  				Stopwatch swCopyEachBlob = new Stopwatch ();  				swCopyEachBlob.Start ();  				bool deletedPendingBlob = false;  				if (item.BlobType == BlobType.PageBlob.ToString ()) {  					//// get all details of destination blob.  					CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						//// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						//// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						//// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  					// get all details of destination blob.  					CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				swCopyEachBlob.Stop ();  				Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  			}  			catch (AggregateException exAgg) {  				foreach (var ex in exAgg.InnerExceptions) {  					Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  				}  				throw;  			}  			catch (Exception ex) {  				Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  				throw;  			}  		}  		swCopyContainer.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	swCopyEachStorageAccount.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString ());  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach (storageAccounts' storageAccount =>  {  	string sourceStorageAccountName = GetSourceResourceName (ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);  	string destStorageAccountName = GetDestinationResourceName (ResourceType.StorageAccount' sourceStorageAccountName);  	string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.SourceSubscriptionSettings.Credentials' sourceStorageAccountName).PrimaryKey;  	string destStorageAccountKey = GetStorageAccountKeysFromMSAzure (importParameters.DestinationSubscriptionSettings.Credentials' destStorageAccountName).PrimaryKey;  	var containers = storageAccount.Containers.ToList ();  	////Stopwatch for tracking time taken to copy all the blobs in each storage account.  	Stopwatch swCopyEachStorageAccount = new Stopwatch ();  	swCopyEachStorageAccount.Start ();  	BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  	foreach (var container in containers) {  		////Stopwatch for tracking time taken to copy all the blobs in each container.  		Stopwatch swCopyContainer = new Stopwatch ();  		swCopyContainer.Start ();  		//// if the container has no blobs create the empty container  		if (container.BlobDetails.Count == 0) {  			Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  			CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  			CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  			if (!emptyContainer.Exists ()) {  				lock (thisLockContainer) {  					if (!emptyContainer.Exists ()) {  						emptyContainer.Create ();  					}  				}  			}  		}  		foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  			try {  				////Stopwatch for tracking time taken to copy each blob  				Stopwatch swCopyEachBlob = new Stopwatch ();  				swCopyEachBlob.Start ();  				bool deletedPendingBlob = false;  				if (item.BlobType == BlobType.PageBlob.ToString ()) {  					//// get all details of destination blob.  					CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						//// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						//// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						//// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  					// get all details of destination blob.  					CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// Check the status of blob if it is already present. Delete the blob if the status is pending.  					if (destBlob.Exists ()) {  						CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  						if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  							Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  							destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  							destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  							deletedPendingBlob = true;  						}  					}  					if (!destBlob.Exists () || (deletedPendingBlob)) {  						Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  						// get all details of source blob.  						Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  						destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  						// get Shared Access Signature for private containers.  						var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  							SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  							SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  							Permissions = SharedAccessBlobPermissions.Read'  						});  						var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  						string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  						// copy blob from source to destination.  						string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  						dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  						WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  					}  				}  				swCopyEachBlob.Stop ();  				Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  			}  			catch (AggregateException exAgg) {  				foreach (var ex in exAgg.InnerExceptions) {  					Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  				}  				throw;  			}  			catch (Exception ex) {  				Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  				throw;  			}  		}  		swCopyContainer.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	swCopyEachStorageAccount.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString ());  });  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var container in containers) {  	////Stopwatch for tracking time taken to copy all the blobs in each container.  	Stopwatch swCopyContainer = new Stopwatch ();  	swCopyContainer.Start ();  	//// if the container has no blobs create the empty container  	if (container.BlobDetails.Count == 0) {  		Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  		CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  		CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  		if (!emptyContainer.Exists ()) {  			lock (thisLockContainer) {  				if (!emptyContainer.Exists ()) {  					emptyContainer.Create ();  				}  			}  		}  	}  	foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  		try {  			////Stopwatch for tracking time taken to copy each blob  			Stopwatch swCopyEachBlob = new Stopwatch ();  			swCopyEachBlob.Start ();  			bool deletedPendingBlob = false;  			if (item.BlobType == BlobType.PageBlob.ToString ()) {  				//// get all details of destination blob.  				CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					//// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					//// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  				// get all details of destination blob.  				CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			swCopyEachBlob.Stop ();  			Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  		}  		catch (AggregateException exAgg) {  			foreach (var ex in exAgg.InnerExceptions) {  				Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  			}  			throw;  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  			throw;  		}  	}  	swCopyContainer.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var container in containers) {  	////Stopwatch for tracking time taken to copy all the blobs in each container.  	Stopwatch swCopyContainer = new Stopwatch ();  	swCopyContainer.Start ();  	//// if the container has no blobs create the empty container  	if (container.BlobDetails.Count == 0) {  		Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  		CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  		CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  		if (!emptyContainer.Exists ()) {  			lock (thisLockContainer) {  				if (!emptyContainer.Exists ()) {  					emptyContainer.Create ();  				}  			}  		}  	}  	foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  		try {  			////Stopwatch for tracking time taken to copy each blob  			Stopwatch swCopyEachBlob = new Stopwatch ();  			swCopyEachBlob.Start ();  			bool deletedPendingBlob = false;  			if (item.BlobType == BlobType.PageBlob.ToString ()) {  				//// get all details of destination blob.  				CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					//// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					//// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  				// get all details of destination blob.  				CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			swCopyEachBlob.Stop ();  			Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  		}  		catch (AggregateException exAgg) {  			foreach (var ex in exAgg.InnerExceptions) {  				Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  			}  			throw;  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  			throw;  		}  	}  	swCopyContainer.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var container in containers) {  	////Stopwatch for tracking time taken to copy all the blobs in each container.  	Stopwatch swCopyContainer = new Stopwatch ();  	swCopyContainer.Start ();  	//// if the container has no blobs create the empty container  	if (container.BlobDetails.Count == 0) {  		Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  		CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  		CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  		if (!emptyContainer.Exists ()) {  			lock (thisLockContainer) {  				if (!emptyContainer.Exists ()) {  					emptyContainer.Create ();  				}  			}  		}  	}  	foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  		try {  			////Stopwatch for tracking time taken to copy each blob  			Stopwatch swCopyEachBlob = new Stopwatch ();  			swCopyEachBlob.Start ();  			bool deletedPendingBlob = false;  			if (item.BlobType == BlobType.PageBlob.ToString ()) {  				//// get all details of destination blob.  				CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					//// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					//// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  				// get all details of destination blob.  				CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			swCopyEachBlob.Stop ();  			Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  		}  		catch (AggregateException exAgg) {  			foreach (var ex in exAgg.InnerExceptions) {  				Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  			}  			throw;  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  			throw;  		}  	}  	swCopyContainer.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var container in containers) {  	////Stopwatch for tracking time taken to copy all the blobs in each container.  	Stopwatch swCopyContainer = new Stopwatch ();  	swCopyContainer.Start ();  	//// if the container has no blobs create the empty container  	if (container.BlobDetails.Count == 0) {  		Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj = new Microsoft.WindowsAzure.Storage.CloudStorageAccount (new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials (destStorageAccountName' destStorageAccountKey)' true);  		CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient ();  		CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference (container.ContainerName);  		if (!emptyContainer.Exists ()) {  			lock (thisLockContainer) {  				if (!emptyContainer.Exists ()) {  					emptyContainer.Create ();  				}  			}  		}  	}  	foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  		try {  			////Stopwatch for tracking time taken to copy each blob  			Stopwatch swCopyEachBlob = new Stopwatch ();  			swCopyEachBlob.Start ();  			bool deletedPendingBlob = false;  			if (item.BlobType == BlobType.PageBlob.ToString ()) {  				//// get all details of destination blob.  				CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					//// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					//// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					//// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  				// get all details of destination blob.  				CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// Check the status of blob if it is already present. Delete the blob if the status is pending.  				if (destBlob.Exists ()) {  					CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  					if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  						Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  						destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  						destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  						deletedPendingBlob = true;  					}  				}  				if (!destBlob.Exists () || (deletedPendingBlob)) {  					Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  					// get all details of source blob.  					Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  					destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  					// get Shared Access Signature for private containers.  					var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  						SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  						SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  						Permissions = SharedAccessBlobPermissions.Read'  					});  					var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  					string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  					// copy blob from source to destination.  					string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  					dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  					WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  				}  			}  			swCopyEachBlob.Stop ();  			Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  		}  		catch (AggregateException exAgg) {  			foreach (var ex in exAgg.InnerExceptions) {  				Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  			}  			throw;  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  			throw;  		}  	}  	swCopyContainer.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  	try {  		////Stopwatch for tracking time taken to copy each blob  		Stopwatch swCopyEachBlob = new Stopwatch ();  		swCopyEachBlob.Start ();  		bool deletedPendingBlob = false;  		if (item.BlobType == BlobType.PageBlob.ToString ()) {  			//// get all details of destination blob.  			CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				//// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				//// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  			// get all details of destination blob.  			CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		swCopyEachBlob.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  		throw;  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  	try {  		////Stopwatch for tracking time taken to copy each blob  		Stopwatch swCopyEachBlob = new Stopwatch ();  		swCopyEachBlob.Start ();  		bool deletedPendingBlob = false;  		if (item.BlobType == BlobType.PageBlob.ToString ()) {  			//// get all details of destination blob.  			CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				//// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				//// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  			// get all details of destination blob.  			CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		swCopyEachBlob.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  		throw;  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  	try {  		////Stopwatch for tracking time taken to copy each blob  		Stopwatch swCopyEachBlob = new Stopwatch ();  		swCopyEachBlob.Start ();  		bool deletedPendingBlob = false;  		if (item.BlobType == BlobType.PageBlob.ToString ()) {  			//// get all details of destination blob.  			CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				//// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				//// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  			// get all details of destination blob.  			CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		swCopyEachBlob.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  		throw;  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: foreach (var item in container.BlobDetails.Where (a => !a.IsExcluded && !ExcludeVMVHDList.Contains (a.BlobURI))) {  	try {  		////Stopwatch for tracking time taken to copy each blob  		Stopwatch swCopyEachBlob = new Stopwatch ();  		swCopyEachBlob.Start ();  		bool deletedPendingBlob = false;  		if (item.BlobType == BlobType.PageBlob.ToString ()) {  			//// get all details of destination blob.  			CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				//// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				//// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				//// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  			// get all details of destination blob.  			CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// Check the status of blob if it is already present. Delete the blob if the status is pending.  			if (destBlob.Exists ()) {  				CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  				if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  					Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  					destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  					destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  					deletedPendingBlob = true;  				}  			}  			if (!destBlob.Exists () || (deletedPendingBlob)) {  				Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  				// get all details of source blob.  				Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  				destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  				// get Shared Access Signature for private containers.  				var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  					SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  					SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  					Permissions = SharedAccessBlobPermissions.Read'  				});  				var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  				string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  				// copy blob from source to destination.  				string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  				dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  				WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  			}  		}  		swCopyEachBlob.Stop ();  		Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  	}  	catch (AggregateException exAgg) {  		foreach (var ex in exAgg.InnerExceptions) {  			Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  		}  		throw;  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  		throw;  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: try {  	////Stopwatch for tracking time taken to copy each blob  	Stopwatch swCopyEachBlob = new Stopwatch ();  	swCopyEachBlob.Start ();  	bool deletedPendingBlob = false;  	if (item.BlobType == BlobType.PageBlob.ToString ()) {  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  		// get all details of destination blob.  		CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	swCopyEachBlob.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: try {  	////Stopwatch for tracking time taken to copy each blob  	Stopwatch swCopyEachBlob = new Stopwatch ();  	swCopyEachBlob.Start ();  	bool deletedPendingBlob = false;  	if (item.BlobType == BlobType.PageBlob.ToString ()) {  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  		// get all details of destination blob.  		CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	swCopyEachBlob.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: try {  	////Stopwatch for tracking time taken to copy each blob  	Stopwatch swCopyEachBlob = new Stopwatch ();  	swCopyEachBlob.Start ();  	bool deletedPendingBlob = false;  	if (item.BlobType == BlobType.PageBlob.ToString ()) {  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  		// get all details of destination blob.  		CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	swCopyEachBlob.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: try {  	////Stopwatch for tracking time taken to copy each blob  	Stopwatch swCopyEachBlob = new Stopwatch ();  	swCopyEachBlob.Start ();  	bool deletedPendingBlob = false;  	if (item.BlobType == BlobType.PageBlob.ToString ()) {  		//// get all details of destination blob.  		CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			//// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			//// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			//// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  		// get all details of destination blob.  		CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// Check the status of blob if it is already present. Delete the blob if the status is pending.  		if (destBlob.Exists ()) {  			CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  			if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  				Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  				destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  				destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  				deletedPendingBlob = true;  			}  		}  		if (!destBlob.Exists () || (deletedPendingBlob)) {  			Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  			// get all details of source blob.  			Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  			destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  			// get Shared Access Signature for private containers.  			var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  				Permissions = SharedAccessBlobPermissions.Read'  			});  			var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  			string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  			// copy blob from source to destination.  			string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  			dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  			WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  		}  	}  	swCopyEachBlob.Stop ();  	Logger.Info (methodName' string.Format (ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString ());  }  catch (AggregateException exAgg) {  	foreach (var ex in exAgg.InnerExceptions) {  		Logger.Error (methodName' exAgg' ResourceType.StorageAccount.ToString ()' item.BlobName);  	}  	throw;  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.StorageAccount.ToString ()' item.BlobName);  	throw;  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.PageBlob.ToString ()) {  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.PageBlob.ToString ()) {  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.PageBlob.ToString ()) {  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.PageBlob.ToString ()) {  	//// get all details of destination blob.  	CloudPageBlob destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		//// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		//// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		//// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  else if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  	//// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  	//// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  	WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  	//// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	//// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  	//// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  	WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (item.BlobType == BlobType.BlockBlob.ToString ()) {  	// get all details of destination blob.  	CloudBlockBlob destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// Check the status of blob if it is already present. Delete the blob if the status is pending.  	if (destBlob.Exists ()) {  		CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer (item.BlobName);  		if (destBlobInfo.CopyState.Status == CopyStatus.Pending) {  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)' ResourceType.Blob.ToString ()' item.BlobName);  			destBlobInfo.AbortCopy (destBlobInfo.CopyState.CopyId' null' requestOptions);  			destBlobInfo.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			deletedPendingBlob = true;  		}  	}  	if (!destBlob.Exists () || (deletedPendingBlob)) {  		Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  		// get all details of source blob.  		Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  		destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  		// get Shared Access Signature for private containers.  		var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  			SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  			SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  			Permissions = SharedAccessBlobPermissions.Read'  		});  		var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  		string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  		// copy blob from source to destination.  		string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  		dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  		WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  	// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  	// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  	WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: if (!destBlob.Exists () || (deletedPendingBlob)) {  	Logger.Info (methodName' String.Format (ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' ResourceType.Blob.ToString ()' item.BlobName);  	// get all details of source blob.  	Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' sourceStorageAccountKey' sourceStorageAccountName' true);  	destBlob = GetCloudBlockBlob (item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);  	// get Shared Access Signature for private containers.  	var sas = sourceBlob.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		SharedAccessStartTime = DateTime.UtcNow.AddMinutes (-15)'  		SharedAccessExpiryTime = DateTime.UtcNow.AddDays (7)'  		Permissions = SharedAccessBlobPermissions.Read'  	});  	var srcBlobSasUri = string.Format ("{0}{1}"' sourceBlob.Uri' sas);  	string destUri = string.Format (Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);  	// copy blob from source to destination.  	string copyId = destBlob.StartCopyFromBlob (new Uri (srcBlobSasUri)' null' null' requestOptions' null);  	dcMigration.ReportProgress (string.Format (ProgressResources.BlobCopyStarted' item.BlobURI' destUri));  	WaitForBlobCopy (destBlob.Container' item.BlobName' item.BlobType);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: while (copyStatus == CopyStatus.Pending) {  	try {  		Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  		blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  		copyStatus = blob.CopyState.Status;  		if (blob.CopyState.BytesCopied.HasValue)  			bytesCopied = blob.CopyState.BytesCopied.Value;  		var totalBytes = blob.CopyState.TotalBytes;  		if (totalBytes.HasValue) {  			//// Print status  			dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  		}  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: try {  	Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  	blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	copyStatus = blob.CopyState.Status;  	if (blob.CopyState.BytesCopied.HasValue)  		bytesCopied = blob.CopyState.BytesCopied.Value;  	var totalBytes = blob.CopyState.TotalBytes;  	if (totalBytes.HasValue) {  		//// Print status  		dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  	}  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (totalBytes.HasValue) {  	//// Print status  	dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (type == BlobType.BlockBlob.ToString ()) {  	CloudBlockBlob blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	CopyStatus copyStatus = blob.CopyState.Status;  	//// Loop until status becomes success  	while (copyStatus == CopyStatus.Pending) {  		try {  			Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  			blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			copyStatus = blob.CopyState.Status;  			if (blob.CopyState.BytesCopied.HasValue)  				bytesCopied = blob.CopyState.BytesCopied.Value;  			var totalBytes = blob.CopyState.TotalBytes;  			if (totalBytes.HasValue) {  				// Print status  				dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  			}  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  	if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid) {  		try {  			blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  			blob.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName);  			throw new Exception (string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus));  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  }  else {  	CloudPageBlob blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	CopyStatus copyStatus = blob.CopyState.Status;  	//// Loop until status becomes success  	while (copyStatus == CopyStatus.Pending) {  		try {  			Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  			blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			copyStatus = blob.CopyState.Status;  			if (blob.CopyState.BytesCopied.HasValue)  				bytesCopied = blob.CopyState.BytesCopied.Value;  			var totalBytes = blob.CopyState.TotalBytes;  			if (totalBytes.HasValue) {  				// Print status  				dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  			}  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  	if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid) {  		try {  			blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  			blob.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName);  			throw new Exception (string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus));  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (type == BlobType.BlockBlob.ToString ()) {  	CloudBlockBlob blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	CopyStatus copyStatus = blob.CopyState.Status;  	//// Loop until status becomes success  	while (copyStatus == CopyStatus.Pending) {  		try {  			Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  			blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			copyStatus = blob.CopyState.Status;  			if (blob.CopyState.BytesCopied.HasValue)  				bytesCopied = blob.CopyState.BytesCopied.Value;  			var totalBytes = blob.CopyState.TotalBytes;  			if (totalBytes.HasValue) {  				// Print status  				dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  			}  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  	if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid) {  		try {  			blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  			blob.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName);  			throw new Exception (string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus));  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  }  else {  	CloudPageBlob blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	CopyStatus copyStatus = blob.CopyState.Status;  	//// Loop until status becomes success  	while (copyStatus == CopyStatus.Pending) {  		try {  			Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  			blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			copyStatus = blob.CopyState.Status;  			if (blob.CopyState.BytesCopied.HasValue)  				bytesCopied = blob.CopyState.BytesCopied.Value;  			var totalBytes = blob.CopyState.TotalBytes;  			if (totalBytes.HasValue) {  				// Print status  				dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  			}  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  	if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid) {  		try {  			blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  			BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions (importParameters.DeltaBackOff' importParameters.RetryCount);  			blob.Delete (DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);  			Logger.Info (methodName' string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus)' ResourceType.Blob.ToString ()' blobName);  			throw new Exception (string.Format (ProgressResources.DeleteNonSuccessBlob' copyStatus));  		}  		catch (Exception ex) {  			Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  		}  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: while (copyStatus == CopyStatus.Pending) {  	try {  		Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  		blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  		copyStatus = blob.CopyState.Status;  		if (blob.CopyState.BytesCopied.HasValue)  			bytesCopied = blob.CopyState.BytesCopied.Value;  		var totalBytes = blob.CopyState.TotalBytes;  		if (totalBytes.HasValue) {  			// Print status  			dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  		}  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: try {  	Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  	blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	copyStatus = blob.CopyState.Status;  	if (blob.CopyState.BytesCopied.HasValue)  		bytesCopied = blob.CopyState.BytesCopied.Value;  	var totalBytes = blob.CopyState.TotalBytes;  	if (totalBytes.HasValue) {  		// Print status  		dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  	}  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (totalBytes.HasValue) {  	// Print status  	dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: while (copyStatus == CopyStatus.Pending) {  	try {  		Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  		blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  		copyStatus = blob.CopyState.Status;  		if (blob.CopyState.BytesCopied.HasValue)  			bytesCopied = blob.CopyState.BytesCopied.Value;  		var totalBytes = blob.CopyState.TotalBytes;  		if (totalBytes.HasValue) {  			// Print status  			dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  		}  	}  	catch (Exception ex) {  		Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  	}  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: try {  	Task.Delay (Constants.DelayTimeInMilliseconds).Wait ();  	blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer (blobName);  	copyStatus = blob.CopyState.Status;  	if (blob.CopyState.BytesCopied.HasValue)  		bytesCopied = blob.CopyState.BytesCopied.Value;  	var totalBytes = blob.CopyState.TotalBytes;  	if (totalBytes.HasValue) {  		// Print status  		dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  	}  }  catch (Exception ex) {  	Logger.Error (methodName' ex' ResourceType.Blob.ToString ()' blobName);  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (totalBytes.HasValue) {  	// Print status  	dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  }  
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: dcMigration.ReportProgress (string.Format (ProgressResources.CopyBlobProgressInPercentage' blob.Name' (bytesCopied / totalBytes.Value) * 100));  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++) {  	try {  		if (preRetryAction != null && currentRetryCount > 0) {  			preRetryAction ();  		}  		return action ();  	}  	catch (Exception ex) {  		if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  			//Return if error code is Resource Not Found  			if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  				return default(T);  			}  		}  		TimeSpan retryInterval = TimeSpan.Zero;  		Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  		Random r = new Random ();  		// Calculate Exponential backoff with +/- 20% tolerance  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  		// Enforce backoff boundaries  		int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		exceptions.Add (ex);  		Thread.Sleep (retryInterval);  	}  }  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++) {  	try {  		if (preRetryAction != null && currentRetryCount > 0) {  			preRetryAction ();  		}  		return action ();  	}  	catch (Exception ex) {  		if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  			//Return if error code is Resource Not Found  			if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  				return default(T);  			}  		}  		TimeSpan retryInterval = TimeSpan.Zero;  		Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  		Random r = new Random ();  		// Calculate Exponential backoff with +/- 20% tolerance  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  		// Enforce backoff boundaries  		int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		exceptions.Add (ex);  		Thread.Sleep (retryInterval);  	}  }  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++) {  	try {  		if (preRetryAction != null && currentRetryCount > 0) {  			preRetryAction ();  		}  		return action ();  	}  	catch (Exception ex) {  		if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  			//Return if error code is Resource Not Found  			if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  				return default(T);  			}  		}  		TimeSpan retryInterval = TimeSpan.Zero;  		Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  		Random r = new Random ();  		// Calculate Exponential backoff with +/- 20% tolerance  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  		// Enforce backoff boundaries  		int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		exceptions.Add (ex);  		Thread.Sleep (retryInterval);  	}  }  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: try {  	if (preRetryAction != null && currentRetryCount > 0) {  		preRetryAction ();  	}  	return action ();  }  catch (Exception ex) {  	if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  		//Return if error code is Resource Not Found  		if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  			return default(T);  		}  	}  	TimeSpan retryInterval = TimeSpan.Zero;  	Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  	Random r = new Random ();  	// Calculate Exponential backoff with +/- 20% tolerance  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  	// Enforce backoff boundaries  	int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	exceptions.Add (ex);  	Thread.Sleep (retryInterval);  }  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: try {  	if (preRetryAction != null && currentRetryCount > 0) {  		preRetryAction ();  	}  	return action ();  }  catch (Exception ex) {  	if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  		//Return if error code is Resource Not Found  		if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  			return default(T);  		}  	}  	TimeSpan retryInterval = TimeSpan.Zero;  	Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  	Random r = new Random ();  	// Calculate Exponential backoff with +/- 20% tolerance  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  	// Enforce backoff boundaries  	int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	exceptions.Add (ex);  	Thread.Sleep (retryInterval);  }  
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: try {  	if (preRetryAction != null && currentRetryCount > 0) {  		preRetryAction ();  	}  	return action ();  }  catch (Exception ex) {  	if (ignoreResourceNotFoundEx && (ex.GetType () == typeof(CloudException))) {  		//Return if error code is Resource Not Found  		if (string.Compare (((CloudException)ex).Error.ToString ()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0) {  			return default(T);  		}  	}  	TimeSpan retryInterval = TimeSpan.Zero;  	Logger.Warning (methodName' string.Format (ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString ()' resourceName);  	Random r = new Random ();  	// Calculate Exponential backoff with +/- 20% tolerance  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)' (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));  	// Enforce backoff boundaries  	int timeToSleepMsec = (int)Math.Min (baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	exceptions.Add (ex);  	Thread.Sleep (retryInterval);  }  
