Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The method has 199 lines of code.
Long Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The method has 361 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The method has 115 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The method has 141 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The method has 112 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The method has 106 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The method has 162 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The method has 136 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The method has 160 lines of code.
Long Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,UpdateMedatadaFile,The method has 133 lines of code.
Long Method,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The method has 125 lines of code.
Long Method,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The method has 119 lines of code.
Complex Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,Cyclomatic complexity of the method is 19
Complex Method,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,Cyclomatic complexity of the method is 36
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,Cyclomatic complexity of the method is 20
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,Cyclomatic complexity of the method is 8
Complex Method,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,Cyclomatic complexity of the method is 9
Complex Method,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,Cyclomatic complexity of the method is 18
Complex Method,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,Cyclomatic complexity of the method is 13
Long Parameter List,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ExportDataCenterLocations,The method has 5 parameters. Parameters: credentials' retryCount' minBackOff' maxBackOff' deltaBackOff
Long Parameter List,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,Warning,The method has 5 parameters. Parameters: methodName' message' ex' resourceType' resourceName
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,BlobExists,The method has 5 parameters. Parameters: blobName' containerName' storageKey' storageAccountName' sourceSubscription
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlob,The method has 5 parameters. Parameters: blobName' containerName' storageKey' storageAccountName' sourceSubscription
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetCloudBlockBlob,The method has 5 parameters. Parameters: blobName' containerName' storageKey' storageAccountName' sourceSubscription
Long Parameter List,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The method has 5 parameters. Parameters: credentials' serviceUrl' serviceName' deploymentName' virtualMachineName
Long Parameter List,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The method has 6 parameters. Parameters: action' baseParams' resourceType' resourceName' preRetryAction' ignoreResourceNotFoundEx
Long Identifier,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the parameter destinationLocationNamePresent is 30.
Long Identifier,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,,The length of the parameter DelayTimeInMilliseconds_Rollback is 32.
Long Identifier,Azure.DataCenterMigration,Parameters,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,,The length of the parameter DestinationCertificateThumbprint is 32.
Long Identifier,Azure.DataCenterMigration,Parameters,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,,The length of the parameter DestinationPublishSettingsFilePath is 34.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the parameter affinityGroupInDestinationSubscription is 38.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the parameter affinityGroupInDestinationSubscription is 38.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the parameter cloudServiceInDestinationSubscription is 37.
Long Identifier,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the parameter storageAccountInDestinationSubscription is 39.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "            if ((parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourcePublishSettingsFilePath])) " is 168.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                   || (parameters.ContainsKey(Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourceCertificateThumbprint]))) " is 164.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 139.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.EmptyOrNullParameter' Constants.Parameters.ExportMetadataFolderPath)); " is 130.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.EmptyOrNullParameter' Constants.Parameters.SourceSubscriptionID)); " is 126.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "            if (parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && !File.Exists(parameters[Constants.Parameters.SourcePublishSettingsFilePath])) " is 159.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.InvalidParameterValue' Constants.Parameters.SourcePublishSettingsFilePath)' " is 135.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.InvalidParameterValue' Constants.Parameters.ExportMetadataFolderPath)' " is 130.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                    string.Compare(a.Id' parameters[Constants.Parameters.SourceSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 127.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                        parameters[Constants.Parameters.SourceSubscriptionID]' parameters[Constants.Parameters.SourcePublishSettingsFilePath])); " is 120.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "            List<string> locations = ExportDataCenterLocations(subscription.Credentials' retryCount' minBackOff' maxBackOff' deltaBackOff); " is 127.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.DCParamException' parameters[Constants.Parameters.SourceDCName])); " is 126.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if (!parameters.Keys.Contains(Constants.Parameters.SourcePublishSettingsFilePath) && !parameters.Keys.Contains(Constants.Parameters.SourceCertificateThumbprint)) " is 161.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 139.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if (!parameters.Keys.Contains(Constants.Parameters.DestinationPublishSettingsFilePath) && !parameters.Keys.Contains(Constants.Parameters.DestinationCertificateThumbprint)) " is 171.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.MissingCredentialsFile' StringResources.Destination' Constants.AppConfigArguments)); " is 144.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if ((parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourcePublishSettingsFilePath])) " is 168.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                  || (parameters.ContainsKey(Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourceCertificateThumbprint]))) " is 164.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.MissingCredentialsFile' StringResources.Source' Constants.AppConfigArguments)); " is 139.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if ((parameters.ContainsKey(Constants.Parameters.DestinationPublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.DestinationPublishSettingsFilePath])) " is 178.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                  || (parameters.ContainsKey(Constants.Parameters.DestinationCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.DestinationCertificateThumbprint]))) " is 174.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.MissingCredentialsFile' StringResources.Destination' Constants.AppConfigArguments)); " is 144.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                throw new ValidationException(string.Format(StringResources.EmptyOrNullParameter' Constants.Parameters.DestinationDCName)); " is 123.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    throw new ValidationException(string.Format(StringResources.EmptyOrNullParameter' Constants.Parameters.DestinationPrefixName)); " is 127.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if ((parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && !File.Exists(parameters[Constants.Parameters.SourcePublishSettingsFilePath]))) " is 161.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            if ((parameters.ContainsKey(Constants.Parameters.DestinationPublishSettingsFilePath) && !File.Exists(parameters[Constants.Parameters.DestinationPublishSettingsFilePath]))) " is 171.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                if (!Path.GetExtension(importMapperXmlFilePath).Equals(Constants.MapperFileExtension' StringComparison.InvariantCultureIgnoreCase)) " is 131.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    string.Compare(a.Id' parameters[Constants.Parameters.SourceSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 127.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    throw new ValidationException(string.Format(StringResources.SubscriptionIdParamException' parameters[Constants.Parameters.SourceSubscriptionID]' parameters[Constants.Parameters.SourcePublishSettingsFilePath])); " is 210.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    SubscriptionGetResponse subscriptionResponse = Retry.RetryOperation(() => client.Subscriptions.Get()' baseParams' ResourceType.None); " is 133.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    string.Compare(a.Id' parameters[Constants.Parameters.DestinationSubscriptionID]' StringComparison.InvariantCultureIgnoreCase) == 0); " is 132.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                    throw new ValidationException(string.Format(StringResources.SubscriptionIdParamException' parameters[Constants.Parameters.DestinationSubscriptionID]' parameters[Constants.Parameters.DestinationPublishSettingsFilePath])); " is 220.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "            List<string> locations = ExportDataCenterLocations(destSubscription.Credentials' retryCount' minBackOff' maxBackOff' deltaBackOff); " is 131.
Long Statement,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The length of the statement  "                (parameters[Constants.Parameters.DestinationPrefixName].Length < 1 || parameters[Constants.Parameters.DestinationPrefixName].Length > 5)) " is 137.
Long Statement,Azure.DataCenterMigration,Logger,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Logger.cs,Warning,The length of the statement  "                    log.Warn(string.Format(StringResources.ExceptionOccurred' ex.GetType().ToString()' message + ": " + ex.Message' ex.StackTrace));" is 128.
Long Statement,Azure.DataCenterMigration,PublishSettings,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\PublishSettings.cs,ToPublishSetting,The length of the statement  "            settings.Credentials = new CertificateCloudCredentials(settings.Id' GetCertificate(element' Constants.ManagementCertificate) ?? defaultCertificate);" is 148.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ExportSubscriptionMetadata,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportMetadataCompleted' exportParameters.ExportMetadataFolderPath));" is 125.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ImportSubscriptionMetadata,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ImportMetadataStarted' parameters[Constants.Parameters.ImportMetadataFilePath]));" is 137.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,ImportSubscriptionMetadata,The length of the statement  "            ReportProgress(string.Format(ProgressResources.ImportMetadataStarted' parameters[Constants.Parameters.ImportMetadataFilePath]));" is 128.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,MigrateSubscription,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportMetadataCompleted' exportParameters.ExportMetadataFolderPath));" is 125.
Long Statement,Azure.DataCenterMigration,DCMigrationManager,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\DCMigrationManager.cs,MigrateSubscription,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ImportMetadataStarted' importParameters.ImportMetadataFilePath));" is 121.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "        dcMigration.ReportProgress(string.Format(ProgressResources.ImportDataCenterStarted' importParameters.DestinationDCName)); " is 121.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "          ExcludeVMList = resourceNameCollection.FirstOrDefault(x => x.Key.ToString() == "ExcludeVM").Value.Select(x => x.SourceName.ToString().ToLower()).ToList(); " is 154.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            dcMigration.ReportProgress(string.Format(ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            dcMigration.ReportProgress(string.Format(ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            dcMigration.ReportProgress(string.Format(ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            dcMigration.ReportProgress(string.Format(ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            dcMigration.ReportProgress(string.Format(ProgressResources.CompletedStages' ++stageCount' Constants.ImportTotalStages)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ImportSubscriptionMetadata,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ImportDataCenterCompleted' importParameters.DestinationDCName)); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ChangeAndValidateMetadataFileResources,The length of the statement  "          importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestAffinityGroupNames,The length of the statement  "        affinityGroup.AffinityGroupDetails.Name = GetDestinationResourceName(ResourceType.AffinityGroup' affinityGroup.AffinityGroupDetails.Name); " is 138.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "      if (networkConfiguration != null && networkConfiguration.VirtualNetworkConfiguration != null && !networkConfiguration.IsImported) " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "            importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestNetworkConfigurationNames,The length of the statement  "            virtualNetworkSite.AffinityGroup = GetDestinationResourceName(ResourceType.AffinityGroup' virtualNetworkSite.AffinityGroup); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "      if (cloudServices.Select(cs => cs.DeploymentDetails).Where(d => d != null).Where(IP => IP.ReservedIPName != null).Select(resip => resip.ReservedIPName).Distinct().Count() != " is 173.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "         cloudServices.Select(cs => cs.DeploymentDetails).Where(d => d != null).Where(IP => IP.ReservedIPName != null).Select(resip => resip.ReservedIPName).Count()) " is 156.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "              importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl))) " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "            throw new ValidationException(string.Format(StringResources.InvalidServiceNameExist' service.CloudServiceDetails.ServiceName)); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "            CheckReservedIPNameAvailability(importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl' " is 154.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "          service.DeploymentDetails.Name = GetDestinationResourceName(ResourceType.Deployment' service.DeploymentDetails.Name' ResourceType.CloudService' " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestCloudServiceNames,The length of the statement  "          RenameAndValidateDestVirtualMachineNames(service.DeploymentDetails.VirtualMachines' service.CloudServiceDetails.ServiceName); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "                  affinityGroup.AffinityGroupDetails.Name)' ResourceType.AffinityGroup.ToString()' affinityGroup.AffinityGroupDetails.Name); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateAffinityGroups,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swTotalAG.Elapsed.Days' swTotalAG.Elapsed.Hours' swTotalAG.Elapsed.Minutes' " is 159.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "              importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The length of the statement  "              destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites = networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites; " is 143.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "      using (var computeManagementClient = new ComputeManagementClient(importParameters.DestinationSubscriptionSettings.Credentials)) " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateCloudServices,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swTotalServices.Elapsed.Days' swTotalServices.Elapsed.Hours' " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "                  storageAccount.StorageAccountDetails.Name)' ResourceType.StorageAccount.ToString()' storageAccount.StorageAccountDetails.Name); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "              OperationStatusResponse createStorageAccountResult = (storageAccount.StorageAccountDetails.Properties.AffinityGroup == null) " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "                  storageAccount.StorageAccountDetails.Name' swStorage.Elapsed.Days' swStorage.Elapsed.Hours' swStorage.Elapsed.Minutes' swStorage.Elapsed.Seconds)' " is 146.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateStorageAccounts,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swTotalStorages.Elapsed.Days' swTotalStorages.Elapsed.Hours' swTotalStorages.Elapsed.Minutes' " is 177.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "      Logger.Info(methodName' ProgressResources.ExecutionStarted' ResourceType.Deployment.ToString()' deploymentDetails.Name); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "              for (int virtualMachineNumber = 0; virtualMachineNumber < deploymentDetails.VirtualMachines.Count(); virtualMachineNumber++) " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "                          () => DeleteVirtualMachineIfTaskCancelled(ResourceType.VirtualMachine' serviceName' deploymentDetails.Name' virtualMachine.VirtualMachineDetails.RoleName)); " is 156.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "                      UpdateMedatadaFile(ResourceType.VirtualMachine' virtualMachine.VirtualMachineDetails.RoleName' parentResourceName: serviceName); " is 128.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "                                    virtualMachine.VirtualMachineDetails.RoleName' deploymentDetails.Name' swDeployment.Elapsed.Days' swDeployment.Elapsed.Hours' " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swTotalDeploymentWithVMs.Elapsed.Days' swTotalDeploymentWithVMs.Elapsed.Hours' " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateDeployment,The length of the statement  "          swTotalDeploymentWithVMs.Elapsed.Minutes' swTotalDeploymentWithVMs.Elapsed.Seconds)' ResourceType.Deployment.ToString()' deploymentDetails.Name); " is 145.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "          d => d.DeploymentDetails != null).Select(dd => dd.DeploymentDetails).SelectMany(vm => vm.VirtualMachines).Where(dds => dds.VirtualMachineDetails.DataVirtualHardDisks != null && !ExcludeVMList.Contains((dds.VirtualMachineDetails.RoleName.ToString().ToLower()))).SelectMany(medialinks => medialinks.VirtualMachineDetails.DataVirtualHardDisks).Select(dds => dds.MediaLink)); " is 371.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "          d => d.DeploymentDetails != null).Select(dd => dd.DeploymentDetails).SelectMany(vm => vm.VirtualMachines).Where(x => !ExcludeVMList.Contains(x.VirtualMachineDetails.RoleName.ToString().ToLower())).Select( " is 204.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "         d => d.DeploymentDetails != null).Select(dd => dd.DeploymentDetails).SelectMany(vm => vm.VirtualMachines).Where(dds => dds.VirtualMachineDetails.DataVirtualHardDisks != null && ExcludeVMList.Contains((dds.VirtualMachineDetails.RoleName.ToString().ToLower()))).SelectMany(medialinks => medialinks.VirtualMachineDetails.DataVirtualHardDisks).Select(dds => dds.MediaLink)); " is 370.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "          d => d.DeploymentDetails != null).Select(dd => dd.DeploymentDetails).SelectMany(vm => vm.VirtualMachines).Where(x => ExcludeVMList.Contains(x.VirtualMachineDetails.RoleName.ToString().ToLower())).Select( " is 203.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "              if (roleInstance.InstanceStatus != Constants.VMStatusStopped && roleInstance.InstanceStatus != Constants.VMStatusStoppedDeallocated && !ExcludeVMList.Contains(vmSourceName.ToString().ToLower())) " is 194.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "                Retry.RetryOperation((() => client.VirtualMachines.Shutdown(GetSourceResourceName(ResourceType.CloudService' serviceName)' " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "        string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials' " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "        string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials' " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "          BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "            Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)' " is 135.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "                destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString()' blobName); " is 156.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyAllBlobsOfVM.Elapsed.Days' swCopyAllBlobsOfVM.Elapsed.Hours' " is 150.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "        string sourceStorageAccountName = GetSourceResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name); " is 128.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "        string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials' " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "        string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials' " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "        BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount); " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                CloudPageBlob destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 132.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' " is 150.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName); " is 130.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                CloudBlockBlob destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 138.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)' " is 150.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' " is 121.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "                  string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName); " is 130.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "              Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours' " is 142.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "          Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours' " is 144.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "        Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours' " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swAllCopyStorageAccounts.Elapsed.Days' swAllCopyStorageAccounts.Elapsed.Hours' " is 162.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckServiceNameAvailability,The length of the statement  "      Logger.Info(methodName' string.Format(ProgressResources.CheckServiceNameAvailabilityFromMSAzureStarted' serviceName)' ResourceType.CloudService.ToString()' serviceName); " is 169.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckStorageNameAvailability,The length of the statement  "      Logger.Info(methodName' String.Format(ProgressResources.CheckStorageNameAvailabilityFromMSAzureStarted' storageAccountName)' " is 124.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckStorageNameAvailability,The length of the statement  "        CheckNameAvailabilityResponse storageResponse = Retry.RetryOperation(() => client.StorageAccounts.CheckNameAvailability( " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "      Logger.Info(methodName' ProgressResources.GetStorageAccountsFromMSAzureStarted' ResourceType.StorageAccount.ToString()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "        Logger.Info(methodName' ProgressResources.GetStorageAccountsFromMSAzureCompleted' ResourceType.StorageAccount.ToString()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "        StorageAccountGetKeysResponse storageKeyResponse = Retry.RetryOperation(() => client.StorageAccounts.GetKeys(storageAccountName)' " is 129.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "        Logger.Info(methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "      Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString()); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "          Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString()); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "      Logger.Info(methodName' ProgressResources.GetVirtualMachinesFromMSAzureStarted' ResourceType.VirtualMachine.ToString()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "        VirtualMachineGetResponse virtualMachineResponse = Retry.RetryOperation(() => client.VirtualMachines.Get(serviceName' deploymentName' virtualMachineName)' " is 154.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetVirtualMachinesResponseFromMSAzure,The length of the statement  "        Logger.Info(methodName' ProgressResources.GetVirtualMachinesFromMSAzureCompleted' ResourceType.VirtualMachine.ToString()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,GetDeploymentResponseFromMSAzure,The length of the statement  "        DeploymentGetResponse deploymentResponse = Retry.RetryOperation(() => client.Deployments.GetByName(serviceName' deploymentName)' " is 128.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "      Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString()); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "        else if (reservedIpPresent.ServiceName != null && !(serviceName.Equals(reservedIpPresent.ServiceName' StringComparison.InvariantCultureIgnoreCase))) " is 148.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CheckReservedIPNameAvailability,The length of the statement  "          throw new ValidationException(string.Format(ProgressResources.OccupiedReservedIpName' reservedIPName' reservedIpPresent.ServiceName)); " is 134.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteAffinityGroupIfTaskCancelled,The length of the statement  "        Logger.Info(methodName' string.Format(ProgressResources.DeleteAGOnTaskCancelled' affinityGroupName)' ResourceType.AffinityGroup.ToString()' affinityGroupName); " is 159.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the statement  "                  importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteCloudServiceIfTaskCancelled,The length of the statement  "        Logger.Info(methodName' string.Format(ProgressResources.DeleteCloudServiceOnTaskCancelled' serviceName)' ResourceType.AffinityGroup.ToString()' serviceName); " is 157.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteVirtualMachineIfTaskCancelled,The length of the statement  "      if (GetVirtualMachinesResponseFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl' serviceName' deploymentName' virtualMachineName) != null) " is 222.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteVirtualMachineIfTaskCancelled,The length of the statement  "        Logger.Info(methodName' string.Format(ProgressResources.DeleteVirtualMachineOnTaskCancelled' virtualMachineName)' ResourceType.AffinityGroup.ToString()' serviceName); " is 166.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the statement  "      var storageAccountResponse = GetStorageAccountListResponseFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials); " is 132.
Long Statement,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,DeleteStorageIfTaskCancelled,The length of the statement  "        Logger.Info(methodName' string.Format(ProgressResources.DeleteStorageAccountOnTaskCancelled' storageAccountName)' ResourceType.StorageAccount.ToString()' storageAccountName); " is 174.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportDataCenterStarted' exportParameters.SourceDCName)' ResourceType.DataCenter.ToString()' exportParameters.SourceDCName); " is 180.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            AffinityGroupListResponse affinityGroupResponse = GetAffinityGroupListResponseFromMSAzure(exportParameters.SourceSubscriptionSettings.Credentials); " is 147.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            HostedServiceListResponse cloudserviceResponse = GetCloudServiceListResponseFromMSAzure(exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl); " is 201.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            NetworkGetConfigurationResponse networkResponse = GetNetworkConfigurationFromMSAzure(exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl); " is 198.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            StorageAccountListResponse storageAccountResponse = GetStorageAccountListResponseFromMSAzure(exportParameters.SourceSubscriptionSettings.Credentials); " is 150.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportSubscriptionMetadata,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportDataCenterCompleted' dataCenter.LocationName)' ResourceType.DataCenter.ToString()); " is 145.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportAffinityGroups,The length of the statement  "                                                      where (string.Compare(affinityGroup.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0) " is 125.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "            using (var client = new ComputeManagementClient(exportParameters.SourceSubscriptionSettings.Credentials' exportParameters.SourceSubscriptionSettings.ServiceUrl)) " is 161.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "                    if ((string.Compare(service.Properties.Location' exportParameters.SourceDCName' StringComparison.CurrentCultureIgnoreCase) == 0) || " is 131.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "                        Logger.Info(methodName' string.Format(ProgressResources.ExportCloudServiceStarted' service.ServiceName)' ResourceType.CloudService.ToString()' service.ServiceName); " is 164.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportCloudServices,The length of the statement  "                            Logger.Info(methodName' string.Format(ProgressResources.ExportCloudServiceCompleted' service.ServiceName)' ResourceType.CloudService.ToString()' service.ServiceName); " is 166.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportStorageAccountContainers,The length of the statement  "                string srcStorageAccountKey = GetStorageAccountKeysFromMSAzure(exportParameters.SourceSubscriptionSettings.Credentials' account.Name).PrimaryKey; " is 145.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportDeployment,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportDeploymentStarted' deploymentResponse.Name' serviceName)' ResourceType.Deployment.ToString()' deploymentResponse.Name); " is 181.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportDeployment,The length of the statement  "                Logger.Info(methodName' string.Format(ProgressResources.ExportDeploymentCompleted' deploymentResponse.Name' serviceName)' ResourceType.Deployment.ToString()' deploymentResponse.Name); " is 183.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExportVirtualMachineStarted' serviceName)' ResourceType.VirtualMachine.ToString()); " is 139.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "                                       where role.RoleType == Constants.PersistentVMRole && role.RoleName == roleInstance.RoleName && roleInstance.IPAddress != null " is 125.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVirtualMachines,The length of the statement  "                Logger.Info(methodName' string.Format(ProgressResources.ExportVirtualMachineCompleted' serviceName)' ResourceType.VirtualMachine.ToString()); " is 141.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "                if (netConfiguration.VirtualNetworkConfiguration != null  && netConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null) " is 134.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "                        if (vns.Gateway != null && vns.Gateway.ConnectionsToLocalNetwork != null && vns.Gateway.ConnectionsToLocalNetwork.LocalNetworkSiteRef != null) " is 142.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "                            netConfiguration.VirtualNetworkConfiguration.Dns.DnsServers.Where(dns => dnsNames.Distinct().Contains(dns.name)).ToArray(); " is 123.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,ExportVNetConfiguration,The length of the statement  "                            netConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Where(lns => localNetNames.Distinct().Contains(lns.name)).ToArray(); " is 131.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "                Logger.Info(methodName' string.Format(ProgressResources.GetStorageAccountKeysStarted' storageAccountName)'ResourceType.StorageAccount.ToString()'storageAccountName); " is 165.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountKeysFromMSAzure,The length of the statement  "                StorageAccountGetKeysResponse storageKeyResponse = Retry.RetryOperation(() => client.StorageAccounts.GetKeys(storageAccountName)' " is 129.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetCloudServiceListResponseFromMSAzure,The length of the statement  "                    ////HostedServiceListResponse serviceResponse = Retry.RetryOperation(() => client.HostedServices.List()' exportParameters.RetryCount' exportParameters.MinBackOff' exportParameters.MaxBackOff' exportParameters.DeltaBackOff' ResourceType.CloudService); " is 250.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "                    AffinityGroupListResponse agResponse = Retry.RetryOperation(() => client.AffinityGroups.List()'(BaseParameters)exportParameters'ResourceType.AffinityGroup); " is 156.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "                    Logger.Info(methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "            Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureStarted' ResourceType.VirtualNetwork.ToString()); " is 125.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "                    Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString()); " is 127.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "                Logger.Info(methodName' ProgressResources.GetStorageAccountsFromMSAzureStarted' ResourceType.StorageAccount.ToString()); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "                    StorageAccountListResponse storageResponse = Retry.RetryOperation(() => client.StorageAccounts.List()'(BaseParameters)exportParameters'ResourceType.StorageAccount); " is 164.
Long Statement,Azure.DataCenterMigration,ResourceExporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceExporter.cs,GetStorageAccountListResponseFromMSAzure,The length of the statement  "                    Logger.Info(methodName' ProgressResources.GetStorageAccountsFromMSAzureCompleted' ResourceType.StorageAccount.ToString()); " is 122.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "                    GenerateNewResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name' destinationPrefixValue); " is 120.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateMapperXml,The length of the statement  "                    GenerateNewResourceName(ResourceType.CloudService' cloudService.CloudServiceDetails.ServiceName' destinationPrefixValue); " is 121.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GetChildResourceName,The length of the statement  "                if (isDestinationNameRequired && res.SourceName.Equals(resourceName) && res.ResourceType.Equals(childResourceType.ToString())) " is 126.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GetChildResourceName,The length of the statement  "                else if (!isDestinationNameRequired && res.DestinationName.Equals(resourceName) && res.ResourceType.Equals(childResourceType.ToString())) " is 137.
Long Statement,Azure.DataCenterMigration,ResourceNameMapperHelper,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceNameMapper.cs,GenerateNewResourceName,The length of the statement  "                    newResourceName = ((Constants.GetMaxLengthForResourceType(resourceType) != -1 &&  (newResourceName.Length > Constants.GetMaxLengthForResourceType(resourceType))? " is 161.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "                        if (string.Compare(((CloudException)ex).Error.ToString()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0)" is 134.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "                    Logger.Warning(methodName' string.Format(ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString()' resourceName);" is 133.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "                    int increment = (int)((Math.Pow(2' currentRetryCount) - 1) * r.Next((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)'" is 123.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The length of the statement  "                    int timeToSleepMsec = (int)Math.Min(baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);" is 130.
Long Statement,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,GetAffinityGroupListResponseFromMSAzure,The length of the statement  "                Logger.Info(methodName' ProgressResources.GetAffinityGroupsFromMSAzureCompleted' ResourceType.AffinityGroup.ToString());" is 120.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "                                Logger.Info(methodName' string.Format(ProgressResources.RollbackCloudService' cloudService'swService.Elapsed.Days' swService.Elapsed.Hours'" is 139.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackServices,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime'swTotalServices.Elapsed.Days' swTotalServices.Elapsed.Hours' swTotalServices.Elapsed.Minutes'" is 176.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackStorageAccounts,The length of the statement  "                            Logger.Info(methodName' string.Format(ProgressResources.RollbackStorageAccount' storageAccount'swStorage.Elapsed.Days' swStorage.Elapsed.Hours'" is 143.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackStorageAccounts,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime'swTotalstorages.Elapsed.Days' swTotalstorages.Elapsed.Hours'" is 143.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "                importParameters.DestinationSubscriptionSettings.Credentials' importParameters.DestinationSubscriptionSettings.ServiceUrl);" is 123.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "                                            destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites.Where(s => s.name != localNetworkDestination).ToArray();" is 130.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "                Logger.Info(methodName' ProgressResources.RollbackVirtualNetworksWaiting' ResourceType.NetworkConfiguration.ToString());" is 120.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The length of the statement  "                Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime'swVirtualNetwork.Elapsed.Days' swVirtualNetwork.Elapsed.Hours'" is 145.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "                                Logger.Info(methodName' string.Format(ProgressResources.RollbackAffinityGroup' affinityGroup'swAffinityGroup.Elapsed.Days'" is 122.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackAffinityGroups,The length of the statement  "            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swTotalAffGrp.Elapsed.Days' swTotalAffGrp.Elapsed.Hours'" is 140.
Long Statement,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,GetNetworkConfigurationFromMSAzure,The length of the statement  "                    Logger.Info(methodName' ProgressResources.GetVirtualNetworkConfigFromMSAzureCompleted' ResourceType.VirtualNetwork.ToString());" is 127.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertExportParameters,The conditional expression  "(parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourcePublishSettingsFilePath]))                     || (parameters.ContainsKey(Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourceCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey(Constants.Parameters.SourcePublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourcePublishSettingsFilePath]))                    || (parameters.ContainsKey(Constants.Parameters.SourceCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.SourceCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey(Constants.Parameters.DestinationPublishSettingsFilePath) && string.IsNullOrEmpty(parameters[Constants.Parameters.DestinationPublishSettingsFilePath]))                    || (parameters.ContainsKey(Constants.Parameters.DestinationCertificateThumbprint) && string.IsNullOrEmpty(parameters[Constants.Parameters.DestinationCertificateThumbprint]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The conditional expression  "(parameters.ContainsKey(Constants.Parameters.DestinationPrefixName) &&                      string.IsNullOrEmpty(parameters[Constants.Parameters.DestinationPrefixName])) ||                      (parameters.ContainsKey(Constants.Parameters.MapperXmlFilePath)                      && string.IsNullOrEmpty(parameters[Constants.Parameters.MapperXmlFilePath]))"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.Dns != null &&                  networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  (destinationNetConfiguration.VirtualNetworkConfiguration.Dns == null ||                  destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers == null)                  &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.Dns != null &&                  networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites == null &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CreateVirtualNetworks,The conditional expression  "destinationNetConfiguration.VirtualNetworkConfiguration != null &&                  destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites == null &&                  networkConfiguration.VirtualNetworkConfiguration != null &&                  networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.Dns != null &&                             networkConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null &&                             destinationNetConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration.Dns != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration.Dns.DnsServers != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null &&                             destinationNetConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration.LocalNetworkSites != null"  is complex.
Complex Conditional,Azure.DataCenterMigration,RollBack,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\RollBack.cs,RollBackVirtualNetworks,The conditional expression  "networkConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null &&                             destinationNetConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration != null &&                             destinationNetConfiguration.VirtualNetworkConfiguration.VirtualNetworkSites != null"  is complex.
Magic Number,Azure.DataCenterMigration,ConfigurationReader,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ConfigurationReader.cs,ValidateAndConvertImportParameters,The following statement contains a magic number: if (parameters.ContainsKey(Constants.Parameters.DestinationPrefixName) &&                  (parameters[Constants.Parameters.DestinationPrefixName].Length < 1 || parameters[Constants.Parameters.DestinationPrefixName].Length > 5))              {                  throw new ValidationException(string.Format(StringResources.InvalidDestinationPrefixName'                      parameters[Constants.Parameters.DestinationPrefixName]));              }
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.AffinityGroup' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.StorageAccount' 23);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.CloudService' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.NetworkConfiguration' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.LocalNetworkSite' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.VirtualNetworkSite' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.Deployment' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.VirtualMachine' 63);
Magic Number,Azure.DataCenterMigration,Constants,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Constants.cs,Constants,The following statement contains a magic number: resourceNameMaxLength.Add(DataCenterMigration.ResourceType.VirtualNetwork' 63);
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: foreach (var virtualMachine in virtualMachines)        {          virtualMachine.VirtualMachineDetails.RoleName = GetDestinationResourceName(ResourceType.VirtualMachine'              virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName);            if (!virtualMachine.IsImported)          {            string blobName;            string containerName;              // Check for valid length.            if (!(CheckForLength(virtualMachine.VirtualMachineDetails.RoleName' 3' 15)))            {              throw new ValidationException(string.Format(StringResources.InvalidVirtualMachineLength'                  virtualMachine.VirtualMachineDetails.RoleName));            }              //Check for blob exists            string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring(0'                virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf('.'));            string storageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'                storageAccountName).PrimaryKey;              blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last();            containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments[1].Substring(0'                virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments[1].IndexOf('/'));            if (!BlobExists(blobName' containerName' storageAccountKey' storageAccountName' true))            {              throw new ValidationException(string.Format(StringResources.InvalidSourceOSBlob'                          virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));            }              foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks)            {              blobName = disk.MediaLink.Segments.Last();              containerName = disk.MediaLink.Segments[1].Substring(0' disk.MediaLink.Segments[1].IndexOf('/'));              if (!BlobExists(blobName' containerName' storageAccountKey' storageAccountName' true))              {                throw new ValidationException(string.Format(StringResources.InvalidSourceDataDiskBlob'                            disk.MediaLink.AbsoluteUri));              }            }          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateDestVirtualMachineNames,The following statement contains a magic number: foreach (var virtualMachine in virtualMachines)        {          virtualMachine.VirtualMachineDetails.RoleName = GetDestinationResourceName(ResourceType.VirtualMachine'              virtualMachine.VirtualMachineDetails.RoleName' ResourceType.CloudService' serviceName);            if (!virtualMachine.IsImported)          {            string blobName;            string containerName;              // Check for valid length.            if (!(CheckForLength(virtualMachine.VirtualMachineDetails.RoleName' 3' 15)))            {              throw new ValidationException(string.Format(StringResources.InvalidVirtualMachineLength'                  virtualMachine.VirtualMachineDetails.RoleName));            }              //Check for blob exists            string storageAccountName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.Substring(0'                virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Host.IndexOf('.'));            string storageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'                storageAccountName).PrimaryKey;              blobName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments.Last();            containerName = virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments[1].Substring(0'                virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.Segments[1].IndexOf('/'));            if (!BlobExists(blobName' containerName' storageAccountKey' storageAccountName' true))            {              throw new ValidationException(string.Format(StringResources.InvalidSourceOSBlob'                          virtualMachine.VirtualMachineDetails.OSVirtualHardDisk.MediaLink.AbsoluteUri));            }              foreach (DataVirtualHardDisk disk in virtualMachine.VirtualMachineDetails.DataVirtualHardDisks)            {              blobName = disk.MediaLink.Segments.Last();              containerName = disk.MediaLink.Segments[1].Substring(0' disk.MediaLink.Segments[1].IndexOf('/'));              if (!BlobExists(blobName' containerName' storageAccountKey' storageAccountName' true))              {                throw new ValidationException(string.Format(StringResources.InvalidSourceDataDiskBlob'                            disk.MediaLink.AbsoluteUri));              }            }          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: foreach (Azure.DataCenterMigration.Models.StorageAccount storageAccount in storageAccounts)        {          string originalStorageName = storageAccount.StorageAccountDetails.Name;            storageAccount.StorageAccountDetails.Name = GetDestinationResourceName(ResourceType.StorageAccount'              storageAccount.StorageAccountDetails.Name);          storageAccount.StorageAccountDetails.Properties.AffinityGroup = GetDestinationResourceName(ResourceType.AffinityGroup'              storageAccount.StorageAccountDetails.Properties.AffinityGroup);            if (!storageAccount.IsImported)          {            // Check for length between 3 to 24 Char             if (!CheckForLength(storageAccount.StorageAccountDetails.Name' 3' 24))            {              throw new ValidationException(string.Format(StringResources.InvalidStorageAccountLength'                  storageAccount.StorageAccountDetails.Name));            }              if (!(CheckStorageNameAvailability(storageAccount.StorageAccountDetails.Name'                importParameters.DestinationSubscriptionSettings.Credentials)))            {              throw new ValidationException(string.Format(StringResources.InvalidStorageAccountNameExist'                  storageAccount.StorageAccountDetails.Name));            }          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,RenameAndValidateStorageAccountNames,The following statement contains a magic number: foreach (Azure.DataCenterMigration.Models.StorageAccount storageAccount in storageAccounts)        {          string originalStorageName = storageAccount.StorageAccountDetails.Name;            storageAccount.StorageAccountDetails.Name = GetDestinationResourceName(ResourceType.StorageAccount'              storageAccount.StorageAccountDetails.Name);          storageAccount.StorageAccountDetails.Properties.AffinityGroup = GetDestinationResourceName(ResourceType.AffinityGroup'              storageAccount.StorageAccountDetails.Properties.AffinityGroup);            if (!storageAccount.IsImported)          {            // Check for length between 3 to 24 Char             if (!CheckForLength(storageAccount.StorageAccountDetails.Name' 3' 24))            {              throw new ValidationException(string.Format(StringResources.InvalidStorageAccountLength'                  storageAccount.StorageAccountDetails.Name));            }              if (!(CheckStorageNameAvailability(storageAccount.StorageAccountDetails.Name'                importParameters.DestinationSubscriptionSettings.Credentials)))            {              throw new ValidationException(string.Format(StringResources.InvalidStorageAccountNameExist'                  storageAccount.StorageAccountDetails.Name));            }          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: Parallel.ForEach(diskUri' blobUri =>        {          string sourceStorageAccountName = blobUri.Host.Substring(0' blobUri.Host.IndexOf('.'));          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            //// get storage account key.          string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'              sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'              destStorageAccountName).PrimaryKey;          string blobName = blobUri.Segments.Last();          string containerName = blobUri.Segments[1].Substring(0' blobUri.Segments[1].IndexOf('/'));            try          {            //// Start stopwatch to calculate total time required for single blob            Stopwatch swBlob = new Stopwatch();            swBlob.Start();              bool deletedPendingBlob = false;            //// get all details of destination blob.            CloudPageBlob destBlob = GetCloudBlob(blobName' containerName' destStorageAccountKey' destStorageAccountName' false);            //// Check the status of blob if it is already present. Delete the blob if the status is pending.            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);            if (destBlob.Exists())            {              CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(blobName);              if (destBlobInfo.CopyState.Status == CopyStatus.Pending)              {                Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' blobName);                destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                deletedPendingBlob = true;              }            }              //// if blob is not exists or deleted the pending blob then copy it on destination.            if (!destBlob.Exists() || (deletedPendingBlob))            {              Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' blobName);                //// get all details of source blob.              Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(blobName' containerName'                  sourceStorageAccountKey' sourceStorageAccountName' true);              destBlob = GetCloudBlob(blobName' containerName' destStorageAccountKey' destStorageAccountName' false);                //// get Shared Access Signature for private containers.              var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()              {                SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                Permissions = SharedAccessBlobPermissions.Read'              });                var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);              string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);                //// copy blob from source to destination.              string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' blobUri' destUri));              WaitForBlobCopy(destBlob.Container' blobName);                swBlob.Stop();              dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyCompleted' blobUri' destUri));              Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName'                  destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString()' blobName);            }            else            {              Logger.Info(methodName' String.Format(ProgressResources.BlobExistsInDestination' containerName' blobName'                  destStorageAccountName)' ResourceType.Blob.ToString()' blobName);            }          }          catch (AggregateException exAgg)          {            foreach (var ex in exAgg.InnerExceptions)            {              Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' blobName);            }              throw;          }            catch (Exception ex)          {            Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' blobName);            throw;          }          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,ShutDownVMsAndCopyBlobToDestination,The following statement contains a magic number: Parallel.ForEach(diskUri' blobUri =>        {          string sourceStorageAccountName = blobUri.Host.Substring(0' blobUri.Host.IndexOf('.'));          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            //// get storage account key.          string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'              sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'              destStorageAccountName).PrimaryKey;          string blobName = blobUri.Segments.Last();          string containerName = blobUri.Segments[1].Substring(0' blobUri.Segments[1].IndexOf('/'));            try          {            //// Start stopwatch to calculate total time required for single blob            Stopwatch swBlob = new Stopwatch();            swBlob.Start();              bool deletedPendingBlob = false;            //// get all details of destination blob.            CloudPageBlob destBlob = GetCloudBlob(blobName' containerName' destStorageAccountKey' destStorageAccountName' false);            //// Check the status of blob if it is already present. Delete the blob if the status is pending.            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);            if (destBlob.Exists())            {              CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(blobName);              if (destBlobInfo.CopyState.Status == CopyStatus.Pending)              {                Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' blobName);                destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                deletedPendingBlob = true;              }            }              //// if blob is not exists or deleted the pending blob then copy it on destination.            if (!destBlob.Exists() || (deletedPendingBlob))            {              Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' containerName' blobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' blobName);                //// get all details of source blob.              Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(blobName' containerName'                  sourceStorageAccountKey' sourceStorageAccountName' true);              destBlob = GetCloudBlob(blobName' containerName' destStorageAccountKey' destStorageAccountName' false);                //// get Shared Access Signature for private containers.              var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()              {                SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                Permissions = SharedAccessBlobPermissions.Read'              });                var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);              string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' containerName' blobName);                //// copy blob from source to destination.              string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' blobUri' destUri));              WaitForBlobCopy(destBlob.Container' blobName);                swBlob.Stop();              dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyCompleted' blobUri' destUri));              Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationCompleted' containerName' blobName'                  destStorageAccountName' swBlob.Elapsed.Days' swBlob.Elapsed.Hours' swBlob.Elapsed.Minutes' swBlob.Elapsed.Seconds)' ResourceType.Blob.ToString()' blobName);            }            else            {              Logger.Info(methodName' String.Format(ProgressResources.BlobExistsInDestination' containerName' blobName'                  destStorageAccountName)' ResourceType.Blob.ToString()' blobName);            }          }          catch (AggregateException exAgg)          {            foreach (var ex in exAgg.InnerExceptions)            {              Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' blobName);            }              throw;          }            catch (Exception ex)          {            Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' blobName);            throw;          }          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach(storageAccounts' storageAccount =>        {          string sourceStorageAccountName = GetSourceResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'               sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'             destStorageAccountName).PrimaryKey;            var containers = storageAccount.Containers.ToList();          ////Stopwatch for tracking time taken to copy all the blobs in each storage account.          Stopwatch swCopyEachStorageAccount = new Stopwatch();          swCopyEachStorageAccount.Start();            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);          foreach (var container in containers)          {            ////Stopwatch for tracking time taken to copy all the blobs in each container.            Stopwatch swCopyContainer = new Stopwatch();            swCopyContainer.Start();              //// if the container has no blobs create the empty container            if (container.BlobDetails.Count == 0)            {              Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj =                new Microsoft.WindowsAzure.Storage.CloudStorageAccount(                    new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(destStorageAccountName' destStorageAccountKey)' true);                CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient();              CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference(container.ContainerName);                if (!emptyContainer.Exists())              {                lock (thisLockContainer)                {                  if (!emptyContainer.Exists())                  {                    emptyContainer.Create();                    }                }              }            }            foreach (var item in container.BlobDetails.Where(a => ! a.IsExcluded && ! ExcludeVMVHDList.Contains(a.BlobURI)))            {              try              {                ////Stopwatch for tracking time taken to copy each blob                Stopwatch swCopyEachBlob = new Stopwatch();                swCopyEachBlob.Start();                  bool deletedPendingBlob = false;                if (item.BlobType == BlobType.PageBlob.ToString())                {                  //// get all details of destination blob.                  CloudPageBlob destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  //// Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' item.BlobName);                      destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                      ResourceType.Blob.ToString()' item.BlobName);                      //// get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      //// get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      //// copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                else if (item.BlobType == BlobType.BlockBlob.ToString())                {                  // get all details of destination blob.                  CloudBlockBlob destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  // Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                      ResourceType.Blob.ToString()' item.BlobName);                        destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' item.BlobName);                      // get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      // get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      // copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                swCopyEachBlob.Stop();                Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours'                    swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString());              }              catch (AggregateException exAgg)              {                foreach (var ex in exAgg.InnerExceptions)                {                  Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' item.BlobName);                }                throw;              }              catch (Exception ex)              {                Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' item.BlobName);                throw;              }            }            swCopyContainer.Stop();            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours'                swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString());          }            swCopyEachStorageAccount.Stop();          Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours'                swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString());          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach(storageAccounts' storageAccount =>        {          string sourceStorageAccountName = GetSourceResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'               sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'             destStorageAccountName).PrimaryKey;            var containers = storageAccount.Containers.ToList();          ////Stopwatch for tracking time taken to copy all the blobs in each storage account.          Stopwatch swCopyEachStorageAccount = new Stopwatch();          swCopyEachStorageAccount.Start();            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);          foreach (var container in containers)          {            ////Stopwatch for tracking time taken to copy all the blobs in each container.            Stopwatch swCopyContainer = new Stopwatch();            swCopyContainer.Start();              //// if the container has no blobs create the empty container            if (container.BlobDetails.Count == 0)            {              Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj =                new Microsoft.WindowsAzure.Storage.CloudStorageAccount(                    new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(destStorageAccountName' destStorageAccountKey)' true);                CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient();              CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference(container.ContainerName);                if (!emptyContainer.Exists())              {                lock (thisLockContainer)                {                  if (!emptyContainer.Exists())                  {                    emptyContainer.Create();                    }                }              }            }            foreach (var item in container.BlobDetails.Where(a => ! a.IsExcluded && ! ExcludeVMVHDList.Contains(a.BlobURI)))            {              try              {                ////Stopwatch for tracking time taken to copy each blob                Stopwatch swCopyEachBlob = new Stopwatch();                swCopyEachBlob.Start();                  bool deletedPendingBlob = false;                if (item.BlobType == BlobType.PageBlob.ToString())                {                  //// get all details of destination blob.                  CloudPageBlob destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  //// Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' item.BlobName);                      destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                      ResourceType.Blob.ToString()' item.BlobName);                      //// get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      //// get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      //// copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                else if (item.BlobType == BlobType.BlockBlob.ToString())                {                  // get all details of destination blob.                  CloudBlockBlob destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  // Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                      ResourceType.Blob.ToString()' item.BlobName);                        destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' item.BlobName);                      // get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      // get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      // copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                swCopyEachBlob.Stop();                Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours'                    swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString());              }              catch (AggregateException exAgg)              {                foreach (var ex in exAgg.InnerExceptions)                {                  Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' item.BlobName);                }                throw;              }              catch (Exception ex)              {                Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' item.BlobName);                throw;              }            }            swCopyContainer.Stop();            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours'                swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString());          }            swCopyEachStorageAccount.Stop();          Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours'                swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString());          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach(storageAccounts' storageAccount =>        {          string sourceStorageAccountName = GetSourceResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'               sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'             destStorageAccountName).PrimaryKey;            var containers = storageAccount.Containers.ToList();          ////Stopwatch for tracking time taken to copy all the blobs in each storage account.          Stopwatch swCopyEachStorageAccount = new Stopwatch();          swCopyEachStorageAccount.Start();            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);          foreach (var container in containers)          {            ////Stopwatch for tracking time taken to copy all the blobs in each container.            Stopwatch swCopyContainer = new Stopwatch();            swCopyContainer.Start();              //// if the container has no blobs create the empty container            if (container.BlobDetails.Count == 0)            {              Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj =                new Microsoft.WindowsAzure.Storage.CloudStorageAccount(                    new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(destStorageAccountName' destStorageAccountKey)' true);                CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient();              CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference(container.ContainerName);                if (!emptyContainer.Exists())              {                lock (thisLockContainer)                {                  if (!emptyContainer.Exists())                  {                    emptyContainer.Create();                    }                }              }            }            foreach (var item in container.BlobDetails.Where(a => ! a.IsExcluded && ! ExcludeVMVHDList.Contains(a.BlobURI)))            {              try              {                ////Stopwatch for tracking time taken to copy each blob                Stopwatch swCopyEachBlob = new Stopwatch();                swCopyEachBlob.Start();                  bool deletedPendingBlob = false;                if (item.BlobType == BlobType.PageBlob.ToString())                {                  //// get all details of destination blob.                  CloudPageBlob destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  //// Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' item.BlobName);                      destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                      ResourceType.Blob.ToString()' item.BlobName);                      //// get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      //// get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      //// copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                else if (item.BlobType == BlobType.BlockBlob.ToString())                {                  // get all details of destination blob.                  CloudBlockBlob destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  // Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                      ResourceType.Blob.ToString()' item.BlobName);                        destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' item.BlobName);                      // get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      // get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      // copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                swCopyEachBlob.Stop();                Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours'                    swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString());              }              catch (AggregateException exAgg)              {                foreach (var ex in exAgg.InnerExceptions)                {                  Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' item.BlobName);                }                throw;              }              catch (Exception ex)              {                Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' item.BlobName);                throw;              }            }            swCopyContainer.Stop();            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours'                swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString());          }            swCopyEachStorageAccount.Stop();          Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours'                swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString());          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,CopyVMIndependentBlob,The following statement contains a magic number: Parallel.ForEach(storageAccounts' storageAccount =>        {          string sourceStorageAccountName = GetSourceResourceName(ResourceType.StorageAccount' storageAccount.StorageAccountDetails.Name);          string destStorageAccountName = GetDestinationResourceName(ResourceType.StorageAccount' sourceStorageAccountName);            string sourceStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.SourceSubscriptionSettings.Credentials'               sourceStorageAccountName).PrimaryKey;          string destStorageAccountKey = GetStorageAccountKeysFromMSAzure(importParameters.DestinationSubscriptionSettings.Credentials'             destStorageAccountName).PrimaryKey;            var containers = storageAccount.Containers.ToList();          ////Stopwatch for tracking time taken to copy all the blobs in each storage account.          Stopwatch swCopyEachStorageAccount = new Stopwatch();          swCopyEachStorageAccount.Start();            BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff' importParameters.RetryCount);          foreach (var container in containers)          {            ////Stopwatch for tracking time taken to copy all the blobs in each container.            Stopwatch swCopyContainer = new Stopwatch();            swCopyContainer.Start();              //// if the container has no blobs create the empty container            if (container.BlobDetails.Count == 0)            {              Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccountObj =                new Microsoft.WindowsAzure.Storage.CloudStorageAccount(                    new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(destStorageAccountName' destStorageAccountKey)' true);                CloudBlobClient cloudBlobClient = storageAccountObj.CreateCloudBlobClient();              CloudBlobContainer emptyContainer = cloudBlobClient.GetContainerReference(container.ContainerName);                if (!emptyContainer.Exists())              {                lock (thisLockContainer)                {                  if (!emptyContainer.Exists())                  {                    emptyContainer.Create();                    }                }              }            }            foreach (var item in container.BlobDetails.Where(a => ! a.IsExcluded && ! ExcludeVMVHDList.Contains(a.BlobURI)))            {              try              {                ////Stopwatch for tracking time taken to copy each blob                Stopwatch swCopyEachBlob = new Stopwatch();                swCopyEachBlob.Start();                  bool deletedPendingBlob = false;                if (item.BlobType == BlobType.PageBlob.ToString())                {                  //// get all details of destination blob.                  CloudPageBlob destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  //// Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudPageBlob destBlobInfo = (CloudPageBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                    ResourceType.Blob.ToString()' item.BlobName);                      destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                      ResourceType.Blob.ToString()' item.BlobName);                      //// get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudPageBlob sourceBlob = GetCloudBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      //// get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      //// copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                else if (item.BlobType == BlobType.BlockBlob.ToString())                {                  // get all details of destination blob.                  CloudBlockBlob destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                  // Check the status of blob if it is already present. Delete the blob if the status is pending.                  if (destBlob.Exists())                  {                    CloudBlockBlob destBlobInfo = (CloudBlockBlob)destBlob.Container.GetBlobReferenceFromServer(item.BlobName);                    if (destBlobInfo.CopyState.Status == CopyStatus.Pending)                    {                      Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' destBlobInfo.CopyState.Status)'                      ResourceType.Blob.ToString()' item.BlobName);                        destBlobInfo.AbortCopy(destBlobInfo.CopyState.CopyId' null' requestOptions);                      destBlobInfo.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);                      deletedPendingBlob = true;                    }                  }                    if (!destBlob.Exists() || (deletedPendingBlob))                  {                    Logger.Info(methodName' String.Format(ProgressResources.CopyBlobToDestinationStarted' container.ContainerName' item.BlobName' destStorageAccountName)'                  ResourceType.Blob.ToString()' item.BlobName);                      // get all details of source blob.                    Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob sourceBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName'                        sourceStorageAccountKey' sourceStorageAccountName' true);                    destBlob = GetCloudBlockBlob(item.BlobName' container.ContainerName' destStorageAccountKey' destStorageAccountName' false);                      // get Shared Access Signature for private containers.                    var sas = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy()                    {                      SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'                      SharedAccessExpiryTime = DateTime.UtcNow.AddDays(7)'                      Permissions = SharedAccessBlobPermissions.Read'                    });                      var srcBlobSasUri = string.Format("{0}{1}"' sourceBlob.Uri' sas);                    string destUri = string.Format(Constants.StorageAccountMediaLink' destStorageAccountName' container.ContainerName' item.BlobName);                      // copy blob from source to destination.                    string copyId = destBlob.StartCopyFromBlob(new Uri(srcBlobSasUri)' null' null' requestOptions' null);                      dcMigration.ReportProgress(string.Format(ProgressResources.BlobCopyStarted' item.BlobURI' destUri));                    WaitForBlobCopy(destBlob.Container' item.BlobName' item.BlobType);                    }                }                swCopyEachBlob.Stop();                Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachBlob.Elapsed.Days' swCopyEachBlob.Elapsed.Hours'                    swCopyEachBlob.Elapsed.Minutes' swCopyEachBlob.Elapsed.Seconds)' ResourceType.Blob.ToString());              }              catch (AggregateException exAgg)              {                foreach (var ex in exAgg.InnerExceptions)                {                  Logger.Error(methodName' exAgg' ResourceType.StorageAccount.ToString()' item.BlobName);                }                throw;              }              catch (Exception ex)              {                Logger.Error(methodName' ex' ResourceType.StorageAccount.ToString()' item.BlobName);                throw;              }            }            swCopyContainer.Stop();            Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyContainer.Elapsed.Days' swCopyContainer.Elapsed.Hours'                swCopyContainer.Elapsed.Minutes' swCopyContainer.Elapsed.Seconds)' ResourceType.Blob.ToString());          }            swCopyEachStorageAccount.Stop();          Logger.Info(methodName' string.Format(ProgressResources.ExecutionCompletedWithTime' swCopyEachStorageAccount.Elapsed.Days' swCopyEachStorageAccount.Elapsed.Hours'                swCopyEachStorageAccount.Elapsed.Minutes' swCopyEachStorageAccount.Elapsed.Seconds)' ResourceType.Blob.ToString());          });
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: while (copyStatus == CopyStatus.Pending)        {          try          {            Task.Delay(Constants.DelayTimeInMilliseconds).Wait();            blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);            copyStatus = blob.CopyState.Status;            if (blob.CopyState.BytesCopied.HasValue)              bytesCopied = blob.CopyState.BytesCopied.Value;              var totalBytes = blob.CopyState.TotalBytes;              if (totalBytes.HasValue)            {              //// Print status              dcMigration.ReportProgress(string.Format(ProgressResources.CopyBlobProgressInPercentage' blob.Name'                                (bytesCopied / totalBytes.Value) * 100));            }            }          catch (Exception ex)          {            Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (type == BlobType.BlockBlob.ToString())        {          CloudBlockBlob blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);          CopyStatus copyStatus = blob.CopyState.Status;          //// Loop until status becomes success          while (copyStatus == CopyStatus.Pending)          {            try            {              Task.Delay(Constants.DelayTimeInMilliseconds).Wait();              blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);              copyStatus = blob.CopyState.Status;              if (blob.CopyState.BytesCopied.HasValue)                bytesCopied = blob.CopyState.BytesCopied.Value;                var totalBytes = blob.CopyState.TotalBytes;                if (totalBytes.HasValue)              {                // Print status                dcMigration.ReportProgress(string.Format(ProgressResources.CopyBlobProgressInPercentage' blob.Name'                                  (bytesCopied / totalBytes.Value) * 100));              }              }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }          if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid)          {            try            {              blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);              BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff'                  importParameters.RetryCount);              blob.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);              Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus)'                  ResourceType.Blob.ToString()' blobName);              throw new Exception(string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus));            }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }        }        else        {          CloudPageBlob blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);          CopyStatus copyStatus = blob.CopyState.Status;          //// Loop until status becomes success          while (copyStatus == CopyStatus.Pending)          {            try            {              Task.Delay(Constants.DelayTimeInMilliseconds).Wait();              blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);              copyStatus = blob.CopyState.Status;              if (blob.CopyState.BytesCopied.HasValue)                bytesCopied = blob.CopyState.BytesCopied.Value;                var totalBytes = blob.CopyState.TotalBytes;                if (totalBytes.HasValue)              {                // Print status                dcMigration.ReportProgress(string.Format(ProgressResources.CopyBlobProgressInPercentage' blob.Name'                                  (bytesCopied / totalBytes.Value) * 100));              }              }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }          if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid)          {            try            {              blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);              BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff'                  importParameters.RetryCount);              blob.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);              Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus)'                  ResourceType.Blob.ToString()' blobName);              throw new Exception(string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus));            }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }        }
Magic Number,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The following statement contains a magic number: if (type == BlobType.BlockBlob.ToString())        {          CloudBlockBlob blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);          CopyStatus copyStatus = blob.CopyState.Status;          //// Loop until status becomes success          while (copyStatus == CopyStatus.Pending)          {            try            {              Task.Delay(Constants.DelayTimeInMilliseconds).Wait();              blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);              copyStatus = blob.CopyState.Status;              if (blob.CopyState.BytesCopied.HasValue)                bytesCopied = blob.CopyState.BytesCopied.Value;                var totalBytes = blob.CopyState.TotalBytes;                if (totalBytes.HasValue)              {                // Print status                dcMigration.ReportProgress(string.Format(ProgressResources.CopyBlobProgressInPercentage' blob.Name'                                  (bytesCopied / totalBytes.Value) * 100));              }              }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }          if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid)          {            try            {              blob = (CloudBlockBlob)blobContainer.GetBlobReferenceFromServer(blobName);              BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff'                  importParameters.RetryCount);              blob.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);              Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus)'                  ResourceType.Blob.ToString()' blobName);              throw new Exception(string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus));            }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }        }        else        {          CloudPageBlob blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);          CopyStatus copyStatus = blob.CopyState.Status;          //// Loop until status becomes success          while (copyStatus == CopyStatus.Pending)          {            try            {              Task.Delay(Constants.DelayTimeInMilliseconds).Wait();              blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);              copyStatus = blob.CopyState.Status;              if (blob.CopyState.BytesCopied.HasValue)                bytesCopied = blob.CopyState.BytesCopied.Value;                var totalBytes = blob.CopyState.TotalBytes;                if (totalBytes.HasValue)              {                // Print status                dcMigration.ReportProgress(string.Format(ProgressResources.CopyBlobProgressInPercentage' blob.Name'                                  (bytesCopied / totalBytes.Value) * 100));              }              }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }          if (copyStatus == CopyStatus.Aborted || copyStatus == CopyStatus.Failed || copyStatus == CopyStatus.Invalid)          {            try            {              blob = (CloudPageBlob)blobContainer.GetBlobReferenceFromServer(blobName);              BlobRequestOptions requestOptions = Retry.GetBlobRequestOptions(importParameters.DeltaBackOff'                  importParameters.RetryCount);              blob.Delete(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' null);              Logger.Info(methodName' string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus)'                  ResourceType.Blob.ToString()' blobName);              throw new Exception(string.Format(ProgressResources.DeleteNonSuccessBlob' copyStatus));            }            catch (Exception ex)            {              Logger.Error(methodName' ex' ResourceType.Blob.ToString()' blobName);            }          }        }
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++)             {                 try                 {                     if (preRetryAction != null && currentRetryCount > 0)                     {                         preRetryAction();                     }                     return action();                 }                 catch (Exception ex)                 {                     if (ignoreResourceNotFoundEx && (ex.GetType() == typeof(CloudException)))                     {                             //Return if error code is Resource Not Found                         if (string.Compare(((CloudException)ex).Error.ToString()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0)                         {                                                         return default(T);                         }                     }                     TimeSpan retryInterval = TimeSpan.Zero;                                       Logger.Warning(methodName' string.Format(ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString()' resourceName);                     Random r = new Random();                      // Calculate Exponential backoff with +/- 20% tolerance                     int increment = (int)((Math.Pow(2' currentRetryCount) - 1) * r.Next((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)'                         (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));                      // Enforce backoff boundaries                     int timeToSleepMsec = (int)Math.Min(baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);                     retryInterval = TimeSpan.FromMilliseconds(timeToSleepMsec);                     exceptions.Add(ex);                     Thread.Sleep(retryInterval);                 }             }
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++)             {                 try                 {                     if (preRetryAction != null && currentRetryCount > 0)                     {                         preRetryAction();                     }                     return action();                 }                 catch (Exception ex)                 {                     if (ignoreResourceNotFoundEx && (ex.GetType() == typeof(CloudException)))                     {                             //Return if error code is Resource Not Found                         if (string.Compare(((CloudException)ex).Error.ToString()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0)                         {                                                         return default(T);                         }                     }                     TimeSpan retryInterval = TimeSpan.Zero;                                       Logger.Warning(methodName' string.Format(ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString()' resourceName);                     Random r = new Random();                      // Calculate Exponential backoff with +/- 20% tolerance                     int increment = (int)((Math.Pow(2' currentRetryCount) - 1) * r.Next((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)'                         (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));                      // Enforce backoff boundaries                     int timeToSleepMsec = (int)Math.Min(baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);                     retryInterval = TimeSpan.FromMilliseconds(timeToSleepMsec);                     exceptions.Add(ex);                     Thread.Sleep(retryInterval);                 }             }
Magic Number,Azure.DataCenterMigration,Retry,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\Retry.cs,RetryOperation,The following statement contains a magic number: for (int currentRetryCount = 0; currentRetryCount < baseParams.RetryCount; currentRetryCount++)             {                 try                 {                     if (preRetryAction != null && currentRetryCount > 0)                     {                         preRetryAction();                     }                     return action();                 }                 catch (Exception ex)                 {                     if (ignoreResourceNotFoundEx && (ex.GetType() == typeof(CloudException)))                     {                             //Return if error code is Resource Not Found                         if (string.Compare(((CloudException)ex).Error.ToString()' Constants.ResourceNotFound' StringComparison.CurrentCultureIgnoreCase) == 0)                         {                                                         return default(T);                         }                     }                     TimeSpan retryInterval = TimeSpan.Zero;                                       Logger.Warning(methodName' string.Format(ProgressResources.RetryWait' currentRetryCount)' ex' resourceType.ToString()' resourceName);                     Random r = new Random();                      // Calculate Exponential backoff with +/- 20% tolerance                     int increment = (int)((Math.Pow(2' currentRetryCount) - 1) * r.Next((int)(baseParams.DeltaBackOff.TotalMilliseconds * 0.8)'                         (int)(baseParams.DeltaBackOff.TotalMilliseconds * 1.2)));                      // Enforce backoff boundaries                     int timeToSleepMsec = (int)Math.Min(baseParams.MinBackOff.TotalMilliseconds + increment' baseParams.MaxBackOff.TotalMilliseconds);                     retryInterval = TimeSpan.FromMilliseconds(timeToSleepMsec);                     exceptions.Add(ex);                     Thread.Sleep(retryInterval);                 }             }
Duplicate Code,Azure.DataCenterMigration,ResourceImporter,C:\repos\persistentsystems_adcms\sourcecode\Azure.DataCenterMigration\ResourceImporter.cs,WaitForBlobCopy,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 39)' (65' 87))
