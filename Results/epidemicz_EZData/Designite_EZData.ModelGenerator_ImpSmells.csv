Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,Cyclomatic complexity of the method is 13
Magic Number,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,The following statement contains a magic number: while (!quit) {  	Console.WriteLine ("--------------------------");  	Console.WriteLine ("Enter a table name and press enter.");  	Console.WriteLine ("Enter q to quit.");  	Console.WriteLine ("--------------------------");  	Console.Write ("Table Name: ");  	string input = Console.ReadLine ();  	if (input == "q") {  		quit = true;  		break;  	}  	try {  		// attempt to locate this table  		using (var cmd = new OracleCommand ("select * from " + input' cn)) {  			using (var dr = cmd.ExecuteReader (System.Data.CommandBehavior.KeyInfo)) {  				// getting schema table to be able to find primary keys  				var schemaTable = dr.GetSchemaTable ();  				StringBuilder outputCSharp = new StringBuilder ();  				StringBuilder outputVB = new StringBuilder ();  				outputCSharp.Append ("using System;" + Environment.NewLine + Environment.NewLine);  				outputCSharp.Append ("class " + input.ToPascalCase () + " : EZData.DBTable" + Environment.NewLine);  				outputCSharp.Append ("{" + Environment.NewLine);  				outputVB.Append ("Imports System" + Environment.NewLine + Environment.NewLine);  				outputVB.Append ("Class " + input.ToPascalCase () + Environment.NewLine);  				outputVB.Append ("\tInherits EZData.DBTable" + Environment.NewLine + Environment.NewLine);  				// read table  				dr.Read ();  				// loop through each field and generate properties  				for (int i = 0; i < dr.FieldCount; i++) {  					// get property name  					string column = dr.GetName (i).ToLower ().ToPascalCase ();  					// skip rowid column' it is an artifact of the KeyInfo command behavior  					if (column == "Rowid")  						continue;  					// generates strings unless it is DateTime type  					string fieldType = dr.GetFieldType (i).Name;  					// check to see if this is marked as a key in the meta data  					bool key = (bool)schemaTable.Rows [i] [12];  					// if this is a key' mark with the PrimaryKey attribute  					if (key) {  						outputCSharp.Append ("\t[EZData.PrimaryKey]" + Environment.NewLine);  						outputVB.Append ("\t<EZData.PrimaryKey>");  					}  					outputCSharp.Append ("\tpublic " + fieldType + " " + column + " { get; set; }" + Environment.NewLine);  					outputVB.Append ("\tPublic Property " + column + " As " + fieldType + Environment.NewLine);  				}  				outputCSharp.Append ("}");  				outputVB.Append ("End Class");  				// dump file of output in this directory  				string fileNameCSharp = input.ToPascalCase () + ".cs";  				string fileNameVB = input.ToPascalCase () + ".vb";  				File.WriteAllText (input.ToPascalCase () + ".cs"' outputCSharp.ToString ());  				File.WriteAllText (input.ToPascalCase () + ".vb"' outputVB.ToString ());  				if (File.Exists (fileNameCSharp))  					Console.WriteLine ("Model " + fileNameCSharp + " has been generated.");  				if (File.Exists (fileNameVB))  					Console.WriteLine ("Model " + fileNameVB + " has been generated.");  			}  		}  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,The following statement contains a magic number: try {  	// attempt to locate this table  	using (var cmd = new OracleCommand ("select * from " + input' cn)) {  		using (var dr = cmd.ExecuteReader (System.Data.CommandBehavior.KeyInfo)) {  			// getting schema table to be able to find primary keys  			var schemaTable = dr.GetSchemaTable ();  			StringBuilder outputCSharp = new StringBuilder ();  			StringBuilder outputVB = new StringBuilder ();  			outputCSharp.Append ("using System;" + Environment.NewLine + Environment.NewLine);  			outputCSharp.Append ("class " + input.ToPascalCase () + " : EZData.DBTable" + Environment.NewLine);  			outputCSharp.Append ("{" + Environment.NewLine);  			outputVB.Append ("Imports System" + Environment.NewLine + Environment.NewLine);  			outputVB.Append ("Class " + input.ToPascalCase () + Environment.NewLine);  			outputVB.Append ("\tInherits EZData.DBTable" + Environment.NewLine + Environment.NewLine);  			// read table  			dr.Read ();  			// loop through each field and generate properties  			for (int i = 0; i < dr.FieldCount; i++) {  				// get property name  				string column = dr.GetName (i).ToLower ().ToPascalCase ();  				// skip rowid column' it is an artifact of the KeyInfo command behavior  				if (column == "Rowid")  					continue;  				// generates strings unless it is DateTime type  				string fieldType = dr.GetFieldType (i).Name;  				// check to see if this is marked as a key in the meta data  				bool key = (bool)schemaTable.Rows [i] [12];  				// if this is a key' mark with the PrimaryKey attribute  				if (key) {  					outputCSharp.Append ("\t[EZData.PrimaryKey]" + Environment.NewLine);  					outputVB.Append ("\t<EZData.PrimaryKey>");  				}  				outputCSharp.Append ("\tpublic " + fieldType + " " + column + " { get; set; }" + Environment.NewLine);  				outputVB.Append ("\tPublic Property " + column + " As " + fieldType + Environment.NewLine);  			}  			outputCSharp.Append ("}");  			outputVB.Append ("End Class");  			// dump file of output in this directory  			string fileNameCSharp = input.ToPascalCase () + ".cs";  			string fileNameVB = input.ToPascalCase () + ".vb";  			File.WriteAllText (input.ToPascalCase () + ".cs"' outputCSharp.ToString ());  			File.WriteAllText (input.ToPascalCase () + ".vb"' outputVB.ToString ());  			if (File.Exists (fileNameCSharp))  				Console.WriteLine ("Model " + fileNameCSharp + " has been generated.");  			if (File.Exists (fileNameVB))  				Console.WriteLine ("Model " + fileNameVB + " has been generated.");  		}  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,The following statement contains a magic number: using (var cmd = new OracleCommand ("select * from " + input' cn)) {  	using (var dr = cmd.ExecuteReader (System.Data.CommandBehavior.KeyInfo)) {  		// getting schema table to be able to find primary keys  		var schemaTable = dr.GetSchemaTable ();  		StringBuilder outputCSharp = new StringBuilder ();  		StringBuilder outputVB = new StringBuilder ();  		outputCSharp.Append ("using System;" + Environment.NewLine + Environment.NewLine);  		outputCSharp.Append ("class " + input.ToPascalCase () + " : EZData.DBTable" + Environment.NewLine);  		outputCSharp.Append ("{" + Environment.NewLine);  		outputVB.Append ("Imports System" + Environment.NewLine + Environment.NewLine);  		outputVB.Append ("Class " + input.ToPascalCase () + Environment.NewLine);  		outputVB.Append ("\tInherits EZData.DBTable" + Environment.NewLine + Environment.NewLine);  		// read table  		dr.Read ();  		// loop through each field and generate properties  		for (int i = 0; i < dr.FieldCount; i++) {  			// get property name  			string column = dr.GetName (i).ToLower ().ToPascalCase ();  			// skip rowid column' it is an artifact of the KeyInfo command behavior  			if (column == "Rowid")  				continue;  			// generates strings unless it is DateTime type  			string fieldType = dr.GetFieldType (i).Name;  			// check to see if this is marked as a key in the meta data  			bool key = (bool)schemaTable.Rows [i] [12];  			// if this is a key' mark with the PrimaryKey attribute  			if (key) {  				outputCSharp.Append ("\t[EZData.PrimaryKey]" + Environment.NewLine);  				outputVB.Append ("\t<EZData.PrimaryKey>");  			}  			outputCSharp.Append ("\tpublic " + fieldType + " " + column + " { get; set; }" + Environment.NewLine);  			outputVB.Append ("\tPublic Property " + column + " As " + fieldType + Environment.NewLine);  		}  		outputCSharp.Append ("}");  		outputVB.Append ("End Class");  		// dump file of output in this directory  		string fileNameCSharp = input.ToPascalCase () + ".cs";  		string fileNameVB = input.ToPascalCase () + ".vb";  		File.WriteAllText (input.ToPascalCase () + ".cs"' outputCSharp.ToString ());  		File.WriteAllText (input.ToPascalCase () + ".vb"' outputVB.ToString ());  		if (File.Exists (fileNameCSharp))  			Console.WriteLine ("Model " + fileNameCSharp + " has been generated.");  		if (File.Exists (fileNameVB))  			Console.WriteLine ("Model " + fileNameVB + " has been generated.");  	}  }  
Magic Number,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,The following statement contains a magic number: using (var dr = cmd.ExecuteReader (System.Data.CommandBehavior.KeyInfo)) {  	// getting schema table to be able to find primary keys  	var schemaTable = dr.GetSchemaTable ();  	StringBuilder outputCSharp = new StringBuilder ();  	StringBuilder outputVB = new StringBuilder ();  	outputCSharp.Append ("using System;" + Environment.NewLine + Environment.NewLine);  	outputCSharp.Append ("class " + input.ToPascalCase () + " : EZData.DBTable" + Environment.NewLine);  	outputCSharp.Append ("{" + Environment.NewLine);  	outputVB.Append ("Imports System" + Environment.NewLine + Environment.NewLine);  	outputVB.Append ("Class " + input.ToPascalCase () + Environment.NewLine);  	outputVB.Append ("\tInherits EZData.DBTable" + Environment.NewLine + Environment.NewLine);  	// read table  	dr.Read ();  	// loop through each field and generate properties  	for (int i = 0; i < dr.FieldCount; i++) {  		// get property name  		string column = dr.GetName (i).ToLower ().ToPascalCase ();  		// skip rowid column' it is an artifact of the KeyInfo command behavior  		if (column == "Rowid")  			continue;  		// generates strings unless it is DateTime type  		string fieldType = dr.GetFieldType (i).Name;  		// check to see if this is marked as a key in the meta data  		bool key = (bool)schemaTable.Rows [i] [12];  		// if this is a key' mark with the PrimaryKey attribute  		if (key) {  			outputCSharp.Append ("\t[EZData.PrimaryKey]" + Environment.NewLine);  			outputVB.Append ("\t<EZData.PrimaryKey>");  		}  		outputCSharp.Append ("\tpublic " + fieldType + " " + column + " { get; set; }" + Environment.NewLine);  		outputVB.Append ("\tPublic Property " + column + " As " + fieldType + Environment.NewLine);  	}  	outputCSharp.Append ("}");  	outputVB.Append ("End Class");  	// dump file of output in this directory  	string fileNameCSharp = input.ToPascalCase () + ".cs";  	string fileNameVB = input.ToPascalCase () + ".vb";  	File.WriteAllText (input.ToPascalCase () + ".cs"' outputCSharp.ToString ());  	File.WriteAllText (input.ToPascalCase () + ".vb"' outputVB.ToString ());  	if (File.Exists (fileNameCSharp))  		Console.WriteLine ("Model " + fileNameCSharp + " has been generated.");  	if (File.Exists (fileNameVB))  		Console.WriteLine ("Model " + fileNameVB + " has been generated.");  }  
Magic Number,EZData.ModelGenerator,Program,C:\repos\epidemicz_EZData\Source\EZData.ModelGenerator\Program.cs,Generate,The following statement contains a magic number: for (int i = 0; i < dr.FieldCount; i++) {  	// get property name  	string column = dr.GetName (i).ToLower ().ToPascalCase ();  	// skip rowid column' it is an artifact of the KeyInfo command behavior  	if (column == "Rowid")  		continue;  	// generates strings unless it is DateTime type  	string fieldType = dr.GetFieldType (i).Name;  	// check to see if this is marked as a key in the meta data  	bool key = (bool)schemaTable.Rows [i] [12];  	// if this is a key' mark with the PrimaryKey attribute  	if (key) {  		outputCSharp.Append ("\t[EZData.PrimaryKey]" + Environment.NewLine);  		outputVB.Append ("\t<EZData.PrimaryKey>");  	}  	outputCSharp.Append ("\tpublic " + fieldType + " " + column + " { get; set; }" + Environment.NewLine);  	outputVB.Append ("\tPublic Property " + column + " As " + fieldType + Environment.NewLine);  }  
