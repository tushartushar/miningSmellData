Implementation smell,Namespace,Class,File,Method,Description
Long Method,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The method has 108 lines of code.
Complex Method,SisoDb.Serialization,CsvSerializer<T>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\CsvSerializer.cs,GetWriteFn,Cyclomatic complexity of the method is 11
Complex Method,SisoDb.Serialization,CsvDictionaryWriter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\CsvWriter.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,SisoDb.Serialization,CsvWriter<T>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\CsvWriter.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,SisoDb.Serialization,JsvFormatter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsvFormatter.cs,Format,Cyclomatic complexity of the method is 9
Complex Method,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,ExtractContents,Cyclomatic complexity of the method is 8
Complex Method,SisoDb.Serialization.Common,DeserializeBuiltin<T>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeBuiltin.cs,GetParseFn,Cyclomatic complexity of the method is 35
Complex Method,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,GetParseMethod,Cyclomatic complexity of the method is 8
Complex Method,SisoDb.Serialization.Common,DeserializeSpecializedCollections<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeSpecializedCollections.cs,GetParseFn,Cyclomatic complexity of the method is 8
Complex Method,SisoDb.Serialization.Common,DeserializeType<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeType.cs,ParsePrimitive,Cyclomatic complexity of the method is 15
Complex Method,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,Cyclomatic complexity of the method is 29
Complex Method,SisoDb.Serialization.Common,DeserializeTypeRefJsv,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJsv.cs,StringToType,Cyclomatic complexity of the method is 15
Complex Method,SisoDb.Serialization.Common,JsReader<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\JsReader.cs,GetCoreParseFn,Cyclomatic complexity of the method is 22
Complex Method,SisoDb.Serialization.Common,JsWriter<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\JsWriter.cs,GetValueTypeToStringMethod,Cyclomatic complexity of the method is 22
Complex Method,SisoDb.Serialization.Common,JsWriter<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\JsWriter.cs,GetCoreWriteFn,Cyclomatic complexity of the method is 16
Complex Method,SisoDb.Serialization.Common,WriteLists<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteLists.cs,GetWriteFn,Cyclomatic complexity of the method is 10
Complex Method,SisoDb.Serialization.Common,WriteType<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteType.cs,WriteProperties,Cyclomatic complexity of the method is 12
Complex Method,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnEscapeJsonString,Cyclomatic complexity of the method is 11
Complex Method,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatValue,Cyclomatic complexity of the method is 8
Complex Method,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,Cyclomatic complexity of the method is 10
Long Parameter List,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,ParseDictionaryType,The method has 5 parameters. Parameters: value' createMapType' argTypes' keyParseFn' valueParseFn
Long Parameter List,SisoDb.Serialization.Common,TypePropertyWriter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteType.cs,TypePropertyWriter,The method has 6 parameters. Parameters: propertyName' propertyNameCLSFriendly' propertyNameLowercaseUnderscore' getterFn' writeFn' defaultValue
Long Parameter List,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,WriteGetter,The method has 5 parameters. Parameters: il' type' props' fields' isStatic
Long Parameter List,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,WriteSetter,The method has 5 parameters. Parameters: il' type' props' fields' isStatic
Long Identifier,SisoDb.Serialization,CsvConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\CsvConfig.cs,,The length of the parameter DefaultEscapedItemDelimiterString is 33.
Long Identifier,SisoDb.Serialization,JsConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsConfig.cs,,The length of the parameter tsConvertObjectTypesIntoStringDictionary is 40.
Long Identifier,SisoDb.Serialization,JsConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsConfig.cs,,The length of the parameter sConvertObjectTypesIntoStringDictionary is 39.
Long Identifier,SisoDb.Serialization,JsConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsConfig.cs,,The length of the parameter tsTryToParsePrimitiveTypeValues is 31.
Long Identifier,SisoDb.Serialization,JsConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsConfig.cs,,The length of the parameter sTryToParsePrimitiveTypeValues is 30.
Long Identifier,SisoDb.Serialization,JsConfig,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsConfig.cs,,The length of the parameter tsEmitLowercaseUnderscoreNames is 30.
Long Identifier,SisoDb.Serialization,TranslateListWithElements,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\TranslateListWithElements.cs,,The length of the parameter TranslateConvertibleICollectionCache is 36.
Long Identifier,SisoDb.Serialization.Common,DateTimeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DateTimeSerializer.cs,,The length of the parameter DefaultDateTimeFormatWithFraction is 33.
Long Identifier,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,ParseDictionary,The length of the parameter tryToParseItemsAsPrimitiveTypes is 31.
Long Identifier,SisoDb.Serialization.Common,DeserializeListWithElements<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeListWithElements.cs,ParseGenericList,The length of the parameter tryToParseItemsAsPrimitiveTypes is 31.
Long Identifier,SisoDb.Serialization.Common,TypePropertyWriter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteType.cs,TypePropertyWriter,The length of the parameter propertyNameLowercaseUnderscore is 31.
Long Identifier,SisoDb.Serialization.Common,TypePropertyWriter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteType.cs,,The length of the parameter propertyNameLowercaseUnderscore is 31.
Long Statement,SisoDb.Serialization,AssemblyUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\AssemblyUtils.cs,MainInterface,The length of the statement  "				var interfaceType = t.GetInterfaces().FirstOrDefault(i => !t.GetInterfaces().Any(i2 => i2.GetInterfaces().Contains(i))); " is 120.
Long Statement,SisoDb.Serialization,DateTimeExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\DateTimeExtensions.cs,ToStableUniversalTime,The length of the statement  "			// Silverlight 3' 4 and 5 all work ok with DateTime.ToUniversalTime' but have no TimeZoneInfo.ConverTimeToUtc implementation. " is 125.
Long Statement,SisoDb.Serialization,DynamicProxy,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\DynamicProxy.cs,BindProperty,The length of the statement  "			PropertyBuilder propertyBuilder = typeBuilder.DefineProperty(propertyName' PropertyAttributes.None' propertyType' null); " is 120.
Long Statement,SisoDb.Serialization,ReflectionExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\ReflectionExtensions.cs,GetConstructorMethodToCache,The length of the statement  "                var dm = new System.Reflection.Emit.DynamicMethod("MyCtor"' type' Type.EmptyTypes' typeof(ReflectionExtensions).Module' true); " is 126.
Long Statement,SisoDb.Serialization,ReflectionExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\ReflectionExtensions.cs,GetSerializableProperties,The length of the statement  "            return publicReadableProperties.Where(prop => !prop.GetCustomAttributes(false).Any(attr => attr.GetType().Name == IgnoreDataMember)).ToArray(); " is 143.
Long Statement,SisoDb.Serialization,TranslateListWithElements,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\TranslateListWithElements.cs,TranslateToConvertibleGenericICollectionCache,The length of the statement  "            if (TranslateConvertibleICollectionCache.TryGetValue(typeKey' out translateToFn)) return translateToFn(from' toInstanceOfType); " is 127.
Long Statement,SisoDb.Serialization.Common,DateTimeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DateTimeSerializer.cs,ParseWcfJsonDateOffset,The length of the statement  "			var timeString = (suffixPos < 0) ? wcfJsonDate : wcfJsonDate.Substring(WcfJsonPrefix.Length' suffixPos - WcfJsonPrefix.Length); " is 127.
Long Statement,SisoDb.Serialization.Common,DateTimeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DateTimeSerializer.cs,ParseWcfJsonDateOffset,The length of the statement  "				// REVIEW: DCJS shoves offset in a separate field 'offsetMinutes'' we have the offset in the format' so shouldn't we use it? " is 124.
Long Statement,SisoDb.Serialization.Common,DeserializeCollection<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeCollection.cs,ParseCollectionType,The length of the statement  "            var mi = typeof(DeserializeCollection<TSerializer>).GetMethod("ParseCollection"' BindingFlags.Static | BindingFlags.Public); " is 124.
Long Statement,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The length of the statement  "				Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"' " is 141.
Long Statement,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The length of the statement  "					JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50)); " is 144.
Long Statement,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,ParseDictionaryType,The length of the statement  "            var mi = typeof(DeserializeDictionary<TSerializer>).GetMethod("ParseDictionary"' BindingFlags.Static | BindingFlags.Public); " is 124.
Long Statement,SisoDb.Serialization.Common,DeserializeListWithElements<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeListWithElements.cs,ParseGenericList,The length of the statement  "			//but not sure how you'd like to go about caching constructors with parameters -- I would probably build a NewExpression' .Compile to a LambdaExpression and cache " is 162.
Long Statement,SisoDb.Serialization.Common,DeserializeList<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeListWithElements.cs,GetParseFn,The length of the statement  "				var parseFn = DeserializeListWithElements<TSerializer>.GetListTypeParseFn(createListType' elementType' supportedTypeParseMethod); " is 129.
Long Statement,SisoDb.Serialization.Common,DeserializeType<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeType.cs,ObjectStringToType,The length of the statement  "                    var dynamicMatch = DeserializeDictionary<TSerializer>.ParseDictionary<string' object>(strType' null' Serializer.UnescapeString' Serializer.UnescapeString); " is 155.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRef,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRef.cs,GetSerializationException,The length of the statement  "	        var serializationException = new SerializationException(String.Format("Failed to set property '{0}' with '{1}'"' propertyName' propertyValueString)' e); " is 152.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "			for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "				for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "				var propType = possibleTypeInfo && propertyValueStr[0] == '_' ? TypeAccessor.ExtractType(Serializer' propertyValueStr) : null; " is 126.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "						for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "								for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        if (JsConfig.ThrowOnDeserializationError) throw DeserializeTypeRef.GetSerializationException(propertyName' propertyValueStr' propType' e); " is 138.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "						else Tracer.Instance.WriteWarning("WARN: failed to set dynamic property {0} with: {1}"' propertyName' propertyValueStr); " is 120.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        if (JsConfig.ThrowOnDeserializationError) throw DeserializeTypeRef.GetSerializationException(propertyName' propertyValueStr' typeAccessor.PropertyType' e); " is 155.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "				for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJson,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "						for (; index < strType.Length; index++) { var c = strType[index]; if (c >= JsonTypeSerializer.WhiteSpaceFlags.Length || !JsonTypeSerializer.WhiteSpaceFlags[c]) break; } //Whitespace inline " is 188.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJsv,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "				var propType = possibleTypeInfo && propertyValueStr[0] == '_' ? TypeAccessor.ExtractType(Serializer' propertyValueStr) : null; " is 126.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJsv,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        if (JsConfig.ThrowOnDeserializationError) throw DeserializeTypeRef.GetSerializationException(propertyName' propertyValueStr' propType' e); " is 138.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJsv,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "						else Tracer.Instance.WriteWarning("WARN: failed to set dynamic property {0} with: {1}"' propertyName' propertyValueStr); " is 120.
Long Statement,SisoDb.Serialization.Common,DeserializeTypeRefJsv,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        if (JsConfig.ThrowOnDeserializationError) throw DeserializeTypeRef.GetSerializationException(propertyName' propertyValueStr' propType' e); " is 138.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,IsEmptyMap,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,ParseJsonString,The length of the statement  "            for (; index < json.Length; index++) { var ch = json[index]; if (ch >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[ch]) break; } //Whitespace inline " is 147.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatMapStartChar,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatMapKeySeperator,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatItemSeperatorOrMapEndChar,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatItemSeperatorOrMapEndChar,The length of the statement  "                for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatWhitespace,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatValue,The length of the statement  "            for (; i < value.Length; i++) { var c = value[i]; if (c >= WhiteSpaceFlags.Length || !WhiteSpaceFlags[c]) break; } //Whitespace inline " is 134.
Long Statement,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,CreateNew,The length of the statement  "                DynamicMethod dynGetter = new DynamicMethod(type.FullName + "_get"' typeof(object)' new Type[] { typeof(object)' typeof(string) }' type' true)' " is 143.
Long Statement,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,CreateNew,The length of the statement  "                              dynSetter = new DynamicMethod(type.FullName + "_set"' null' new Type[] { typeof(object)' typeof(string)' typeof(object) }' type' true); " is 135.
Long Statement,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,CreateNew,The length of the statement  "            MethodBuilder body = tb.DefineMethod(baseGetter.Name' baseGetter.Attributes & ~MethodAttributes.Abstract' typeof(object)' new Type[] {typeof(object)' typeof(string)}); " is 167.
Long Statement,SisoDb.Serialization.Marc,TypeAccessor,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Marc\TypeAccessor.cs,CreateNew,The length of the statement  "            body = tb.DefineMethod(baseSetter.Name' baseSetter.Attributes & ~MethodAttributes.Abstract' null' new Type[] { typeof(object)' typeof(string)' typeof(object) }); " is 161.
Complex Conditional,SisoDb.Serialization,JsonObject,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\JsonObject.cs,WriteValue,The conditional expression  "(firstChar == JsWriter.MapStartChar && lastChar == JsWriter.MapEndChar)                      || (firstChar == JsWriter.ListStartChar && lastChar == JsWriter.ListEndChar)                       || JsonUtils.True == strValue                      || JsonUtils.False == strValue                      || NumberRegEx.IsMatch(strValue)"  is complex.
Complex Conditional,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The conditional expression  "charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46"  is complex.
Complex Conditional,SisoDb.Serialization.Common,WriteType<T;TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteType.cs,WriteProperties,The conditional expression  "(propertyValue == null  					     || (propertyWriter.DefaultValue != null && propertyWriter.DefaultValue.Equals(propertyValue)))                          && !Serializer.IncludeNullValues"  is complex.
Complex Conditional,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatValue,The conditional expression  "valueChar == JsWriter.ItemSeperator                      || valueChar == JsWriter.MapEndChar                      //If it doesn't have quotes it's either a keyword or number so also has a ws boundary                      || (valueChar < WhiteSpaceFlags.Length && WhiteSpaceFlags[valueChar])"  is complex.
Magic Number,SisoDb.Serialization,DateTimeExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\DateTimeExtensions.cs,FromTimeOffsetString,The following statement contains a magic number: if (!offsetString.Contains(":"))  				offsetString = offsetString.Insert(offsetString.Length - 2' ":");
Magic Number,SisoDb.Serialization,DateTimeExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\DateTimeExtensions.cs,LastMonday,The following statement contains a magic number: var modayOfWeekBefore = from.Date.AddDays(-(int)from.DayOfWeek - 6);
Magic Number,SisoDb.Serialization,Env,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Env.cs,Env,The following statement contains a magic number: IsUnix = (platform == 4) || (platform == 6) || (platform == 128);
Magic Number,SisoDb.Serialization,Env,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Env.cs,Env,The following statement contains a magic number: IsUnix = (platform == 4) || (platform == 6) || (platform == 128);
Magic Number,SisoDb.Serialization,Env,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Env.cs,Env,The following statement contains a magic number: IsUnix = (platform == 4) || (platform == 6) || (platform == 128);
Magic Number,SisoDb.Serialization,StreamExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StreamExtensions.cs,WriteTo,The following statement contains a magic number: var data = new byte[4096];
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,DecodeJsv,The following statement contains a magic number: const int endingQuotePos = 2;
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlEncode,The following statement contains a magic number: foreach (var charCode in Encoding.UTF8.GetBytes(text))              {                    if (                      charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46     // '-.                      )                  {                      sb.Append((char)charCode);                  }                  else                  {                      sb.Append('%' + charCode.ToString("x2"));                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text[i];                  if (c == '+')                  {                      bytes.Add(32);                  }                  else if (c == '%')                  {                      var hexNo = Convert.ToByte(text.Substring(i + 1' 2)' 16);                      bytes.Add(hexNo);                      i += 2;                  }                  else                  {                      bytes.Add((byte)c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text[i];                  if (c == '+')                  {                      bytes.Add(32);                  }                  else if (c == '%')                  {                      var hexNo = Convert.ToByte(text.Substring(i + 1' 2)' 16);                      bytes.Add(hexNo);                      i += 2;                  }                  else                  {                      bytes.Add((byte)c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text[i];                  if (c == '+')                  {                      bytes.Add(32);                  }                  else if (c == '%')                  {                      var hexNo = Convert.ToByte(text.Substring(i + 1' 2)' 16);                      bytes.Add(hexNo);                      i += 2;                  }                  else                  {                      bytes.Add((byte)c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text[i];                  if (c == '+')                  {                      bytes.Add(32);                  }                  else if (c == '%')                  {                      var hexNo = Convert.ToByte(text.Substring(i + 1' 2)' 16);                      bytes.Add(hexNo);                      i += 2;                  }                  else                  {                      bytes.Add((byte)c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,HexUnescape,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text.Substring(i' 1);                  if (c == "%")                  {                      var hexNo = Convert.ToInt32(text.Substring(i + 1' 2)' 16);                      sb.Append((char)hexNo);                      i += 2;                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,HexUnescape,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text.Substring(i' 1);                  if (c == "%")                  {                      var hexNo = Convert.ToInt32(text.Substring(i + 1' 2)' 16);                      sb.Append((char)hexNo);                      i += 2;                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,HexUnescape,The following statement contains a magic number: for (var i = 0; i < textLength; i++)              {                  var c = text.Substring(i' 1);                  if (c == "%")                  {                      var hexNo = Convert.ToInt32(text.Substring(i + 1' 2)' 16);                      sb.Append((char)hexNo);                      i += 2;                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,ToRot13,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)              {                  var number = (int)array[i];                    if (number >= 'a' && number <= 'z')                      number += (number > 'm') ? -13 : 13;                    else if (number >= 'A' && number <= 'Z')                      number += (number > 'M') ? -13 : 13;                    array[i] = (char)number;              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,ToRot13,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)              {                  var number = (int)array[i];                    if (number >= 'a' && number <= 'z')                      number += (number > 'm') ? -13 : 13;                    else if (number >= 'A' && number <= 'Z')                      number += (number > 'M') ? -13 : 13;                    array[i] = (char)number;              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,ToRot13,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)              {                  var number = (int)array[i];                    if (number >= 'a' && number <= 'z')                      number += (number > 'm') ? -13 : 13;                    else if (number >= 'A' && number <= 'Z')                      number += (number > 'M') ? -13 : 13;                    array[i] = (char)number;              }
Magic Number,SisoDb.Serialization,StringExtensions,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\StringExtensions.cs,ToRot13,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)              {                  var number = (int)array[i];                    if (number >= 'a' && number <= 'z')                      number += (number > 'm') ? -13 : 13;                    else if (number >= 'A' && number <= 'Z')                      number += (number > 'M') ? -13 : 13;                    array[i] = (char)number;              }
Magic Number,SisoDb.Serialization,ConvertibleTypeKey,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\TranslateListWithElements.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((ToInstanceType != null ? ToInstanceType.GetHashCode() : 0) * 397)  					^ (FromElemenetType != null ? FromElemenetType.GetHashCode() : 0);  			}
Magic Number,SisoDb.Serialization.Common,DateTimeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DateTimeSerializer.cs,ParseDateTimeOffset,The following statement contains a magic number: if (dateTimeOffsetStr.LastIndexOfAny(TimeZoneChars) < 10)              {                  if (!dateTimeOffsetStr.EndsWith("Z")) dateTimeOffsetStr += "Z";  #if __MonoCS__                  // Without that Mono uses a Local timezone))                  dateTimeOffsetStr = dateTimeOffsetStr.Substring(0' dateTimeOffsetStr.Length - 1) + "+00:00";   #endif              }
Magic Number,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The following statement contains a magic number: if (!Serializer.EatMapStartChar(value' ref index))  			{  				//Don't throw ex because some KeyValueDataContractDeserializer don't have '{}'  				Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'  					JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));  			}
Magic Number,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The following statement contains a magic number: if (!Serializer.EatMapStartChar(value' ref index))  			{  				//Don't throw ex because some KeyValueDataContractDeserializer don't have '{}'  				Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'  					JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));  			}
Magic Number,SisoDb.Serialization.Common,DeserializeDictionary<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeDictionary.cs,GetTypesKey,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,SisoDb.Serialization.Common,DeserializeListWithElements<TSerializer>,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeListWithElements.cs,StripList,The following statement contains a magic number: const int endQuotePos = 2;
Magic Number,SisoDb.Serialization.Common,DeserializeTypeRef,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRef.cs,CreateSerializationError,The following statement contains a magic number: return new SerializationException(String.Format(  			"Type definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'  			JsWriter.MapStartChar' type.Name' strType.Substring(0' strType.Length < 50 ? strType.Length : 50)));
Magic Number,SisoDb.Serialization.Common,DeserializeTypeRef,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\DeserializeTypeRef.cs,CreateSerializationError,The following statement contains a magic number: return new SerializationException(String.Format(  			"Type definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'  			JsWriter.MapStartChar' type.Name' strType.Substring(0' strType.Length < 50 ? strType.Length : 50)));
Magic Number,SisoDb.Serialization.Common,MapKey,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Common\WriteDictionary.cs,GetHashCode,The following statement contains a magic number: unchecked  				{  					return ((KeyType != null ? KeyType.GetHashCode() : 0) * 397) ^ (ValueType != null ? ValueType.GetHashCode() : 0);  				}
Magic Number,SisoDb.Serialization.Controller,PathInfo,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Controller\PathInfo.cs,Parse,The following statement contains a magic number: var controllerName = actionParts.Length == 2  									? actionParts[0]  									: null;
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: if (json[index] != JsonUtils.QuoteChar)                  throw new Exception("Invalid unquoted string starting with: " + json.SafeSubstring(50));
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: do              {                  char c = json[index];                  if (c == JsonUtils.QuoteChar) break;                  if (c != JsonUtils.EscapeChar) continue;                  c = json[index++];                  if (c == 'u')                  {                      index += 4;                  }              } while (index++ < jsonLength);
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnescapeSafeString,The following statement contains a magic number: return value[0] == JsonUtils.QuoteChar && value[value.Length - 1] == JsonUtils.QuoteChar                  ? value.Substring(1' value.Length - 2)                  : value;
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnEscapeJsonString,The following statement contains a magic number: while (true)              {                  if (index == jsonLength) break;                    char c = json[index++];                  if (c == JsonUtils.QuoteChar) break;                    if (c == JsonUtils.EscapeChar)                  {                      if (index == jsonLength)                      {                          break;                      }                      c = json[index++];                      switch (c)                      {                          case '"':                              sb.Append('"');                              break;                          case '\\':                              sb.Append('\\');                              break;                          case '/':                              sb.Append('/');                              break;                          case 'b':                              sb.Append('\b');                              break;                          case 'f':                              sb.Append('\f');                              break;                          case 'n':                              sb.Append('\n');                              break;                          case 'r':                              sb.Append('\r');                              break;                          case 't':                              sb.Append('\t');                              break;                          case 'u':                              var remainingLength = jsonLength - index;                              if (remainingLength >= 4)                              {                                  var unicodeString = json.Substring(index' 4);                                  var unicodeIntVal = UInt32.Parse(unicodeString' NumberStyles.HexNumber);                                  sb.Append(ConvertFromUtf32((int) unicodeIntVal));                                  index += 4;                              }                              else                              {                                  break;                              }                              break;                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnEscapeJsonString,The following statement contains a magic number: while (true)              {                  if (index == jsonLength) break;                    char c = json[index++];                  if (c == JsonUtils.QuoteChar) break;                    if (c == JsonUtils.EscapeChar)                  {                      if (index == jsonLength)                      {                          break;                      }                      c = json[index++];                      switch (c)                      {                          case '"':                              sb.Append('"');                              break;                          case '\\':                              sb.Append('\\');                              break;                          case '/':                              sb.Append('/');                              break;                          case 'b':                              sb.Append('\b');                              break;                          case 'f':                              sb.Append('\f');                              break;                          case 'n':                              sb.Append('\n');                              break;                          case 'r':                              sb.Append('\r');                              break;                          case 't':                              sb.Append('\t');                              break;                          case 'u':                              var remainingLength = jsonLength - index;                              if (remainingLength >= 4)                              {                                  var unicodeString = json.Substring(index' 4);                                  var unicodeIntVal = UInt32.Parse(unicodeString' NumberStyles.HexNumber);                                  sb.Append(ConvertFromUtf32((int) unicodeIntVal));                                  index += 4;                              }                              else                              {                                  break;                              }                              break;                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnEscapeJsonString,The following statement contains a magic number: while (true)              {                  if (index == jsonLength) break;                    char c = json[index++];                  if (c == JsonUtils.QuoteChar) break;                    if (c == JsonUtils.EscapeChar)                  {                      if (index == jsonLength)                      {                          break;                      }                      c = json[index++];                      switch (c)                      {                          case '"':                              sb.Append('"');                              break;                          case '\\':                              sb.Append('\\');                              break;                          case '/':                              sb.Append('/');                              break;                          case 'b':                              sb.Append('\b');                              break;                          case 'f':                              sb.Append('\f');                              break;                          case 'n':                              sb.Append('\n');                              break;                          case 'r':                              sb.Append('\r');                              break;                          case 't':                              sb.Append('\t');                              break;                          case 'u':                              var remainingLength = jsonLength - index;                              if (remainingLength >= 4)                              {                                  var unicodeString = json.Substring(index' 4);                                  var unicodeIntVal = UInt32.Parse(unicodeString' NumberStyles.HexNumber);                                  sb.Append(ConvertFromUtf32((int) unicodeIntVal));                                  index += 4;                              }                              else                              {                                  break;                              }                              break;                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new[] {(char) ((utf32 >> 10) + 0xD800)'                                  (char) (utf32 % 0x0400 + 0xDC00)});
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,WriteString,The following statement contains a magic number: var hexSeqBuffer = new char[4];
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,WriteString,The following statement contains a magic number: for (var i = 0; i < len; i++)  			{  				switch (value[i])  				{  					case '\n':  						writer.Write("\\n");  						continue;    					case '\r':  						writer.Write("\\r");  						continue;    					case '\t':  						writer.Write("\\t");  						continue;    					case '"':  					case '\\':  						writer.Write('\\');  						writer.Write(value[i]);  						continue;    					case '\f':  						writer.Write("\\f");  						continue;    					case '\b':  						writer.Write("\\b");  						continue;  				}    				//Is printable char?  				if (value[i] >= 32 && value[i] <= 126)  				{  					writer.Write(value[i]);  					continue;  				}    				var isValidSequence = value[i] < 0xD800 || value[i] > 0xDFFF;  				if (isValidSequence)  				{  					// Default' turn into a \uXXXX sequence  					IntToHex(value[i]' hexSeqBuffer);  					writer.Write("\\u");  					writer.Write(hexSeqBuffer);  				}  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,WriteString,The following statement contains a magic number: for (var i = 0; i < len; i++)  			{  				switch (value[i])  				{  					case '\n':  						writer.Write("\\n");  						continue;    					case '\r':  						writer.Write("\\r");  						continue;    					case '\t':  						writer.Write("\\t");  						continue;    					case '"':  					case '\\':  						writer.Write('\\');  						writer.Write(value[i]);  						continue;    					case '\f':  						writer.Write("\\f");  						continue;    					case '\b':  						writer.Write("\\b");  						continue;  				}    				//Is printable char?  				if (value[i] >= 32 && value[i] <= 126)  				{  					writer.Write(value[i]);  					continue;  				}    				var isValidSequence = value[i] < 0xD800 || value[i] > 0xDFFF;  				if (isValidSequence)  				{  					// Default' turn into a \uXXXX sequence  					IntToHex(value[i]' hexSeqBuffer);  					writer.Write("\\u");  					writer.Write(hexSeqBuffer);  				}  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: for (var i = 0; i < 4; i++)  			{  				var num = intValue % 16;    				if (num < 10)  					hex[3 - i] = (char)('0' + num);  				else  					hex[3 - i] = (char)('A' + (num - 10));    				intValue >>= 4;  			}
Magic Number,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: int exponent = (int)((bits >> 52) & 0x7ffL);
Magic Number,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent == 0)  			{  				exponent++;  			}  			// Normal numbers; leave exponent as it is but add extra  			// bit to the front of the mantissa  			else  			{  				mantissa = mantissa | (1L << 52);  			}
Magic Number,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: exponent -= 1075;
Magic Number,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent < 0)  			{  				for (int i = 0; i < -exponent; i++)  					ad.MultiplyBy(5);  				ad.Shift(-exponent);  			}  			// Otherwise' we need to repeatedly multiply by 2  			else  			{  				for (int i = 0; i < exponent; i++)  					ad.MultiplyBy(2);  			}
Magic Number,SisoDb.Serialization.Support,DoubleConverter,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent < 0)  			{  				for (int i = 0; i < -exponent; i++)  					ad.MultiplyBy(5);  				ad.Shift(-exponent);  			}  			// Otherwise' we need to repeatedly multiply by 2  			else  			{  				for (int i = 0; i < exponent; i++)  					ad.MultiplyBy(2);  			}
Magic Number,SisoDb.Serialization.Support,ArbitraryDecimal,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,MultiplyBy,The following statement contains a magic number: for (int i = digits.Length - 1; i >= 0; i--)  				{  					int resultDigit = digits[i] * amount + result[i + 1];  					result[i] = (byte)(resultDigit / 10);  					result[i + 1] = (byte)(resultDigit % 10);  				}
Magic Number,SisoDb.Serialization.Support,ArbitraryDecimal,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\DoubleConverter.cs,MultiplyBy,The following statement contains a magic number: for (int i = digits.Length - 1; i >= 0; i--)  				{  					int resultDigit = digits[i] * amount + result[i + 1];  					result[i] = (byte)(resultDigit / 10);  					result[i + 1] = (byte)(resultDigit % 10);  				}
Magic Number,SisoDb.Serialization.Support,TypePair,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Support\TypePair.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((Args1 != null ? Args1.GetHashCode() : 0)*397) ^ (Arg2 != null ? Arg2.GetHashCode() : 0);  			}
Missing Default,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,UnEscapeJsonString,The following switch statement is missing a default case: switch (c)                      {                          case '"':                              sb.Append('"');                              break;                          case '\\':                              sb.Append('\\');                              break;                          case '/':                              sb.Append('/');                              break;                          case 'b':                              sb.Append('\b');                              break;                          case 'f':                              sb.Append('\f');                              break;                          case 'n':                              sb.Append('\n');                              break;                          case 'r':                              sb.Append('\r');                              break;                          case 't':                              sb.Append('\t');                              break;                          case 'u':                              var remainingLength = jsonLength - index;                              if (remainingLength >= 4)                              {                                  var unicodeString = json.Substring(index' 4);                                  var unicodeIntVal = UInt32.Parse(unicodeString' NumberStyles.HexNumber);                                  sb.Append(ConvertFromUtf32((int) unicodeIntVal));                                  index += 4;                              }                              else                              {                                  break;                              }                              break;                      }
Missing Default,SisoDb.Serialization.Json,JsonTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonTypeSerializer.cs,EatValue,The following switch statement is missing a default case: switch (valueChar)              {                  //If we are at the end' return.                  case JsWriter.ItemSeperator:                  case JsWriter.MapEndChar:                      return null;                    //Is Within Quotes' i.e. "..."                  case JsWriter.QuoteChar:                      return ParseString(value' ref i);                    //Is Type/Map' i.e. {...}                  case JsWriter.MapStartChar:                      while (++i < valueLength && endsToEat > 0)                      {                          valueChar = value[i];                            if (valueChar == JsonUtils.EscapeChar)                          {                              i++;                              continue;                          }                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.MapStartChar)                              endsToEat++;                            if (valueChar == JsWriter.MapEndChar)                              endsToEat--;                      }                      return value.Substring(tokenStartPos' i - tokenStartPos);                    //Is List' i.e. [...]                  case JsWriter.ListStartChar:                      while (++i < valueLength && endsToEat > 0)                      {                          valueChar = value[i];                            if (valueChar == JsonUtils.EscapeChar)                          {                              i++;                              continue;                          }                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.ListStartChar)                              endsToEat++;                            if (valueChar == JsWriter.ListEndChar)                              endsToEat--;                      }                      return value.Substring(tokenStartPos' i - tokenStartPos);              }
Missing Default,SisoDb.Serialization.Json,JsonUtils,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Json\JsonUtils.cs,WriteString,The following switch statement is missing a default case: switch (value[i])  				{  					case '\n':  						writer.Write("\\n");  						continue;    					case '\r':  						writer.Write("\\r");  						continue;    					case '\t':  						writer.Write("\\t");  						continue;    					case '"':  					case '\\':  						writer.Write('\\');  						writer.Write(value[i]);  						continue;    					case '\f':  						writer.Write("\\f");  						continue;    					case '\b':  						writer.Write("\\b");  						continue;  				}
Missing Default,SisoDb.Serialization.Jsv,JsvTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Jsv\JsvTypeSerializer.cs,EatMapKey,The following switch statement is missing a default case: switch (valueChar)  			{  				case JsWriter.QuoteChar:  					while (++i < valueLength)  					{  						valueChar = value[i];    						if (valueChar != JsWriter.QuoteChar) continue;    						var isLiteralQuote = i + 1 < valueLength && value[i + 1] == JsWriter.QuoteChar;    						i++; //skip quote  						if (!isLiteralQuote)  							break;  					}  					return value.Substring(tokenStartPos' i - tokenStartPos);    				//Is Type/Map' i.e. {...}  				case JsWriter.MapStartChar:  					var endsToEat = 1;  					var withinQuotes = false;  					while (++i < valueLength && endsToEat > 0)  					{  						valueChar = value[i];    						if (valueChar == JsWriter.QuoteChar)  							withinQuotes = !withinQuotes;    						if (withinQuotes)  							continue;    						if (valueChar == JsWriter.MapStartChar)  							endsToEat++;    						if (valueChar == JsWriter.MapEndChar)  							endsToEat--;  					}  					return value.Substring(tokenStartPos' i - tokenStartPos);  			}
Missing Default,SisoDb.Serialization.Jsv,JsvTypeSerializer,C:\repos\danielwertheim_SisoDb-Provider\Source\Projects\SisoDb.Serialization\Jsv\JsvTypeSerializer.cs,EatValue,The following switch statement is missing a default case: switch (valueChar)  			{  				//If we are at the end' return.  				case JsWriter.ItemSeperator:  				case JsWriter.MapEndChar:  					return null;    				//Is Within Quotes' i.e. "..."  				case JsWriter.QuoteChar:  					while (++i < valueLength)  					{  						valueChar = value[i];    						if (valueChar != JsWriter.QuoteChar) continue;    						var isLiteralQuote = i + 1 < valueLength && value[i + 1] == JsWriter.QuoteChar;    						i++; //skip quote  						if (!isLiteralQuote)  							break;  					}  					return value.Substring(tokenStartPos' i - tokenStartPos);    				//Is Type/Map' i.e. {...}  				case JsWriter.MapStartChar:  					while (++i < valueLength && endsToEat > 0)  					{  						valueChar = value[i];    						if (valueChar == JsWriter.QuoteChar)  							withinQuotes = !withinQuotes;    						if (withinQuotes)  							continue;    						if (valueChar == JsWriter.MapStartChar)  							endsToEat++;    						if (valueChar == JsWriter.MapEndChar)  							endsToEat--;  					}  					return value.Substring(tokenStartPos' i - tokenStartPos);    				//Is List' i.e. [...]  				case JsWriter.ListStartChar:  					while (++i < valueLength && endsToEat > 0)  					{  						valueChar = value[i];    						if (valueChar == JsWriter.QuoteChar)  							withinQuotes = !withinQuotes;    						if (withinQuotes)  							continue;    						if (valueChar == JsWriter.ListStartChar)  							endsToEat++;    						if (valueChar == JsWriter.ListEndChar)  							endsToEat--;  					}  					return value.Substring(tokenStartPos' i - tokenStartPos);  			}
