Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VisionFramework,UIImageOrientationExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ClassExtensions\UIImageOrientationExtensions.cs,ToCGImagePropertyOrientation,Cyclomatic complexity of the method is 8
Complex Method,VisionFramework,UIImageOrientationExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ClassExtensions\UIImageOrientationExtensions.cs,ToCIImageOrientation,Cyclomatic complexity of the method is 8
Long Statement,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,ViewDidLoad,The length of the statement  "			GalleryButton.Enabled = UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.SavedPhotosAlbum); " is 122.
Long Statement,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,OverlayRectangles,The length of the statement  "			using (CGBitmapContext ctx = new CGBitmapContext(IntPtr.Zero' (nint)fWidth' (nint)fHeight' 8' 4 * (nint)fWidth' CGColorSpace.CreateDeviceRGB()' CGImageAlphaInfo.PremultipliedFirst)) " is 181.
Long Statement,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,FinishedPickingMedia,The length of the statement  "			var handler = new VNImageRequestHandler(ciImage' uiImage.Orientation.ToCGImagePropertyOrientation()' new VNImageOptions()); " is 123.
Magic Number,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,OverlayRectangles,The following statement contains a magic number: ctx.SetLineWidth(10);
Magic Number,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,OverlayRectangles,The following statement contains a magic number: ctx.SelectFont("Helvetica"' 60' CGTextEncoding.MacRoman);
Magic Number,VisionFramework,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ViewController.cs,OverlayRectangles,The following statement contains a magic number: ctx.ShowTextAtPoint (topLeft.X' topLeft.Y - 60' text);
Missing Default,VisionFramework,UIImageOrientationExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ClassExtensions\UIImageOrientationExtensions.cs,ToCGImagePropertyOrientation,The following switch statement is missing a default case: switch(self) {  				case UIImageOrientation.Up:  					return CGImagePropertyOrientation.Up;  				case UIImageOrientation.UpMirrored:  					return CGImagePropertyOrientation.UpMirrored;  				case UIImageOrientation.Down:  					return CGImagePropertyOrientation.Down;  				case UIImageOrientation.DownMirrored:  					return CGImagePropertyOrientation.DownMirrored;  				case UIImageOrientation.Left:  					return CGImagePropertyOrientation.Left;  				case UIImageOrientation.LeftMirrored:  					return CGImagePropertyOrientation.LeftMirrored;  				case UIImageOrientation.Right:  					return CGImagePropertyOrientation.Right;  				case UIImageOrientation.RightMirrored:  					return CGImagePropertyOrientation.RightMirrored;  			}
Missing Default,VisionFramework,UIImageOrientationExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\VisionFaces\VisionFaces\ClassExtensions\UIImageOrientationExtensions.cs,ToCIImageOrientation,The following switch statement is missing a default case: switch (self)  			{  				case UIImageOrientation.Up:  					return CIImageOrientation.TopLeft;  				case UIImageOrientation.UpMirrored:  					return CIImageOrientation.TopRight;  				case UIImageOrientation.Down:  					return CIImageOrientation.BottomLeft;  				case UIImageOrientation.DownMirrored:  					return CIImageOrientation.BottomRight;  				case UIImageOrientation.Left:  					return CIImageOrientation.LeftTop;  				case UIImageOrientation.LeftMirrored:  					return CIImageOrientation.LeftBottom;  				case UIImageOrientation.Right:  					return CIImageOrientation.RightTop;  				case UIImageOrientation.RightMirrored:  					return CIImageOrientation.RightBottom;  			}
