Implementation smell,Namespace,Class,File,Method,Description
Long Method,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The method has 208 lines of code.
Complex Method,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,Cyclomatic complexity of the method is 8
Complex Method,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,Cyclomatic complexity of the method is 16
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,convertButtonPressed,The length of the statement  "            // use AudioSessionCategory::AudioProcessing category for offline conversion when not playing or recording audio at the same time " is 129.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,convertButtonPressed,The length of the statement  "            // if you are recording or playing audio at the same time you are encoding' use the same Audio Session category that you would normally " is 135.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The length of the statement  "                dstFormat.ChannelsPerFrame = (outputFormatType == AudioFormatType.iLBC ? 1 : srcFormat.ChannelsPerFrame); // for iLBC num channels must be 1 " is 140.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The length of the statement  "            // kAudioConverterEncodeBitRate is a UInt32 value containing the number of bits per second to aim for when encoding data " is 120.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The length of the statement  "                var we = destinationFile.WritePackets(false' inNumBytes' outputPacketDescriptions' outputFilePos' ref ioOutputDataPackets' outputBuffer); " is 137.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The length of the statement  "                    // variable frames per packet require doing this for each packet (adding up the number of sample frames of data in each packet) " is 127.
Long Statement,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,EncoderDataProc,The length of the statement  "			afio.PacketDescriptions = afio.SourceFile.ReadPacketData(false' afio.SrcFilePos' ref numberDataPackets' afio.SrcBuffer' ref outNumBytes); " is 137.
Empty Catch Block,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The method has an empty catch block.
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,ViewDidLoad,The following statement contains a magic number: UIImage greenImage = new UIImage("green_button.png").StretchableImage(12' 0);
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,ViewDidLoad,The following statement contains a magic number: UIImage redImage = new UIImage("red_button.png").StretchableImage(12' 0);
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following statement contains a magic number: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: dstFormat.BitsPerChannel = 16;
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: dstFormat.BytesPerPacket = dstFormat.BytesPerFrame = 2 * dstFormat.ChannelsPerFrame;
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: uint outputBitRate = 192000;
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: afio = new AudioFileIO(32 * 1024);
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: afio = new AudioFileIO(32 * 1024);
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: const int theOutputBufSize = 32 * 1024;
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: const int theOutputBufSize = 32 * 1024;
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,DoConvertFile,The following statement contains a magic number: srcFormat.ChannelsPerFrame > 2
Magic Number,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,EncoderDataProc,The following statement contains a magic number: int outNumBytes = 16384;
Missing Default,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following switch statement is missing a default case: switch (sender.Tag)              {                  case 0:                      switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }                      break;                  case 1:                      switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }                      break;              }
Missing Default,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following switch statement is missing a default case: switch (sender.SelectedSegment)                      {                          case 0:                              outputFormat = AudioFormatType.MPEG4AAC;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 1:                              outputFormat = AudioFormatType.AppleIMA4;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                          case 2:  					// iLBC sample rate is 8K                              outputFormat = AudioFormatType.iLBC;                              sampleRate = 8000.0;                              outputSampleRateSelector.SelectedSegment = 2;                              outputSampleRateSelector.SetEnabled(false' 0);                              outputSampleRateSelector.SetEnabled(false' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(false' 3);                              break;                          case 3:                              outputFormat = AudioFormatType.AppleLossless;                              outputSampleRateSelector.SetEnabled(true' 0);                              outputSampleRateSelector.SetEnabled(true' 1);                              outputSampleRateSelector.SetEnabled(true' 2);                              outputSampleRateSelector.SetEnabled(true' 3);                              break;                      }
Missing Default,AudioConverterFileConverter,AudioConverterFileConverterViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AudioConverterFileConverter\AudioConverterFileConverterViewController.cs,segmentedControllerValueChanged,The following switch statement is missing a default case: switch (sender.SelectedSegment)                      {                          case 0:                              sampleRate = 44100.0;                              break;                          case 1:                              sampleRate = 22050.0;                              break;                          case 2:                              sampleRate = 8000.0;                              break;                          case 3:                              sampleRate = 0;                              break;                      }
