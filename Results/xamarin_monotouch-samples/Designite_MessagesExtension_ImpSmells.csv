Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MessagesExtension,MessagesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\MessagesViewController.cs,PresentViewController,The length of the statement  "				controller = iceCream.IsComplete ? InstantiateCompletedIceCreamController (iceCream) : InstantiateBuildIceCreamController (iceCream); " is 133.
Long Statement,MessagesExtension,MessagesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\MessagesViewController.cs,InstantiateIceCreamsController,The length of the statement  "			var controller = Storyboard.InstantiateViewController (IceCreamsViewController.StoryboardIdentifier) as IceCreamsViewController; " is 128.
Long Statement,MessagesExtension,MessagesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\MessagesViewController.cs,InstantiateBuildIceCreamController,The length of the statement  "			var controller = Storyboard.InstantiateViewController (BuildIceCreamViewController.StoryboardIdentifier) as BuildIceCreamViewController; " is 136.
Long Statement,MessagesExtension,MessagesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\MessagesViewController.cs,InstantiateCompletedIceCreamController,The length of the statement  "			var controller = Storyboard.InstantiateViewController (CompletedIceCreamViewController.StoryboardIdentifier) as CompletedIceCreamViewController; " is 144.
Long Statement,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The length of the statement  "				var scale = NMath.Min ((size.Width - opaquePadding.Width) / partsImage.Size.Height' (size.Height - opaquePadding.Height) / partsImage.Size.Width); " is 146.
Magic Number,MessagesExtension,BuildIceCreamViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\BuildIceCreamViewController.cs,ViewDidLayoutSubviews,The following statement contains a magic number: layout.ItemSize = new CGSize (NMath.Floor (View.Bounds.Size.Width / 3f)' layout.ItemSize.Height);
Magic Number,MessagesExtension,BuildIceCreamViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\BuildIceCreamViewController.cs,ViewDidLayoutSubviews,The following statement contains a magic number: contentInset.Left = contentInset.Right = (View.Bounds.Width - layout.ItemSize.Width) / 2f;
Magic Number,MessagesExtension,BuildIceCreamViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\BuildIceCreamViewController.cs,DidTapSelect,The following statement contains a magic number: var halfWidth = CollectionView.Bounds.Width / 2f;
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,GetHashCode,The following statement contains a magic number: var hashCode = 13;
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Base.GetHashCode();
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Scoops.GetHashCode();
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Topping.GetHashCode();
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderSticker,The following statement contains a magic number: var image = renderer.CreateImage ((context) => {  				UIColor backgroundColor = opaque ? UIColor.FromRGBA (250f / 255f' 225f / 255f' 235f / 255f' 1f) : UIColor.Clear;    				// Draw the background  				backgroundColor.SetFill ();  				context.FillRect (new CGRect (CGPoint.Empty' size));    				// Draw the scaled composited image.  				var drawRect = new CGRect {  					Size = iceCreamSize'  					X = outputSize.Width / 2f - iceCreamSize.Width / 2f'  					Y = outputSize.Height / 2f - iceCreamSize.Height / 2f  				};    				partsImage.Draw (drawRect);  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderParts,The following statement contains a magic number: var image = renderer.CreateImage (context => {  				// Draw each of the body parts in a vertica stack.  				nfloat nextYPosition = 0f;  				foreach (var partImage in partImages) {  					var position = new CGPoint (outputImageSize.Width / 2f - partImage.Size.Width / 2f' nextYPosition);    					partImage.Draw (position);  					nextYPosition += partImage.Size.Height;  				}  			});
Magic Number,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,RenderParts,The following statement contains a magic number: var image = renderer.CreateImage (context => {  				// Draw each of the body parts in a vertica stack.  				nfloat nextYPosition = 0f;  				foreach (var partImage in partImages) {  					var position = new CGPoint (outputImageSize.Width / 2f - partImage.Size.Width / 2f' nextYPosition);    					partImage.Draw (position);  					nextYPosition += partImage.Size.Height;  				}  			});
Magic Number,MessagesExtension,IceCreamPartCollectionViewLayout,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\IceCreamPartCollectionViewLayout.cs,TargetContentOffset,The following statement contains a magic number: var halfWidth = CollectionView.Bounds.Width / 2f;
Missing Default,MessagesExtension,IceCreamsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\IceCreamsViewController.cs,GetCell,The following switch statement is missing a default case: switch (item.Key) {  				case CollectionViewItem.IceCream:  					cell = DequeueIceCreamCell (item.Value' indexPath);  					break;  				case CollectionViewItem.Create:  					cell = DequeueIceCreamOutlineCell (indexPath);  					break;  			}
Missing Default,MessagesExtension,IceCream,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios10\IceCreamBuilder\MessagesExtension\Model\IceCream.cs,CheckQueryItems,The following switch statement is missing a default case: switch (queryItem.Name) {  					case "Base":  						var baseType = (BaseType)Enum.Parse (typeof (BaseType)' queryItem.Value' true);  						Base = new Base (baseType);  						break;  					case "Scoops":  						var scoopsType = (ScoopsType)Enum.Parse(typeof(ScoopsType)' queryItem.Value' true);  						Scoops = new Scoops (scoopsType);  						break;  					case "Topping":  						var toppingType = (ToppingType)Enum.Parse (typeof (ToppingType)' queryItem.Value' true);  						Topping = new Topping (toppingType);  						break;  				}
