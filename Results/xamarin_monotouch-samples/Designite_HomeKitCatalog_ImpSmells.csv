Implementation smell,Namespace,Class,File,Method,Description
Long Method,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The method has 164 lines of code.
Complex Method,HomeKitCatalog,HomeKitObjectCollection,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeKitObjectCollection.cs,ObjectsCountForSection,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,PrepareForSegue,Cyclomatic complexity of the method is 12
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForHeader,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForAddRowInSection,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForNoneRowInSection,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,HomeKitObjectCellForRowAtIndexPath,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,ReuseIdentifierForIndexPath,Cyclomatic complexity of the method is 8
Complex Method,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,RowSelected,Cyclomatic complexity of the method is 11
Complex Method,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,Cyclomatic complexity of the method is 48
Complex Method,HomeKitCatalog,HMServiceKeys,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMServiceExtensions.cs,Convert,Cyclomatic complexity of the method is 28
Complex Method,HomeKitCatalog,HMServiceKeys,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMServiceExtensions.cs,Convert,Cyclomatic complexity of the method is 28
Complex Method,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetCharacteristicPair,Cyclomatic complexity of the method is 9
Complex Method,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetSunStatePair,Cyclomatic complexity of the method is 15
Complex Method,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetExactTimePair,Cyclomatic complexity of the method is 9
Long Parameter List,HomeKitCatalog,UIViewControllerExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\UIViewControllerExtensions.cs,PresentAddAlertWithAttributeType,The method has 5 parameters. Parameters: vc' type' placeholder' shortType' completion
Long Parameter List,HomeKitCatalog,CharacteristicsTableViewDataSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsTableViewDataSource.cs,CharacteristicsTableViewDataSource,The method has 5 parameters. Parameters: service' tableView' delegate' showsFavorites' allowsAllWrites
Long Identifier,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,,The length of the parameter ShowCharacteristicTriggerSegue is 30.
Long Identifier,HomeKitCatalog,CharacteristicsTableViewDataSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsTableViewDataSource.cs,,The length of the parameter segmentedControlCharacteristicCell is 34.
Long Identifier,HomeKitCatalog,FavoritesManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesManager.cs,,The length of the parameter accessoryToCharacteristicIdentifierMappingKey is 45.
Long Identifier,HomeKitCatalog,FavoritesManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesManager.cs,,The length of the parameter accessoryToCharacteristicIdentifiers is 36.
Long Identifier,HomeKitCatalog,FavoritesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesViewController.cs,,The length of the parameter segmentedControlCharacteristicCell is 34.
Long Statement,HomeKitCatalog,HMCatalogViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\HMCatalogViewController.cs,DisplayError,The length of the statement  "				if (PresentedViewController != null || errorCode == HMError.OperationCancelled || errorCode == HMError.UserDeclinedAddingUser) " is 126.
Long Statement,HomeKitCatalog,UIViewControllerExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\UIViewControllerExtensions.cs,DisplayErrors,The length of the statement  "				if (self.PresentedViewController != null || errorCode == HMError.OperationCancelled || errorCode == HMError.UserDeclinedAddingUser) " is 131.
Long Statement,HomeKitCatalog,Alert,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\Alert.cs,Create,The length of the statement  "			var cancelAction = UIAlertAction.Create ("Cancel"' UIAlertActionStyle.Cancel' action => alert.DismissViewController (true' null)); " is 130.
Long Statement,HomeKitCatalog,Alert,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\Alert.cs,Create,The length of the statement  "			var okayAction = UIAlertAction.Create ("Okay"' UIAlertActionStyle.Default' action => alert.DismissViewController (true' null)); " is 127.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForFooter,The length of the statement  "				return "Scenes (action sets) represent a state of your home. You must have at least one paired accessory to create a scene."; " is 125.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForFooter,The length of the statement  "				return "Triggers set scenes at specific times' when you get to locations' or when a characteristic is in a specific state. You must have created at least one scene with an action to create a trigger."; " is 201.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,TitleForFooter,The length of the statement  "				return "Service groups organize services in a custom way. For example' add a subset of lights in your living room to control them without controlling all the lights in the living room."; " is 186.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,AddNewTrigger,The length of the statement  "			var timeAction = UIAlertAction.Create ("Time"' UIAlertActionStyle.Default' _ => PerformSegue (AddTimerTriggerSegue' this)); " is 123.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,AddNewTrigger,The length of the statement  "			var eventAction = UIAlertAction.Create ("Characteristic"' UIAlertActionStyle.Default' _ => PerformSegue (AddCharacteristicTriggerSegue' this)); " is 143.
Long Statement,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,AddNewTrigger,The length of the statement  "			var locationAction = UIAlertAction.Create ("Location"' UIAlertActionStyle.Default' _ => PerformSegue (AddLocationTriggerSegue' this)); " is 134.
Long Statement,HomeKitCatalog,ActionCell,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\ActionSets\ActionCell.cs,SetCharacteristic,The length of the statement  "			var targetDescription = string.Format ("{0} â†’ {1}"' characteristic.LocalizedDescription' characteristic.DescriptionForValue (targetValue)); " is 139.
Long Statement,HomeKitCatalog,CharacteristicsTableViewDataSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsTableViewDataSource.cs,GetCellForService,The length of the statement  "			cell.Accessory = ServiceTypeIsSelectedForRow (indexPath.Row) ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 130.
Long Statement,HomeKitCatalog,CharacteristicsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsViewController.cs,ViewDidLoad,The length of the statement  "			tableViewDataSource = new CharacteristicsTableViewDataSource (Service' TableView' CellDelegate' ShowsFavorites' AllowsAllWrites); " is 129.
Long Statement,HomeKitCatalog,CharacteristicsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsViewController.cs,SetNotificationsEnabled,The length of the statement  "							Console.WriteLine ("HomeKit: Error enabling notification on charcteristic {0}: {1}"' characteristic' error.LocalizedDescription); " is 129.
Long Statement,HomeKitCatalog,EventTriggerCreator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\EventTriggerCreator.cs,UpdatePredicates,The length of the statement  "				NSPredicate predicate = HMEventTrigger.CreatePredicateForEvaluatingTrigger (characteristic' NSPredicateOperatorType.EqualTo' value); " is 132.
Long Statement,HomeKitCatalog,EventTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\EventTriggerViewController.cs,TitleForFooter,The length of the statement  "				return "When a trigger is activated by an event' it checks these conditions. If all of them are true' it will set its scenes."; " is 127.
Long Statement,HomeKitCatalog,EventTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\EventTriggerViewController.cs,AddCondition,The length of the statement  "			var timeAction = UIAlertAction.Create ("Time"' UIAlertActionStyle.Default' _ => PerformSegue (ShowTimeConditionSegue' this)); " is 125.
Long Statement,HomeKitCatalog,TriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\TriggerViewController.cs,TitleForFooter,The length of the statement  "				return "This trigger will only activate if it is enabled. You can disable triggers to temporarily stop them from running."; " is 123.
Long Statement,HomeKitCatalog,TriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\TriggerViewController.cs,TitleForFooter,The length of the statement  "				return "When this trigger is activated' it will set these scenes. You can only select scenes which have at least one action."; " is 126.
Long Statement,HomeKitCatalog,ConditionCell,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\ConditionCell.cs,SetCharacteristic,The length of the statement  "			var targetDescription = string.Format ("{0} â†’ {1}"' characteristic.LocalizedDescription' characteristic.DescriptionForValue (targetValue)); " is 139.
Long Statement,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The length of the statement  "				var significantEventString = (sunState == TimeConditionSunState.Sunrise) ? HMSignificantEvent.Sunrise : HMSignificantEvent.Sunset; " is 130.
Long Statement,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The length of the statement  "					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringBeforeSignificantEvent (significantEventString' null); " is 125.
Long Statement,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The length of the statement  "					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringAfterSignificantEvent (significantEventString' null); " is 124.
Long Statement,HomeKitCatalog,CharacteristicTriggerCreator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Characteristic\CharacteristicTriggerCreator.cs,Events,The length of the statement  "			HMCharacteristicEvent[] characteristicEvents = eventTrigger != null ? eventTrigger.CharacteristicEvents () : new HMCharacteristicEvent[0]; " is 138.
Long Statement,HomeKitCatalog,CharacteristicTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Characteristic\CharacteristicTriggerViewController.cs,TitleForFooter,The length of the statement  "				return "This trigger will activate when any of these characteristics change to their value. For example' 'run when the garage door is opened'."; " is 144.
Long Statement,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetCharacteristicPair,The length of the statement  "				if (comparison != null && comparison.LeftExpression.ExpressionType == NSExpressionType.KeyPath && comparison.RightExpression.ExpressionType == NSExpressionType.ConstantValue) { " is 176.
Long Statement,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetSunStatePair,The length of the statement  "			if (keyPath == GetEnumConstant (HMSignificantEvent.Sunrise) && orderType == NSPredicateOperatorType.GreaterThanOrEqualTo) " is 121.
Long Statement,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetSunStatePair,The length of the statement  "			if (keyPath == GetEnumConstant (HMSignificantEvent.Sunset) && orderType == NSPredicateOperatorType.GreaterThanOrEqualTo) " is 120.
Long Statement,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The length of the statement  "			var cirlceRect = new CGRect (rect.GetMidX () - circleRadius' rect.GetMidY () - circleRadius' circleDiameter' circleDiameter); " is 125.
Long Statement,HomeKitCatalog,MapViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapViewController.cs,AnnotateAndZoomToRegion,The length of the statement  "			var mapRegion = MKCoordinateRegion.FromDistance (region.Center' region.Radius * multiplier' region.Radius * multiplier); " is 120.
Long Statement,HomeKitCatalog,MapViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapViewController.cs,PerformSearch,The length of the statement  "			var querySpan = new MKCoordinateSpan (MapView.Region.Span.LatitudeDelta * multiplier' MapView.Region.Span.LongitudeDelta * multiplier); " is 135.
Long Statement,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,GetRegionStatusCell,The length of the statement  "			cell.Accessory = (LocationTriggerCreator.TargetRegionStateIndex == indexPath.Row) ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 151.
Long Statement,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,TitleForFooter,The length of the statement  "				return "This trigger can activate when you enter or leave a region. For example' when you arrive at home or when you leave work."; " is 130.
Long Statement,HomeKitCatalog,AddServicesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\ServiceGroups\AddServicesViewController.cs,GetCell,The length of the statement  "			cell.Accessory = selectedServices.Contains (service) ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 122.
Long Statement,HomeKitCatalog,FavoritesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesViewController.cs,GetCell,The length of the statement  "			var characteristics = FavoritesManager.SharedManager.FavoriteCharacteristicsForAccessory (favoriteAccessories [indexPath.Section]); " is 131.
Long Statement,HomeKitCatalog,FavoritesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesViewController.cs,SetNotificationsEnabled,The length of the statement  "							Console.WriteLine ("HomeKit: Error enabling notification on characteristic {0}: {1}."' characteristic' error.LocalizedDescription); " is 131.
Long Statement,HomeKitCatalog,HMHomeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMHomeExtensions.cs,GetAllCharacteristics,The length of the statement  "			return new HashSet<HMCharacteristic> (self.Accessories.SelectMany (a => a.Services).SelectMany (s => s.Characteristics)); " is 121.
Long Statement,HomeKitCatalog,HMHomeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMHomeExtensions.cs,ServicesNotAlreadyInServiceGroup,The length of the statement  "			Func<HMService' bool> filter = s => !servicesInGroup.Contains (s) && s.ServiceType != HMServiceType.AccessoryInformation; " is 121.
Complex Conditional,HomeKitCatalog,HomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeViewController.cs,GetAddCellForRowAtIndexPath,The conditional expression  "(!CanAddActionSet && section == HomeKitObjectSection.ActionSet) ||  				(!CanAddTrigger && section == HomeKitObjectSection.Trigger) || !Home.IsAdmin ()"  is complex.
Magic Number,HomeKitCatalog,HomeListViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Homes\HomeListViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,AccessoryUpdateController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\AccessoryUpdateController.cs,StartListeningForCellUpdates,The following statement contains a magic number: updateValueTimer = NSTimer.CreateRepeatingScheduledTimer (0.1' UpdateCharacteristics);
Magic Number,HomeKitCatalog,CharacteristicsTableViewDataSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsTableViewDataSource.cs,CharacteristicsTableViewDataSource,The following statement contains a magic number: tableView.EstimatedRowHeight = 50;
Magic Number,HomeKitCatalog,CharacteristicsTableViewDataSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\CharacteristicsTableViewDataSource.cs,NumberOfSections,The following statement contains a magic number: return Service.SupportsAssociatedServiceType () ? 2 : 1;
Magic Number,HomeKitCatalog,ServicesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\ServicesViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44f;
Magic Number,HomeKitCatalog,ServicesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\Services\ServicesViewController.cs,NumberOfSections,The following statement contains a magic number: return Accessory.UniqueIdentifiersForBridgedAccessories != null ? 2 : 1;
Magic Number,HomeKitCatalog,ModifyAccessoryViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\ModifyAccessoryViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,AccessoryBrowserViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\AccessoryBrowserViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,ActionSetViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\ActionSets\ActionSetViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,ActionSetViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\ActionSets\ActionSetViewController.cs,NumberOfSections,The following statement contains a magic number: return Home.IsAdmin () ? 3 : 2;
Magic Number,HomeKitCatalog,ActionSetViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\ActionSets\ActionSetViewController.cs,NumberOfSections,The following statement contains a magic number: return Home.IsAdmin () ? 3 : 2;
Magic Number,HomeKitCatalog,TimerTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Timer\TimerTriggerViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,TimerTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Timer\TimerTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.DateAndTime;  			case 3:  				return TriggerTableViewSection.Recurrence;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,TimerTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Timer\TimerTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.DateAndTime;  			case 3:  				return TriggerTableViewSection.Recurrence;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,TimerTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Timer\TimerTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.DateAndTime;  			case 3:  				return TriggerTableViewSection.Recurrence;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,TriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\TriggerViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,ViewDidLoad,The following statement contains a magic number: TableView.EstimatedRowHeight = 44;
Magic Number,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,RowsInSection,The following statement contains a magic number: switch ((TimeConditionTableViewSection)(int)section) {  			case TimeConditionTableViewSection.TimeOrSun:  				return 1;  			case TimeConditionTableViewSection.BeforeOrAfter:  				// If we're choosing an exact time' we add the 'At' row.  				return (timeType == TimeConditionType.Time) ? 3 : 2;  			case TimeConditionTableViewSection.Value:  				// Date picker cell or sunrise/sunset selection cells  				return (timeType == TimeConditionType.Time) ? 1 : 2;  			default:  				throw new InvalidOperationException ("Unexpected `TimeConditionTableViewSection` value.");  			}
Magic Number,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,RowsInSection,The following statement contains a magic number: switch ((TimeConditionTableViewSection)(int)section) {  			case TimeConditionTableViewSection.TimeOrSun:  				return 1;  			case TimeConditionTableViewSection.BeforeOrAfter:  				// If we're choosing an exact time' we add the 'At' row.  				return (timeType == TimeConditionType.Time) ? 3 : 2;  			case TimeConditionTableViewSection.Value:  				// Date picker cell or sunrise/sunset selection cells  				return (timeType == TimeConditionType.Time) ? 1 : 2;  			default:  				throw new InvalidOperationException ("Unexpected `TimeConditionTableViewSection` value.");  			}
Magic Number,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,RowsInSection,The following statement contains a magic number: switch ((TimeConditionTableViewSection)(int)section) {  			case TimeConditionTableViewSection.TimeOrSun:  				return 1;  			case TimeConditionTableViewSection.BeforeOrAfter:  				// If we're choosing an exact time' we add the 'At' row.  				return (timeType == TimeConditionType.Time) ? 3 : 2;  			case TimeConditionTableViewSection.Value:  				// Date picker cell or sunrise/sunset selection cells  				return (timeType == TimeConditionType.Time) ? 1 : 2;  			default:  				throw new InvalidOperationException ("Unexpected `TimeConditionTableViewSection` value.");  			}
Magic Number,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,ReloadDynamicSections,The following statement contains a magic number: var reloadIndexSet = NSIndexSet.FromNSRange (new NSRange ((int)TimeConditionTableViewSection.BeforeOrAfter' 2));
Magic Number,HomeKitCatalog,CharacteristicTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Characteristic\CharacteristicTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.Characteristics;  			case 3:  				return TriggerTableViewSection.Conditions;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,CharacteristicTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Characteristic\CharacteristicTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.Characteristics;  			case 3:  				return TriggerTableViewSection.Conditions;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,CharacteristicTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Characteristic\CharacteristicTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;  			case 1:  				return TriggerTableViewSection.Enabled;  			case 2:  				return TriggerTableViewSection.Characteristics;  			case 3:  				return TriggerTableViewSection.Conditions;  			case 4:  				return TriggerTableViewSection.ActionSets;  			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,Colors,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\Colors.cs,EditableBlueColor,The following statement contains a magic number: return new UIColor (0f' 122f / 255f' 1f' 1f);
Magic Number,HomeKitCatalog,Colors,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\Colors.cs,EditableBlueColor,The following statement contains a magic number: return new UIColor (0f' 122f / 255f' 1f' 1f);
Magic Number,HomeKitCatalog,NSPredicateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\NSPredicateExtensions.cs,GetCharacteristicPair,The following statement contains a magic number: subpredicates.Length != 2
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: nfloat circleDiameter = NMath.Min (rect.Width' rect.Height) / 2;
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: var circleRadius = circleDiameter / 2;
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: circlePath.LineWidth = 3;
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: context.SetLineDash (0' new nfloat[] { 6' 6 }' 2);
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: context.SetLineDash (0' new nfloat[] { 6' 6 }' 2);
Magic Number,HomeKitCatalog,MapOverlayView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapOverlayView.cs,Draw,The following statement contains a magic number: context.SetLineDash (0' new nfloat[] { 6' 6 }' 2);
Magic Number,HomeKitCatalog,MapViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapViewController.cs,OverlayRenderer,The following statement contains a magic number: return new MKOverlayPathRenderer (overlay) {  				FillColor = UIColor.Blue.ColorWithAlpha (0.2f)'  				StrokeColor = UIColor.Black'  				LineWidth = 2  			};
Magic Number,HomeKitCatalog,MapViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\Mapping\MapViewController.cs,OverlayRenderer,The following statement contains a magic number: return new MKOverlayPathRenderer (overlay) {  				FillColor = UIColor.Blue.ColorWithAlpha (0.2f)'  				StrokeColor = UIColor.Black'  				LineWidth = 2  			};
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,ViewDidAppear,The following statement contains a magic number: geocoder.ReverseGeocodeLocation (centerLocation' (placemarks' error) => {  					// The geocoder took too long' we're not on this view any more.  					if (!viewIsDisplayed)  						return;    					if (error != null) {  						DisplayError (error);  						return;  					}    					if (placemarks != null) {  						var mostLikelyPlacemark = placemarks.FirstOrDefault ();  						if (mostLikelyPlacemark != null) {  							CNMutablePostalAddress address = CreatePostalAddress (mostLikelyPlacemark);  							var addressFormatter = new CNPostalAddressFormatter ();  							string addressString = addressFormatter.GetStringFromPostalAddress (address);  							localizedAddress = addressString.Replace ("\n"' "' ");  							var section = NSIndexSet.FromIndex (2);  							TableView.ReloadSections (section' UITableViewRowAnimation.Automatic);  						}  					}  				});
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,RowsInSection,The following statement contains a magic number: switch (SectionForIndex ((int)section)) {  			case TriggerTableViewSection.Region:  				return 2;    			default:  				return base.RowsInSection (tableView' section);  			}
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;    			case 1:  				return TriggerTableViewSection.Enabled;    			case 2:  				return TriggerTableViewSection.Location;    			case 3:  				return TriggerTableViewSection.Region;    			case 4:  				return TriggerTableViewSection.Conditions;    			case 5:  				return TriggerTableViewSection.ActionSets;    			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;    			case 1:  				return TriggerTableViewSection.Enabled;    			case 2:  				return TriggerTableViewSection.Location;    			case 3:  				return TriggerTableViewSection.Region;    			case 4:  				return TriggerTableViewSection.Conditions;    			case 5:  				return TriggerTableViewSection.ActionSets;    			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;    			case 1:  				return TriggerTableViewSection.Enabled;    			case 2:  				return TriggerTableViewSection.Location;    			case 3:  				return TriggerTableViewSection.Region;    			case 4:  				return TriggerTableViewSection.Conditions;    			case 5:  				return TriggerTableViewSection.ActionSets;    			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,LocationTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Location\LocationTriggerViewController.cs,SectionForIndex,The following statement contains a magic number: switch (index) {  			case 0:  				return TriggerTableViewSection.Name;    			case 1:  				return TriggerTableViewSection.Enabled;    			case 2:  				return TriggerTableViewSection.Location;    			case 3:  				return TriggerTableViewSection.Region;    			case 4:  				return TriggerTableViewSection.Conditions;    			case 5:  				return TriggerTableViewSection.ActionSets;    			default:  				return TriggerTableViewSection.None;  			}
Magic Number,HomeKitCatalog,FavoritesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Favorites\FavoritesViewController.cs,AwakeFromNib,The following statement contains a magic number: TableView.EstimatedRowHeight = 44f;
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (self.CharacteristicType) {  			case HMCharacteristicType.PowerState:  			case HMCharacteristicType.InputEvent:  			case HMCharacteristicType.OutputState:  				return Convert.ToBoolean (number) ? "On" : "Off";    			case HMCharacteristicType.OutletInUse:  			case HMCharacteristicType.MotionDetected:  			case HMCharacteristicType.AdminOnlyAccess:  			case HMCharacteristicType.AudioFeedback:  			case HMCharacteristicType.ObstructionDetected:  				return Convert.ToBoolean (number) ? "Yes" : "No";    			case HMCharacteristicType.TargetDoorState:  			case HMCharacteristicType.CurrentDoorState:  				var doorState = (HMCharacteristicValueDoorState)number;  				switch (doorState) {  				case HMCharacteristicValueDoorState.Open:  					return "Open";  				case HMCharacteristicValueDoorState.Opening:  					return "Opening";  				case HMCharacteristicValueDoorState.Closed:  					return "Closed";  				case HMCharacteristicValueDoorState.Closing:  					return "Closing";  				case HMCharacteristicValueDoorState.Stopped:  					return "Stopped";  				}  				break;    			case HMCharacteristicType.TargetHeatingCooling:  				var targetMode = (HMCharacteristicValueHeatingCooling)number;  				switch (targetMode) {  				case HMCharacteristicValueHeatingCooling.Off:  					return "Off";  				case HMCharacteristicValueHeatingCooling.Heat:  					return "Heat";  				case HMCharacteristicValueHeatingCooling.Cool:  					return "Cool";  				case HMCharacteristicValueHeatingCooling.Auto:  					return "Auto";  				}  				break;    			case HMCharacteristicType.CurrentHeatingCooling:  				var currentMode = (HMCharacteristicValueHeatingCooling)number;  				switch (currentMode) {  				case HMCharacteristicValueHeatingCooling.Off:  					return "Off";  				case HMCharacteristicValueHeatingCooling.Heat:  					return "Heating";  				case HMCharacteristicValueHeatingCooling.Cool:  					return "Cooling";  				case HMCharacteristicValueHeatingCooling.Auto:  					return "Auto";  					}  				break;    			case HMCharacteristicType.TargetLockMechanismState:  			case HMCharacteristicType.CurrentLockMechanismState:  				var lockState = (HMCharacteristicValueLockMechanismState)number;  				switch (lockState) {  				case HMCharacteristicValueLockMechanismState.Unsecured:  					return "Unsecured";  				case HMCharacteristicValueLockMechanismState.Secured:  					return "Secured";  				case HMCharacteristicValueLockMechanismState.Unknown:  					return "Unknown";  				case HMCharacteristicValueLockMechanismState.Jammed:  					return "Jammed";  				}  				break;    			case HMCharacteristicType.TemperatureUnits:  				var unit = (HMCharacteristicValueTemperatureUnit)number;  				switch (unit) {  				case HMCharacteristicValueTemperatureUnit.Celsius:  					return "Celsius";  				case HMCharacteristicValueTemperatureUnit.Fahrenheit:  					return "Fahrenheit";  				}  				break;    			case HMCharacteristicType.LockMechanismLastKnownAction:  				var lastKnownAction = (HMCharacteristicValueLockMechanism)number;  				switch (lastKnownAction) {  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovementInterior:  					return "Interior Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovementInterior:  					return "Exterior Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovementExterior:  					return "Exterior Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovementExterior:  					return "Exterior Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredWithKeypad:  					return "Keypad Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredWithKeypad:  					return "Keypad Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredRemotely:  					return "Secured Remotely";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredRemotely:  					return "Unsecured Remotely";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredWithAutomaticSecureTimeout:  					return "Secured Automatically";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovement:  					return "Secured Using Physical Movement";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovement:  					return "Unsecured Using Physical Movement";  				}  				break;    			case HMCharacteristicType.RotationDirection:  				var rotationDirection = (HMCharacteristicValueRotationDirection)number;  				switch (rotationDirection) {  				case HMCharacteristicValueRotationDirection.Clockwise:  					return "Clockwise";  				case HMCharacteristicValueRotationDirection.CounterClockwise:  					return "Counter Clockwise";  				}  				break;    			case HMCharacteristicType.AirParticulateSize:  				var size = (HMCharacteristicValueAirParticulate)number;  				switch (size) {  				case HMCharacteristicValueAirParticulate.Size10:  					return "Size 10";    				case HMCharacteristicValueAirParticulate.Size2_5:  					return "Size 2.5";  				}  				break;    			case HMCharacteristicType.PositionState:  				var state = (HMCharacteristicValuePositionState)number;  				switch (state) {  				case HMCharacteristicValuePositionState.Opening:  					return "Opening";  				case HMCharacteristicValuePositionState.Closing:  					return "Closing";  				case HMCharacteristicValuePositionState.Stopped:  					return "Stopped";  				}  				break;    			case HMCharacteristicType.CurrentSecuritySystemState:  				var positionState = (HMCharacteristicValueCurrentSecuritySystemState)number;  				switch (positionState) {  				case HMCharacteristicValueCurrentSecuritySystemState.AwayArm:  					return "Away";  				case HMCharacteristicValueCurrentSecuritySystemState.StayArm:  					return "Home";  				case HMCharacteristicValueCurrentSecuritySystemState.NightArm:  					return "Night";  				case HMCharacteristicValueCurrentSecuritySystemState.Disarmed:  					return "Disarm";  				case HMCharacteristicValueCurrentSecuritySystemState.Triggered:  					return "Triggered";  					}  				break;    			case HMCharacteristicType.TargetSecuritySystemState:  				var securityState = (HMCharacteristicValueTargetSecuritySystemState)number;  				switch (securityState) {  				case HMCharacteristicValueTargetSecuritySystemState.AwayArm:  					return "Away";  				case HMCharacteristicValueTargetSecuritySystemState.StayArm:  					return "Home";  				case HMCharacteristicValueTargetSecuritySystemState.NightArm:  					return "Night";  				case HMCharacteristicValueTargetSecuritySystemState.Disarm:  					return "Disarm";  				}  				break;  			}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (doorState) {  				case HMCharacteristicValueDoorState.Open:  					return "Open";  				case HMCharacteristicValueDoorState.Opening:  					return "Opening";  				case HMCharacteristicValueDoorState.Closed:  					return "Closed";  				case HMCharacteristicValueDoorState.Closing:  					return "Closing";  				case HMCharacteristicValueDoorState.Stopped:  					return "Stopped";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (targetMode) {  				case HMCharacteristicValueHeatingCooling.Off:  					return "Off";  				case HMCharacteristicValueHeatingCooling.Heat:  					return "Heat";  				case HMCharacteristicValueHeatingCooling.Cool:  					return "Cool";  				case HMCharacteristicValueHeatingCooling.Auto:  					return "Auto";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (currentMode) {  				case HMCharacteristicValueHeatingCooling.Off:  					return "Off";  				case HMCharacteristicValueHeatingCooling.Heat:  					return "Heating";  				case HMCharacteristicValueHeatingCooling.Cool:  					return "Cooling";  				case HMCharacteristicValueHeatingCooling.Auto:  					return "Auto";  					}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (lockState) {  				case HMCharacteristicValueLockMechanismState.Unsecured:  					return "Unsecured";  				case HMCharacteristicValueLockMechanismState.Secured:  					return "Secured";  				case HMCharacteristicValueLockMechanismState.Unknown:  					return "Unknown";  				case HMCharacteristicValueLockMechanismState.Jammed:  					return "Jammed";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (unit) {  				case HMCharacteristicValueTemperatureUnit.Celsius:  					return "Celsius";  				case HMCharacteristicValueTemperatureUnit.Fahrenheit:  					return "Fahrenheit";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (lastKnownAction) {  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovementInterior:  					return "Interior Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovementInterior:  					return "Exterior Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovementExterior:  					return "Exterior Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovementExterior:  					return "Exterior Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredWithKeypad:  					return "Keypad Secured";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredWithKeypad:  					return "Keypad Unsecured";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredRemotely:  					return "Secured Remotely";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredRemotely:  					return "Unsecured Remotely";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredWithAutomaticSecureTimeout:  					return "Secured Automatically";  				case HMCharacteristicValueLockMechanism.LastKnownActionSecuredUsingPhysicalMovement:  					return "Secured Using Physical Movement";  				case HMCharacteristicValueLockMechanism.LastKnownActionUnsecuredUsingPhysicalMovement:  					return "Unsecured Using Physical Movement";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (rotationDirection) {  				case HMCharacteristicValueRotationDirection.Clockwise:  					return "Clockwise";  				case HMCharacteristicValueRotationDirection.CounterClockwise:  					return "Counter Clockwise";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (size) {  				case HMCharacteristicValueAirParticulate.Size10:  					return "Size 10";    				case HMCharacteristicValueAirParticulate.Size2_5:  					return "Size 2.5";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (state) {  				case HMCharacteristicValuePositionState.Opening:  					return "Opening";  				case HMCharacteristicValuePositionState.Closing:  					return "Closing";  				case HMCharacteristicValuePositionState.Stopped:  					return "Stopped";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (positionState) {  				case HMCharacteristicValueCurrentSecuritySystemState.AwayArm:  					return "Away";  				case HMCharacteristicValueCurrentSecuritySystemState.StayArm:  					return "Home";  				case HMCharacteristicValueCurrentSecuritySystemState.NightArm:  					return "Night";  				case HMCharacteristicValueCurrentSecuritySystemState.Disarmed:  					return "Disarm";  				case HMCharacteristicValueCurrentSecuritySystemState.Triggered:  					return "Triggered";  					}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,PredeterminedValueDescriptionForNumber,The following switch statement is missing a default case: switch (securityState) {  				case HMCharacteristicValueTargetSecuritySystemState.AwayArm:  					return "Away";  				case HMCharacteristicValueTargetSecuritySystemState.StayArm:  					return "Home";  				case HMCharacteristicValueTargetSecuritySystemState.NightArm:  					return "Night";  				case HMCharacteristicValueTargetSecuritySystemState.Disarm:  					return "Disarm";  				}
Missing Default,HomeKitCatalog,HMCharacteristicExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\Utils\HMCharacteristicExtensions.cs,LocalizedUnitDescription,The following switch statement is missing a default case: switch (units) {  				case HMCharacteristicMetadataUnits.Celsius:  					return "â„ƒ";  				case HMCharacteristicMetadataUnits.ArcDegree:  					return "Âº";  				case HMCharacteristicMetadataUnits.Fahrenheit:  					return "â„‰";  				case HMCharacteristicMetadataUnits.Percentage:  					return "%";  				}
Missing Default,HomeKitCatalog,AccessoryBrowserViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Accessories\AccessoryBrowserViewController.cs,RowSelected,The following switch statement is missing a default case: switch (accessory.Type) {  			case AccessoryType.HomeKit:  				ConfigureAccessory (accessory.HomeKitAccessoryObject);  				break;  			case AccessoryType.External:  				if (externalAccessoryBrowser != null)  					externalAccessoryBrowser.ConfigureAccessory (accessory.ExternalAccessoryObject' this);  				break;  			}
Missing Default,HomeKitCatalog,EventTriggerViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\EventTriggerViewController.cs,GetConditionCell,The following switch statement is missing a default case: switch (hkCondition.Type) {  			case HomeKitConditionType.Characteristic:  				cell.SetCharacteristic (hkCondition.CharacteristicData.Item1' (NSNumber)hkCondition.CharacteristicData.Item2);  				break;  			case HomeKitConditionType.ExactTime:  				cell.SetOrder (hkCondition.ExactTimeData.Item1' hkCondition.ExactTimeData.Item2);  				break;  			case HomeKitConditionType.SunTime:  				cell.SetOrder (hkCondition.SunTimeData.Item1' hkCondition.SunTimeData.Item2);  				break;  			case HomeKitConditionType.Unknown:  				cell.SetUnknown ();  				break;  			}
Missing Default,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The following switch statement is missing a default case: switch (timeType) {  			case TimeConditionType.Time:  				switch (order) {  				case TimeConditionOrder.Before:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringBeforeDate (dateComponents);  					break;  				case TimeConditionOrder.After:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringAfterDate (dateComponents);  					break;  				case TimeConditionOrder.At:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringOnDate (dateComponents);  					break;  				}  				break;    			case TimeConditionType.Sun:  				var significantEventString = (sunState == TimeConditionSunState.Sunrise) ? HMSignificantEvent.Sunrise : HMSignificantEvent.Sunset;  				switch (order) {  				case TimeConditionOrder.Before:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringBeforeSignificantEvent (significantEventString' null);  					break;  				case TimeConditionOrder.After:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringAfterSignificantEvent (significantEventString' null);  					break;  				// Significant events must be specified 'before' or 'after'.  				case TimeConditionOrder.At:  					break;  				}  				break;  			}
Missing Default,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The following switch statement is missing a default case: switch (order) {  				case TimeConditionOrder.Before:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringBeforeDate (dateComponents);  					break;  				case TimeConditionOrder.After:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringAfterDate (dateComponents);  					break;  				case TimeConditionOrder.At:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringOnDate (dateComponents);  					break;  				}
Missing Default,HomeKitCatalog,TimeConditionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\HomeKitCatalog\HomeKitCatalog\ViewControllers\Triggers\Events\Conditions\TimeConditionViewController.cs,SaveAndDismiss,The following switch statement is missing a default case: switch (order) {  				case TimeConditionOrder.Before:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringBeforeSignificantEvent (significantEventString' null);  					break;  				case TimeConditionOrder.After:  					predicate = HMEventTrigger.CreatePredicateForEvaluatingTriggerOccurringAfterSignificantEvent (significantEventString' null);  					break;  				// Significant events must be specified 'before' or 'after'.  				case TimeConditionOrder.At:  					break;  				}
