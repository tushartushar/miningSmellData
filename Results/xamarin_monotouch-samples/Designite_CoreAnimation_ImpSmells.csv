Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 9
Magic Number,CoreAnimationExample,BasicUIViewAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\BasicUIViewAnimation\BasicUIViewAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnClickMe.TouchUpInside += (s' e) => {  				UIView.Animate (0.2' () => {  					// move the image one way or the other  					if (imgToAnimate.Frame.Y == 73) {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					} else {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					}  				});  			};
Magic Number,CoreAnimationExample,BasicUIViewAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\BasicUIViewAnimation\BasicUIViewAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnClickMe.TouchUpInside += (s' e) => {  				UIView.Animate (0.2' () => {  					// move the image one way or the other  					if (imgToAnimate.Frame.Y == 73) {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					} else {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					}  				});  			};
Magic Number,CoreAnimationExample,BasicUIViewAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\BasicUIViewAnimation\BasicUIViewAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnClickMe.TouchUpInside += (s' e) => {  				UIView.Animate (0.2' () => {  					// move the image one way or the other  					if (imgToAnimate.Frame.Y == 73) {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					} else {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					}  				});  			};
Magic Number,CoreAnimationExample,BasicUIViewAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\BasicUIViewAnimation\BasicUIViewAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnClickMe.TouchUpInside += (s' e) => {  				UIView.Animate (0.2' () => {  					// move the image one way or the other  					if (imgToAnimate.Frame.Y == 73) {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					} else {  						imgToAnimate.Frame = new CGRect (  							imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400'  							imgToAnimate.Frame.Size.Width' imgToAnimate.Frame.Size.Height);  					}  				});  			};
Magic Number,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnStart.TouchUpInside += (s' e) => {    				// begin our animation block. the name allows us to refer to it later  				UIView.BeginAnimations ("ImageMove");    				UIView.SetAnimationDidStopSelector (new Selector ("animationStopped:numFinished:context:"));  				UIView.SetAnimationDelegate (this); //NOTE: you need this for the selector b.s.    				// animation delay  				UIView.SetAnimationDelay ((double)sldrDelay.Value);    				// animation duration  				UIView.SetAnimationDuration ((double)sldrDuration.Value);    				// animation curve  				UIViewAnimationCurve curve = UIViewAnimationCurve.EaseInOut;  				switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}  				UIView.SetAnimationCurve (curve);    				// repeat count  				UIView.SetAnimationRepeatCount (float.Parse (txtRepeateCount.Text));    				// autorevese when repeating  				UIView.SetAnimationRepeatAutoreverses (swtchAutoReverse.On);    				// move the image one way or the other  				if (imgToAnimate.Frame.Y == 214) {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400)'  						imgToAnimate.Frame.Size);  				} else {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400)'  						imgToAnimate.Frame.Size);  				}    				// finish our animation block  				UIView.CommitAnimations ();  			};
Magic Number,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnStart.TouchUpInside += (s' e) => {    				// begin our animation block. the name allows us to refer to it later  				UIView.BeginAnimations ("ImageMove");    				UIView.SetAnimationDidStopSelector (new Selector ("animationStopped:numFinished:context:"));  				UIView.SetAnimationDelegate (this); //NOTE: you need this for the selector b.s.    				// animation delay  				UIView.SetAnimationDelay ((double)sldrDelay.Value);    				// animation duration  				UIView.SetAnimationDuration ((double)sldrDuration.Value);    				// animation curve  				UIViewAnimationCurve curve = UIViewAnimationCurve.EaseInOut;  				switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}  				UIView.SetAnimationCurve (curve);    				// repeat count  				UIView.SetAnimationRepeatCount (float.Parse (txtRepeateCount.Text));    				// autorevese when repeating  				UIView.SetAnimationRepeatAutoreverses (swtchAutoReverse.On);    				// move the image one way or the other  				if (imgToAnimate.Frame.Y == 214) {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400)'  						imgToAnimate.Frame.Size);  				} else {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400)'  						imgToAnimate.Frame.Size);  				}    				// finish our animation block  				UIView.CommitAnimations ();  			};
Magic Number,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnStart.TouchUpInside += (s' e) => {    				// begin our animation block. the name allows us to refer to it later  				UIView.BeginAnimations ("ImageMove");    				UIView.SetAnimationDidStopSelector (new Selector ("animationStopped:numFinished:context:"));  				UIView.SetAnimationDelegate (this); //NOTE: you need this for the selector b.s.    				// animation delay  				UIView.SetAnimationDelay ((double)sldrDelay.Value);    				// animation duration  				UIView.SetAnimationDuration ((double)sldrDuration.Value);    				// animation curve  				UIViewAnimationCurve curve = UIViewAnimationCurve.EaseInOut;  				switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}  				UIView.SetAnimationCurve (curve);    				// repeat count  				UIView.SetAnimationRepeatCount (float.Parse (txtRepeateCount.Text));    				// autorevese when repeating  				UIView.SetAnimationRepeatAutoreverses (swtchAutoReverse.On);    				// move the image one way or the other  				if (imgToAnimate.Frame.Y == 214) {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400)'  						imgToAnimate.Frame.Size);  				} else {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400)'  						imgToAnimate.Frame.Size);  				}    				// finish our animation block  				UIView.CommitAnimations ();  			};
Magic Number,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnStart.TouchUpInside += (s' e) => {    				// begin our animation block. the name allows us to refer to it later  				UIView.BeginAnimations ("ImageMove");    				UIView.SetAnimationDidStopSelector (new Selector ("animationStopped:numFinished:context:"));  				UIView.SetAnimationDelegate (this); //NOTE: you need this for the selector b.s.    				// animation delay  				UIView.SetAnimationDelay ((double)sldrDelay.Value);    				// animation duration  				UIView.SetAnimationDuration ((double)sldrDuration.Value);    				// animation curve  				UIViewAnimationCurve curve = UIViewAnimationCurve.EaseInOut;  				switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}  				UIView.SetAnimationCurve (curve);    				// repeat count  				UIView.SetAnimationRepeatCount (float.Parse (txtRepeateCount.Text));    				// autorevese when repeating  				UIView.SetAnimationRepeatAutoreverses (swtchAutoReverse.On);    				// move the image one way or the other  				if (imgToAnimate.Frame.Y == 214) {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400)'  						imgToAnimate.Frame.Size);  				} else {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400)'  						imgToAnimate.Frame.Size);  				}    				// finish our animation block  				UIView.CommitAnimations ();  			};
Magic Number,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnStart.TouchUpInside += (s' e) => {    				// begin our animation block. the name allows us to refer to it later  				UIView.BeginAnimations ("ImageMove");    				UIView.SetAnimationDidStopSelector (new Selector ("animationStopped:numFinished:context:"));  				UIView.SetAnimationDelegate (this); //NOTE: you need this for the selector b.s.    				// animation delay  				UIView.SetAnimationDelay ((double)sldrDelay.Value);    				// animation duration  				UIView.SetAnimationDuration ((double)sldrDuration.Value);    				// animation curve  				UIViewAnimationCurve curve = UIViewAnimationCurve.EaseInOut;  				switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}  				UIView.SetAnimationCurve (curve);    				// repeat count  				UIView.SetAnimationRepeatCount (float.Parse (txtRepeateCount.Text));    				// autorevese when repeating  				UIView.SetAnimationRepeatAutoreverses (swtchAutoReverse.On);    				// move the image one way or the other  				if (imgToAnimate.Frame.Y == 214) {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y + 400)'  						imgToAnimate.Frame.Size);  				} else {  					imgToAnimate.Frame = new CGRect (  						new CGPoint (imgToAnimate.Frame.X' imgToAnimate.Frame.Y - 400)'  						imgToAnimate.Frame.Size);  				}    				// finish our animation block  				UIView.CommitAnimations ();  			};
Magic Number,CoreAnimationExample,Controller,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\ViewTransitions\Controller.cs,ViewDidLoad,The following statement contains a magic number: var mainFrame = new CGRect (0f' 44f' View.Frame.Width' View.Frame.Height - 44f);
Magic Number,CoreAnimationExample,Controller,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\ViewTransitions\Controller.cs,ViewDidLoad,The following statement contains a magic number: var mainFrame = new CGRect (0f' 44f' View.Frame.Width' View.Frame.Height - 44f);
Magic Number,CoreAnimationExample,Controller,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\ViewTransitions\Controller.cs,ViewDidLoad,The following statement contains a magic number: transitionViewController.TransitionClicked += (s' e) => {  				UIView.Transition (transitionViewController.View' backViewController.View' 0.75'  					transitionViewController.SelectedTransition' null);  			};
Magic Number,CoreAnimationExample,Controller,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\ViewTransitions\Controller.cs,ViewDidLoad,The following statement contains a magic number: backViewController.BackClicked += (s' e) => {  				UIView.Transition (backViewController.View' transitionViewController.View' 0.75'  					transitionViewController.SelectedTransition' null);  			};
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {    				// create a keyframe animation  				var keyFrameAnimation = (CAKeyFrameAnimation)CAKeyFrameAnimation.GetFromKeyPath ("position");  				keyFrameAnimation.Path = animationPath;  				keyFrameAnimation.Duration = 3;    				keyFrameAnimation.TimingFunction = CAMediaTimingFunction.FromName (CAMediaTimingFunction.EaseInEaseOut);    				imgToAnimate.Layer.AddAnimation (keyFrameAnimation' "MoveImage");  				imgToAnimate.Layer.Position = new CGPoint (700f' 900f);  			};
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {    				// create a keyframe animation  				var keyFrameAnimation = (CAKeyFrameAnimation)CAKeyFrameAnimation.GetFromKeyPath ("position");  				keyFrameAnimation.Path = animationPath;  				keyFrameAnimation.Duration = 3;    				keyFrameAnimation.TimingFunction = CAMediaTimingFunction.FromName (CAMediaTimingFunction.EaseInEaseOut);    				imgToAnimate.Layer.AddAnimation (keyFrameAnimation' "MoveImage");  				imgToAnimate.Layer.Position = new CGPoint (700f' 900f);  			};
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {    				// create a keyframe animation  				var keyFrameAnimation = (CAKeyFrameAnimation)CAKeyFrameAnimation.GetFromKeyPath ("position");  				keyFrameAnimation.Path = animationPath;  				keyFrameAnimation.Duration = 3;    				keyFrameAnimation.TimingFunction = CAMediaTimingFunction.FromName (CAMediaTimingFunction.EaseInEaseOut);    				imgToAnimate.Layer.AddAnimation (keyFrameAnimation' "MoveImage");  				imgToAnimate.Layer.Position = new CGPoint (700f' 900f);  			};
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1StartPoint = new CGPoint (56f' 104f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1StartPoint = new CGPoint (56f' 104f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1ControlPoint1 = new CGPoint (50f' 250f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1ControlPoint1 = new CGPoint (50f' 250f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1ControlPoint2 = new CGPoint (220f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1ControlPoint2 = new CGPoint (220f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1EndPoint = new CGPoint (384f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve1EndPoint = new CGPoint (384f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2ControlPoint1 = new CGPoint (500f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2ControlPoint1 = new CGPoint (500f' 450f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2ControlPoint2 = new CGPoint (700f' 650f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2ControlPoint2 = new CGPoint (700f' 650f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2EndPoint = new CGPoint (700f' 900f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,CreatePath,The following statement contains a magic number: var curve2EndPoint = new CGPoint (700f' 900f);
Magic Number,CoreAnimationExample,LayerAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\LayerAnimationScreen.xib.cs,DrawPathAsBackground,The following statement contains a magic number: context.SetLineWidth (3f);
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,Initialize,The following statement contains a magic number: imgLayer.Frame = new CGRect (200' 70' 114' 114);
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,Initialize,The following statement contains a magic number: imgLayer.Frame = new CGRect (200' 70' 114' 114);
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,Initialize,The following statement contains a magic number: imgLayer.Frame = new CGRect (200' 70' 114' 114);
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,Initialize,The following statement contains a magic number: imgLayer.Frame = new CGRect (200' 70' 114' 114);
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Magic Number,CoreAnimationExample,ImplicitAnimationScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\LayerAnimation\ImplicitAnimationScreen.xib.cs,ViewDidLoad,The following statement contains a magic number: btnAnimate.TouchUpInside += (s' e) => {  				if (imgLayer.Frame.Y == 70) {  					imgLayer.Frame = new CGRect (new CGPoint (200' 270)' imgLayer.Frame.Size);  					imgLayer.Opacity = 0.2f;  				} else {  					imgLayer.Frame = new CGRect (new CGPoint (200' 70)' imgLayer.Frame.Size);  					imgLayer.Opacity = 1.0f;  				}  			};
Missing Default,CoreAnimationExample,CustomizableAnimationViewerScreen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\CoreAnimation\Screens\iPad\CustomizableAnimationViewer\CustomizableAnimationViewerScreen.xib.cs,ViewDidLoad,The following switch statement is missing a default case: switch (sgmtCurves.SelectedSegment) {  					case 0:  						curve = UIViewAnimationCurve.EaseInOut;  						break;  					case 1:  						curve = UIViewAnimationCurve.EaseIn;  						break;  					case 2:  						curve = UIViewAnimationCurve.EaseOut;  						break;  					case 3:  						curve = UIViewAnimationCurve.Linear;  						break;  				}
