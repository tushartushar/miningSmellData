Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,DrawInContext,Cyclomatic complexity of the method is 13
Complex Method,TouchCanvas,LinePoint,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\LinePoint.cs,UpdateWithTouch,Cyclomatic complexity of the method is 10
Long Parameter List,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicatorForAzimuthAngle,The method has 5 parameters. Parameters: azimuthAngle' azimuthUnitVector' altitudeAngle' targetLineLayer' targetDotLayer
Long Identifier,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,,The length of the parameter pointsWaitingForUpdatesByEstimationIndex is 40.
Long Statement,TouchCanvas,CanvasView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\CanvasView.cs,CommitLine,The length of the statement  "			// Have the line draw any segments between points no longer being updated into the frozenContext and remove them from the line. " is 127.
Long Statement,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicator,The length of the statement  "			LayoutIndicatorForAzimuthAngle (predictedAzimuthAngle' predictedAzimuthUnitVector' predictedAltitudeAngle' predictedLineLayer' predictedDotLayer); " is 146.
Long Statement,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicatorForAzimuthAngle,The length of the statement  "			var dotTransform = CGAffineTransform.MakeTranslation (-azimuthUnitVector.dx * altitudeRadius' -azimuthUnitVector.dy * altitudeRadius); " is 134.
Complex Conditional,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,DrawInContext,The conditional expression  "isDebuggingEnabled &&  				    !point.PointType.HasFlag (PointType.Coalesced) &&  				    !point.PointType.HasFlag (PointType.Predicted) &&  				    !point.PointType.HasFlag (PointType.Finger)"  is complex.
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,DrawInContext,The following statement contains a magic number: context.SetLineWidth (.5f);
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,DrawInContext,The following statement contains a magic number: var targetPoint = new CGPoint (.5f + 10f * NMath.Cos (point.AltitudeAngle)' 0f);
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,DrawInContext,The following statement contains a magic number: var targetPoint = new CGPoint (.5f + 10f * NMath.Cos (point.AltitudeAngle)' 0f);
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,CalcUpdateRectFor,The following statement contains a magic number: var magnitude = -3 * point.Magnitude - 2;
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,CalcUpdateRectFor,The following statement contains a magic number: var magnitude = -3 * point.Magnitude - 2;
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,UpdateRectForLinePoint,The following statement contains a magic number: var magnitude = -3 * pointMagnitude - 2;
Magic Number,TouchCanvas,Line,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\Line.cs,UpdateRectForLinePoint,The following statement contains a magic number: var magnitude = -3 * pointMagnitude - 2;
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutSubviews,The following statement contains a magic number: reticleLayer.Position = new CGPoint (Bounds.Width / 2' Bounds.Height / 2);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutSubviews,The following statement contains a magic number: reticleLayer.Position = new CGPoint (Bounds.Width / 2' Bounds.Height / 2);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: var imageRadius = NMath.Ceiling (radius * 1.2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: var imageSize = new CGSize (imageRadius * 2f' imageRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: var imageSize = new CGSize (imageRadius * 2f' imageRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: ctx.SetLineWidth (2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: ctx.AddEllipseInRect (new CGRect (-radius' -radius' radius * 2' radius * 2));
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: ctx.AddEllipseInRect (new CGRect (-radius' -radius' radius * 2' radius * 2));
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: path.MoveToPoint (transform' radius * .5f' 0f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: path.AddLineToPoint (transform' radius * 1.15f' 0);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: transform.Rotate (NMath.PI / 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: i < 4
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: reticleLayer.Bounds = new CGRect (0f' 0f' imageRadius * 2f' imageRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,RenderReticleImage,The following statement contains a magic number: reticleLayer.Bounds = new CGRect (0f' 0f' imageRadius * 2f' imageRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicatorForAzimuthAngle,The following statement contains a magic number: var centeringTransform = CGAffineTransform.MakeTranslation (reticleBounds.Width / 2f' reticleBounds.Height / 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicatorForAzimuthAngle,The following statement contains a magic number: var centeringTransform = CGAffineTransform.MakeTranslation (reticleBounds.Width / 2f' reticleBounds.Height / 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,LayoutIndicatorForAzimuthAngle,The following statement contains a magic number: var altitudeRadius = (1f - altitudeAngle / NMath.PI / 2f) * radius;
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,ConfigureDotLayer,The following statement contains a magic number: targetLayer.Bounds = new CGRect (0f' 0f' dotRadius * 2f' dotRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,ConfigureDotLayer,The following statement contains a magic number: targetLayer.Bounds = new CGRect (0f' 0f' dotRadius * 2f' dotRadius * 2f);
Magic Number,TouchCanvas,ReticleView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\UI\ReticleView.cs,ConfigureLineLayer,The following statement contains a magic number: targetLayer.AnchorPoint = new CGPoint (0f' .5f);
Missing Default,TouchCanvas,LinePoint,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\TouchCanvas\TouchCanvas\Model\LinePoint.cs,UpdateWithTouch,The following switch statement is missing a default case: switch (expectedProperty) {  				case UITouchProperties.Force:  					Force = touch.Force;  					break;  				case UITouchProperties.Azimuth:  					AzimuthAngle = touch.GetAzimuthAngle (touch.View);  					break;  				case UITouchProperties.Altitude:  					AltitudeAngle = touch.AltitudeAngle;  					break;  				case UITouchProperties.Location:  					Location = touch.LocationInView (touch.View);  					PreciseLocation = touch.PreviousLocationInView (touch.View);  					break;  				}
