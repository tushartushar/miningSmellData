Implementation smell,Namespace,Class,File,Method,Description
Magic Number,DynamicsCatalog,AttachmentsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\AttachmentsViewController.cs,ViewDidLoad,The following statement contains a magic number: var squareCenterPoint = new CGPoint (square.Center.X' square.Center.Y - 100.0f);
Magic Number,DynamicsCatalog,AttachmentsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\AttachmentsViewController.cs,ViewDidLoad,The following statement contains a magic number: var attachmentOffset = new UIOffset (-25.0f' -25.0f);
Magic Number,DynamicsCatalog,AttachmentsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\AttachmentsViewController.cs,ViewDidLoad,The following statement contains a magic number: var attachmentOffset = new UIOffset (-25.0f' -25.0f);
Magic Number,DynamicsCatalog,AttachmentsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\AttachmentsViewController.cs,ViewDidLoad,The following statement contains a magic number: blueSquare.Center = new CGPoint (25.0f' 25.0f);
Magic Number,DynamicsCatalog,AttachmentsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\AttachmentsViewController.cs,ViewDidLoad,The following statement contains a magic number: blueSquare.Center = new CGPoint (25.0f' 25.0f);
Magic Number,DynamicsCatalog,CollisionGravitySpringViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\CollisionGravitySpringViewController.cs,ViewDidLoad,The following statement contains a magic number: var squareCenterPoint = new CGPoint (square.Center.X' square.Center.Y - 100);
Magic Number,DynamicsCatalog,CollisionGravitySpringViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\CollisionGravitySpringViewController.cs,ViewDidLoad,The following statement contains a magic number: var attachmentBehavior = new UIAttachmentBehavior (square' squareCenterPoint) {  				Frequency = 1.0f'  				Damping = 0.1f  			};
Magic Number,DynamicsCatalog,CollisionGravitySpringViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\CollisionGravitySpringViewController.cs,ViewDidLoad,The following statement contains a magic number: blueSquare.Center = new CGPoint (50.0f' 50.0f);
Magic Number,DynamicsCatalog,CollisionGravitySpringViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\CollisionGravitySpringViewController.cs,ViewDidLoad,The following statement contains a magic number: blueSquare.Center = new CGPoint (50.0f' 50.0f);
Magic Number,DynamicsCatalog,ContinuousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\ContinuousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: redSquare.Layer.AnchorPoint = new CGPoint (0.0f' 0.5f);
Magic Number,DynamicsCatalog,ContinuousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\ContinuousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.  	    		 To visually show the impulse vector on screen' a red line representing  	    		 the angle and magnitude of this vector is briefly drawn.  	    		 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float) Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float) Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 200.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  			}));
Magic Number,DynamicsCatalog,ContinuousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\ContinuousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.  	    		 To visually show the impulse vector on screen' a red line representing  	    		 the angle and magnitude of this vector is briefly drawn.  	    		 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float) Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float) Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 200.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  			}));
Magic Number,DynamicsCatalog,ContinuousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\ContinuousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.  	    		 To visually show the impulse vector on screen' a red line representing  	    		 the angle and magnitude of this vector is briefly drawn.  	    		 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float) Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float) Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 200.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  			}));
Magic Number,DynamicsCatalog,InstantaneousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\InstantaneousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: redSquare.Layer.AnchorPoint = new CGPoint (0.0f' 0.5f);
Magic Number,DynamicsCatalog,InstantaneousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\InstantaneousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.      			 To visually show the impulse vector on screen' a red line representing      			 the angle and magnitude of this vector is briefly drawn.      			 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float)Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float)Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 100.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);  				redSquare.Alpha = 1.0f;    				UIView.Animate (1.0f' () => {  					redSquare.Alpha = 0.0f;  				});    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  				pushBehavior.Active = true;  			}));
Magic Number,DynamicsCatalog,InstantaneousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\InstantaneousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.      			 To visually show the impulse vector on screen' a red line representing      			 the angle and magnitude of this vector is briefly drawn.      			 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float)Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float)Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 100.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);  				redSquare.Alpha = 1.0f;    				UIView.Animate (1.0f' () => {  					redSquare.Alpha = 0.0f;  				});    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  				pushBehavior.Active = true;  			}));
Magic Number,DynamicsCatalog,InstantaneousPushViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\InstantaneousPushViewController.cs,ViewDidLoad,The following statement contains a magic number: View.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) => {  				/*  	    		 Tapping will change the angle and magnitude of the impulse.      			 To visually show the impulse vector on screen' a red line representing      			 the angle and magnitude of this vector is briefly drawn.      			 */  				CGPoint p = gesture.LocationInView (View);  				CGPoint o = new CGPoint (View.Bounds.GetMidX ()' View.Bounds.GetMidY ());  				float distance = (float)Math.Sqrt ((p.X - o.X) * (p.X - o.X) + (p.Y - o.Y) * (p.Y - o.Y));  				float angle = (float)Math.Atan2 (p.Y - o.Y' p.X - o.X);  				distance = Math.Min (distance' 100.0f);    				redSquare.Bounds = new CGRect (0.0f' 0.0f' distance' 5.0f);  				redSquare.Transform = CGAffineTransform.MakeRotation (angle);  				redSquare.Alpha = 1.0f;    				UIView.Animate (1.0f' () => {  					redSquare.Alpha = 0.0f;  				});    				pushBehavior.Magnitude = distance / 100.0f;  				pushBehavior.Angle = angle;  				pushBehavior.Active = true;  			}));
Magic Number,DynamicsCatalog,ItemPropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\DynamicsCatalog\DynamicsCatalog\ItemPropertiesViewController.cs,ViewDidLoad,The following statement contains a magic number: var propertiesBehavior = new UIDynamicItemBehavior (square2) {  				Elasticity = 0.5f  			};
