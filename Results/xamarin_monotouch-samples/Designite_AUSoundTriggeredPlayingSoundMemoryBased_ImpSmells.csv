Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,RenderCallback,The method has 5 parameters. Parameters: actionFlags' timeStamp' busNumber' numberFrames' data
Long Statement,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,PrepareExtAudioFile,The length of the statement  "			// The client data format must be PCM. In other words' you canâ€™t use a single ExtAudioFile to convert between two compressed formats. " is 133.
Magic Number,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,PrepareAudioUnit,The following statement contains a magic number: dstFormat = new AudioStreamBasicDescription {  				SampleRate = AudioSession.CurrentHardwareSampleRate'  				Format = AudioFormatType.LinearPCM'  				FormatFlags = AudioFormatFlags.IsSignedInteger | AudioFormatFlags.IsNonInterleaved'  				BytesPerPacket = 4'  				FramesPerPacket = 1'  				BytesPerFrame = 4'  				ChannelsPerFrame = 2'  				BitsPerChannel = 16  			};
Magic Number,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,PrepareAudioUnit,The following statement contains a magic number: dstFormat = new AudioStreamBasicDescription {  				SampleRate = AudioSession.CurrentHardwareSampleRate'  				Format = AudioFormatType.LinearPCM'  				FormatFlags = AudioFormatFlags.IsSignedInteger | AudioFormatFlags.IsNonInterleaved'  				BytesPerPacket = 4'  				FramesPerPacket = 1'  				BytesPerFrame = 4'  				ChannelsPerFrame = 2'  				BitsPerChannel = 16  			};
Magic Number,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,PrepareAudioUnit,The following statement contains a magic number: dstFormat = new AudioStreamBasicDescription {  				SampleRate = AudioSession.CurrentHardwareSampleRate'  				Format = AudioFormatType.LinearPCM'  				FormatFlags = AudioFormatFlags.IsSignedInteger | AudioFormatFlags.IsNonInterleaved'  				BytesPerPacket = 4'  				FramesPerPacket = 1'  				BytesPerFrame = 4'  				ChannelsPerFrame = 2'  				BitsPerChannel = 16  			};
Magic Number,AUSoundTriggeredPlayingSoundMemoryBased,ExtAudioBufferPlayer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\ExtAudioBufferPlayer.cs,PrepareAudioUnit,The following statement contains a magic number: dstFormat = new AudioStreamBasicDescription {  				SampleRate = AudioSession.CurrentHardwareSampleRate'  				Format = AudioFormatType.LinearPCM'  				FormatFlags = AudioFormatFlags.IsSignedInteger | AudioFormatFlags.IsNonInterleaved'  				BytesPerPacket = 4'  				FramesPerPacket = 1'  				BytesPerFrame = 4'  				ChannelsPerFrame = 2'  				BitsPerChannel = 16  			};
Magic Number,AUSoundTriggeredPlayingSoundMemoryBased,MainView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AUSoundTriggeredPlayingSoundMemoryBased\MainView.cs,ViewDidLoad,The following statement contains a magic number: timer = NSTimer.CreateRepeatingTimer (TimeSpan.FromMilliseconds (100)'  				_ => {  					if (isTimerAvailable) {  						long pos = player.CurrentFrame;  						_slider.Value = pos;  						_signalLevelLabel.Text = player.SignalLevel.ToString ("0.00E0");  					}  				}  			);
