Implementation smell,Namespace,Class,File,Method,Description
Long Method,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,ReleaseDesignerOutlets,The method has 114 lines of code.
Long Method,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,InitGameComponents,The method has 105 lines of code.
Long Method,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,The method has 122 lines of code.
Complex Method,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 29
Complex Method,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ConfigureView,Cyclomatic complexity of the method is 8
Complex Method,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ConfigureARSession,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,UpdateGameBoard,Cyclomatic complexity of the method is 8
Complex Method,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 16
Complex Method,XamarinShot.Utils,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNNodeExtensions.cs,CopyGeometryForPaintColors,Cyclomatic complexity of the method is 10
Complex Method,XamarinShot.Utils,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNNodeExtensions.cs,LoadSCNAsset,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Catapult,Cyclomatic complexity of the method is 12
Complex Method,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,InitGameComponents,Cyclomatic complexity of the method is 10
Complex Method,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,Cyclomatic complexity of the method is 19
Complex Method,XamarinShot.Models,PhysicsSyncSceneData,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Physics Synchronization\PhysicsSyncSceneData.cs,UpdateFromReceivedData,Cyclomatic complexity of the method is 10
Complex Method,XamarinShot.Models,PhysicsSyncSceneData,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Physics Synchronization\PhysicsSyncSceneData.cs,UpdateObjectsFromData,Cyclomatic complexity of the method is 8
Complex Method,XamarinShot.Models,ClothSimMetalNode,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Dispose,Cyclomatic complexity of the method is 12
Complex Method,XamarinShot.Models,CatapultInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultInteraction.cs,DidCollision,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models,LeverInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\LeverInteraction.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models,HighlightInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\HighlightInteraction.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,AnimWaypointComponent,Cyclomatic complexity of the method is 8
Complex Method,XamarinShot.Models.GameplayState,ConstrainHierarchyComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\ConstrainHierarchyComponent.cs,InitBehavior,Cyclomatic complexity of the method is 10
Complex Method,XamarinShot.Models.Enums,SessionStateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Enums\SessionState.cs,LocalizedInstruction,Cyclomatic complexity of the method is 9
Long Parameter List,XamarinShot.Models,NetworkSession,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\NetworkSession.cs,DidFinishReceivingResource,The method has 5 parameters. Parameters: session' resourceName' fromPeer' localUrl' error
Long Parameter List,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,GameObject,The method has 5 parameters. Parameters: node' index' gamedefs' alive' server
Long Parameter List,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,Create,The method has 5 parameters. Parameters: node' index' gamedefs' alive' server
Long Parameter List,XamarinShot.Models,Projectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\Projectile.cs,Projectile,The method has 5 parameters. Parameters: node' index' gamedefs' isAlive' isServer
Long Parameter List,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,GameManager,The method has 5 parameters. Parameters: sceneView' level' session' audioEnvironment' musicCoordinator
Long Parameter List,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,TrailBallProjectile,The method has 5 parameters. Parameters: node' index' gamedefs' isAlive' isServer
Long Parameter List,XamarinShot.Models.GameplayState,GameAudioComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\GameAudioComponent.cs,DidCollision,The method has 5 parameters. Parameters: manager' node' otherNode' pos' impulse
Long Parameter List,XamarinShot.Models.GameplayState,ICollisionHandlerComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\GameObjectComponent.cs,DidCollision,The method has 5 parameters. Parameters: manager' node' otherNode' pos' impulse
Long Parameter List,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The method has 5 parameters. Parameters: pos1' pos2' tangent1' tangent2' time
Long Parameter List,XamarinShot.Models.GameplayState,ConstrainHierarchyComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\ConstrainHierarchyComponent.cs,CreateHingeJoint,The method has 6 parameters. Parameters: source' sourceAxis' sourceAnchor' dest' destAxis' destAnchor
Long Parameter List,XamarinShot.Models.Formattings,SCNVector3Formatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\SCNVector3Formatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,XamarinShot.Models.Formattings,SCNQuaternionFormatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\SCNQuaternionFormatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,XamarinShot.Models.Formattings,SCNVector4Formatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\SCNVector4Formatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,XamarinShot.Models.Formattings,PhysicsNodeDataFormatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\PhysicsNodeDataFormatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,XamarinShot.Models.Formattings,BoolFormatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\BoolFormatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,XamarinShot.Models.Formattings,SCNMatrix4Formatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\SCNMatrix4Formatting.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Identifier,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,HandleStartGameMusicWithLatencyEstimate,The length of the parameter numberOfRoundTripsToEstimateLatency is 35.
Long Identifier,XamarinShot.Models,PhysicsNodeData,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Physics Synchronization\PhysicsNodeData.cs,,The length of the parameter PositionDeltaToConsiderNotMoving is 32.
Long Identifier,XamarinShot.Models,PhysicsNodeData,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Physics Synchronization\PhysicsNodeData.cs,,The length of the parameter OrientationDeltaToConsiderNotMoving is 35.
Long Identifier,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The length of the parameter normalSmoothComputeCommandBuffer is 32.
Long Identifier,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The length of the parameter normalSmoothComputeCommandEncoder is 33.
Long Identifier,XamarinShot.Models,LeverInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\LeverInteraction.cs,,The length of the parameter LeverPullZtoLeverEulerRotation is 30.
Long Identifier,XamarinShot.Models,CatapultDisableInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultDisableInteraction.cs,,The length of the parameter CatapultUnstableTimeUntilDisable is 32.
Long Statement,XamarinShot,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\AppDelegate.cs,FinishedLaunching,The length of the statement  "            var dictionary = NSDictionary.FromObjectsAndKeys(UserDefaults.ApplicationDefaults.Values.Select(value => value).ToArray()'  " is 122.
Long Statement,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,ViewDidLoad,The length of the statement  "            NSNotificationCenter.DefaultCenter.AddObserver(UIApplication.DidBecomeActiveNotification' this.DidApplicationBecomeActive); " is 123.
Long Statement,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,ConfigureBoardLocationCells,The length of the statement  "            this.worldMapCell.Accessory = boardLocationMode == BoardLocatingMode.WorldMap ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 147.
Long Statement,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,ConfigureBoardLocationCells,The length of the statement  "            this.manualCell.Accessory = boardLocationMode == BoardLocatingMode.Manual ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 143.
Long Statement,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,enableGameRoomModeChanged,The length of the statement  "                var alertController = UIAlertController.Create(NSBundle.MainBundle.GetLocalizedString("Insufficient Location Permissions For Beacons")'  // "User didn't enable location services" " is 178.
Long Statement,XamarinShot,DeveloperSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\DeveloperSettingsTableViewController.cs,enableGameRoomModeChanged,The length of the statement  "                                                               NSBundle.MainBundle.GetLocalizedString("Please go to Settings and enable location services for XamarinShot to look for nearby beacons")' // "Steps the user can take to activate beacon" " is 184.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ViewDidLoad,The length of the statement  "            NSNotificationCenter.DefaultCenter.AddObserver(NSProcessInfo.ThermalStateDidChangeNotification' (obj) => this.UpdateThermalStateIndicator()); " is 141.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,UpdateThermalStateIndicator,The length of the statement  "                this.thermalStateLabel.Hidden = !(UserDefaults.ShowThermalState && NSProcessInfo.ProcessInfo.ThermalState == NSProcessInfoThermalState.Critical); " is 145.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ConfigureView,The length of the statement  "            this.sceneView.AntialiasingMode = UserDefaults.AntialiasingMode ? SCNAntialiasingMode.Multisampling4X : SCNAntialiasingMode.None; " is 129.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,exitGamePressed,The length of the statement  "            var stayAction = UIAlertAction.Create(NSBundle.MainBundle.GetLocalizedString("Stay")' UIAlertActionStyle.Default' null); " is 120.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,exitGamePressed,The length of the statement  "            var leaveAction = UIAlertAction.Create(NSBundle.MainBundle.GetLocalizedString("Leave")' UIAlertActionStyle.Cancel' (action) => " is 126.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,exitGamePressed,The length of the statement  "                localizedMessage = NSBundle.MainBundle.GetLocalizedString("You’re the host' so if you leave now the other players will have to leave too."); " is 140.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,UpdateGameBoard,The length of the statement  "                    var result = this.sceneView.HitTest(this.ScreenCenter' ARHitTestResultType.EstimatedHorizontalPlane | ARHitTestResultType.ExistingPlaneUsingExtent).FirstOrDefault(); " is 165.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SetupLevel,The length of the statement  "                var boardSize = new CGSize((float)this.gameBoard.Scale.X' (float)(this.gameBoard.Scale.X * this.gameBoard.AspectRatio)); " is 120.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SendWorldTo,The length of the statement  "                                var location = new GameBoardLocation { WorldMapData = data' Type = GameBoardLocation.GameBoardLocationType.WorldMapData }; " is 122.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SendWorldTo,The length of the statement  "                                    this.gameManager.Send(new BoardSetupAction { BoardLocation = location' Type = BoardSetupAction.BoardSetupActionType.BoardLocation }' peer); " is 139.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SendWorldTo,The length of the statement  "                        this.gameManager.Send(new BoardSetupAction { BoardLocation = new GameBoardLocation { Type = GameBoardLocation.GameBoardLocationType.Manual } }' peer); " is 150.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,saveAsKeyPositionPressed,The length of the statement  "            // Save the current position as an ARAnchor and store it in the worldmap for later use when re-localizing to guide users " is 120.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,showNextKeyPositionThumbnail,The length of the statement  "                    var currentKeyPositionAnchor = keyPositionAnchors.FirstOrDefault(anchor => anchor.Image == this.keyPositionThumbnail.Image); " is 124.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,LoadPressed,The length of the statement  "            var picker = new UIDocumentPickerViewController(new string[] { "com.apple.xamarin-shot.worldmap" }' UIDocumentPickerMode.Open) " is 126.
Long Statement,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ShowSaveDialog,The length of the statement  "                        var docs = NSFileManager.DefaultManager.GetUrl(NSSearchPathDirectory.DocumentDirectory' NSSearchPathDomain.User' null' true' out NSError error); " is 144.
Long Statement,XamarinShot,WorldMapSelectorViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\WorldMapSelectorViewController.cs,ViewDidLoad,The length of the statement  "            var docs = NSFileManager.DefaultManager.GetUrl(NSSearchPathDirectory.DocumentDirectory' NSSearchPathDomain.User' null' true' out NSError error); " is 144.
Long Statement,XamarinShot,WorldMapSelectorViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\WorldMapSelectorViewController.cs,ViewDidLoad,The length of the statement  "            var localMaps = NSFileManager.DefaultManager.GetDirectoryContent(mapsDirectory' null' default(NSDirectoryEnumerationOptions)' out NSError _); " is 141.
Long Statement,XamarinShot.Utils,SimdExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SimdExtensions.cs,ToNMatrix4,The length of the statement  "            return new OpenTK.NMatrix4((OpenTK.Vector4)self.Row0' (OpenTK.Vector4)self.Row1' (OpenTK.Vector4)self.Row2' (OpenTK.Vector4)self.Row3); " is 135.
Long Statement,XamarinShot.Models,NetworkSession,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\NetworkSession.cs,StartAdvertising,The length of the statement  "                var discoveryInfo = NSDictionary.FromObjectAndKey(new NSString(appIdentifier)' new NSString(XamarinShotGameAttribute.AppIdentifier)); " is 133.
Long Statement,XamarinShot.Models,NetworkSession,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\NetworkSession.cs,StartAdvertising,The length of the statement  "                var advertiser = new MCNearbyServiceAdvertiser(this.myself.PeerId' discoveryInfo' XamarinShotGameService.PlayerService); " is 120.
Long Statement,XamarinShot.Models,CollisionAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CollisionAudioSampler.cs,CreateCollisionEvent,The length of the statement  "                var normalizedImpulse = DigitExtensions.Clamp((impulse - this.configuration.MinimumImpulse) / (this.configuration.MaximumImpulse - this.configuration.MinimumImpulse)' " is 166.
Long Statement,XamarinShot.Models,CollisionAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CollisionAudioSampler.cs,CreateCollisionEvent,The length of the statement  "                var rangedImpulse = this.configuration.VelocityMinimum + (this.configuration.VelocityMaximum - this.configuration.VelocityMinimum) * normalizedImpulse; " is 151.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ReplaceCatapultPlaceholder,The length of the statement  "            var baseShape = SCNPhysicsShape.Create(baseGeomNode' new SCNPhysicsShapeOptions() { ShapeType = SCNPhysicsShapeType.ConvexHull }); " is 130.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ReplaceCatapultPlaceholder,The length of the statement  "            var prongShape = SCNPhysicsShape.Create(prongGeomNode' new SCNPhysicsShapeOptions() { ShapeType = SCNPhysicsShapeType.ConvexHull }); " is 132.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateCatapultStable,The length of the statement  "                    // Cannot use simdVelocity on client since simdVelocity could be high from physicsSync interacting with local physics engine " is 124.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,DoHighlight,The length of the statement  "                        this.HighlightObject.Geometry.FirstMaterial.Diffuse.Contents = UIColor.FromRGBA((Single)DigitExtensions.Clamp(color.Red + intensity' 0' 1)' " is 139.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The length of the statement  "                targetBallPosition = new SCNVector3(newTargetPullPositionGrounded.X' targetBallPosition.Y' newTargetPullPositionGrounded.Z); " is 124.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The length of the statement  "                targetBallPosition = (clampedStretchDistance / stretchDistance) * (targetBallPosition - pullWorldPosition) + pullWorldPosition; " is 127.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The length of the statement  "            this.IsPulledTooFar = stretchDistance > (float)(this.properties.MaxStretch) || stretchY > (float)(this.properties.MaxStretch); " is 126.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,TryGetLaunchVelocity,The length of the statement  "            var stretchNormalized = DigitExtensions.Clamp((this.stretch - this.properties.MinStretch) / (this.properties.MaxStretch - this.properties.MinStretch)' 0.0' 1.0); " is 161.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,TryGetLaunchVelocity,The length of the statement  "            var velocity = (float)(this.properties.MinVelocity * (1d - stretchNormalized) + this.properties.MaxVelocity * stretchNormalized); " is 129.
Long Statement,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Update,The length of the statement  "                    var timeForCooldown = this.properties.CooldownTime - this.properties.GrowAnimationTime - this.properties.DropAnimationTime; " is 123.
Long Statement,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,LoadGameDefs,The length of the statement  "                        result[key] = dictionary.TryGet(key' out Dictionary<string' object> parsedValue) ? UpdateDictionary(parsedValue) : value; " is 121.
Long Statement,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The length of the statement  "                var center = SimdExtensions.Mix(currentTransforms[i - 1].Position' currentTransforms[i + 1].Position' new SCNVector3(0.5f' 0.5f' 0.5f)); " is 136.
Long Statement,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The length of the statement  "                this.simulatedTransforms[i].Position = SimdExtensions.Mix(this.simulatedTransforms[i].Position' center' new SCNVector3(SmoothRope' SmoothRope' SmoothRope)); " is 156.
Long Statement,XamarinShot.Models,Projectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\Projectile.cs,Create,The length of the statement  "            physicsNode.PhysicsBody.ContactTestBitMask = (int)(CollisionMask.RigidBody | CollisionMask.GlitterObject | CollisionMask.TriggerVolume); " is 136.
Long Statement,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,DidBeginContact,The length of the statement  "                this.DidBeginContact(contact.NodeA' contact.NodeB' new SCNVector3(contact.ContactPoint)' (float)contact.CollisionImpulse); " is 122.
Long Statement,XamarinShot.Models,PhysicsSyncSceneData,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Physics Synchronization\PhysicsSyncSceneData.cs,DiscardOutOfOrderData,The length of the statement  "                // For the edge case where packet number resets to 0 again' we test if the difference is more than half the max packet number. " is 126.
Long Statement,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,Rotate,The length of the statement  "                this.recentRotationAngles = this.recentRotationAngles.Select(value => value.NormalizedAngle(angle' (float)Math.PI)).ToList(); " is 125.
Long Statement,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,OnDidApplyConstraints,The length of the statement  "                            var tempPositions = this.tempWorldPositions.Select(tempPosition => this.trailNode.PresentationNode.ConvertPositionFromNode(tempPosition' null)).ToList(); " is 153.
Long Statement,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,OnDidApplyConstraints,The length of the statement  "                    var localPositions = this.tempWorldPositions.Select(tempPosition => this.trailNode.PresentationNode.ConvertPositionFromNode(tempPosition' null)).ToList(); " is 154.
Long Statement,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,CreateTrailMesh,The length of the statement  "                var element = SCNGeometryElement.FromData(NSData.FromArray(array)' SCNGeometryPrimitiveType.TriangleStrip' positions.Count - 2' 2); " is 131.
Long Statement,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,CreateTrailMesh,The length of the statement  "                result = SCNGeometry.Create(new SCNGeometrySource[] { positionSource' colorSource }' new SCNGeometryElement[] { element }); " is 123.
Long Statement,XamarinShot.Models,CatapultInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultInteraction.cs,OnServerRelease,The length of the statement  "                    this.Delegate.ServerDispatchActionToAll(new GameActionType { CatapultRelease = slingData' Type = GameActionType.GActionType.CatapultRelease }); " is 143.
Long Statement,XamarinShot.Models,CatapultInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultInteraction.cs,DidCollision,The length of the statement  "                            this.Delegate.DispatchActionToServer(new GameActionType { TryRelease = data' Type = GameActionType.GActionType.TryRelease }); " is 125.
Long Statement,XamarinShot.Models,CatapultInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultInteraction.cs,VortexDidActivate,The length of the statement  "                this.Delegate.DispatchActionToAll(new GameActionType { CatapultKnockOut = data' Type = GameActionType.GActionType.HitCatapult }); " is 129.
Long Statement,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The length of the statement  "                    var pullForceMagnitude = (speedInVortexDirection * speedInVortexDirection) * (float)(block.PhysicsNode.PhysicsBody.Mass) / distanceFromCenter; " is 142.
Long Statement,XamarinShot.Models,LeverInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\LeverInteraction.cs,Update,The length of the statement  "                        this.Delegate.DispatchActionToServer(new GameActionType { LeverMove = new LeverMove(leverId' targetEulerX)' Type = GameActionType.GActionType.LeverMove }); " is 155.
Long Statement,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Update,The length of the statement  "                        this.Delegate.DispatchActionToServer(new GameActionType { TryRelease = grab' Type = GameActionType.GActionType.TryRelease }); " is 125.
Long Statement,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Update,The length of the statement  "                this.Delegate.DispatchActionToServer(new GameActionType { GrabMove = data' Type = GameActionType.GActionType.GrabMove }); " is 121.
Long Statement,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,HandleTryGrabAction,The length of the statement  "                @delegate.DispatchToPlayer(new GameActionType { GrabStart = newData' Type = GameActionType.GActionType.GrabStart }' player); " is 124.
Long Statement,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,HandleTryGrabAction,The length of the statement  "                @delegate.ServerDispatchActionToAll(new GameActionType { GrabbableStatus = newData' Type = GameActionType.GActionType.GrabbableStatus }); " is 137.
Long Statement,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,HandleTryReleaseAction,The length of the statement  "                    @delegate.DispatchToPlayer(new GameActionType { ReleaseEnd = newData' Type = GameActionType.GActionType.ReleaseEnd }' player); " is 126.
Long Statement,XamarinShot.Models,VictoryInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VictoryInteraction.cs,ActivateVictory,The length of the statement  "                this.victoryNode.EulerAngles = new SCNVector3(this.victoryNode.EulerAngles.X' eulerAnglesY' this.victoryNode.EulerAngles.Z); " is 124.
Long Statement,XamarinShot.Models,VictoryInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VictoryInteraction.cs,Update,The length of the statement  "                this.victoryNode.Opacity = (float)(DigitExtensions.Clamp((GameTime.Time - this.activationStartTime) / FadeTime' 0d' 1d)); " is 121.
Long Statement,XamarinShot.Models,CatapultDisableInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultDisableInteraction.cs,Update,The length of the statement  "                    this.Delegate.DispatchActionToAll(new GameActionType { CatapultKnockOut = knockoutInfo' Type = GameActionType.GActionType.HitCatapult }); " is 137.
Long Statement,XamarinShot.Models,CatapultDisableInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultDisableInteraction.cs,Handle,The length of the statement  "                var catapult = this.Delegate.Catapults.FirstOrDefault(item => item.CatapultId == gameAction.CatapultKnockOut.CatapultId); " is 121.
Long Statement,XamarinShot.Models,CatapultDisableInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultDisableInteraction.cs,Handle,The length of the statement  "                    this.Delegate.DispatchActionToAll(new GameActionType { CatapultKnockOut = knockoutInfo' Type = GameActionType.GActionType.HitCatapult }); " is 137.
Long Statement,XamarinShot.Models.GestureRecognizers,ThresholdPinchGestureRecognizer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gesture Recognizers\ThresholdPinchGestureRecognizer.cs,TouchDistance,The length of the statement  "                var distance = Math.Sqrt((points[0].X - points[1].X) * (points[0].X - points[1].X) + (points[0].Y - points[1].Y) * (points[0].Y - points[1].Y)); " is 144.
Long Statement,XamarinShot.Models.Formattings,PhysicsNodeDataFormatting,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\Formattings\PhysicsNodeDataFormatting.cs,ReadJson,The length of the statement  "                        result.AngularVelocity = jsonObject[nameof(result.AngularVelocity)]?.ToObject<SCNVector4>(serializer) ?? SCNVector4.Zero; " is 121.
Complex Conditional,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,SetupSmoothPhysics,The conditional expression  "value is bool doSmooth && doSmooth && this.GeometryNode != null && this.PhysicsNode != null"  is complex.
Empty Catch Block,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,FetchArchivedWorldMap,The method has an empty catch block.
Empty Catch Block,XamarinShot.Utils,ParserExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\ParserExtensions.cs,TryGet,The method has an empty catch block.
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ViewDidLoad,The following statement contains a magic number: this.instructionLabel.Layer.CornerRadius = 8f;
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ViewDidLoad,The following statement contains a magic number: this.notificationLabel.Layer.CornerRadius = 8f;
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ViewDidLoad,The following statement contains a magic number: this.buttonBeep = ButtonBeep.Create("button_forward.wav"' 0.5f);
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ViewDidLoad,The following statement contains a magic number: this.backButtonBeep = ButtonBeep.Create("button_backward.wav"' 0.5f);
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SetLevelLighting,The following statement contains a magic number: light.ShadowRadius = 3;
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SetLevelLighting,The following statement contains a magic number: light.ShadowSampleCount = 8;
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ShowOverlay,The following statement contains a magic number: this.musicCoordinator.PlayMusic("music_menu"' 0.5f);
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,HideOverlay,The following statement contains a magic number: this.musicCoordinator.StopMusic("music_menu"' 3f);
Magic Number,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,handleRotation,The following statement contains a magic number: switch (gesture.State)                  {                      case UIGestureRecognizerState.Changed:                          if (gesture.IsThresholdExceeded)                          {                              var newY = this.gameBoard.EulerAngles.Y;                              if (this.gameBoard.EulerAngles.X > Math.PI / 2d)                              {                                  newY += (float)gesture.Rotation;                              }                              else                              {                                  newY -= (float)gesture.Rotation;                              }                                this.gameBoard.EulerAngles = new SCNVector3(this.gameBoard.EulerAngles.X' newY' this.gameBoard.EulerAngles.Z);                              gesture.Rotation = 0f;                          }                          break;                  }
Magic Number,XamarinShot,NetworkGameBrowserViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\NetworkGameBrowserViewController.cs,ViewDidLoad,The following statement contains a magic number: this.tableView.Layer.CornerRadius = 10;
Magic Number,XamarinShot,GameStartViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameStartViewController.cs,ViewDidLoad,The following statement contains a magic number: this.hostButton.Layer.CornerRadius = 30f;
Magic Number,XamarinShot,GameStartViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameStartViewController.cs,ViewDidLoad,The following statement contains a magic number: this.joinButton.Layer.CornerRadius = 30f;
Magic Number,XamarinShot,GameStartViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameStartViewController.cs,ViewDidLoad,The following statement contains a magic number: this.buttonBeep = ButtonBeep.Create("button_forward.wav"' 0.5f);
Magic Number,XamarinShot,GameStartViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameStartViewController.cs,ViewDidLoad,The following statement contains a magic number: this.backButtonBeep = ButtonBeep.Create("button_backward.wav"' 0.5f);
Magic Number,XamarinShot.Utils,DigitExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\DigitExtensions.cs,NormalizedAngle,The following statement contains a magic number: Math.Abs(normalized - angle) > increment / 2
Magic Number,XamarinShot.Utils,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNNodeExtensions.cs,ComputeScreenSpaceRadius,The following statement contains a magic number: return screenSpaceDiameter * 0.5f;
Magic Number,XamarinShot.Utils,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNNodeExtensions.cs,SetNodeToOccluder,The following statement contains a magic number: node.RenderingOrder = -10;
Magic Number,XamarinShot.Utils,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNNodeExtensions.cs,CalculateMassFromDensity,The following statement contains a magic number: var radius = bounds.X / 2f;
Magic Number,XamarinShot.Utils,SimdExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SimdExtensions.cs,CreateQuaternion,The following statement contains a magic number: var s = 0.5f / (float)Math.Sqrt(t);
Magic Number,XamarinShot.Utils,SimdExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SimdExtensions.cs,CreateQuaternion,The following statement contains a magic number: w = 0.25f / s;
Magic Number,XamarinShot.Utils,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\ARSCNViewExtensions.cs,CreateScreenshot,The following statement contains a magic number: var objects = new NSNumber[] { new NSNumber(0.5f)'  new NSNumber(1f) };
Magic Number,XamarinShot.Utils,SCNGeometrySourceExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\SCNGeometrySourceExtensions.cs,Create,The following statement contains a magic number: result = SCNGeometrySource.FromData(colorData'                                                      SCNGeometrySourceSemantics.Color'                                                      colors.Count'                                                      true'                                                      4'                                                      sizeof(float)'                                                      0'                                                      SCNVector4.SizeInBytes);
Magic Number,XamarinShot.Models,GameBrowser,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBrowser.cs,Join,The following statement contains a magic number: this.serviceBrowser.InvitePeer(game.Host.PeerId' result.Session' null' 30d);
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,SFXCoordinator,The following statement contains a magic number: this.AudioEnvironment.DistanceAttenuationParameters.ReferenceDistance = 5f;
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,SFXCoordinator,The following statement contains a magic number: this.AudioEnvironment.DistanceAttenuationParameters.MaximumDistance = 40f;
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: var normalizedDistance = DigitExtensions.Clamp((stretchDistance - 0.1f) / 2f' 0f' 1f);
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: var normalizedDistance = DigitExtensions.Clamp((stretchDistance - 0.1f) / 2f' 0f' 1f);
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: interval = 0.5;
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: normalizedDistance >= 0.25 && normalizedDistance < 0.5
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: normalizedDistance >= 0.25 && normalizedDistance < 0.5
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayStretch,The following statement contains a magic number: delta < 0.0075f
Magic Number,XamarinShot.Models,SFXCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\SFXCoordinator.cs,PlayLeverHighlight,The following statement contains a magic number: this.PlayAudioFile("catapult_highlight_on_02"' 0.2f);
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following statement contains a magic number: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Magic Number,XamarinShot.Models,UIColorExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Create,The following statement contains a magic number: var fred = (float)hexRed / 255f;
Magic Number,XamarinShot.Models,UIColorExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Create,The following statement contains a magic number: var fgreen = (float)green / 255f;
Magic Number,XamarinShot.Models,UIColorExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Create,The following statement contains a magic number: var fblue = (float)blue / 255f;
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Catapult,The following statement contains a magic number: this.Base.Position = new SCNVector3(this.Base.Position.X' this.Base.Position.Y - 0.13f' this.Base.Position.Z);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Catapult,The following statement contains a magic number: Math.Abs(node.EulerAngles.X) > 0.001f || Math.Abs(node.EulerAngles.Z) > 0.001f
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,Catapult,The following statement contains a magic number: Math.Abs(node.EulerAngles.X) > 0.001f || Math.Abs(node.EulerAngles.Z) > 0.001f
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateFakeProjectileVisibility,The following statement contains a magic number: switch (ballVisible)              {                  case BallVisible.Hidden:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = true;                          this.Projectile.WorldPosition = this.ballOriginInactiveAbove.WorldPosition;                          this.Projectile.Scale = new SCNVector3(0.01f' 0.01f' 0.01f);                      }                      break;                    case BallVisible.Partial:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          this.AnimateBallGrowAndDrop();                      }                      break;                    case BallVisible.Visible:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          // it's in the strap fromn .partial animation                      }                      break;              }
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateFakeProjectileVisibility,The following statement contains a magic number: switch (ballVisible)              {                  case BallVisible.Hidden:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = true;                          this.Projectile.WorldPosition = this.ballOriginInactiveAbove.WorldPosition;                          this.Projectile.Scale = new SCNVector3(0.01f' 0.01f' 0.01f);                      }                      break;                    case BallVisible.Partial:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          this.AnimateBallGrowAndDrop();                      }                      break;                    case BallVisible.Visible:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          // it's in the strap fromn .partial animation                      }                      break;              }
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateFakeProjectileVisibility,The following statement contains a magic number: switch (ballVisible)              {                  case BallVisible.Hidden:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = true;                          this.Projectile.WorldPosition = this.ballOriginInactiveAbove.WorldPosition;                          this.Projectile.Scale = new SCNVector3(0.01f' 0.01f' 0.01f);                      }                      break;                    case BallVisible.Partial:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          this.AnimateBallGrowAndDrop();                      }                      break;                    case BallVisible.Visible:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          // it's in the strap fromn .partial animation                      }                      break;              }
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,AnimateBallGrowAndDrop,The following statement contains a magic number: var fixupLaunchAnimationTime = 0.1f;
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ReplaceCatapultPlaceholder,The following statement contains a magic number: node.WorldPosition += new SCNVector3(0f' 0.2f' 0f);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ReplaceCatapultPlaceholder,The following statement contains a magic number: var prongPivotShiftUp = new SCNVector3(0f' 0.55f' 0f);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,HitTestPull,The following statement contains a magic number: stretchDistance <= 0.01f && this.HighlightObject != null && this.HighlightObject.Hidden
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,DoHighlight,The following statement contains a magic number: var intensity = (float)(Math.Sin(seconds.TruncatingRemainder(1) * 3.1415 * 2.0) * 0.2);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,DoHighlight,The following statement contains a magic number: var intensity = (float)(Math.Sin(seconds.TruncatingRemainder(1) * 3.1415 * 2.0) * 0.2);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,DoHighlight,The following statement contains a magic number: var intensity = (float)(Math.Sin(seconds.TruncatingRemainder(1) * 3.1415 * 2.0) * 0.2);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The following statement contains a magic number: var distancePullToCamera = 0.21f;
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The following statement contains a magic number: var ballShiftDown = 0.2f;
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The following statement contains a magic number: var minBallDistanceFromPull = 0.5f;
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,ComputeBallPosition,The following statement contains a magic number: var clampedStretchDistance = (float)(1.1d * this.properties.MaxStretch);
Magic Number,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,TryGetLaunchVelocity,The following statement contains a magic number: var liftFactor = 0.05f * Math.Abs(1f - SCNVector3.Dot(launchDir' SCNVector3.UnitY));
Magic Number,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,PropFloat2,The following statement contains a magic number: strings.Length >= 2
Magic Number,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,PropFloat3,The following statement contains a magic number: float.TryParse(strings[0]' out float x) &&                          float.TryParse(strings[1]' out float y) &&                          float.TryParse(strings[2]' out float z)
Magic Number,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,PropFloat3,The following statement contains a magic number: strings.Length >= 3
Magic Number,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,Apply,The following statement contains a magic number: this.PhysicsNode.WorldPosition = (nodeData.Position + this.PhysicsNode.WorldPosition) * 0.5f;
Magic Number,XamarinShot.Models,GameObject,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameObject.cs,Apply,The following statement contains a magic number: this.PhysicsNode.Orientation = SCNQuaternion.Slerp(this.PhysicsNode.Orientation' nodeData.Orientation' 0.5f);
Magic Number,XamarinShot.Models,CatapultRope,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\CatapultRope.cs,CatapultRope,The following statement contains a magic number: this.rope = new SlingShotSimulation(this.@base' NumStrapBones' 0.02f * 5f);
Magic Number,XamarinShot.Models,CatapultRope,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\CatapultRope.cs,CatapultRope,The following statement contains a magic number: this.rope = new SlingShotSimulation(this.@base' NumStrapBones' 0.02f * 5f);
Magic Number,XamarinShot.Models,CatapultRope,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\CatapultRope.cs,CatapultRope,The following statement contains a magic number: this.rope.BallRadius = 0.275f;
Magic Number,XamarinShot.Models,CatapultRope,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\CatapultRope.cs,CatapultRope,The following statement contains a magic number: i >= 13 && i <= 21
Magic Number,XamarinShot.Models,CatapultRope,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\CatapultRope.cs,CatapultRope,The following statement contains a magic number: i >= 13 && i <= 21
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,InitializeHelpers,The following statement contains a magic number: this.computedBetaAngle = new ComputedValue<float>(() =>              {                  var d = SCNVector3.Normalize(this.ballPosition - this.CenterPosition);                  var t = SCNVector3.Normalize(this.TangentPositionL - this.ballPosition);                    var quaternion = SimdExtensions.CreateQuaternion(d' t);                  quaternion.ToAxisAngle(out SCNVector3 _' out float angle);                  return 2f * angle;              });
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,InitializeHelpers,The following statement contains a magic number: this.computedCenterPosition = new ComputedValue<SCNVector3>(() =>              {                  var direction = SCNVector3.Cross(this.UpVector' this.TangentPositionR - this.TangentPositionL);                  return this.ballPosition - SCNVector3.Normalize(direction) * 1.25f * this.ballRadius;              });
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: var segmentAEnd = this.CurrentLengthL - leatherOnStraights * 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: var isRubber = Math.Abs(0.5f - u) > originalLeatherRange * 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: var isRubber = Math.Abs(0.5f - u) > originalLeatherRange * 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: u = u / (0.5f - originalLeatherRange * 0.5f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: u = u / (0.5f - originalLeatherRange * 0.5f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,ComputeInputPose,The following statement contains a magic number: u< 0.5f
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,StartLaunchSimulation,The following statement contains a magic number: var center = (this.FixturePositionL + this.FixturePositionR) * 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,StartLaunchSimulation,The following statement contains a magic number: var restPoseFactorAlongRope = 1f - Math.Abs(u - 0.5f) / 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,StartLaunchSimulation,The following statement contains a magic number: var restPoseFactorAlongRope = 1f - Math.Abs(u - 0.5f) / 0.5f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var ab = SimdExtensions.Mix(a' b' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var ab = SimdExtensions.Mix(a' b' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var ab = SimdExtensions.Mix(a' b' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var bc = SimdExtensions.Mix(b' c' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var bc = SimdExtensions.Mix(b' c' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var bc = SimdExtensions.Mix(b' c' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: this.simulatedTransforms[i].Velocity = SimdExtensions.Mix(ab' bc' t: new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: this.simulatedTransforms[i].Velocity = SimdExtensions.Mix(ab' bc' t: new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: this.simulatedTransforms[i].Velocity = SimdExtensions.Mix(ab' bc' t: new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var center = SimdExtensions.Mix(currentTransforms[i - 1].Position' currentTransforms[i + 1].Position' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var center = SimdExtensions.Mix(currentTransforms[i - 1].Position' currentTransforms[i + 1].Position' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,AverageVelocities,The following statement contains a magic number: var center = SimdExtensions.Mix(currentTransforms[i - 1].Position' currentTransforms[i + 1].Position' new SCNVector3(0.5f' 0.5f' 0.5f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: correctedVelocity = SCNVector3.Multiply(correctedVelocity' new SCNVector3(0.7f' 0.1f' 0.7f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: correctedVelocity = SCNVector3.Multiply(correctedVelocity' new SCNVector3(0.7f' 0.1f' 0.7f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: correctedVelocity = SCNVector3.Multiply(correctedVelocity' new SCNVector3(0.7f' 0.1f' 0.7f));
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: pLocal.M24 = CollisionPlane + 0.3f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: var blend = new SCNVector3(0.3f' 0.3f' 0.3f);
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,PerformPlaneCollision,The following statement contains a magic number: pLocal.Column3.Y <= CollisionPlane + 0.3f
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,SimulateStep,The following statement contains a magic number: var minUpdateSeconds = 1f / 120f;
Magic Number,XamarinShot.Models,SlingShotSimulation,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotSimulation.cs,SimulateStep,The following statement contains a magic number: var maxUpdateSeconds = 1f / 30f;
Magic Number,XamarinShot.Models,SlingShotPose,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\SlingShotPose.cs,FindIndex,The following statement contains a magic number: this.lastIndex = this.Lengths.Count - 2;
Magic Number,XamarinShot.Models,AudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\AudioSampler.cs,StopAllNotes,The following statement contains a magic number: this.AudioNode.SendController(123' 0' 0);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,StartStretch,The following statement contains a magic number: this.AudioNode.SendController(11' 127' 0);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,StartStretch,The following statement contains a magic number: this.AudioNode.SendController(11' 127' 0);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,StartStretch,The following statement contains a magic number: this.Play(Note.Stretch' 105' false);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayLaunch,The following statement contains a magic number: var launchVel = (byte)(length * 30 + 80);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayLaunch,The following statement contains a magic number: var launchVel = (byte)(length * 30 + 80);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayLaunch,The following statement contains a magic number: var swishVel = (byte)(length * 63 + 64);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayLaunch,The following statement contains a magic number: var swishVel = (byte)(length * 63 + 64);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayHighlightOn,The following statement contains a magic number: this.Play(Note.HighlightOn' 90);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayHighlightOff,The following statement contains a magic number: this.Play(Note.HighlightOff' 90);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayGrabBall,The following statement contains a magic number: this.Play(Note.GrabBall' 110);
Magic Number,XamarinShot.Models,CatapultAudioSampler,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\CatapultAudioSampler.cs,PlayBreak,The following statement contains a magic number: this.Play(Note.Broken' 85);
Magic Number,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,UpdateMusicVolume,The following statement contains a magic number: var audioVolume = DigitExtensions.Clamp(this.musicGain * (float)Math.Pow(10f' player.Config.VolumeDB / 20f)' 0f' 1f);
Magic Number,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,UpdateMusicVolume,The following statement contains a magic number: var audioVolume = DigitExtensions.Clamp(this.musicGain * (float)Math.Pow(10f' player.Config.VolumeDB / 20f)' 0f' 1f);
Magic Number,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,UpdateMusicVolume,The following statement contains a magic number: player.AudioPlayer.SetVolume(audioVolume' 0.1d);
Magic Number,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,PlayMusic,The following statement contains a magic number: var volume = DigitExtensions.Clamp(this.musicGain * (float)Math.Pow(10f' player.Config.VolumeDB / 20f)' 0f' 1f);
Magic Number,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,PlayMusic,The following statement contains a magic number: var volume = DigitExtensions.Clamp(this.musicGain * (float)Math.Pow(10f' player.Config.VolumeDB / 20f)' 0f' 1f);
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,GameManager,The following statement contains a magic number: this.PhysicsWorld.Gravity = new SCNVector3(0f' -10f' 0f);
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,FixLevelsOfDetail,The following statement contains a magic number: var screenSpacePercent = 0.15f;
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,The following statement contains a magic number: gameObject.PhysicsNode.PhysicsBody.AngularDamping = 0.03f;
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,The following statement contains a magic number: gameObject.PhysicsNode.PhysicsBody.Damping = 0.03f;
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,The following statement contains a magic number: gameObject.PhysicsNode.PhysicsBody.Mass = 3;
Magic Number,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,RemoveTableBoxNodeFromLevel,The following statement contains a magic number: shadowPlane.RunAction(SCNAction.FadeOut(0.5));
Magic Number,XamarinShot.Models,GameObjectPool,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GameObjectPool.cs,GameObjectPool,The following statement contains a magic number: this.InitialPoolCount = 30;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,GameBoard,The following statement contains a magic number: this.borderNode.EulerAngles = new SCNVector3((float)Math.PI / 2f' this.borderNode.EulerAngles.Y' this.borderNode.EulerAngles.Z);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,UnhideBorder,The following statement contains a magic number: this.borderNode.RunAction(SCNAction.FadeIn(0.5)' "unhide");
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,UpdateTransform,The following statement contains a magic number: this.recentPositions = new List<SCNVector3>(this.recentPositions.TakeLast(10));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,OrientToPlane,The following statement contains a magic number: boardAngle += (float)Math.PI / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,Rotate,The following statement contains a magic number: Math.Abs(angle - previouAngle) > Math.PI / 2
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,Rotate,The following statement contains a magic number: this.recentRotationAngles = new List<float>(this.recentRotationAngles.TakeLast(20));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,ScaleToPlane,The following statement contains a magic number: var axisFlipped = Math.Abs(SCNVector3.Dot(planeXAxis' this.WorldRight)) < 0.5f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,AdjustPosition,The following statement contains a magic number: var boardMin = planeLocalPosition.Xyz - extent / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,AdjustPosition,The following statement contains a magic number: var boardMax = planeLocalPosition.Xyz + extent / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,AdjustPosition,The following statement contains a magic number: var planeMin = planeAnchorCenter - planeAnchorExtent / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,AdjustPosition,The following statement contains a magic number: var planeMax = planeAnchorCenter + planeAnchorExtent / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,UpdateBorderAspectRatio,The following statement contains a magic number: var length = 1 - 2 * BorderSegment.Thickness;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,UpdateBorderAspectRatio,The following statement contains a magic number: var textureScale = SimdExtensions.CreateFromScale(new SCNVector3(40f' 40f * this.AspectRatio' 1f));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,UpdateBorderAspectRatio,The following statement contains a magic number: var textureScale = SimdExtensions.CreateFromScale(new SCNVector3(40f' 40f * this.AspectRatio' 1f));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformOpenAnimation,The following statement contains a magic number: SCNTransaction.AnimationDuration = GameBoard.AnimationDuration / 4f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: SCNTransaction.AnimationDuration = GameBoard.AnimationDuration / 2f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: this.borderNode.Opacity = 0.99f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: SCNTransaction.SetCompletionBlock(() =>                  {                      SCNTransaction.Begin();                      SCNTransaction.AnimationDuration = GameBoard.AnimationDuration / 2f;                      SCNTransaction.AnimationTimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseOut);                        foreach (var segment in this.borderSegments)                      {                          segment.Close();                      }                        SCNTransaction.SetCompletionBlock(() =>                      {                          this.isAnimating = false;                      });                        SCNTransaction.Commit();                  });
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: var waitAction = SCNAction.Wait(GameBoard.AnimationDuration * 0.75f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: var fadeInAction = SCNAction.FadeOpacityTo(0.6f' GameBoard.AnimationDuration * 0.125f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: var fadeInAction = SCNAction.FadeOpacityTo(0.6f' GameBoard.AnimationDuration * 0.125f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PerformCloseAnimation,The following statement contains a magic number: var fadeOutAction = SCNAction.FadeOpacityTo(0f' GameBoard.AnimationDuration * 0.125f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,GetFillPlane,The following statement contains a magic number: var length = 1f - 2f * BorderSegment.Thickness;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,GetFillPlane,The following statement contains a magic number: node.Opacity = 0.6f;
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,GetFillPlane,The following statement contains a magic number: var textureScale = SimdExtensions.CreateFromScale(new SCNVector3(40f' 40f * this.AspectRatio' 1f));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,GetFillPlane,The following statement contains a magic number: var textureScale = SimdExtensions.CreateFromScale(new SCNVector3(40f' 40f * this.AspectRatio' 1f));
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PulseAction,The following statement contains a magic number: var pulseOutAction = SCNAction.FadeOpacityTo(0.4f' 0.5f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PulseAction,The following statement contains a magic number: var pulseOutAction = SCNAction.FadeOpacityTo(0.4f' 0.5f);
Magic Number,XamarinShot.Models,GameBoard,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoard.cs,PulseAction,The following statement contains a magic number: var pulseInAction = SCNAction.FadeOpacityTo(1f' 0.5f);
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,xOffset,The following statement contains a magic number: switch (alignment)               {                  case Alignment.Horizontal:                      return (float)(size.Width / 2f - BorderSegment.Thickness) / 2f;                  case Alignment.Vertical:                      return (float)(size.Width / 2f);              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,xOffset,The following statement contains a magic number: switch (alignment)               {                  case Alignment.Horizontal:                      return (float)(size.Width / 2f - BorderSegment.Thickness) / 2f;                  case Alignment.Vertical:                      return (float)(size.Width / 2f);              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,xOffset,The following statement contains a magic number: switch (alignment)               {                  case Alignment.Horizontal:                      return (float)(size.Width / 2f - BorderSegment.Thickness) / 2f;                  case Alignment.Vertical:                      return (float)(size.Width / 2f);              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,yOffset,The following statement contains a magic number: switch (alignment)              {                  case Alignment.Horizontal:                      return (float)(size.Height / 2f - BorderSegment.Thickness / 2f);                  case Alignment.Vertical:                      return (float)(size.Height / 2f) / 2f;              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,yOffset,The following statement contains a magic number: switch (alignment)              {                  case Alignment.Horizontal:                      return (float)(size.Height / 2f - BorderSegment.Thickness / 2f);                  case Alignment.Vertical:                      return (float)(size.Height / 2f) / 2f;              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,yOffset,The following statement contains a magic number: switch (alignment)              {                  case Alignment.Horizontal:                      return (float)(size.Height / 2f - BorderSegment.Thickness / 2f);                  case Alignment.Vertical:                      return (float)(size.Height / 2f) / 2f;              }
Magic Number,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,yOffset,The following statement contains a magic number: switch (alignment)              {                  case Alignment.Horizontal:                      return (float)(size.Height / 2f - BorderSegment.Thickness / 2f);                  case Alignment.Vertical:                      return (float)(size.Height / 2f) / 2f;              }
Magic Number,XamarinShot.Models,BorderSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,BorderSegment,The following statement contains a magic number: this.Opacity = 0.8f;
Magic Number,XamarinShot.Models,BorderSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,Open,The following statement contains a magic number: offset.X = (1f - BorderSegment.OpenScale) * (float)(this.borderSize.Width) / 4f;
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,UpdateProperties,The following statement contains a magic number: var toRadians = (float)Math.PI / 180f;
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: switch (this.properties.ShadowMode)              {                  case 0:                      // activate special filtering mode with 16 sample fixed pattern                      // this slows down the rendering by 2x                      light.ShadowRadius = 0f;                      light.ShadowSampleCount = 16;                      break;                    case 1:                      light.ShadowRadius = 3f; // 2.5                      light.ShadowSampleCount = 8;                      break;                    case 2:                      // as resolution decreases more acne' use bias and cutoff in shadowPlane shaderModifier                      light.ShadowRadius = 1f;                      light.ShadowSampleCount = 1;                      break;                  default:                      break;              }
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: switch (this.properties.ShadowMode)              {                  case 0:                      // activate special filtering mode with 16 sample fixed pattern                      // this slows down the rendering by 2x                      light.ShadowRadius = 0f;                      light.ShadowSampleCount = 16;                      break;                    case 1:                      light.ShadowRadius = 3f; // 2.5                      light.ShadowSampleCount = 8;                      break;                    case 2:                      // as resolution decreases more acne' use bias and cutoff in shadowPlane shaderModifier                      light.ShadowRadius = 1f;                      light.ShadowSampleCount = 1;                      break;                  default:                      break;              }
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: switch (this.properties.ShadowMode)              {                  case 0:                      // activate special filtering mode with 16 sample fixed pattern                      // this slows down the rendering by 2x                      light.ShadowRadius = 0f;                      light.ShadowSampleCount = 16;                      break;                    case 1:                      light.ShadowRadius = 3f; // 2.5                      light.ShadowSampleCount = 8;                      break;                    case 2:                      // as resolution decreases more acne' use bias and cutoff in shadowPlane shaderModifier                      light.ShadowRadius = 1f;                      light.ShadowSampleCount = 1;                      break;                  default:                      break;              }
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: switch (this.properties.ShadowMode)              {                  case 0:                      // activate special filtering mode with 16 sample fixed pattern                      // this slows down the rendering by 2x                      light.ShadowRadius = 0f;                      light.ShadowSampleCount = 16;                      break;                    case 1:                      light.ShadowRadius = 3f; // 2.5                      light.ShadowSampleCount = 8;                      break;                    case 2:                      // as resolution decreases more acne' use bias and cutoff in shadowPlane shaderModifier                      light.ShadowRadius = 1f;                      light.ShadowSampleCount = 1;                      break;                  default:                      break;              }
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: light.OrthographicScale = 15f;
Magic Number,XamarinShot.Models,GameLight,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameLight.cs,TransferProperties,The following statement contains a magic number: light.ZFar = 30f;
Magic Number,XamarinShot.Models,ClothSimMetalNode,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,ClothSimMetalNode,The following statement contains a magic number: var indexElement = SCNGeometryElement.FromData(data' SCNGeometryPrimitiveType.Triangles' 1178' 4);
Magic Number,XamarinShot.Models,ClothSimMetalNode,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,ClothSimMetalNode,The following statement contains a magic number: var indexElement = SCNGeometryElement.FromData(data' SCNGeometryPrimitiveType.Triangles' 1178' 4);
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,CreateFlagSimulationFromNode,The following statement contains a magic number: var rotation = SCNQuaternion.FromAxisAngle(SCNVector3.UnitX' (float)Math.PI / 2f);
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Update,The following statement contains a magic number: var wind = new SCNVector3(1.8f' 0f' 0f);
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The following statement contains a magic number: clothSimCommandEncoder.SetBuffer(mesh.VelocityBuffers[mesh.CurrentBufferIndex]' 0' 2);
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The following statement contains a magic number: mesh.CurrentBufferIndex = (mesh.CurrentBufferIndex + 1) % 2;
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The following statement contains a magic number: clothSimCommandEncoder.SetBuffer(mesh.VelocityBuffers[mesh.CurrentBufferIndex]' 0' 3);
Magic Number,XamarinShot.Models,MetalClothSimulator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Flag.cs,Deform,The following statement contains a magic number: normalComputeCommandEncoder.SetBuffer(mesh.NormalWorkBuffer' 0' 2);
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,OnDidApplyConstraints,The following statement contains a magic number: var frameSkips = 3;
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,RemoveVerticesPair,The following statement contains a magic number: this.tempWorldPositions.RemoveRange(0' 2);
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,RemoveVerticesPair,The following statement contains a magic number: this.colors.RemoveRange(0' 2);
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,CreateTrailMesh,The following statement contains a magic number: var element = SCNGeometryElement.FromData(NSData.FromArray(array)' SCNGeometryPrimitiveType.TriangleStrip' positions.Count - 2' 2);
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,CreateTrailMesh,The following statement contains a magic number: var element = SCNGeometryElement.FromData(NSData.FromArray(array)' SCNGeometryPrimitiveType.TriangleStrip' positions.Count - 2' 2);
Magic Number,XamarinShot.Models,TrailBallProjectile,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\TrailBallProjectile.cs,CreateTrailMesh,The following statement contains a magic number: positions.Count >= 4
Magic Number,XamarinShot.Models,CatapultInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\CatapultInteraction.cs,CatapultInteraction,The following statement contains a magic number: this.dummyBall.Geometry.LevelsOfDetail = new SCNLevelOfDetail[] { SCNLevelOfDetail.CreateWithScreenSpaceRadius(lod.Geometry' 100f) };
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,VortexInteraction,The following statement contains a magic number: this.chasmPhysics.WorldPosition = new SCNVector3(0f' -0.1f' 0f);
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,Handle,The following statement contains a magic number: this.SfxCoordinator.PlayAudioFile("vortex_04"' 0.5f' false);
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,Handle,The following statement contains a magic number: this.MusicCoordinator.StopCurrentMusic(2d);
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var maxInnerRadius = maxOuterRadius * 0.2f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var orbitalVelocityFactor = 5f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var topBound = vortexCenterY + vortexShape.Y * 0.5f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var bottomBound = vortexCenterY - vortexShape.Y * 0.5f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var radiusFactor = (float)Math.Sqrt(4f - 3f * normalizedY * normalizedY) - 1f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var radiusFactor = (float)Math.Sqrt(4f - 3f * normalizedY * normalizedY) - 1f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: radiusFactor = radiusFactor * 0.8f + 0.2f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: radiusFactor = radiusFactor * 0.8f + 0.2f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var maxVelocity = 30f;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: force += -tangentForceMagnitude * vortexDirection * (0.5f + (float)(random.NextDouble() * 1d));
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: force += force.Length * (float)((random.NextDouble() * 2d - 1d) * MaxRandomVortexForce) * up;
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,AnimateVortex,The following statement contains a magic number: var heightMoveFactor = Math.Abs(normalizedPositionInBoundY - 0.5f);
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,PrepareForVortexAnimationStart,The following statement contains a magic number: this.EnumerateThroughBlocks((physicsBody) =>              {                  physicsBody.AffectedByGravity = false;                  var initialImpulse = MaxInitialImpulse * (float)(random.NextDouble() * 0.7d + 0.3d);                  physicsBody.ApplyForce(new SCNVector3(0f' initialImpulse' 0f)' true);                    this.ApplyRandomTorque(physicsBody' MaxInitialTorque);                    physicsBody.Damping = 0.4f;              });
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,PrepareForVortexAnimationStart,The following statement contains a magic number: this.EnumerateThroughBlocks((physicsBody) =>              {                  physicsBody.AffectedByGravity = false;                  var initialImpulse = MaxInitialImpulse * (float)(random.NextDouble() * 0.7d + 0.3d);                  physicsBody.ApplyForce(new SCNVector3(0f' initialImpulse' 0f)' true);                    this.ApplyRandomTorque(physicsBody' MaxInitialTorque);                    physicsBody.Damping = 0.4f;              });
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,PrepareForVortexAnimationStart,The following statement contains a magic number: this.EnumerateThroughBlocks((physicsBody) =>              {                  physicsBody.AffectedByGravity = false;                  var initialImpulse = MaxInitialImpulse * (float)(random.NextDouble() * 0.7d + 0.3d);                  physicsBody.ApplyForce(new SCNVector3(0f' initialImpulse' 0f)' true);                    this.ApplyRandomTorque(physicsBody' MaxInitialTorque);                    physicsBody.Damping = 0.4f;              });
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,PrepareForVortexAnimationEnded,The following statement contains a magic number: this.EnumerateThroughBlocks((physicsBody) =>              {                  physicsBody.Damping = 0.1f;              });
Magic Number,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,ApplyRandomTorque,The following statement contains a magic number: var randomTorque = new SCNVector4(randomAxis' (float)(random.NextDouble() * 2d - 1d) * maxTorque);
Magic Number,XamarinShot.Models,LeverInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\LeverInteraction.cs,Update,The following statement contains a magic number: var waitAction = SCNAction.Wait(3f);
Magic Number,XamarinShot.Models,LeverInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\LeverInteraction.cs,Update,The following statement contains a magic number: var fadeAction = SCNAction.FadeOut(3d);
Magic Number,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Update,The following statement contains a magic number: GameTime.FrameCount % 3 == 0
Magic Number,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Update,The following statement contains a magic number: GameTime.FrameCount % 3 == 0
Magic Number,XamarinShot.Models,VictoryInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VictoryInteraction.cs,ActivateVictory,The following statement contains a magic number: this.victoryNode.WorldPosition = new SCNVector3(0f' 15f' 0f);
Magic Number,XamarinShot.Models,VictoryInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VictoryInteraction.cs,DidWin,The following statement contains a magic number: teamToCatapultCount[1] == 0 && teamToCatapultCount[2] == 0
Magic Number,XamarinShot.Models.GameplayState,GameAudioComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\GameAudioComponent.cs,DidCollision,The following statement contains a magic number: var factor = 1.5f;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The following statement contains a magic number: var h1 = 2f * tCube - 3f * tSqr + 1f;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The following statement contains a magic number: var h1 = 2f * tCube - 3f * tSqr + 1f;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The following statement contains a magic number: var h2 = -2f * tCube + 3f * tSqr;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The following statement contains a magic number: var h2 = -2f * tCube + 3f * tSqr;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,HermiteCurve,The following statement contains a magic number: var h3 = tCube - 2f * tSqr + time;
Magic Number,XamarinShot.Models.GameplayState,AnimWaypointComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\AnimWaypointComponent.cs,CalculateTangents,The following statement contains a magic number: this.wayPoints[i].Tangent = (this.wayPoints[next].Pos - this.wayPoints[prev].Pos) / 3;
Magic Number,XamarinShot.Models.GameplayState,GamePhysicsSmoothComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\GamePhysicsSmoothComponent.cs,CorrectPhysics,The following statement contains a magic number: this.UpdateSmooth(1d / 60d);
Magic Number,XamarinShot.Models.GameplayState,SlingshotComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\SlingshotComponent.cs,Update,The following statement contains a magic number: var force = offset * 1000f - this.velocity * 10f;
Magic Number,XamarinShot.Models.GameplayState,SlingshotComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\SlingshotComponent.cs,Update,The following statement contains a magic number: var force = offset * 1000f - this.velocity * 10f;
Magic Number,XamarinShot.Models.GameplayState,SlingshotComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\SlingshotComponent.cs,Update,The following statement contains a magic number: this.catapult.EulerAngles = new SCNVector3(this.catapult.EulerAngles.X * 0.9f'                                                             this.catapult.EulerAngles.Y'                                                             this.catapult.EulerAngles.Z);
Magic Number,XamarinShot.Models.GameplayState,RemoveWhenFallenComponent,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\Components\RemoveWhenFallenComponent.cs,Update,The following statement contains a magic number: GameTime.FrameCount % 6 != 0
Magic Number,XamarinShot.Models.GestureRecognizers,ThresholdPinchGestureRecognizer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gesture Recognizers\ThresholdPinchGestureRecognizer.cs,TouchesMoved,The following statement contains a magic number: touches.Count == 2
Magic Number,XamarinShot.Models.GestureRecognizers,ThresholdPinchGestureRecognizer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gesture Recognizers\ThresholdPinchGestureRecognizer.cs,TouchDistance,The following statement contains a magic number: touches.Count == 2
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,ConfigureARSession,The following switch statement is missing a default case: switch (this.sessionState)              {                  case SessionState.Setup:                      // in setup                      // AR session paused                      this.sceneView.Session.Pause();                      return;                    case SessionState.LookingForSurface:                  case SessionState.WaitingForBoard:                      // both server and client' go ahead and start tracking the world                      configuration.PlaneDetection = ARPlaneDetection.Horizontal;                      options = ARSessionRunOptions.ResetTracking | ARSessionRunOptions.RemoveExistingAnchors;                        // Only reset session if not already running                      if (this.sceneView.Playing)                      {                          return;                      }                      break;                    case SessionState.PlacingBoard:                  case SessionState.AdjustingBoard:                      // we've found at least one surface' but should keep looking.                      // so no change to the running session                      return;                    case SessionState.LocalizingToBoard:                      if (this.targetWorldMap != null) // should have had a world map                      {                          configuration.InitialWorldMap = this.targetWorldMap;                          configuration.PlaneDetection = ARPlaneDetection.Horizontal;                          options = ARSessionRunOptions.ResetTracking | ARSessionRunOptions.RemoveExistingAnchors;                          this.gameBoard.Anchor = this.targetWorldMap.BoardAnchor();                          if (this.gameBoard.Anchor != null)                          {                              this.gameBoard.Transform = this.gameBoard.Anchor.Transform.ToSCNMatrix4();                              var width = (float)this.gameBoard.Anchor.Size.Width;                              this.gameBoard.Scale = new SCNVector3(width' width' width);                          }                            this.gameBoard.HideBorder(0);                      }                      break;                    case SessionState.SetupLevel:                      // more init                      return;                  case SessionState.GameInProgress:                      // The game is in progress' no change to the running session                      return;              }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,Process,The following switch statement is missing a default case: switch (boardAction.Type)               {                  case BoardSetupAction.BoardSetupActionType.BoardLocation:                      switch (boardAction.BoardLocation.Type)                      {                          case GameBoardLocation.GameBoardLocationType.WorldMapData:                              // Received WorldMap data                              this.LoadWorldMap(boardAction.BoardLocation.WorldMapData);                              break;                          case GameBoardLocation.GameBoardLocationType.Manual:                              // Received a manual board placement                              this.SessionState = SessionState.LookingForSurface;                              break;                      }                      break;                    case BoardSetupAction.BoardSetupActionType.RequestBoardLocation:                      this.SendWorldTo(peer);                      break;              }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,Process,The following switch statement is missing a default case: switch (boardAction.BoardLocation.Type)                      {                          case GameBoardLocation.GameBoardLocationType.WorldMapData:                              // Received WorldMap data                              this.LoadWorldMap(boardAction.BoardLocation.WorldMapData);                              break;                          case GameBoardLocation.GameBoardLocationType.Manual:                              // Received a manual board placement                              this.SessionState = SessionState.LookingForSurface;                              break;                      }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,SendWorldTo,The following switch statement is missing a default case: switch (UserDefaults.BoardLocatingMode)                  {                      case BoardLocatingMode.WorldMap:                          // generating worldmap                           this.GetCurrentWorldMapData((data' error) =>                          {                              if (error == null && data != null)                              {                                  // got a compressed map                                  var location = new GameBoardLocation { WorldMapData = data' Type = GameBoardLocation.GameBoardLocationType.WorldMapData };                                  DispatchQueue.MainQueue.DispatchAsync(() =>                                  {                                      // sending worldmap                                      this.gameManager.Send(new BoardSetupAction { BoardLocation = location' Type = BoardSetupAction.BoardSetupActionType.BoardLocation }' peer);                                  });                              }                              else if (error != null)                              {                                  Console.WriteLine($"Didn't work! {error?.LocalizedDescription ?? string.Empty}");                              }                          });                          break;                        case BoardLocatingMode.Manual:                          this.gameManager.Send(new BoardSetupAction { BoardLocation = new GameBoardLocation { Type = GameBoardLocation.GameBoardLocationType.Manual } }' peer);                          break;                  }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segueType)                  {                      case GameSegue.EmbeddedOverlay:                          if (segue.DestinationViewController is GameStartViewController gameStartViewController)                          {                              gameStartViewController.Delegate = this;                              this.musicCoordinator.PlayMusic("music_menu"' 0f);                          }                          break;                        case GameSegue.WorldMapSelector:                          if (segue.DestinationViewController is WorldMapSelectorViewController worldMapSelectorViewController)                          {                              worldMapSelectorViewController.Delegate = this;                          }                          break;                  }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,CameraDidChangeTrackingState,The following switch statement is missing a default case: switch (camera.TrackingState)              {                  case ARTrackingState.Normal:                      // Resume game if previously interrupted                      if (this.isSessionInterrupted)                      {                          this.IsSessionInterrupted = false;                      }                        // Fade in the board if previously hidden                      if (this.gameBoard.Hidden)                      {                          this.gameBoard.Opacity = 1f;                          this.gameBoard.Hidden = false;                      }                        // Fade in the level if previously hidden                      if (this.renderRoot.Opacity == 0f)                      {                          this.renderRoot.Opacity = 1f;                      }                      break;                    case ARTrackingState.Limited:                      // Hide the game board and level if tracking is limited                      this.gameBoard.Hidden = true;                      this.renderRoot.Opacity = 0f;                      break;              }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,handleTap,The following switch statement is missing a default case: switch (this.sessionState)                  {                      case SessionState.PlacingBoard:                      case SessionState.AdjustingBoard:                          if (!this.gameBoard.IsBorderHidden)                          {                              this.SessionState = SessionState.SetupLevel;                          }                          break;                        case SessionState.GameInProgress:                          this.gameManager?.HandleTouch(TouchType.Tapped);                          break;                  }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,handlePinch,The following switch statement is missing a default case: switch (gesture.State)                  {                      case UIGestureRecognizerState.Changed:                          if (gesture.IsThresholdExceeded)                          {                              this.gameBoard.UpdateScale((float)gesture.Scale);                              gesture.Scale = 1f;                          }                          break;                  }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,handleRotation,The following switch statement is missing a default case: switch (gesture.State)                  {                      case UIGestureRecognizerState.Changed:                          if (gesture.IsThresholdExceeded)                          {                              var newY = this.gameBoard.EulerAngles.Y;                              if (this.gameBoard.EulerAngles.X > Math.PI / 2d)                              {                                  newY += (float)gesture.Rotation;                              }                              else                              {                                  newY -= (float)gesture.Rotation;                              }                                this.gameBoard.EulerAngles = new SCNVector3(this.gameBoard.EulerAngles.X' newY' this.gameBoard.EulerAngles.Z);                              gesture.Rotation = 0f;                          }                          break;                  }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,handlePan,The following switch statement is missing a default case: switch (gesture.State)                      {                          case UIGestureRecognizerState.Began:                              this.panOffset = nearestPlane.WorldTransform.Column3.Xyz - this.gameBoard.WorldPosition;                              break;                          case UIGestureRecognizerState.Changed:                              this.gameBoard.WorldPosition = nearestPlane.WorldTransform.Column3.Xyz - this.panOffset;                              break;                      }
Missing Default,XamarinShot,GameViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameViewController.cs,UpdateMappingStatus,The following switch statement is missing a default case: switch (mappingStatus)              {                  case ARWorldMappingStatus.NotAvailable:                      this.mappingStateLabel.Text = "Mapping state: Not Available";                      this.mappingStateLabel.TextColor = UIColor.Red;                      this.saveAsKeyPositionButton.Enabled = false;                      //this.saveButton.Enabled = false;                      break;                    case ARWorldMappingStatus.Limited:                      this.mappingStateLabel.Text = "Mapping state: Limited";                      this.mappingStateLabel.TextColor = UIColor.Red;                      this.saveAsKeyPositionButton.Enabled = false;                      //this.saveButton.Enabled = false;                      break;                    case ARWorldMappingStatus.Extending:                      this.mappingStateLabel.Text = "Mapping state: Extending";                      this.mappingStateLabel.TextColor = UIColor.Red;                      this.saveAsKeyPositionButton.Enabled = false;                      //this.saveButton.Enabled = false;                      break;                    case ARWorldMappingStatus.Mapped:                      this.mappingStateLabel.Text = "Mapping state: Mapped";                      this.mappingStateLabel.TextColor = UIColor.Green;                      this.saveAsKeyPositionButton.Enabled = true;                      //this.saveButton.Enabled = true;                      break;              }
Missing Default,XamarinShot,GameStartViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\GameStartViewController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segueType)                  {                      case GameSegue.EmbeddedGameBrowser:                          if (segue.DestinationViewController is NetworkGameBrowserViewController browser)                          {                              this.gameBrowser = new GameBrowser(this.myself);                              browser.Browser = this.gameBrowser;                              browser.ProximityManager = this.proximityManager;                          }                            break;                  }
Missing Default,XamarinShot,UserSettingsTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Controllers\UserSettingsTableViewController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segueType)                  {                      case GameSegue.LevelSelector:                          if (segue.DestinationViewController is LevelSelectorViewController levelSelector)                          {                              levelSelector.Delegate = this;                          }                            break;                  }
Missing Default,XamarinShot.Utils,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Utils\ARSCNViewExtensions.cs,CreateScreenshot,The following switch statement is missing a default case: switch (interfaceOrientation)                  {                      case UIDeviceOrientation.Portrait:                          orientation = UIImageOrientation.Right;                          break;                      case UIDeviceOrientation.PortraitUpsideDown:                          orientation = UIImageOrientation.Left;                          break;                  case UIDeviceOrientation.LandscapeLeft:                          orientation = UIImageOrientation.Up;                          break;                      case UIDeviceOrientation.LandscapeRight:                          orientation = UIImageOrientation.Down;                          break;                  }
Missing Default,XamarinShot.Models,NetworkSession,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\NetworkSession.cs,DidChangeState,The following switch statement is missing a default case: switch (state)              {                  case MCSessionState.Connected:                      this.peers.Add(player);                      this.Delegate?.NetworkSessionJoining(this' player);                      break;                    case MCSessionState.Connecting:                      break;                    case MCSessionState.NotConnected:                      this.peers.Remove(player);                      this.Delegate?.NetworkSessionLeaving(this' player);                      break;              }
Missing Default,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetDescription,The following switch statement is missing a default case: switch (team)              {                  case Team.None: return NSBundle.MainBundle.GetLocalizedString("none");                  case Team.TeamA: return NSBundle.MainBundle.GetLocalizedString("Blue");                  case Team.TeamB: return NSBundle.MainBundle.GetLocalizedString("Yellow");              }
Missing Default,XamarinShot.Models,TeamExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,GetColor,The following switch statement is missing a default case: switch (team)              {                  case Team.None: return UIColor.White;                  case Team.TeamA: return UIColorExtensions.Create(45' 128' 208);                  case Team.TeamB: return UIColorExtensions.Create(239' 153' 55);              }
Missing Default,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateStrapVisibility,The following switch statement is missing a default case: switch (this.strapVisible)              {                  case StrapVisible.Hidden:                      this.catapultStrap.Hidden = true;                      break;                    case StrapVisible.Visible:                      this.catapultStrap.Hidden = false;                      break;              }
Missing Default,XamarinShot.Models,Catapult,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Slingshot Behavior\Catapult.cs,UpdateFakeProjectileVisibility,The following switch statement is missing a default case: switch (ballVisible)              {                  case BallVisible.Hidden:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = true;                          this.Projectile.WorldPosition = this.ballOriginInactiveAbove.WorldPosition;                          this.Projectile.Scale = new SCNVector3(0.01f' 0.01f' 0.01f);                      }                      break;                    case BallVisible.Partial:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          this.AnimateBallGrowAndDrop();                      }                      break;                    case BallVisible.Visible:                      if (this.Projectile != null)                      {                          this.Projectile.Opacity = 1f;                          this.Projectile.Hidden = false;                          // it's in the strap fromn .partial animation                      }                      break;              }
Missing Default,XamarinShot.Models,MusicCoordinator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Sounds and Haptics\MusicCoordinator.cs,PlayMusic,The following switch statement is missing a default case: switch (player.State)              {                  case MusicState.Playing:                      // Nothing to do                      return player;                                    case MusicState.Stopped:                      // Configure the audioPlayer' starting with volume at 0 and then fade in.                      audioPlayer.Volume = 0;                      audioPlayer.CurrentTime = 0;                      if (player.Config.Loops)                      {                          audioPlayer.NumberOfLoops = -1;                      }                      else                      {                          audioPlayer.NumberOfLoops = 0;                      }                        audioPlayer.CurrentTime = startTime;                      audioPlayer.Play();                      break;                    case MusicState.Stopping:                      // Leave it playing. Update the volume and play state below.                      break;              }
Missing Default,XamarinShot.Models,GameState,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Add,The following switch statement is missing a default case: switch (catapult.Team)              {                  case Team.TeamA:                      this.TeamACatapults += 1;                      break;                  case Team.TeamB:                      this.TeamBCatapults += 1;                      break;              }
Missing Default,XamarinShot.Models,GameManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Gameplay State\GameManager.cs,Configure,The following switch statement is missing a default case: switch (type)                      {                          case "cloud":                              if (!UserDefaults.ShowClouds)                              {                                  node.RemoveFromParentNode();                                  return;                              }                              break;                            case "flag":                              if (!UserDefaults.ShowFlags)                              {                                  node.RemoveFromParentNode();                                  return;                              }                              else                              {                                  //#if !targetEnvironment(simulator)                                  //this.flagSimulation.CreateFlagSimulationFromNode(node);                                  //#endif                              }                              break;                            case "resetSwitch":                              if (!UserDefaults.ShowResetLever)                              {                                  node.RemoveFromParentNode();                                  return;                              }                              break;                      }
Missing Default,XamarinShot.Models,CornerExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,U,The following switch statement is missing a default case: switch (corner)               {                  case Corner.TopLeft:     return -1;                  case Corner.TopRight:    return 1;                  case Corner.BottomLeft:  return -1;                  case Corner.BottomRight: return 1;              }
Missing Default,XamarinShot.Models,CornerExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,V,The following switch statement is missing a default case: switch (corner)              {                  case Corner.TopLeft: return -1;                  case Corner.TopRight: return -1;                  case Corner.BottomLeft: return 1;                  case Corner.BottomRight: return 1;              }
Missing Default,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,xOffset,The following switch statement is missing a default case: switch (alignment)               {                  case Alignment.Horizontal:                      return (float)(size.Width / 2f - BorderSegment.Thickness) / 2f;                  case Alignment.Vertical:                      return (float)(size.Width / 2f);              }
Missing Default,XamarinShot.Models,AlignmentExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Local Networking\GameBoardBorderSegment.cs,yOffset,The following switch statement is missing a default case: switch (alignment)              {                  case Alignment.Horizontal:                      return (float)(size.Height / 2f - BorderSegment.Thickness / 2f);                  case Alignment.Vertical:                      return (float)(size.Height / 2f) / 2f;              }
Missing Default,XamarinShot.Models,VortexInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\VortexInteraction.cs,UpdateVortexState,The following switch statement is missing a default case: switch (this.state)              {                  case State.None:                      break;                    case State.InitialWait:                      if (this.TimeSinceInitialFloatStart > LiftStageStartTime)                      {                          this.PrepareForVortexAnimationStart();                          this.state = State.AnimateLift;                      }                      break;                    case State.AnimateLift:                      if (this.TimeSinceInitialFloatStart > LiftStageEndTime)                      {                          this.PrepareForVortexAnimationEnded();                          this.state = State.AnimateVortex;                      }                      break;                    case State.AnimateVortex:                      if (this.TimeSinceVortexStart < VortexAnimationDuration)                      {                          this.AnimateVortex();                      }                      else                      {                          this.OnVortexAnimationEnded();                          this.state = State.None;                      }                      break;              }
Missing Default,XamarinShot.Models,GrabInteraction,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Interactions\GrabInteraction.cs,Handle,The following switch statement is missing a default case: switch (gameAction.Type)              {                  // Try Grab                  case GameActionType.GActionType.TryGrab:                      this.HandleTryGrabAction(gameAction.TryGrab' player' this.Delegate);                      break;                    // Inform specific player of grab' when it succeeds                  case GameActionType.GActionType.GrabStart:                      this.HandleGrabStartAction(gameAction.GrabStart' player' this.Delegate);                      break;                    // Sling Move                  case GameActionType.GActionType.GrabMove:                      this.HandleGrabMove(gameAction.GrabMove' player' this.Delegate);                      break;                    // Try Release                  case GameActionType.GActionType.TryRelease:                      this.HandleTryReleaseAction(gameAction.TryRelease' player' this.Delegate);                      break;                    // Inform specific player of release                  case GameActionType.GActionType.ReleaseEnd:                      this.HandleReleaseEndAction(gameAction.ReleaseEnd' player' this.Delegate);                      break;                    // Update Grabbable Status                  case GameActionType.GActionType.GrabbableStatus:                      this.HandleGrabbableStatus(gameAction.GrabbableStatus);                      break;              }
Missing Default,XamarinShot.Models.Enums,SessionStateExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios12\XamarinShot\XamarinShot\Core\Enums\SessionState.cs,LocalizedInstruction,The following switch statement is missing a default case: switch (self)                  {                      case SessionState.LookingForSurface:                          result = NSBundle.MainBundle.GetLocalizedString("Find a flat surface to place the game.");                          break;                      case SessionState.PlacingBoard:                          result = NSBundle.MainBundle.GetLocalizedString("Scale' rotate or move the board.");                          break;                      case SessionState.AdjustingBoard:                          result = NSBundle.MainBundle.GetLocalizedString("Make adjustments and tap to continue.");                          break;                      case SessionState.GameInProgress:                          if (!UserDefaults.HasOnboarded && !UserDefaults.Spectator)                          {                              result = NSBundle.MainBundle.GetLocalizedString("Move closer to a slingshot.");                          }                          break;                      case SessionState.WaitingForBoard:                          result =  NSBundle.MainBundle.GetLocalizedString("Synchronizing world map…");                          break;                      case SessionState.LocalizingToBoard:                          result = NSBundle.MainBundle.GetLocalizedString("Point the camera towards the table.");                          break;                      case SessionState.SetupLevel:                      case SessionState.Setup:                          result = null;                          break;                  }
