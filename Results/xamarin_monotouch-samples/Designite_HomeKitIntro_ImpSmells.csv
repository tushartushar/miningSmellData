Implementation smell,Namespace,Class,File,Method,Description
Long Method,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetCell,The method has 157 lines of code.
Complex Method,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetCell,Cyclomatic complexity of the method is 22
Complex Method,HomeKitIntro,NSObjectConverter,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\Classes\NSObjectConverter.cs,ToObject,Cyclomatic complexity of the method is 21
Long Parameter List,HomeKitIntro,CharacteristicCellStepper,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicCellStepper.cs,DisplayInfo,The method has 5 parameters. Parameters: title' value' min' max' enabled
Long Parameter List,HomeKitIntro,CharacteristicCellSlider,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicCellSlider.cs,DisplayInfo,The method has 5 parameters. Parameters: title' value' min' max' enabled
Long Statement,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,AddNewHome,The length of the statement  "					AlertView.PresentOKAlert("Add Home Error"'string.Format("Error adding {0}: {1}"'HomeName.Text'error.LocalizedDescription)'this); " is 128.
Long Statement,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,AddNewHome,The length of the statement  "						AlertView.PresentOKAlert("Add Home Error"'string.Format("Unable to make this the primary home: {0}"'err.LocalizedDescription)'this); " is 132.
Long Statement,HomeKitIntro,AvailableTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AvailableTableSource.cs,RowSelected,The length of the statement  "			ThisApp.HomeManager.PrimaryHome.AddAccessory (_controller.AccessoryBrowser.DiscoveredAccessories [indexPath.Row]' (err) => { " is 124.
Long Statement,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,GetCell,The length of the statement  "				accessoryCell.DisplayInformation (string.Format ("{0} Reachable"' _controller.Accessory.Name)' _controller.Accessory.Reachable.ToString()); " is 139.
Long Statement,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetCell,The length of the statement  "				SliderCell.DisplayInfo (fieldName' NSObjectConverter.ToFloat (characteristic.Value)' (float)characteristic.Metadata.MinimumValue' (float)characteristic.Metadata.MaximumValue' editable); " is 185.
Long Statement,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetCell,The length of the statement  "				StepperCell.DisplayInfo (fieldName' NSObjectConverter.ToFloat (characteristic.Value)' (float)characteristic.Metadata.MinimumValue' (float)characteristic.Metadata.MaximumValue' editable); " is 186.
Magic Number,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,ViewDidLoad,The following statement contains a magic number: HomeName.ShouldBeginEditing= delegate(UITextField field){  				//Placeholder  				UIView.BeginAnimations("keyboard");  				UIView.SetAnimationDuration(0.3f);  				this.MoveTo(0'-170);  				UIView.CommitAnimations();  				return true;  			};
Magic Number,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,ViewDidLoad,The following statement contains a magic number: HomeName.ShouldBeginEditing= delegate(UITextField field){  				//Placeholder  				UIView.BeginAnimations("keyboard");  				UIView.SetAnimationDuration(0.3f);  				this.MoveTo(0'-170);  				UIView.CommitAnimations();  				return true;  			};
Magic Number,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,ViewDidLoad,The following statement contains a magic number: HomeName.ShouldReturn = delegate (UITextField field){  				field.ResignFirstResponder ();  				UIView.BeginAnimations("keyboard");  				UIView.SetAnimationDuration(0.3f);  				this.MoveTo(0'0);  				UIView.CommitAnimations();    				return true;  			};
Magic Number,HomeKitIntro,AddHomeViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AddHomeViewController.cs,ViewDidLoad,The following statement contains a magic number: HomeName.ShouldEndEditing= delegate (UITextField field){  				UIView.BeginAnimations("keyboard");  				UIView.SetAnimationDuration(0.3f);  				this.MoveTo(0'0);  				UIView.CommitAnimations();  				AddNewHome();  				return true;  			};
Magic Number,HomeKitIntro,AccessoryTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AccessoryTableSource.cs,GetHeightForRow,The following statement contains a magic number: return 44;
Magic Number,HomeKitIntro,AvailableTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\AvailableTableSource.cs,GetHeightForRow,The following statement contains a magic number: return 44;
Magic Number,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,NumberOfSections,The following statement contains a magic number: return 2;
Magic Number,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,GetHeightForRow,The following statement contains a magic number: return 60;
Magic Number,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetHeightForRow,The following statement contains a magic number: return 60;
Missing Default,HomeKitIntro,ServiceTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableViewController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segue.Identifier) {  			case "CharacteristicSegue":  				// Grab controller  				var characteristicView = segue.DestinationViewController as CharacteristicTableViewController;    				// Pass in service  				characteristicView.Service = Accessory.Services [ServiceIndex];  				break;  			}
Missing Default,HomeKitIntro,ServiceTableCell,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableCell.cs,DisplayService,The following switch statement is missing a default case: switch (type) {  			case HMServiceType.GarageDoorOpener:  				SubTitle.Text = "Garage Door Opener";  				break;  			case HMServiceType.LightBulb:  				SubTitle.Text = "Light Bulb";  				break;  			case HMServiceType.LockManagement:  			case HMServiceType.LockMechanism:  				SubTitle.Text = "Lock";  				break;  			case HMServiceType.None:  				SubTitle.Text = "None";  				break;  			case HMServiceType.Switch:  				SubTitle.Text = "Switch";  				break;  			case HMServiceType.Thermostat:  				SubTitle.Text = "Thermostat";  				break;  			}
Missing Default,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,RowsInSection,The following switch statement is missing a default case: switch (section) {  			case 0:  				// Always one secton for details  				return 1;  			case 1:  				// Return the number of services  				return _controller.Accessory.Services.Length;  			}
Missing Default,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,ShouldHighlightRow,The following switch statement is missing a default case: switch (rowIndexPath.Section) {  			case 0:  				return false;  			case 1:  				return true;  			}
Missing Default,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,TitleForHeader,The following switch statement is missing a default case: switch (section) {  			case 0:  				return "Accessory";  			case 1:  				return "Services";  			}
Missing Default,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,GetCell,The following switch statement is missing a default case: switch (indexPath.Section) {  			case 0:  				// Display Accessory Details  				accessoryCell.DisplayInformation (string.Format ("{0} Reachable"' _controller.Accessory.Name)' _controller.Accessory.Reachable.ToString());  				accessoryCell.Accessory = UITableViewCellAccessory.None;  				break;  			case 1:  				// Display Accessory service  				var service = _controller.Accessory.Services [indexPath.Row];  				accessoryCell.DisplayService (service.Name' service.ServiceType);  				accessoryCell.Accessory = UITableViewCellAccessory.DisclosureIndicator;  				break;  			}
Missing Default,HomeKitIntro,ServiceTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\ServiceTableSource.cs,RowSelected,The following switch statement is missing a default case: switch (indexPath.Section) {  			case 1:  				// Display the service characteristics  				_controller.ServiceIndex = indexPath.Row;  				_controller.PerformSegue ("CharacteristicSegue"' _controller);  				break;  			}
Missing Default,HomeKitIntro,CharacteristicTableSource,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\CharacteristicTableSource.cs,GetCell,The following switch statement is missing a default case: switch (display) {  			case CharacteristicDisplayType.Info:  				// Get new cell  				var InfoCell = tableView.DequeueReusableCell (CharacteristicCellInfo.Key) as CharacteristicCellInfo;    				// Populate the cell  				InfoCell.DisplayInfo (fieldName' characteristic.Value.ToString());    				// Return cell  				return InfoCell;  			case CharacteristicDisplayType.Slider:  				// Get new cell  				var SliderCell = tableView.DequeueReusableCell (CharacteristicCellSlider.Key) as CharacteristicCellSlider;    				// Populate the cell  				SliderCell.DisplayInfo (fieldName' NSObjectConverter.ToFloat (characteristic.Value)' (float)characteristic.Metadata.MinimumValue' (float)characteristic.Metadata.MaximumValue' editable);  				SliderCell.Characteristic = characteristic;  				SliderCell.Controller = _controller;    				// Return cell  				return SliderCell;  			case CharacteristicDisplayType.Stepper:  				// Get new cell  				var StepperCell = tableView.DequeueReusableCell (CharacteristicCellStepper.Key) as CharacteristicCellStepper;    				// Populate the cell  				StepperCell.DisplayInfo (fieldName' NSObjectConverter.ToFloat (characteristic.Value)' (float)characteristic.Metadata.MinimumValue' (float)characteristic.Metadata.MaximumValue' editable);  				StepperCell.Characteristic = characteristic;  				StepperCell.Controller = _controller;    				// Return cell  				return StepperCell;  				break;  			case CharacteristicDisplayType.Switch:  				// Get new cell  				var SwitchCell = tableView.DequeueReusableCell (CharacteristicCellSwitch.Key) as CharacteristicCellSwitch;    				// Populate the cell  				SwitchCell.DisplayInfo (fieldName' NSObjectConverter.ToBool(characteristic.Value)' editable);  				SwitchCell.Characteristic = characteristic;  				SwitchCell.Controller = _controller;    				// Return cell  				return SwitchCell;  			case CharacteristicDisplayType.Text:  				// Get new cell  				var TextCell = tableView.DequeueReusableCell (CharacteristicCellText.Key) as CharacteristicCellText;    				// Populate the cell  				TextCell.DisplayInfo (fieldName' NSObjectConverter.ToString(characteristic.Value)' editable);  				TextCell.Characteristic = characteristic;  				TextCell.Controller = _controller;    				// Return cell  				return TextCell;  			}
Missing Default,HomeKitIntro,NSObjectConverter,D:\research\architectureSmells\repos\xamarin_monotouch-samples\HomeKit\HomeKitIntro\HomeKitIntro\Classes\NSObjectConverter.cs,ToObject,The following switch statement is missing a default case: switch (Type.GetTypeCode (targetType)) {  				case TypeCode.Boolean:  					return x.BoolValue;  				case TypeCode.Char:  					return Convert.ToChar (x.ByteValue);  				case TypeCode.SByte:  					return x.SByteValue;  				case TypeCode.Byte:  					return x.ByteValue;  				case TypeCode.Int16:  					return x.Int16Value;  				case TypeCode.UInt16:  					return x.UInt16Value;  				case TypeCode.Int32:  					return x.Int32Value;  				case TypeCode.UInt32:  					return x.UInt32Value;  				case TypeCode.Int64:  					return x.Int64Value;  				case TypeCode.UInt64:  					return x.UInt64Value;  				case TypeCode.Single:  					return x.FloatValue;  				case TypeCode.Double:  					return x.DoubleValue;  				}
