Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AirLocate,MonitoringViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\MonitoringViewController.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 8
Magic Number,AirLocate,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\AppDelegate.cs,FinishedLaunching,The following statement contains a magic number: UIDevice.CurrentDevice.CheckSystemVersion (8' 0)
Magic Number,AirLocate,MenuViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\MenuViewController.cs,ViewDidLoad,The following statement contains a magic number: controllers [2] = new CalibrationBeginViewController (UITableViewStyle.Plain);
Magic Number,AirLocate,MenuViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\MenuViewController.cs,ViewDidLoad,The following statement contains a magic number: controllers [3] = (UIViewController)Storyboard.InstantiateViewController ("ConfigurationViewController");
Magic Number,AirLocate,Defaults,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\Defaults.cs,Defaults,The following statement contains a magic number: defaultPower = new NSNumber (-59);
Magic Number,AirLocate,RangingViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\RangingViewController.cs,RangingViewController,The following statement contains a magic number: beacons = new List<CLBeacon> [4] { Unknowns' Immediates' Nears' Fars };
Magic Number,AirLocate,CalibrationCalculator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationCalculator.cs,CalibrationCalculator,The following statement contains a magic number: locationManager.DidRangeBeacons += (object sender' CLRegionBeaconsRangedEventArgs e) => {  				rangedBeacons.Add (e.Beacons);  				var progress = ProgressHandler;  				if (progress != null) {  					DispatchQueue.MainQueue.DispatchAsync (delegate {  						percentComplete += 1.0f / 20.0f;  						progress (this' new CalibrationProgressEventArgs () { PercentComplete = percentComplete });  					});  				}  			};
Magic Number,AirLocate,CalibrationCalculator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationCalculator.cs,PerformCalibration,The following statement contains a magic number: timer = NSTimer.CreateTimer (20.0f' (r) => {  					locationManager.StopRangingBeacons (region);    					DispatchQueue.DefaultGlobalQueue.DispatchAsync (new Action (delegate {  						NSError error = null;  						List<CLBeacon> allBeacons = new List<CLBeacon> ();  						int measuredPower = 0;  						if (!isCalibrating) {  							error = new CalibrationCancelledError ();  						} else {  							foreach (CLBeacon[] beacons in rangedBeacons) {  								if (beacons.Length > 1) {  									error = new CalibrationCancelledError ();  									break;  								} else {  									allBeacons.AddRange (beacons);  								}  							}    							if (allBeacons.Count == 0) {  								error = new CalibrationCancelledError ();  							} else {  								allBeacons.Sort (delegate (CLBeacon x' CLBeacon y) {  									return (x.ValueForKey (Rssi) as NSNumber).CompareTo (y.ValueForKey (Rssi));  								});  								float power = 0;  								int number = 0;  								int outlierPadding = (int)(allBeacons.Count * 0.1f);  								for (int k = outlierPadding; k < allBeacons.Count - (outlierPadding * 2); k++) {  									power += ((NSNumber)allBeacons [k].ValueForKey (Rssi)).FloatValue;  									number++;  								}  								measuredPower = (int)power / number;  							}  						}    						DispatchQueue.MainQueue.DispatchAsync (delegate {  							CalibrationCompletionHandler (this' new CalibrationCompletedEventArgs () {  								MeasurePower = measuredPower'  								Error = error  							});  						});    						isCalibrating = false;  						rangedBeacons.Clear ();  					}));  				});
Magic Number,AirLocate,CalibrationCalculator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationCalculator.cs,PerformCalibration,The following statement contains a magic number: timer = NSTimer.CreateTimer (20.0f' (r) => {  					locationManager.StopRangingBeacons (region);    					DispatchQueue.DefaultGlobalQueue.DispatchAsync (new Action (delegate {  						NSError error = null;  						List<CLBeacon> allBeacons = new List<CLBeacon> ();  						int measuredPower = 0;  						if (!isCalibrating) {  							error = new CalibrationCancelledError ();  						} else {  							foreach (CLBeacon[] beacons in rangedBeacons) {  								if (beacons.Length > 1) {  									error = new CalibrationCancelledError ();  									break;  								} else {  									allBeacons.AddRange (beacons);  								}  							}    							if (allBeacons.Count == 0) {  								error = new CalibrationCancelledError ();  							} else {  								allBeacons.Sort (delegate (CLBeacon x' CLBeacon y) {  									return (x.ValueForKey (Rssi) as NSNumber).CompareTo (y.ValueForKey (Rssi));  								});  								float power = 0;  								int number = 0;  								int outlierPadding = (int)(allBeacons.Count * 0.1f);  								for (int k = outlierPadding; k < allBeacons.Count - (outlierPadding * 2); k++) {  									power += ((NSNumber)allBeacons [k].ValueForKey (Rssi)).FloatValue;  									number++;  								}  								measuredPower = (int)power / number;  							}  						}    						DispatchQueue.MainQueue.DispatchAsync (delegate {  							CalibrationCompletionHandler (this' new CalibrationCompletedEventArgs () {  								MeasurePower = measuredPower'  								Error = error  							});  						});    						isCalibrating = false;  						rangedBeacons.Clear ();  					}));  				});
Magic Number,AirLocate,CalibrationCalculator,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationCalculator.cs,PerformCalibration,The following statement contains a magic number: timer = NSTimer.CreateTimer (20.0f' (r) => {  					locationManager.StopRangingBeacons (region);    					DispatchQueue.DefaultGlobalQueue.DispatchAsync (new Action (delegate {  						NSError error = null;  						List<CLBeacon> allBeacons = new List<CLBeacon> ();  						int measuredPower = 0;  						if (!isCalibrating) {  							error = new CalibrationCancelledError ();  						} else {  							foreach (CLBeacon[] beacons in rangedBeacons) {  								if (beacons.Length > 1) {  									error = new CalibrationCancelledError ();  									break;  								} else {  									allBeacons.AddRange (beacons);  								}  							}    							if (allBeacons.Count == 0) {  								error = new CalibrationCancelledError ();  							} else {  								allBeacons.Sort (delegate (CLBeacon x' CLBeacon y) {  									return (x.ValueForKey (Rssi) as NSNumber).CompareTo (y.ValueForKey (Rssi));  								});  								float power = 0;  								int number = 0;  								int outlierPadding = (int)(allBeacons.Count * 0.1f);  								for (int k = outlierPadding; k < allBeacons.Count - (outlierPadding * 2); k++) {  									power += ((NSNumber)allBeacons [k].ValueForKey (Rssi)).FloatValue;  									number++;  								}  								measuredPower = (int)power / number;  							}  						}    						DispatchQueue.MainQueue.DispatchAsync (delegate {  							CalibrationCompletionHandler (this' new CalibrationCompletedEventArgs () {  								MeasurePower = measuredPower'  								Error = error  							});  						});    						isCalibrating = false;  						rangedBeacons.Clear ();  					}));  				});
Magic Number,AirLocate,CalibrationEndViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationEndViewController.cs,ViewDidLoad,The following statement contains a magic number: var measuredPowerLabel = new UILabel (new CGRect (0' 0' View.Bounds.Width' View.Bounds.Height)) {  				AutoresizingMask = UIViewAutoresizing.FlexibleMargins'  				Font = UIFont.SystemFontOfSize (32.0f)'  				TextAlignment = UITextAlignment.Center'  				Text = measured_power.ToString ()  			};
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,CalibrationBeginViewController,The following statement contains a magic number: beacons = new List<CLBeacon> [4] { Unknowns' Immediates' Nears' Fars };
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: progressBar.Center = new CGPoint (cell.Center.X' 17.0f);
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: UILabel label = new UILabel (new CGRect (0.0f' 0.0f' 300.0f' 15.0f)) {  						AutoresizingMask = UIViewAutoresizing.FlexibleMargins'  						BackgroundColor = UIColor.Clear'  						Center = new CGPoint (cell.Center.X' 30.0f)'  						Font = UIFont.SystemFontOfSize (11.0f)'  						Text = "Wave device side-to-side 1m away from beacon"'  						TextAlignment = UITextAlignment.Center'  						TextColor = UIColor.DarkGray  					};
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: UILabel label = new UILabel (new CGRect (0.0f' 0.0f' 300.0f' 15.0f)) {  						AutoresizingMask = UIViewAutoresizing.FlexibleMargins'  						BackgroundColor = UIColor.Clear'  						Center = new CGPoint (cell.Center.X' 30.0f)'  						Font = UIFont.SystemFontOfSize (11.0f)'  						Text = "Wave device side-to-side 1m away from beacon"'  						TextAlignment = UITextAlignment.Center'  						TextColor = UIColor.DarkGray  					};
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: UILabel label = new UILabel (new CGRect (0.0f' 0.0f' 300.0f' 15.0f)) {  						AutoresizingMask = UIViewAutoresizing.FlexibleMargins'  						BackgroundColor = UIColor.Clear'  						Center = new CGPoint (cell.Center.X' 30.0f)'  						Font = UIFont.SystemFontOfSize (11.0f)'  						Text = "Wave device side-to-side 1m away from beacon"'  						TextAlignment = UITextAlignment.Center'  						TextColor = UIColor.DarkGray  					};
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: UILabel label = new UILabel (new CGRect (0.0f' 0.0f' 300.0f' 15.0f)) {  						AutoresizingMask = UIViewAutoresizing.FlexibleMargins'  						BackgroundColor = UIColor.Clear'  						Center = new CGPoint (cell.Center.X' 30.0f)'  						Font = UIFont.SystemFontOfSize (11.0f)'  						Text = "Wave device side-to-side 1m away from beacon"'  						TextAlignment = UITextAlignment.Center'  						TextColor = UIColor.DarkGray  					};
Magic Number,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,GetCell,The following statement contains a magic number: cell.TextLabel.Font = UIFont.SystemFontOfSize (20.0f);
Missing Default,AirLocate,RangingViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\RangingViewController.cs,HandleDidRangeBeacons,The following switch statement is missing a default case: switch (beacon.Proximity) {  				case CLProximity.Immediate:  					Immediates.Add (beacon);  					break;  				case CLProximity.Near:  					Nears.Add (beacon);  					break;  				case CLProximity.Far:  					Fars.Add (beacon);  					break;  				case CLProximity.Unknown:  					Unknowns.Add (beacon);  					break;  				}
Missing Default,AirLocate,CalibrationBeginViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\AirLocate\AirLocate\CalibrationBeginViewController.cs,HandleDidRangeBeacons,The following switch statement is missing a default case: switch (beacon.Proximity) {  				case CLProximity.Immediate:  					Immediates.Add (beacon);  					break;  				case CLProximity.Near:  					Nears.Add (beacon);  					break;  				case CLProximity.Far:  					Fars.Add (beacon);  					break;  				case CLProximity.Unknown:  					Unknowns.Add (beacon);  					break;  				}
