Implementation smell,Namespace,Class,File,Method,Description
Long Statement,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,UpdateFieldBehaviour,The length of the statement  "			fieldBehaviour.Region = new UIRegion (new CGSize (regionRect.Width / 2f - regionRect.X' regionRect.Height / 2f - regionRect.Y)); " is 128.
Magic Number,StickyCorners,StickyCornersViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersViewController.cs,ViewDidLoad,The following statement contains a magic number: var length = Math.Floor (0.1 * Math.Max (screenBounds.Width' screenBounds.Height));
Magic Number,StickyCorners,StickyCornersViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersViewController.cs,ViewDidLoad,The following statement contains a magic number: stickyBehavior = new StickyCornersBehavior (itemView' (float)length * 0.5f);
Magic Number,StickyCorners,StickyCornersViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersViewController.cs,Pan,The following statement contains a magic number: switch (pan.State) {  			case UIGestureRecognizerState.Began:  				// Capture the initial touch offset from the itemView's center.  				var center = itemView.Center;  				offset.X = location.X - center.X;  				offset.Y = location.Y - center.Y;    				// Disable the behavior while the item is manipulated by the pan recognizer.  				stickyBehavior.Enabled = false;  				break;  			case UIGestureRecognizerState.Changed:  				// Get reference bounds.  				var referenceBounds = View.Bounds;  				var referenceWidth = referenceBounds.Width;  				var referenceHeight = referenceBounds.Height;    				// Get item bounds.  				var itemBounds = itemView.Bounds;  				var itemHalfWidth = itemBounds.Width / 2f;  				var itemHalfHeight = itemBounds.Height / 2f;    				// Apply the initial offset.  				location.X -= offset.X;  				location.Y -= offset.Y;    				// Bound the item position inside the reference view.  				location.X = NMath.Max (itemHalfWidth' location.X);  				location.X = NMath.Min (referenceWidth - itemHalfWidth' location.X);  				location.Y = NMath.Max (itemHalfHeight' location.Y);  				location.Y = NMath.Min (referenceHeight - itemHalfHeight' location.Y);    				// Apply the resulting item center.  				itemView.Center = location;  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				// Get the current velocity of the item from the pan gesture recognizer.  				var velocity = pan.VelocityInView (View);    				// Re-enable the stickyCornersBehavior.  				stickyBehavior.Enabled = true;    				// Add the current velocity to the sticky corners behavior.  				stickyBehavior.AddLinearVelocity (velocity);  				break;  			}
Magic Number,StickyCorners,StickyCornersViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersViewController.cs,Pan,The following statement contains a magic number: switch (pan.State) {  			case UIGestureRecognizerState.Began:  				// Capture the initial touch offset from the itemView's center.  				var center = itemView.Center;  				offset.X = location.X - center.X;  				offset.Y = location.Y - center.Y;    				// Disable the behavior while the item is manipulated by the pan recognizer.  				stickyBehavior.Enabled = false;  				break;  			case UIGestureRecognizerState.Changed:  				// Get reference bounds.  				var referenceBounds = View.Bounds;  				var referenceWidth = referenceBounds.Width;  				var referenceHeight = referenceBounds.Height;    				// Get item bounds.  				var itemBounds = itemView.Bounds;  				var itemHalfWidth = itemBounds.Width / 2f;  				var itemHalfHeight = itemBounds.Height / 2f;    				// Apply the initial offset.  				location.X -= offset.X;  				location.Y -= offset.Y;    				// Bound the item position inside the reference view.  				location.X = NMath.Max (itemHalfWidth' location.X);  				location.X = NMath.Min (referenceWidth - itemHalfWidth' location.X);  				location.Y = NMath.Max (itemHalfHeight' location.Y);  				location.Y = NMath.Min (referenceHeight - itemHalfHeight' location.Y);    				// Apply the resulting item center.  				itemView.Center = location;  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				// Get the current velocity of the item from the pan gesture recognizer.  				var velocity = pan.VelocityInView (View);    				// Re-enable the stickyCornersBehavior.  				stickyBehavior.Enabled = true;    				// Add the current velocity to the sticky corners behavior.  				stickyBehavior.AddLinearVelocity (velocity);  				break;  			}
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,StickyCornersBehavior,The following statement contains a magic number: itemBehavior = new UIDynamicItemBehavior (item) {  				Density = 0.01f'  				Resistance = 10f'  				Friction = 0f'  				AllowsRotation = false  			};
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,StickyCornersBehavior,The following statement contains a magic number: itemBehavior = new UIDynamicItemBehavior (item) {  				Density = 0.01f'  				Resistance = 10f'  				Friction = 0f'  				AllowsRotation = false  			};
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,StickyCornersBehavior,The following statement contains a magic number: i <= 3
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,UpdateFieldsInBounds,The following statement contains a magic number: var dx = cornerInset + itemBounds.Width / 2f;
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,UpdateFieldsInBounds,The following statement contains a magic number: var dy = cornerInset + itemBounds.Height / 2f;
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,UpdateFieldBehaviour,The following statement contains a magic number: fieldBehaviour.Region = new UIRegion (new CGSize (regionRect.Width / 2f - regionRect.X' regionRect.Height / 2f - regionRect.Y));
Magic Number,StickyCorners,StickyCornersBehavior,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersBehavior.cs,UpdateFieldBehaviour,The following statement contains a magic number: fieldBehaviour.Region = new UIRegion (new CGSize (regionRect.Width / 2f - regionRect.X' regionRect.Height / 2f - regionRect.Y));
Missing Default,StickyCorners,StickyCornersViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios9\StickyCorners\StickyCorners\StickyCornersViewController.cs,Pan,The following switch statement is missing a default case: switch (pan.State) {  			case UIGestureRecognizerState.Began:  				// Capture the initial touch offset from the itemView's center.  				var center = itemView.Center;  				offset.X = location.X - center.X;  				offset.Y = location.Y - center.Y;    				// Disable the behavior while the item is manipulated by the pan recognizer.  				stickyBehavior.Enabled = false;  				break;  			case UIGestureRecognizerState.Changed:  				// Get reference bounds.  				var referenceBounds = View.Bounds;  				var referenceWidth = referenceBounds.Width;  				var referenceHeight = referenceBounds.Height;    				// Get item bounds.  				var itemBounds = itemView.Bounds;  				var itemHalfWidth = itemBounds.Width / 2f;  				var itemHalfHeight = itemBounds.Height / 2f;    				// Apply the initial offset.  				location.X -= offset.X;  				location.Y -= offset.Y;    				// Bound the item position inside the reference view.  				location.X = NMath.Max (itemHalfWidth' location.X);  				location.X = NMath.Min (referenceWidth - itemHalfWidth' location.X);  				location.Y = NMath.Max (itemHalfHeight' location.Y);  				location.Y = NMath.Min (referenceHeight - itemHalfHeight' location.Y);    				// Apply the resulting item center.  				itemView.Center = location;  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				// Get the current velocity of the item from the pan gesture recognizer.  				var velocity = pan.VelocityInView (View);    				// Re-enable the stickyCornersBehavior.  				stickyBehavior.Enabled = true;    				// Add the current velocity to the sticky corners behavior.  				stickyBehavior.AddLinearVelocity (velocity);  				break;  			}
