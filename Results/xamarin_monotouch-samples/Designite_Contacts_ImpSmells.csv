Implementation smell,Namespace,Class,File,Method,Description
Long Method,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The method has 103 lines of code.
Complex Method,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 11
Long Identifier,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the parameter highlightedPropertyIdentifiers is 30.
Long Statement,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the statement  "                contact.PostalAddresses = new CNLabeledValue<CNPostalAddress>[] { new CNLabeledValue<CNPostalAddress>(CNLabelKey.Home' homeAddress) }; " is 134.
Long Statement,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the statement  "            // The view controller displays some contact information that you can either add to an existing contact or use them to create a new contact. " is 140.
Long Statement,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the statement  "                contact.PhoneNumbers = new CNLabeledValue<CNPhoneNumber>[] { new CNLabeledValue<CNPhoneNumber>(CNLabelPhoneNumberKey.iPhone' new CNPhoneNumber(PhoneNumber.Mobile)) }; " is 166.
Long Statement,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the statement  "                contact.PostalAddresses = new CNLabeledValue<CNPostalAddress>[] { new CNLabeledValue<CNPostalAddress>(CNLabelKey.Home' homeAddress) }; " is 134.
Long Statement,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,PerformContactAction,The length of the statement  "            // Searches for the contact specified whose last name and first name are respectively specified by contact.family and contact.given " is 131.
Long Statement,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ViewWillAppear,The length of the statement  "                    this.descriptionLabel.Text = "This page allows you to select a single contact from the picker. Tap \"Show Picker\" to launch the view controller."; " is 147.
Long Statement,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ViewWillAppear,The length of the statement  "                    this.descriptionLabel.Text = "This page allows you to select multiple contacts from the picker. Tap \"Show Picker\" to launch the view controller."; " is 148.
Long Statement,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ViewWillAppear,The length of the statement  "                    this.descriptionLabel.Text = "This page allows you to select a single property from the picker. Tap \"Show Picker\" to launch the view controller."; " is 148.
Long Statement,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ViewWillAppear,The length of the statement  "                    this.descriptionLabel.Text = "This page allows you to select one or more e-mail properties. Tap \"Show Picker\" to launch the view controller."; " is 144.
Long Statement,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The length of the statement  "                    // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action. " is 133.
Long Statement,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The length of the statement  "                    // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action. " is 133.
Long Statement,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The length of the statement  "                    // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action. " is 133.
Long Statement,Contacts.Helpers,ContactExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\Helpers\ContactExtensions.cs,GetFormattedName,The length of the statement  "            var name = contact != null ? CNContactFormatter.GetStringFrom(contact' CNContactFormatterStyle.FullName)?.Trim() : null; " is 120.
Long Statement,Contacts.Helpers,PostalAddressExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\Helpers\ContactExtensions.cs,GetFormattedPostalAddress,The length of the statement  "            string[] address = { postalAddress.Street' postalAddress.City' postalAddress.State' postalAddress.PostalCode' postalAddress.Country }; " is 134.
Magic Number,Contacts,PredicateContactViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicateContactViewController.cs,ShowPicker,The following statement contains a magic number: switch (index.Row)              {                  case 0:                      // Enable all contacts in the contacts picker view.                      this.HandleAllContacts();                      break;                  case 1:                      // Only enable contacts with email addresses in the contacts picker view.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // Only enable contacts with postal addresses in the contacts picker view.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // Only enable contacts with 2 or more phone numbers in the contacts picker view.                      this.HandleContactsWithPhoneNumbers();                      break;                  case 4:                      // Only enable contacts with a profile picture in the contacts picker view.                      this.HandleContactsWithProfilePicture();                      break;              }
Magic Number,Contacts,PredicateContactViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicateContactViewController.cs,ShowPicker,The following statement contains a magic number: switch (index.Row)              {                  case 0:                      // Enable all contacts in the contacts picker view.                      this.HandleAllContacts();                      break;                  case 1:                      // Only enable contacts with email addresses in the contacts picker view.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // Only enable contacts with postal addresses in the contacts picker view.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // Only enable contacts with 2 or more phone numbers in the contacts picker view.                      this.HandleContactsWithPhoneNumbers();                      break;                  case 4:                      // Only enable contacts with a profile picture in the contacts picker view.                      this.HandleContactsWithProfilePicture();                      break;              }
Magic Number,Contacts,PredicateContactViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicateContactViewController.cs,ShowPicker,The following statement contains a magic number: switch (index.Row)              {                  case 0:                      // Enable all contacts in the contacts picker view.                      this.HandleAllContacts();                      break;                  case 1:                      // Only enable contacts with email addresses in the contacts picker view.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // Only enable contacts with postal addresses in the contacts picker view.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // Only enable contacts with 2 or more phone numbers in the contacts picker view.                      this.HandleContactsWithPhoneNumbers();                      break;                  case 4:                      // Only enable contacts with a profile picture in the contacts picker view.                      this.HandleContactsWithProfilePicture();                      break;              }
Magic Number,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The following statement contains a magic number: switch (index.Row)              {                  case 0:                      // Only show the given and family names' email addresses' phone numbers' and postal addresses of a contact.                      this.HandleAllContacts();                      break;                  case 1:                      // When users select a contact's email address' it dismisses the view controller and returns the email address using                       // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // When users select a contact's postal address' it dismisses the view controller and returns the birthday using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // When users select a contact's phone number' it dismisses the view controller and returns the phone number using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPhoneNumbers();                      break;              }
Magic Number,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The following statement contains a magic number: switch (index.Row)              {                  case 0:                      // Only show the given and family names' email addresses' phone numbers' and postal addresses of a contact.                      this.HandleAllContacts();                      break;                  case 1:                      // When users select a contact's email address' it dismisses the view controller and returns the email address using                       // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // When users select a contact's postal address' it dismisses the view controller and returns the birthday using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // When users select a contact's phone number' it dismisses the view controller and returns the phone number using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPhoneNumbers();                      break;              }
Missing Default,Contacts,RootViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\RootViewController.cs,CheckContactsAccess,The following switch statement is missing a default case: switch (status)              {                  // Access was granted. Update the UI with the default navigation menu.                  case CNAuthorizationStatus.Authorized:                      Console.WriteLine("App is authorized");                      break;                    case CNAuthorizationStatus.NotDetermined:                      this.store.RequestAccess(CNEntityType.Contacts' (granted' _) =>                      {                          if (granted)                          {                              Console.WriteLine("App is authorized");                          }                      });                      break;                    // Access was denied or restricted.                  case CNAuthorizationStatus.Restricted:                  case CNAuthorizationStatus.Denied:                      Console.WriteLine("Access denied or restricted.");                      break;              }
Missing Default,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ViewWillAppear,The following switch statement is missing a default case: switch (this.Mode)              {                  case PickerMode.SingleContact:                      this.headerLabel.Text = "Selected Contact:";                      this.descriptionLabel.Text = "This page allows you to select a single contact from the picker. Tap \"Show Picker\" to launch the view controller.";                      break;                    case PickerMode.MultupleContacts:                      this.headerLabel.Text = "Selected Contacts:";                      this.descriptionLabel.Text = "This page allows you to select multiple contacts from the picker. Tap \"Show Picker\" to launch the view controller.";                      break;                    case PickerMode.SingleProperty:                      this.headerLabel.Text = "Selected Property:";                      this.descriptionLabel.Text = "This page allows you to select a single property from the picker. Tap \"Show Picker\" to launch the view controller.";                      break;                    case PickerMode.MultipleProperties:                      this.headerLabel.Text = "Selected Properties:";                      this.descriptionLabel.Text = "This page allows you to select one or more e-mail properties. Tap \"Show Picker\" to launch the view controller.";                      break;              }
Missing Default,Contacts,ContactPickerController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\ContactPickerController.cs,ShowPicker,The following switch statement is missing a default case: switch (this.Mode)              {                  case PickerMode.SingleContact:                      this.contactDelegate = new SingleContactPickerDelegate(this.Update);                      var picker = new CNContactPickerViewController { Delegate = this.contactDelegate };                      base.PresentViewController(picker' true' null);                      break;                    case PickerMode.MultupleContacts:                      this.contactDelegate = new MultipleContactPickerDelegate(this.Update);                      var contactsPicker = new CNContactPickerViewController { Delegate = this.contactDelegate };                      base.PresentViewController(contactsPicker' true' null);                      break;                    case PickerMode.SingleProperty:                      this.contactDelegate = new SinglePropertyPickerDelegate(this.Update);                      var propertyPicker = new CNContactPickerViewController { Delegate = this.contactDelegate };                      propertyPicker.DisplayedPropertyKeys = new NSString[] { CNContactKey.GivenName'                                                                               CNContactKey.FamilyName'                                                                               CNContactKey.EmailAddresses'                                                                              CNContactKey.PhoneNumbers'                                                                               CNContactKey.PostalAddresses };                      base.PresentViewController(propertyPicker' true' null);                      break;                    case PickerMode.MultipleProperties:                      this.contactDelegate = new MultiplePropertyPickerDelegate(this.Update);                      var propertiesPicker = new CNContactPickerViewController { Delegate = this.contactDelegate };                      propertiesPicker.PredicateForSelectionOfProperty = NSPredicate.FromFormat("key == 'emailAddresses'");                      base.PresentViewController(propertiesPicker' true' null);                      break;              }
Missing Default,Contacts,PredicateContactViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicateContactViewController.cs,ShowPicker,The following switch statement is missing a default case: switch (index.Row)              {                  case 0:                      // Enable all contacts in the contacts picker view.                      this.HandleAllContacts();                      break;                  case 1:                      // Only enable contacts with email addresses in the contacts picker view.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // Only enable contacts with postal addresses in the contacts picker view.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // Only enable contacts with 2 or more phone numbers in the contacts picker view.                      this.HandleContactsWithPhoneNumbers();                      break;                  case 4:                      // Only enable contacts with a profile picture in the contacts picker view.                      this.HandleContactsWithProfilePicture();                      break;              }
Missing Default,Contacts,PredicatePropertiesViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\PredicatePropertiesViewController.cs,ShowPicker,The following switch statement is missing a default case: switch (index.Row)              {                  case 0:                      // Only show the given and family names' email addresses' phone numbers' and postal addresses of a contact.                      this.HandleAllContacts();                      break;                  case 1:                      // When users select a contact's email address' it dismisses the view controller and returns the email address using                       // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithEmailAddresses();                      break;                  case 2:                      // When users select a contact's postal address' it dismisses the view controller and returns the birthday using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPostalAddresses();                      break;                  case 3:                      // When users select a contact's phone number' it dismisses the view controller and returns the phone number using                      // CNContactPickerDelegate's contact​Picker(_:​did​Select:​). When users select other properties' it implements their default action.                      this.HandleContactsWithPhoneNumbers();                      break;              }
Missing Default,Contacts.Helpers,ContactPropertyExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\Helpers\ContactExtensions.cs,GetNameMatchingValue,The following switch statement is missing a default case: switch (property.Key)              {                  case "emailAddresses":                      return property.Value as NSString;                  case "phoneNumbers":                      if (property.Value is CNPhoneNumber phoneNumber)                      {                          return phoneNumber.StringValue;                      }                      break;                    case "postalAddresses":                      if (property.Value is CNPostalAddress address)                      {                          return address.GetFormattedPostalAddress();                      }                      break;              }
Missing Default,Contacts.Helpers,ContactPropertyExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\Contacts\Contacts\Helpers\ContactExtensions.cs,GetNameMatchingLocalizedLabel,The following switch statement is missing a default case: switch (property?.Label)                  {                      case "emailAddresses":                          return CNLabeledValue<NSString>.LocalizeLabel(nativeLabel);                      case "phoneNumbers":                          return CNLabeledValue<CNPhoneNumber>.LocalizeLabel(nativeLabel);                      case "postalAddresses":                          return CNLabeledValue<CNPostalAddress>.LocalizeLabel(nativeLabel);                  }
