Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,RowSelected,Cyclomatic complexity of the method is 8
Complex Method,TransitionsDemo.InteractionControllers,CEVerticalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEVerticalSwipeInteractionController.cs,HandleGesture,Cyclomatic complexity of the method is 8
Long Parameter List,TransitionsDemo.AnimationControllers,CEReversibleAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEReversibleAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CECrossfadeAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECrossfadeAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,AnimateTransition,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Parameter List,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The method has 5 parameters. Parameters: transitionContext' fromViewController' toViewController' fromView' toView
Long Identifier,TransitionsDemo,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AppDelegate.cs,,The length of the parameter navigationControllerAnimationController is 39.
Long Identifier,TransitionsDemo,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AppDelegate.cs,,The length of the parameter navigationControllerInteractionController is 41.
Long Identifier,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The length of the parameter flippedSectionOfFromViewShadow is 30.
Long Statement,TransitionsDemo.AnimationControllers,CEReversibleAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEReversibleAnimationController.cs,AnimateTransition,The length of the statement  "			UIViewController fromViewController = transitionContext.GetViewControllerForKey (UITransitionContext.FromViewControllerKey); " is 124.
Long Statement,TransitionsDemo.AnimationControllers,CEReversibleAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEReversibleAnimationController.cs,AnimateTransition,The length of the statement  "			UIViewController toViewController = transitionContext.GetViewControllerForKey (UITransitionContext.ToViewControllerKey); " is 120.
Long Statement,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The length of the statement  "			UIView.AnimateKeyframes (duration' 0.0' UIViewKeyframeAnimationOptions.CalculationModeLinear' animations' (finished) => { " is 121.
Long Statement,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The length of the statement  "			UIView.AnimateKeyframes (duration' 0.0' UIViewKeyframeAnimationOptions.CalculationModeLinear' animations' (finished) => { " is 121.
Long Statement,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The length of the statement  "			UIView.AnimateKeyframes (Duration' 0.0' UIViewKeyframeAnimationOptions.CalculationModeCubic' animations' (finished) => { " is 120.
Long Statement,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The length of the statement  "			UIView.AnimateKeyframes (Duration' 0.0' UIViewKeyframeAnimationOptions.CalculationModeCubic' animations' (finished) => { " is 120.
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,RowSelected,The following statement contains a magic number: indexPath.Section < 2
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,WillDisplay,The following statement contains a magic number: indexPath.Section < 2
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,GetCell,The following statement contains a magic number: indexPath.Section < 2
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,RowsInSection,The following statement contains a magic number: return section < 2 ? animationControllers.Count : interactionControllers.Count;
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,NumberOfSections,The following statement contains a magic number: return 4;
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,TitleForHeader,The following statement contains a magic number: switch (section) {  			case 0:  				resultTitle = "Navigation push / pop animation controller";  				break;  			case 1:  				resultTitle = "Settings present / dismiss animation controller";  				break;  			case 2:  				resultTitle = "Navigation pop interaction controller";  				break;  			case 3:  				resultTitle = "Settings present / dismiss interaction controller";  				break;  			}
Magic Number,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,TitleForHeader,The following statement contains a magic number: switch (section) {  			case 0:  				resultTitle = "Navigation push / pop animation controller";  				break;  			case 1:  				resultTitle = "Settings present / dismiss animation controller";  				break;  			case 2:  				resultTitle = "Navigation pop interaction controller";  				break;  			case 3:  				resultTitle = "Settings present / dismiss interaction controller";  				break;  			}
Magic Number,TransitionsDemo.InteractionControllers,CEHorizontalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEHorizontalSwipeInteractionController.cs,TrackGestureChaged,The following statement contains a magic number: float fraction = (float)translation.X / 200f;
Magic Number,TransitionsDemo.InteractionControllers,CEHorizontalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEHorizontalSwipeInteractionController.cs,TrackGestureChaged,The following statement contains a magic number: shouldCompleteTransition = (fraction > 0.5f);
Magic Number,TransitionsDemo.InteractionControllers,CEVerticalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEVerticalSwipeInteractionController.cs,HandleGesture,The following statement contains a magic number: switch (gestureRecognizer.State) {  			case UIGestureRecognizerState.Began:  				bool topToBottomSwipe = translation.Y > 0f;  				if (operation == CEInteractionOperation.Pop) {  					if (topToBottomSwipe) {  						InteractionInProgress = true;  						viewController.NavigationController.PopViewController (true);  					}  				} else {  					InteractionInProgress = true;  					viewController.DismissViewController (true' null);  				}  				break;  			case UIGestureRecognizerState.Changed:  				if (InteractionInProgress) {  					// compute the current position  					float fraction = (float)translation.Y / 200f;  					fraction = Math.Min (Math.Max (fraction' 0f)' 1f);  					shouldCompleteTransition = (fraction > 0.5f);    					UpdateInteractiveTransition (fraction);  				}  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				if (InteractionInProgress) {  					InteractionInProgress = false;  					if (!shouldCompleteTransition || gestureRecognizer.State == UIGestureRecognizerState.Cancelled) {  						CancelInteractiveTransition ();  					} else {  						FinishInteractiveTransition ();  					}  				}  				break;  			}
Magic Number,TransitionsDemo.InteractionControllers,CEVerticalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEVerticalSwipeInteractionController.cs,HandleGesture,The following statement contains a magic number: switch (gestureRecognizer.State) {  			case UIGestureRecognizerState.Began:  				bool topToBottomSwipe = translation.Y > 0f;  				if (operation == CEInteractionOperation.Pop) {  					if (topToBottomSwipe) {  						InteractionInProgress = true;  						viewController.NavigationController.PopViewController (true);  					}  				} else {  					InteractionInProgress = true;  					viewController.DismissViewController (true' null);  				}  				break;  			case UIGestureRecognizerState.Changed:  				if (InteractionInProgress) {  					// compute the current position  					float fraction = (float)translation.Y / 200f;  					fraction = Math.Min (Math.Max (fraction' 0f)' 1f);  					shouldCompleteTransition = (fraction > 0.5f);    					UpdateInteractiveTransition (fraction);  				}  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				if (InteractionInProgress) {  					InteractionInProgress = false;  					if (!shouldCompleteTransition || gestureRecognizer.State == UIGestureRecognizerState.Cancelled) {  						CancelInteractiveTransition ();  					} else {  						FinishInteractiveTransition ();  					}  				}  				break;  			}
Magic Number,TransitionsDemo.InteractionControllers,CEPinchInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEPinchInteractionController.cs,TrackGestureChaged,The following statement contains a magic number: shouldCompleteTransition = (fraction > 0.5);
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: float xFactor = 10f;
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEExplosionAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEExplosionAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action action = () => {  				foreach (UIView view in snapshots) {  					float xOffset = rnd.Next (-100' 100);  					float yOffset = rnd.Next (-100' 100);  					view.Frame = new CGRect (view.Frame.X + xOffset' view.Frame.Y + yOffset' view.Frame.Width' view.Frame.Height);  					view.Alpha = 0f;  					var transition = CGAffineTransform.MakeRotation (rnd.Next (-10' 10));  					transition.Scale (0f' 0f);  					view.Transform = transition;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: transform.m34 = -0.002f;
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: UpdateAnchorPointAndOffset (new CGPoint (Reverse ? 0f : 1f' 0.5f)' flippedSectionOfFromView);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: UpdateAnchorPointAndOffset (new CGPoint (Reverse ? 1f : 0f' 0.5f)' flippedSectionOfToView);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? (float)Math.PI / 2 : -(float)Math.PI / 2);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? (float)Math.PI / 2 : -(float)Math.PI / 2);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					flippedSectionOfFromView.Layer.Transform = Rotate (Reverse ? -(float)Math.PI / 2 : (float)Math.PI / 2);  					flippedSectionOfFromViewShadow.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					flippedSectionOfToView.Layer.Transform = Rotate (Reverse ? 0.001f : -0.001f);  					flippedSectionOfToViewShadow.Alpha = 0f;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,AddShadowToView,The following statement contains a magic number: var colors = new CGColor[] {  				UIColor.FromWhiteAlpha(0f' 0f).CGColor'  				UIColor.FromWhiteAlpha(0f' 0.5f).CGColor  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,CreateSnapshots,The following statement contains a magic number: var snapshotRegion = new CGRect (0' 0' view.Frame.Size.Width / 2' view.Frame.Size.Height);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,CreateSnapshots,The following statement contains a magic number: snapshotRegion = new CGRect (view.Frame.Size.Width / 2' 0' view.Frame.Size.Width / 2' view.Frame.Size.Height);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,CreateSnapshots,The following statement contains a magic number: snapshotRegion = new CGRect (view.Frame.Size.Width / 2' 0' view.Frame.Size.Width / 2' view.Frame.Size.Height);
Magic Number,TransitionsDemo.AnimationControllers,CEFlipAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFlipAnimationController.cs,UpdateAnchorPointAndOffset,The following statement contains a magic number: float newX = (float)(view.Frame.X + (anchorPoint.X - 0.5f) * view.Frame.Width);
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: transform.m34 = -0.002f;
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: toView.Layer.Transform = Rotate (factor * -(float)Math.PI / 2);
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Layer.Transform = Rotate (factor * (float)Math.PI / 2);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					toView.Layer.Transform = Rotate (0f);  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Layer.Transform = Rotate (factor * (float)Math.PI / 2);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					toView.Layer.Transform = Rotate (0f);  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Layer.Transform = Rotate (factor * (float)Math.PI / 2);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					toView.Layer.Transform = Rotate (0f);  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CETurnAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CETurnAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Layer.Transform = Rotate (factor * (float)Math.PI / 2);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.5' 0.5' () => {  					toView.Layer.Transform = Rotate (0f);  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,CEFoldAnimationController,The following statement contains a magic number: Folds = 2;
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: toView.Center = new CGPoint (1000f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: transform.m34 = -0.005f;
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: float foldWidth = (float)(size.Width * 0.5f / Folds);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: float offset = i * foldWidth * 2;
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: leftFromViewFold.Layer.Position = new CGPoint (offset' size.Height / 2f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: rightFromViewFold.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: rightFromViewFold.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: leftToViewFold.Layer.Position = new CGPoint (Reverse ? size.Width : 0f' size.Height / 2f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: leftToViewFold.Layer.Transform = CATransform3D.MakeRotation ((float)Math.PI / 2f' 0f' 1f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: rightToViewFold.Layer.Position = new CGPoint (Reverse ? size.Width : 0f' size.Height / 2f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: rightToViewFold.Layer.Transform = CATransform3D.MakeRotation (-(float)Math.PI / 2f' 0f' 1f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: fromView.Center = new CGPoint (1000f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AnimateTransition,The following statement contains a magic number: Action animation = () => {  				for (int i = 0; i < Folds; i++) {    					float offset = i * foldWidth * 2;    					// the left and right side of the fold for the from- view' with 90 degree transform and 1.0 alpha  					// on the shadow' with each view positioned at the edge of thw screen.  					UIView leftFromView = fromViewFolds [i * 2];  					leftFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					leftFromView.Layer.Transform = transform.Rotate ((float)Math.PI / 2f' 0f' 1f' 0f);  					leftFromView.Subviews [1].Alpha = 1f;    					UIView rightFromView = fromViewFolds [i * 2 + 1];  					rightFromView.Layer.Position = new CGPoint (Reverse ? 0f : size.Width' size.Height / 2f);  					rightFromView.Layer.Transform = transform.Rotate (-(float)Math.PI / 2f' 0f' 1f' 0f);  					rightFromView.Subviews [1].Alpha = 1f;    					// the left and right side of the fold for the to- view' with identity transform and 0.0 alpha  					// on the shadow' with each view at its final position  					UIView leftToView = toViewFolds [i * 2];  					leftToView.Layer.Position = new CGPoint (offset' size.Height / 2f);  					leftToView.Layer.Transform = CATransform3D.Identity;  					leftToView.Subviews [1].Alpha = 0f;    					UIView rightToView = toViewFolds [i * 2 + 1];  					rightToView.Layer.Position = new CGPoint (offset + foldWidth * 2f' size.Height / 2f);  					rightToView.Layer.Transform = CATransform3D.Identity;  					rightToView.Subviews [1].Alpha = 0f;  				}  			};
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,CreateSnapshot,The following statement contains a magic number: float foldWidth = (float)(size.Width * 0.5f / Folds);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,CreateSnapshot,The following statement contains a magic number: snapshotWithShadowView.Layer.AnchorPoint = new CGPoint (left ? 0f : 1f' 0.5f);
Magic Number,TransitionsDemo.AnimationControllers,CEFoldAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CEFoldAnimationController.cs,AddShadowToView,The following statement contains a magic number: gradient.StartPoint = new CGPoint (Reverse ? 0f : 1f' Reverse ? 0.2f : 0f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: toView.Layer.Transform = scale.Scale (0.6f' 0.6f' 1f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: toView.Layer.Transform = scale.Scale (0.6f' 0.6f' 1f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: toView.Alpha = 0.6f;
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: Action animations = () => {    				// push the from- view off the bottom of the screen  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Frame = frameOffScreen;  				});    				// animate the to- view into place  				UIView.AddKeyframeWithRelativeStartTime (0.35' 0.35' () => {  					toView.Layer.Transform = transform;  					toView.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.75' 0.25' () => {  					toView.Layer.Transform = CATransform3D.Identity;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: Action animations = () => {    				// push the from- view off the bottom of the screen  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Frame = frameOffScreen;  				});    				// animate the to- view into place  				UIView.AddKeyframeWithRelativeStartTime (0.35' 0.35' () => {  					toView.Layer.Transform = transform;  					toView.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.75' 0.25' () => {  					toView.Layer.Transform = CATransform3D.Identity;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: Action animations = () => {    				// push the from- view off the bottom of the screen  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Frame = frameOffScreen;  				});    				// animate the to- view into place  				UIView.AddKeyframeWithRelativeStartTime (0.35' 0.35' () => {  					toView.Layer.Transform = transform;  					toView.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.75' 0.25' () => {  					toView.Layer.Transform = CATransform3D.Identity;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: Action animations = () => {    				// push the from- view off the bottom of the screen  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Frame = frameOffScreen;  				});    				// animate the to- view into place  				UIView.AddKeyframeWithRelativeStartTime (0.35' 0.35' () => {  					toView.Layer.Transform = transform;  					toView.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.75' 0.25' () => {  					toView.Layer.Transform = CATransform3D.Identity;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteReverseAnimation,The following statement contains a magic number: Action animations = () => {    				// push the from- view off the bottom of the screen  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.5' () => {  					fromView.Frame = frameOffScreen;  				});    				// animate the to- view into place  				UIView.AddKeyframeWithRelativeStartTime (0.35' 0.35' () => {  					toView.Layer.Transform = transform;  					toView.Alpha = 1f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.75' 0.25' () => {  					toView.Layer.Transform = CATransform3D.Identity;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,ExecuteForwardAnimation,The following statement contains a magic number: Action animations = () => {  				UIView.AddKeyframeWithRelativeStartTime (0.0' 0.4' () => {  					fromView.Layer.Transform = firstTransform;  					fromView.Alpha = 0.6f;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.2' 0.4' () => {  					fromView.Layer.Transform = secondTrsnaform;  				});    				UIView.AddKeyframeWithRelativeStartTime (0.6' 0.2' () => {  					toView.Frame = new CGRect (toView.Frame.X' containerView.Frame.Y - 30f'  					                               toView.Frame.Width' toView.Frame.Height);  				});    				UIView.AddKeyframeWithRelativeStartTime (0.8' 0.2' () => {  					toView.Frame = containerView.Frame;  				});  			};
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetFirstTransform,The following statement contains a magic number: firstTransform.m34 = 1f / -900f;
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetFirstTransform,The following statement contains a magic number: firstTransform = firstTransform.Scale (0.95f' 0.95f' 1f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetFirstTransform,The following statement contains a magic number: firstTransform = firstTransform.Scale (0.95f' 0.95f' 1f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetFirstTransform,The following statement contains a magic number: firstTransform = firstTransform.Rotate (15.0f * (float)Math.PI / 180f' 1f' 0f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetFirstTransform,The following statement contains a magic number: firstTransform = firstTransform.Rotate (15.0f * (float)Math.PI / 180f' 1f' 0f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetSecondTransform,The following statement contains a magic number: secondTrnsform = secondTrnsform.Translate (0f' view.Frame.Height * -0.08f' 0f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetSecondTransform,The following statement contains a magic number: secondTrnsform = secondTrnsform.Scale (0.8f' 0.8f' 1f);
Magic Number,TransitionsDemo.AnimationControllers,CECardsAnimationController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\AnimationControllers\CECardsAnimationController.cs,GetSecondTransform,The following statement contains a magic number: secondTrnsform = secondTrnsform.Scale (0.8f' 0.8f' 1f);
Missing Default,TransitionsDemo,SettingsViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\SettingsViewController.cs,TitleForHeader,The following switch statement is missing a default case: switch (section) {  			case 0:  				resultTitle = "Navigation push / pop animation controller";  				break;  			case 1:  				resultTitle = "Settings present / dismiss animation controller";  				break;  			case 2:  				resultTitle = "Navigation pop interaction controller";  				break;  			case 3:  				resultTitle = "Settings present / dismiss interaction controller";  				break;  			}
Missing Default,TransitionsDemo.InteractionControllers,CEHorizontalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEHorizontalSwipeInteractionController.cs,HandleGesture,The following switch statement is missing a default case: switch (gestureRecognizer.State) {  			case UIGestureRecognizerState.Began:  				TrackGestureBegan (translation);  				break;  			case UIGestureRecognizerState.Changed:  				TrackGestureChaged (translation);  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				TrackGestureEnded (panGestureRecognizer.State);  				break;  			}
Missing Default,TransitionsDemo.InteractionControllers,CEVerticalSwipeInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEVerticalSwipeInteractionController.cs,HandleGesture,The following switch statement is missing a default case: switch (gestureRecognizer.State) {  			case UIGestureRecognizerState.Began:  				bool topToBottomSwipe = translation.Y > 0f;  				if (operation == CEInteractionOperation.Pop) {  					if (topToBottomSwipe) {  						InteractionInProgress = true;  						viewController.NavigationController.PopViewController (true);  					}  				} else {  					InteractionInProgress = true;  					viewController.DismissViewController (true' null);  				}  				break;  			case UIGestureRecognizerState.Changed:  				if (InteractionInProgress) {  					// compute the current position  					float fraction = (float)translation.Y / 200f;  					fraction = Math.Min (Math.Max (fraction' 0f)' 1f);  					shouldCompleteTransition = (fraction > 0.5f);    					UpdateInteractiveTransition (fraction);  				}  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				if (InteractionInProgress) {  					InteractionInProgress = false;  					if (!shouldCompleteTransition || gestureRecognizer.State == UIGestureRecognizerState.Cancelled) {  						CancelInteractiveTransition ();  					} else {  						FinishInteractiveTransition ();  					}  				}  				break;  			}
Missing Default,TransitionsDemo.InteractionControllers,CEPinchInteractionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\TransitionsDemo\TransitionsDemo\InteractionControllers\CEPinchInteractionController.cs,HandlePinch,The following switch statement is missing a default case: switch (gestureRecognizer.State) {  			case UIGestureRecognizerState.Began:  				TrackGestureBegan (pinchGestureRecognizer);  				break;  			case UIGestureRecognizerState.Changed:  				TrackGestureChaged (pinchGestureRecognizer);  				break;  			case UIGestureRecognizerState.Ended:  			case UIGestureRecognizerState.Cancelled:  				TrackGestureEnded (pinchGestureRecognizer);  				break;  			}
