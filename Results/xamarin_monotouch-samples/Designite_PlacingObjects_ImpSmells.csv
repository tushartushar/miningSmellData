Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ScheduleMessage,Cyclomatic complexity of the method is 8
Complex Method,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,Cyclomatic complexity of the method is 8
Long Parameter List,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,HitTestWithFeatures,The method has 6 parameters. Parameters: self' point' coneOpeningAngleInDegrees' minDistance' maxDistance' maxResults
Long Parameter List,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,Translate,The method has 5 parameters. Parameters: vObject' sceneView' screenPos' instantly' infinitePlane
Long Parameter List,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,SetPosition,The method has 5 parameters. Parameters: virtualObject' position' instantly' filterPosition' cameraTransform
Long Identifier,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,,The length of the parameter TrackingStateFeedbackMessageTimer is 33.
Long Identifier,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,,The length of the parameter recentFocusSquarePositionIndex is 30.
Long Identifier,PlacingObjects,SingleFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\SingleFingerGesture.cs,UpdateGesture,The length of the parameter initialLocationToCurrentPosition is 32.
Long Identifier,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,UpdateTranslation,The length of the parameter initialLocationToCurrentLocation is 32.
Long Identifier,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,UpdateRotation,The length of the parameter currentAngleToInitialFingerAngle is 32.
Long Identifier,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The length of the parameter highQualityFeatureHitTestResult is 31.
Long Identifier,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The length of the parameter highQualityfeatureHitTestResults is 32.
Long Identifier,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The length of the parameter unfilteredFeatureHitTestResults is 31.
Long Statement,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,ViewDidAppear,The length of the statement  "				var sessionErrorMsg = "This app requires world tracking. World tracking is only available on iOS devices with A9 processor or newer. " + " is 136.
Long Statement,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,UpdateFocusSquare,The length of the statement  "				var (worldPos' planeAnchor' _) = virtualObjectManager.WorldPositionFromScreenPosition(ScreenCenter.Value' SceneView' FocusSquare?.Position); " is 140.
Long Statement,PlacingObjects,UIImageExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\UIImageExtensions.cs,ComposeButtonImage,The length of the statement  "			var thumbDrawRect = new CGRect(CGPointExtensions.FromSize(maskImage.Size.Subtract(thumbImage.Size).Divide(2f))' thumbImage.Size); " is 129.
Long Statement,PlacingObjects,SCNVector3Extensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\SCNVector3Extensions.cs,Cross,The length of the statement  "			return new SCNVector3(vector3.Y * vec.Z - vector3.Z * vec.Y' vector3.Z * vec.X - vector3.X * vec.Z' vector3.X * vec.Y - vector3.Y * vec.X); " is 139.
Long Statement,PlacingObjects,Gesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\Gesture.cs,UpdateGestureFromTouches,The length of the statement  "					var notInTouches = NSPredicate.FromExpression(new NSPredicateEvaluator((evaluatedObject' bindings) => !touches.Contains(evaluatedObject))); " is 139.
Complex Conditional,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The conditional expression  "objectPos.X < minX || objectPos.X > maxX || objectPos.Z < minZ || objectPos.Z > maxZ"  is complex.
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,AddPlane,The following statement contains a magic number: UserFeedback.ScheduleMessage("TAP + TO PLACE AN OBJECT"' 7.5' MessageType.ContentPlacement);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,ResetTracking,The following statement contains a magic number: UserFeedback.ScheduleMessage("FIND A SURFACE TO PLACE AN OBJECT"' 7.5' MessageType.PlaneEstimation);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,SetupFocusSquare,The following statement contains a magic number: UserFeedback.ScheduleMessage("TRY MOVING LEFT OR RIGHT"' 5.0' MessageType.FocusSquare);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,SetupScene,The following statement contains a magic number: SceneView.Scene.EnableEnvironmentMapWithIntensity(25.0f' serialQueue);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,SetupUIControls,The following statement contains a magic number: MessagePanel.Layer.CornerRadius = 3.0f;
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,RendererUpdateAtTime,The following statement contains a magic number: SceneView.Scene.EnableEnvironmentMapWithIntensity((float)(lightEstimate.AmbientIntensity / 40f)' serialQueue);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,SessionDelegate_CameraDidChangeTrackingState,The following statement contains a magic number: switch (camera.TrackingState)  			{  				case ARTrackingState.NotAvailable:  				case ARTrackingState.Limited:  					UserFeedback.EscalateFeedback(camera.TrackingState' camera.TrackingStateReason' 3);  					break;  				case ARTrackingState.Normal:  					UserFeedback.CancelScheduledMessage(MessageType.TrackingStateEscalation);  					break;  			}
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,WillLoad,The following statement contains a magic number: Spinner.Bounds = new CGRect(0' 0' AddObjectButton.Bounds.Width - 5' AddObjectButton.Bounds.Height - 5);
Magic Number,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,WillLoad,The following statement contains a magic number: Spinner.Bounds = new CGRect(0' 0' AddObjectButton.Bounds.Width - 5' AddObjectButton.Bounds.Height - 5);
Magic Number,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ShowMessage,The following statement contains a magic number: InvokeOnMainThread(() =>  			{  				// Cancel previous hide timer  				MessageHideTimer?.Invalidate();    				// Set text and display status  				InvokeOnMainThread(() =>  								  Controller.MessageLabel.Text = text);  				ShowHideMessage(false' true);    				// Autohide?  				if (autoHide)  				{  					// Compute an appropriate amount of time to display the on screen message.  					// According to https://en.wikipedia.org/wiki/Words_per_minute' adults read  					// about 200 words per minute and the average English word is 5 characters  					// long. So 1000 characters per minute / 60 = 15 characters per second.  					// We limit the duration to a range of 1-10 seconds.  					var charCount = text.Length;  					var displayDuration = Math.Min(10' (double)charCount / 15.0 + 1.0);  					MessageHideTimer = NSTimer.CreateScheduledTimer(displayDuration' false' (obj) =>  					{  						ShowHideMessage(true' true);  					});  				}  			});
Magic Number,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ShowMessage,The following statement contains a magic number: InvokeOnMainThread(() =>  			{  				// Cancel previous hide timer  				MessageHideTimer?.Invalidate();    				// Set text and display status  				InvokeOnMainThread(() =>  								  Controller.MessageLabel.Text = text);  				ShowHideMessage(false' true);    				// Autohide?  				if (autoHide)  				{  					// Compute an appropriate amount of time to display the on screen message.  					// According to https://en.wikipedia.org/wiki/Words_per_minute' adults read  					// about 200 words per minute and the average English word is 5 characters  					// long. So 1000 characters per minute / 60 = 15 characters per second.  					// We limit the duration to a range of 1-10 seconds.  					var charCount = text.Length;  					var displayDuration = Math.Min(10' (double)charCount / 15.0 + 1.0);  					MessageHideTimer = NSTimer.CreateScheduledTimer(displayDuration' false' (obj) =>  					{  						ShowHideMessage(true' true);  					});  				}  			});
Magic Number,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ShowHideMessage,The following statement contains a magic number: InvokeOnMainThread(() =>  			{  				// Animated?  				if (animated)  				{  					// Fade out message  					UIView.Animate(0.2f' 0' UIViewAnimationOptions.AllowUserInteraction' () =>  					{  						Controller.MessageLabel.Hidden = hide;  						UpdateMessagePanelVisibility();  					}' null);  				}  				else  				{  					// Instantly hide message  					Controller.MessageLabel.Hidden = hide;  				}  			});
Magic Number,PlacingObjects,SCNNodeExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\SCNNodeExtensions.cs,RenderOnTop,The following statement contains a magic number: node.RenderingOrder = 2;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,UpdateTransform,The following statement contains a magic number: var threshold1 = (float)(Math.PI / 2f * 0.65f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,UpdateTransform,The following statement contains a magic number: var threshold1 = (float)(Math.PI / 2f * 0.65f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,UpdateTransform,The following statement contains a magic number: var threshold2 = (float)(Math.PI / 2f * 0.75f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,UpdateTransform,The following statement contains a magic number: var threshold2 = (float)(Math.PI / 2f * 0.75f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Normalize,The following statement contains a magic number: normalized -= (float)Math.PI / 2;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Normalize,The following statement contains a magic number: Math.Abs(normalized - forMinimalRotationTo) > (float)Math.PI / 4
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleBasedOnDistance,The following statement contains a magic number: var newScale = (distanceFromCamera < 0.7f) ? (distanceFromCamera / 0.7f) : (0.25f * distanceFromCamera + 0.825f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleBasedOnDistance,The following statement contains a magic number: var newScale = (distanceFromCamera < 0.7f) ? (distanceFromCamera / 0.7f) : (0.25f * distanceFromCamera + 0.825f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleBasedOnDistance,The following statement contains a magic number: var newScale = (distanceFromCamera < 0.7f) ? (distanceFromCamera / 0.7f) : (0.25f * distanceFromCamera + 0.825f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleBasedOnDistance,The following statement contains a magic number: var newScale = (distanceFromCamera < 0.7f) ? (distanceFromCamera / 0.7f) : (0.25f * distanceFromCamera + 0.825f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,PulseAction,The following statement contains a magic number: var pulseOutAction = SCNAction.FadeOpacityTo(0.4f' 0.5f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,PulseAction,The following statement contains a magic number: var pulseOutAction = SCNAction.FadeOpacityTo(0.4f' 0.5f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,PulseAction,The following statement contains a magic number: var pulseInAction = SCNAction.FadeOpacityTo(1.0f' 0.5f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FlashAnimation,The following statement contains a magic number: var action = SCNAction.CustomAction(duration' (node' elapsedTime) => {  				// animate color from HSB 48/100/100 to 48/30/100 and back  				var elapsedTimePercentage = elapsedTime / (float)duration;  				var saturation = 2.8f * (elapsedTimePercentage - 0.5f) * (elapsedTimePercentage - 0.5f) + 0.3f;  				var material = node.Geometry.FirstMaterial;  				if (material !=null) {  					material.Diffuse.Contents = UIColor.FromHSBA(0.1333f' saturation' 1.0f' 1.0f);  				}  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FlashAnimation,The following statement contains a magic number: var action = SCNAction.CustomAction(duration' (node' elapsedTime) => {  				// animate color from HSB 48/100/100 to 48/30/100 and back  				var elapsedTimePercentage = elapsedTime / (float)duration;  				var saturation = 2.8f * (elapsedTimePercentage - 0.5f) * (elapsedTimePercentage - 0.5f) + 0.3f;  				var material = node.Geometry.FirstMaterial;  				if (material !=null) {  					material.Diffuse.Contents = UIColor.FromHSBA(0.1333f' saturation' 1.0f' 1.0f);  				}  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FlashAnimation,The following statement contains a magic number: var action = SCNAction.CustomAction(duration' (node' elapsedTime) => {  				// animate color from HSB 48/100/100 to 48/30/100 and back  				var elapsedTimePercentage = elapsedTime / (float)duration;  				var saturation = 2.8f * (elapsedTimePercentage - 0.5f) * (elapsedTimePercentage - 0.5f) + 0.3f;  				var material = node.Geometry.FirstMaterial;  				if (material !=null) {  					material.Diffuse.Contents = UIColor.FromHSBA(0.1333f' saturation' 1.0f' 1.0f);  				}  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FlashAnimation,The following statement contains a magic number: var action = SCNAction.CustomAction(duration' (node' elapsedTime) => {  				// animate color from HSB 48/100/100 to 48/30/100 and back  				var elapsedTimePercentage = elapsedTime / (float)duration;  				var saturation = 2.8f * (elapsedTimePercentage - 0.5f) * (elapsedTimePercentage - 0.5f) + 0.3f;  				var material = node.Geometry.FirstMaterial;  				if (material !=null) {  					material.Diffuse.Contents = UIColor.FromHSBA(0.1333f' saturation' 1.0f' 1.0f);  				}  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FlashAnimation,The following statement contains a magic number: var action = SCNAction.CustomAction(duration' (node' elapsedTime) => {  				// animate color from HSB 48/100/100 to 48/30/100 and back  				var elapsedTimePercentage = elapsedTime / (float)duration;  				var saturation = 2.8f * (elapsedTimePercentage - 0.5f) * (elapsedTimePercentage - 0.5f) + 0.3f;  				var material = node.Geometry.FirstMaterial;  				if (material !=null) {  					material.Diffuse.Contents = UIColor.FromHSBA(0.1333f' saturation' 1.0f' 1.0f);  				}  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var values = new NSNumber[] { fs' fs * 1.15f' fs * 1.15f' ts * 0.97f' ts };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var values = new NSNumber[] { fs' fs * 1.15f' fs * 1.15f' ts * 0.97f' ts };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var values = new NSNumber[] { fs' fs * 1.15f' fs * 1.15f' ts * 0.97f' ts };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var keyTimes = new NSNumber[] { 0.00f' 0.25f' 0.50f' 0.75f' 1.00f };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var keyTimes = new NSNumber[] { 0.00f' 0.25f' 0.50f' 0.75f' 1.00f };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,ScaleAnimation,The following statement contains a magic number: var keyTimes = new NSNumber[] { 0.00f' 0.25f' 0.50f' 0.75f' 1.00f };
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Open,The following statement contains a magic number: SCNTransaction.AnimationDuration = AnimationDuration / 4f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Open,The following statement contains a magic number: SCNTransaction.AnimationDuration = AnimationDuration / 4f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: SCNTransaction.AnimationDuration = AnimationDuration / 2f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: FocusSquareNode().Opacity = 0.99f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: SCNTransaction.SetCompletionBlock(() => {  				SCNTransaction.Begin();  				SCNTransaction.AnimationTimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseOut);  				SCNTransaction.AnimationDuration = AnimationDuration / 4f;    				foreach(var segment in segments)  				{  					segment.Close();  				}    				SCNTransaction.SetCompletionBlock(() => {  					IsAnimating = false;  				});  				SCNTransaction.Commit();  			});
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: var waitAction = SCNAction.Wait(AnimationDuration * 0.75f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: var fadeInAction = SCNAction.FadeOpacityTo(0.25f' AnimationDuration * 0.125f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: var fadeInAction = SCNAction.FadeOpacityTo(0.25f' AnimationDuration * 0.125f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: var fadeOutAction = SCNAction.FadeOpacityTo(0.0f' AnimationDuration * 0.125f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Close,The following statement contains a magic number: var flashSquareAction = FlashAnimation(AnimationDuration * 0.25f);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: var sl = 0.5f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: var c = FocusSquareThickness / 2f;
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s1.Position = s1.Position.Add(new SCNVector3(-(sl / 2 - c)' -(sl - c)' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s2.Position = s2.Position.Add(new SCNVector3(sl / 2 - c' -(sl - c)' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s3.Position = s3.Position.Add(new SCNVector3(-sl' -sl / 2' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s4.Position = s4.Position.Add(new SCNVector3(sl' -sl / 2' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s5.Position = s5.Position.Add(new SCNVector3(-sl' sl / 2' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s6.Position = s6.Position.Add(new SCNVector3(sl' sl / 2' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s7.Position = s7.Position.Add(new SCNVector3(-(sl / 2 - c)' sl - c' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: s8.Position = s8.Position.Add(new SCNVector3(sl / 2 - c' sl - c' 0));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,FocusSquareNode,The following statement contains a magic number: planeNode.EulerAngles = new SCNVector3((float) (Math.PI / 2)' planeNode.EulerAngles.Y' planeNode.EulerAngles.Z);
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Hide,The following statement contains a magic number: RunAction(SCNAction.FadeOut(0.5f));
Magic Number,PlacingObjects,FocusSquare,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquare.cs,Show,The following statement contains a magic number: RunAction(SCNAction.FadeIn(0.5f));
Magic Number,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Open,The following statement contains a magic number: var offset = FocusSquareSegment.length / 2 - FocusSquareSegment.openLength / 2;
Magic Number,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Open,The following statement contains a magic number: var offset = FocusSquareSegment.length / 2 - FocusSquareSegment.openLength / 2;
Magic Number,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Close,The following statement contains a magic number: plane.Width = 0.5f;
Magic Number,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Close,The following statement contains a magic number: var offset = FocusSquareSegment.length / 2 - FocusSquareSegment.openLength / 2;
Magic Number,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Close,The following statement contains a magic number: var offset = FocusSquareSegment.length / 2 - FocusSquareSegment.openLength / 2;
Magic Number,PlacingObjects,UIImageExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\UIImageExtensions.cs,ComposeButtonImage,The following statement contains a magic number: var thumbDrawRect = new CGRect(CGPointExtensions.FromSize(maskImage.Size.Subtract(thumbImage.Size).Divide(2f))' thumbImage.Size);
Magic Number,PlacingObjects,CGPointExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\CGPointExtensions.cs,MidPoint,The following statement contains a magic number: return self.Add(point).Divide(2f);
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateAxesNode,The following statement contains a magic number: quiverThickness = (quiverLength / 50f) * quiverThickness;
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateAxesNode,The following statement contains a magic number: var chamferRadius = quiverThickness / 2f;
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateAxesNode,The following statement contains a magic number: xQuiverNode.Position = new SCNVector3((quiverLength / 2f)' 0' 0);
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateAxesNode,The following statement contains a magic number: yQuiverNode.Position = new SCNVector3(0' (quiverLength / 2f)' 0);
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateAxesNode,The following statement contains a magic number: zQuiverNode.Position = new SCNVector3(0' 0' (quiverLength / 2f));
Magic Number,PlacingObjects,Utilities,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\Utilities.cs,CreateCrossNode,The following statement contains a magic number: planeNode.EulerAngles = new SCNVector3((float)Math.PI / 2f' 0' (float)Math.PI);
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,Setup,The following statement contains a magic number: self.PreferredFramesPerSecond = 60;
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,Setup,The following statement contains a magic number: self.ContentScaleFactor = 1.3f;
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,Setup,The following statement contains a magic number: camera.MaximumExposure = 3;
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,HitTestWithInfiniteHorizontalPlane,The following statement contains a magic number: ray.Direction.Y > -0.03f
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,HitTestWithFeatures,The following statement contains a magic number: var maxAngleInDeg = Math.Min(coneOpeningAngleInDegrees' 360) / 2.0;
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,HitTestWithFeatures,The following statement contains a magic number: var maxAngleInDeg = Math.Min(coneOpeningAngleInDegrees' 360) / 2.0;
Magic Number,PlacingObjects,ARSCNViewExtensions,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ObjectExtensions\ARSCNViewExtensions.cs,HitTestWithFeatures,The following statement contains a magic number: var maxAngle = (maxAngleInDeg / 180) * Math.PI;
Magic Number,PlacingObjects,Gesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\Gesture.cs,Gesture,The following statement contains a magic number: this.refreshTimer = new System.Threading.Timer(CheckedUpdateGesture' null' 0' 17);
Magic Number,PlacingObjects,Gesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\Gesture.cs,UpdateGestureFromTouches,The following statement contains a magic number: var expectedTouchCount = (this is SingleFingerGesture) ? 1 : 2;
Magic Number,PlacingObjects,Gesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\Gesture.cs,StartGestureFromTouches,The following statement contains a magic number: switch (currentTouches.Count)  			{  				case 1: return new SingleFingerGesture(currentTouches' sceneView' lastUsedObject' manager);  				case 2: return new TwoFingerGesture(currentTouches' sceneView' lastUsedObject' manager);  				default:  					return null;  			}
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: InitialMidpoint = firstTouchPoint.Add(secondTouchPoint).Divide(2f);
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,TwoFingerGesture,The following statement contains a magic number: var midpoints = new[]  			{  				thirdCorner.Add(firstTouchPoint).Divide(2f)'  				thirdCorner.Add(secondTouchPoint).Divide(2f)'  				fourthCorner.Add(firstTouchPoint).Divide(2f)'  				fourthCorner.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(firstTouchPoint).Divide(2f)'  				InitialMidpoint.Add(secondTouchPoint).Divide(2f)'  				InitialMidpoint.Add(thirdCorner).Divide(2f)'  				InitialMidpoint.Add(fourthCorner).Divide(2f)  			};
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,UpdateGesture,The following statement contains a magic number: currentTouches.Count < 2
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,UpdateGestureFromTouches,The following statement contains a magic number: switch (currentTouches.Count)  			{  				case 0:  					// Nothing to process  					return this;  				case 2:  					// Update this gesture  					UpdateGesture(null);  					return this;  				default:  					// Finish this two finger gesture and switch to no gesture -> The user  					// will have to release all other fingers and touch the screen again  					// to start a new gesture.  					FinishGesture();  					this.refreshTimer?.Dispose();  					// Erase reference to timer in case callback fires one last time  					this.refreshTimer = null;  					return null;  			}
Magic Number,PlacingObjects,TwoFingerGesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\TwoFingerGesture.cs,UpdateRotation,The following statement contains a magic number: var midPointToFirstTouch = span.Divide(2f);
Magic Number,PlacingObjects,VirtualObjectSelectionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjectSelectionViewController.cs,ViewWillLayoutSubviews,The following statement contains a magic number: PreferredContentSize = new CGSize(250' TableView.ContentSize.Height);
Magic Number,PlacingObjects,VirtualObjectSelectionViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjectSelectionViewController.cs,RowHighlighted,The following statement contains a magic number: cell.BackgroundColor = UIColor.LightGray.ColorWithAlpha(0.5f);
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,UpdateVirtualObjectPosition,The following statement contains a magic number: cameraToPosition = cameraToPosition.Normalized() * 10;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,UpdateVirtualObjectPosition,The following statement contains a magic number: cameraToPosition.LengthFast > 10
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,UpdateVirtualObjectPosition,The following statement contains a magic number: virtualObject.RecentVirtualObjectDistances.KeepLast(10);
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,SetNewVirtualObjectPosition,The following statement contains a magic number: cameraToPosition = cameraToPosition.Normalized() * 10;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,SetNewVirtualObjectPosition,The following statement contains a magic number: cameraToPosition.LengthFast > 10
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var tolerance = 0.1f;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var minX = anchor.Center.X - anchor.Extent.X / 2f - anchor.Extent.X * tolerance;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var maxX = anchor.Center.X + anchor.Extent.X / 2f + anchor.Extent.X * tolerance;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var minZ = anchor.Center.Z - anchor.Extent.Z / 2f - anchor.Extent.Z * tolerance;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var maxZ = anchor.Center.Z + anchor.Extent.Z / 2f + anchor.Extent.Z * tolerance;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var verticalAllowance = 0.05f;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: var epsilon = 0.001;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,CheckIfObjectShouldMoveOntoPlane,The following statement contains a magic number: SCNTransaction.AnimationDuration = distanceToPlane * 500;
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The following statement contains a magic number: var highQualityfeatureHitTestResults = sceneView.HitTestWithFeatures(position' 18' 0.2' 2.0);
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The following statement contains a magic number: var highQualityfeatureHitTestResults = sceneView.HitTestWithFeatures(position' 18' 0.2' 2.0);
Magic Number,PlacingObjects,VirtualObjectManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\VirtualObjects\VirtualObjectManager.cs,WorldPositionFromScreenPosition,The following statement contains a magic number: var highQualityfeatureHitTestResults = sceneView.HitTestWithFeatures(position' 18' 0.2' 2.0);
Missing Default,PlacingObjects,ViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\ViewController.cs,SessionDelegate_CameraDidChangeTrackingState,The following switch statement is missing a default case: switch (camera.TrackingState)  			{  				case ARTrackingState.NotAvailable:  				case ARTrackingState.Limited:  					UserFeedback.EscalateFeedback(camera.TrackingState' camera.TrackingStateReason' 3);  					break;  				case ARTrackingState.Normal:  					UserFeedback.CancelScheduledMessage(MessageType.TrackingStateEscalation);  					break;  			}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ScheduleMessage,The following switch statement is missing a default case: switch (messageType)  			{  				case MessageType.ContentPlacement:  					ScheduleMessageTimer = ContentPlacementMessageTimer;  					break;  				case MessageType.FocusSquare:  					ScheduleMessageTimer = FocusSquareMessageTimer;  					break;  				case MessageType.PlaneEstimation:  					ScheduleMessageTimer = PlaneEstimationMessageTimer;  					break;  				case MessageType.TrackingStateEscalation:  					ScheduleMessageTimer = TrackingStateFeedbackMessageTimer;  					break;  			}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ScheduleMessage,The following switch statement is missing a default case: switch (messageType)  			{  				case MessageType.ContentPlacement:  					ContentPlacementMessageTimer = ScheduleMessageTimer;  					break;  				case MessageType.FocusSquare:  					FocusSquareMessageTimer = ScheduleMessageTimer;  					break;  				case MessageType.PlaneEstimation:  					PlaneEstimationMessageTimer = ScheduleMessageTimer;  					break;  				case MessageType.TrackingStateEscalation:  					TrackingStateFeedbackMessageTimer = ScheduleMessageTimer;  					break;  			}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ShowTrackingQualityInfo,The following switch statement is missing a default case: switch (trackingState)  			{  				case ARTrackingState.NotAvailable:  					title = "Tracking Not Available";  					break;  				case ARTrackingState.Normal:  					title = "Tracking Normal";  					break;  				case ARTrackingState.Limited:  					title = "Tracking Limited";  					switch (reason)  					{  						case ARTrackingStateReason.ExcessiveMotion:  							message = "because of excessive motion";  							break;  						case ARTrackingStateReason.Initializing:  							message = "because tracking is initializing";  							break;  						case ARTrackingStateReason.InsufficientFeatures:  							message = "because of insufficient features in the environment";  							break;  						case ARTrackingStateReason.None:  							message = "because of an unknown reason";  							break;  					}  					break;  			}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,ShowTrackingQualityInfo,The following switch statement is missing a default case: switch (reason)  					{  						case ARTrackingStateReason.ExcessiveMotion:  							message = "because of excessive motion";  							break;  						case ARTrackingStateReason.Initializing:  							message = "because tracking is initializing";  							break;  						case ARTrackingStateReason.InsufficientFeatures:  							message = "because of insufficient features in the environment";  							break;  						case ARTrackingStateReason.None:  							message = "because of an unknown reason";  							break;  					}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,EscalateFeedback,The following switch statement is missing a default case: switch (trackingState)  					{  						case ARTrackingState.NotAvailable:  							title = "Tracking Not Available";  							break;  						case ARTrackingState.Normal:  							title = "Tracking Normal";  							break;  						case ARTrackingState.Limited:  							title = "Tracking Limited";  							switch (reason)  							{  								case ARTrackingStateReason.ExcessiveMotion:  									message = "because of excessive motion";  									break;  								case ARTrackingStateReason.Initializing:  									message = "because tracking is initializing";  									break;  								case ARTrackingStateReason.InsufficientFeatures:  									message = "because of insufficient features in the environment";  									break;  								case ARTrackingStateReason.None:  									message = "because of an unknown reason";  									break;  							}  							break;  					}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,EscalateFeedback,The following switch statement is missing a default case: switch (reason)  							{  								case ARTrackingStateReason.ExcessiveMotion:  									message = "because of excessive motion";  									break;  								case ARTrackingStateReason.Initializing:  									message = "because tracking is initializing";  									break;  								case ARTrackingStateReason.InsufficientFeatures:  									message = "because of insufficient features in the environment";  									break;  								case ARTrackingStateReason.None:  									message = "because of an unknown reason";  									break;  							}
Missing Default,PlacingObjects,TextManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\Utilities\TextManager.cs,CancelScheduledMessage,The following switch statement is missing a default case: switch (messageType)  				{  					case MessageType.ContentPlacement:  						ScheduleMessageTimer = ContentPlacementMessageTimer;  						break;  					case MessageType.FocusSquare:  						ScheduleMessageTimer = FocusSquareMessageTimer;  						break;  					case MessageType.PlaneEstimation:  						ScheduleMessageTimer = PlaneEstimationMessageTimer;  						break;  					case MessageType.TrackingStateEscalation:  						ScheduleMessageTimer = TrackingStateFeedbackMessageTimer;  						break;  				}
Missing Default,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Open,The following switch statement is missing a default case: switch(direction)  			{  				case Direction.Left : this.Position = new SCNVector3(Position.X - offset' Position.Y' Position.Z); break;  				case Direction.Right : this.Position = new SCNVector3(Position.X + offset' Position.Y' Position.Z); break;  				case Direction.Up : this.Position = new SCNVector3(Position.X' Position.Y - offset' Position.Z); break;  				case Direction.Down : this.Position = new SCNVector3(Position.X' Position.Y + offset' Position.Z); break;  			}
Missing Default,PlacingObjects,FocusSquareSegment,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\FocusSquareSegment.cs,Close,The following switch statement is missing a default case: switch (direction)  			{  				case Direction.Left: x -= offset; break;  				case Direction.Right: x += offset; break;  				case Direction.Up : y -= offset; break;  				case Direction.Down : y += offset; break;  			}
Missing Default,PlacingObjects,Gesture,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\ARKitPlacingObjects\PlacingObjects\UIElements\Gesture.cs,UpdateGestureFromTouches,The following switch statement is missing a default case: switch (touchType)  			{  				case TouchEventType.TouchBegan:  				case TouchEventType.TouchMoved:  					var touchesUnion = currentTouches.Union(touches);  					var touchesArray = new UITouch[touchesUnion.Count()];  					int i = 0;  					foreach(UITouch touch in touchesUnion)  					{  						touchesArray[i] = touch;  						i++;  					}  					currentTouches = new NSSet(touchesArray);  					break;  				case TouchEventType.TouchCanceled:  				case TouchEventType.TouchEnded:  					var notInTouches = NSPredicate.FromExpression(new NSPredicateEvaluator((evaluatedObject' bindings) => !touches.Contains(evaluatedObject)));  					currentTouches = currentTouches.FilterUsingPredicate(notInTouches);  					break;  			}
