Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The length of the statement  "			newVelocity.X = touch.LocationInView (Screen.GlobalScreen).X - (nfloat)(touch.PreviousLocationInView (Screen.GlobalScreen).X / (touch.Timestamp - lastTime)); " is 157.
Long Statement,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The length of the statement  "			newVelocity.Y = touch.LocationInView (Screen.GlobalScreen).Y - (nfloat)(touch.PreviousLocationInView (Screen.GlobalScreen).Y / (touch.Timestamp - lastTime)); " is 157.
Long Statement,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The length of the statement  "			newVelocity.X = touch.LocationInView (Screen.GlobalScreen).X - (nfloat)(touch.PreviousLocationInView (Screen.GlobalScreen).X / (touch.Timestamp - lastTime)); " is 157.
Long Statement,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The length of the statement  "			newVelocity.Y = touch.LocationInView (Screen.GlobalScreen).Y - (nfloat)(touch.PreviousLocationInView (Screen.GlobalScreen).Y / (touch.Timestamp - lastTime)); " is 157.
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Width = 320f;
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Height = screen.Height - 400f;
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Y = 400;
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Layer.BackgroundColor = CreateColor (220' 220' 220' 255);
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Layer.BackgroundColor = CreateColor (220' 220' 220' 255);
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Layer.BackgroundColor = CreateColor (220' 220' 220' 255);
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: mapCover.Layer.BackgroundColor = CreateColor (220' 220' 220' 255);
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: list.Y = 300f;
Magic Number,ToastModern,Screen,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Screen.cs,Setup,The following statement contains a magic number: navBar.OnTouchUp = (touches) => {  				UIView.Animate (0.5f' () => {  					share.Y = 0;  				});  			};
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,LoadImage,The following statement contains a magic number: Size = new CGSize (Image.Size.Width * 0.5f' Image.Size.Height * 0.5f);
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,LoadImage,The following statement contains a magic number: Size = new CGSize (Image.Size.Width * 0.5f' Image.Size.Height * 0.5f);
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,CreateColor,The following statement contains a magic number: var color = new CGColor (colorSpace' new nfloat[] { red / 255f' green / 255f' blue / 255f' alpha / 255f });
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,CreateColor,The following statement contains a magic number: var color = new CGColor (colorSpace' new nfloat[] { red / 255f' green / 255f' blue / 255f' alpha / 255f });
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,CreateColor,The following statement contains a magic number: var color = new CGColor (colorSpace' new nfloat[] { red / 255f' green / 255f' blue / 255f' alpha / 255f });
Magic Number,ToastModern,Layer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Layer.cs,CreateColor,The following statement contains a magic number: var color = new CGColor (colorSpace' new nfloat[] { red / 255f' green / 255f' blue / 255f' alpha / 255f });
Magic Number,ToastModern,Spring,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Spring.cs,Spring,The following statement contains a magic number: Damping = 0.9;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Map,The following statement contains a magic number: var t = new Timer { Enabled = true' Interval = 10 };
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Tick,The following statement contains a magic number: UIView.PerformWithoutAnimation (() => {  					Y += velocity.Y / 60;  					X += velocity.X / 60;  					Clamp ();  				});
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Tick,The following statement contains a magic number: UIView.PerformWithoutAnimation (() => {  					Y += velocity.Y / 60;  					X += velocity.X / 60;  					Clamp ();  				});
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Tick,The following statement contains a magic number: velocity.X *= 0.9f;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Tick,The following statement contains a magic number: velocity.Y *= 0.9f;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The following statement contains a magic number: velocity.X = 0.25f * velocity.X + 0.75f * newVelocity.X;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The following statement contains a magic number: velocity.X = 0.25f * velocity.X + 0.75f * newVelocity.X;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The following statement contains a magic number: velocity.Y = 0.25f * velocity.Y + 0.75f * newVelocity.Y;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesMoved,The following statement contains a magic number: velocity.Y = 0.25f * velocity.Y + 0.75f * newVelocity.Y;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: velocity.X = 0.25f * velocity.X + 0.75f * newVelocity.X;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: velocity.X = 0.25f * velocity.X + 0.75f * newVelocity.X;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: velocity.Y = 0.25f * velocity.Y + 0.75f * newVelocity.Y;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: velocity.Y = 0.25f * velocity.Y + 0.75f * newVelocity.Y;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: Math.Abs (velocity.Y) > 100.0 || Math.Abs (velocity.X) > 100
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,TouchesEnded,The following statement contains a magic number: Math.Abs (velocity.Y) > 100.0 || Math.Abs (velocity.X) > 100
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: Y = 64;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: Y > 64
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: Y = -200;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: Y < -200
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: X = -Width + 320;
Magic Number,ToastModern,Map,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Map.cs,Clamp,The following statement contains a magic number: X < -Width + 320
Magic Number,ToastModern,KeyboardTyping,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\KeyboardTyping.cs,KeyboardTyping,The following statement contains a magic number: string imageName = i < 10 ? string.Format ("typing.00{0}.png"' i) : string.Format ("typing.0{0}.png"' i);
Magic Number,ToastModern,KeyboardTyping,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\KeyboardTyping.cs,KeyboardTyping,The following statement contains a magic number: i <= 18
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,List,The following statement contains a magic number: var t = new Timer { Enabled = true' Interval = 10 };
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,List,The following statement contains a magic number: spring = new Spring {  				Strength = 0.25'  				Damping = 0.4  			};
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,List,The following statement contains a magic number: spring = new Spring {  				Strength = 0.25'  				Damping = 0.4  			};
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,Tick,The following statement contains a magic number: InvokeOnMainThread (() => {  				if (isSpringing) {  					spring.Tick ();  					UIView.PerformWithoutAnimation (() => {  						Y = (nfloat)spring.Position;  					});  				} else if (isInertiaing) {  					UIView.PerformWithoutAnimation (() => {  						Y += (nfloat)(velocity / 60);  					});    					velocity *= 0.98;    					if (Y < min) {  						spring.Length = min;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					} else if (Y > max) {  						spring.Length = max;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					}  				}  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,Tick,The following statement contains a magic number: InvokeOnMainThread (() => {  				if (isSpringing) {  					spring.Tick ();  					UIView.PerformWithoutAnimation (() => {  						Y = (nfloat)spring.Position;  					});  				} else if (isInertiaing) {  					UIView.PerformWithoutAnimation (() => {  						Y += (nfloat)(velocity / 60);  					});    					velocity *= 0.98;    					if (Y < min) {  						spring.Length = min;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					} else if (Y > max) {  						spring.Length = max;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					}  				}  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,Tick,The following statement contains a magic number: InvokeOnMainThread (() => {  				if (isSpringing) {  					spring.Tick ();  					UIView.PerformWithoutAnimation (() => {  						Y = (nfloat)spring.Position;  					});  				} else if (isInertiaing) {  					UIView.PerformWithoutAnimation (() => {  						Y += (nfloat)(velocity / 60);  					});    					velocity *= 0.98;    					if (Y < min) {  						spring.Length = min;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					} else if (Y > max) {  						spring.Length = max;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					}  				}  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,Tick,The following statement contains a magic number: InvokeOnMainThread (() => {  				if (isSpringing) {  					spring.Tick ();  					UIView.PerformWithoutAnimation (() => {  						Y = (nfloat)spring.Position;  					});  				} else if (isInertiaing) {  					UIView.PerformWithoutAnimation (() => {  						Y += (nfloat)(velocity / 60);  					});    					velocity *= 0.98;    					if (Y < min) {  						spring.Length = min;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					} else if (Y > max) {  						spring.Length = max;    						spring.Position = Y;  						spring.Velocity = velocity / 60;    						isInertiaing = false;  						isSpringing = true;  					}  				}  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesMoved,The following statement contains a magic number: InvokeOnMainThread (() => {  				UITouch touch = (UITouch)touches.AnyObject;  				UIView.PerformWithoutAnimation (() => {  					if (Y < min || Y > max)  						Y += 0.5f * (touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y);  					else  						Y += touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				});    				double dy = touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				double dt = touch.Timestamp - lastTime;    				velocity = velocity * 0.25 + 0.75 * dy / dt;  				lastTime = touch.Timestamp;  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesMoved,The following statement contains a magic number: InvokeOnMainThread (() => {  				UITouch touch = (UITouch)touches.AnyObject;  				UIView.PerformWithoutAnimation (() => {  					if (Y < min || Y > max)  						Y += 0.5f * (touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y);  					else  						Y += touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				});    				double dy = touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				double dt = touch.Timestamp - lastTime;    				velocity = velocity * 0.25 + 0.75 * dy / dt;  				lastTime = touch.Timestamp;  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesMoved,The following statement contains a magic number: InvokeOnMainThread (() => {  				UITouch touch = (UITouch)touches.AnyObject;  				UIView.PerformWithoutAnimation (() => {  					if (Y < min || Y > max)  						Y += 0.5f * (touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y);  					else  						Y += touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				});    				double dy = touch.LocationInView (Screen.GlobalScreen).Y - touch.PreviousLocationInView (Screen.GlobalScreen).Y;  				double dt = touch.Timestamp - lastTime;    				velocity = velocity * 0.25 + 0.75 * dy / dt;  				lastTime = touch.Timestamp;  			});
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesEnded,The following statement contains a magic number: velocity = velocity * 0.5 + 0.5 * dy / dt;
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesEnded,The following statement contains a magic number: velocity = velocity * 0.5 + 0.5 * dy / dt;
Magic Number,ToastModern,List,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\List.cs,TouchesEnded,The following statement contains a magic number: spring.Velocity = velocity / 60;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Width = stencil.Height = 300;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.CornerRadius = stencil.Width / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.BorderColor = CreateColor (255' 255' 255' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.BorderColor = CreateColor (255' 255' 255' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.BorderColor = CreateColor (255' 255' 255' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.BorderColor = CreateColor (255' 255' 255' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.BorderWidth = 4;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Layer.ShadowColor = CreateColor (0' 0' 0' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.X = Width / 2 - stencil.Width / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.X = Width / 2 - stencil.Width / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Y = Height / 2 - stencil.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: stencil.Y = Height / 2 - stencil.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.Width = cover.Height = 330;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.Layer.BackgroundColor = CreateColor (0' 0' 0' 255);
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.X = Width / 2 - cover.Width / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.X = Width / 2 - cover.Width / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.Y = Height / 2 - cover.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: cover.Y = Height / 2 - cover.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: toast.Y = screen.Height / 2 - toast.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: toast.Y = screen.Height / 2 - toast.Height / 2;
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: OnTouchUp = (touches) => {  				// get position of touch  				UITouch touch = (UITouch)touches.AnyObject;  				CGPoint touchPos = touch.LocationInView (screen);    				if (touchPos.X < 100 && touchPos.Y > screen.Height - 100) {  					UIView.Animate (0.5' () => {  						Y = screen.Height;  					});  				} else if (touchPos.X > 100 && touchPos.Y > screen.Height - 100) {  					UIView.PerformWithoutAnimation (() => {  						cover.Hidden = false;  					});    					UIView.Animate (0.5' () => {  						toast.Layer.Opacity = 1;  					}' () => {  						UIView.Animate (0.5' () => {  							toast.Y = 48;  							postNavBar.Y = 0;  							keyboard.Y = screen.Height - keyboard.Height;  						}' () => {  							var firstKeyboardTypingFrame = (Layer)keyboardTyping.Subviews [0];    							UIView.PerformWithoutAnimation (() => {  								keyboardTyping.Hidden = false;  								firstKeyboardTypingFrame.Layer.Opacity = 0;  							});    							UIView.Animate (0.5' () => {  								firstKeyboardTypingFrame.Layer.Opacity = 1;  							});  						});  					});  				}  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: postNavBar.OnTouchUp = (touches) => {  				keyboardTyping.Hidden = true;  				UIView.Animate (0.5' () => {  					Y = screen.Height;  					toast.Y = screen.Height / 2f - toast.Height / 2f;  					toast.Layer.Opacity = 0;  					postNavBar.Y = -postNavBar.Height;  					keyboard.Y = screen.Height;  				}' () => {  					cover.Hidden = true;  				});  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: postNavBar.OnTouchUp = (touches) => {  				keyboardTyping.Hidden = true;  				UIView.Animate (0.5' () => {  					Y = screen.Height;  					toast.Y = screen.Height / 2f - toast.Height / 2f;  					toast.Layer.Opacity = 0;  					postNavBar.Y = -postNavBar.Height;  					keyboard.Y = screen.Height;  				}' () => {  					cover.Hidden = true;  				});  			};
Magic Number,ToastModern,Share,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Share.cs,Share,The following statement contains a magic number: postNavBar.OnTouchUp = (touches) => {  				keyboardTyping.Hidden = true;  				UIView.Animate (0.5' () => {  					Y = screen.Height;  					toast.Y = screen.Height / 2f - toast.Height / 2f;  					toast.Layer.Opacity = 0;  					postNavBar.Y = -postNavBar.Height;  					keyboard.Y = screen.Height;  				}' () => {  					cover.Hidden = true;  				});  			};
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Position = new CGPoint (160' 309);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Position = new CGPoint (160' 309);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Bounds = new CGRect (preview.Bounds.Location.X' preview.Bounds.Location.Y' 320' 320f * 16 / 9);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Bounds = new CGRect (preview.Bounds.Location.X' preview.Bounds.Location.Y' 320' 320f * 16 / 9);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Bounds = new CGRect (preview.Bounds.Location.X' preview.Bounds.Location.Y' 320' 320f * 16 / 9);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: preview.Bounds = new CGRect (preview.Bounds.Location.X' preview.Bounds.Location.Y' 320' 320f * 16 / 9);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: previewMask.Position = new CGPoint (160' 260);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: previewMask.Position = new CGPoint (160' 260);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: previewMask.Bounds = new CGRect (previewMask.Bounds.Location.X' previewMask.Bounds.Location.Y' 320f' 320f);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: previewMask.Bounds = new CGRect (previewMask.Bounds.Location.X' previewMask.Bounds.Location.Y' 320f' 320f);
Magic Number,ToastModern,Camera,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\ToastModern\ToastModern\Camera.cs,Camera,The following statement contains a magic number: previewMask.BackgroundColor = CreateColor (0' 0' 0' 255);
