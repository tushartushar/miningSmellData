Implementation smell,Namespace,Class,File,Method,Description
Long Method,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The method has 109 lines of code.
Complex Method,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ReleaseDesignerOutlets,Cyclomatic complexity of the method is 8
Long Statement,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The length of the statement  "					var minDurationSeconds = Math.Max (CMTimeGetSeconds (ThisApp.CaptureDevice.ActiveFormat.MinExposureDuration)' ExposureMinimumDuration); " is 135.
Long Statement,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The length of the statement  "				var minDurationSeconds = Math.Max (ThisApp.CaptureDevice.ActiveFormat.MinExposureDuration.Seconds' ExposureMinimumDuration); " is 124.
Long Statement,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The length of the statement  "					ThisApp.CaptureDevice.LockExposure (CMTime.FromSeconds (newDurationSeconds' 1000 * 1000 * 1000)' AVCaptureDevice.ISOCurrent' null); " is 131.
Long Statement,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,BuildOutputView,The length of the statement  "			var imageView = new UIImageView (new CGRect (CameraView.Frame.Width * n' 0' CameraView.Frame.Width' CameraView.Frame.Height)); " is 126.
Long Statement,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The length of the statement  "				ThisApp.StillImageOutput.PrepareToCaptureStillImageBracket (ThisApp.StillImageOutput.Connections [0]' Settings' (ready' err) => { " is 129.
Long Statement,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The length of the statement  "				ThisApp.StillImageOutput.CaptureStillImageBracket (ThisApp.StillImageOutput.Connections [0]' Settings' (sampleBuffer' settings' err) => { " is 137.
Magic Number,ManualCameraControls,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\AppDelegate.cs,FinishedLaunching,The following statement contains a magic number: CaptureDevice.ActiveVideoMinFrameDuration = new CMTime (1' 15);
Magic Number,ManualCameraControls,FocusViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\FocusViewController.cs,ViewDidLoad,The following statement contains a magic number: SampleTimer = new Timer (5000);
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: Duration.MinValue = 0.001f;
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: SampleTimer = new Timer (5000);
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: Segments.ValueChanged += (sender' e) => {  				NSError err;  				// Lock device for change  				if (ThisApp.CaptureDevice.LockForConfiguration (out err)) {    					// Take action based on the segment selected  					switch (Segments.SelectedSegment) {  					case 0:  					// Activate auto exposure and start monitoring position  						Duration.Enabled = false;  						ISO.Enabled = false;  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.ContinuousAutoExposure;  						SampleTimer.Start ();  						Automatic = true;  						break;  					case 1:  					// Lock exposure and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.Locked;  						Automatic = false;  						Duration.Enabled = false;  						ISO.Enabled = false;  						break;  					case 2:  					// Custom exposure and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.Custom;  						Automatic = false;  						Duration.Enabled = true;  						ISO.Enabled = true;  						break;  					}    					// Unlock device  					ThisApp.CaptureDevice.UnlockForConfiguration ();  				}  			};
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: Duration.ValueChanged += (sender' e) => {    				// If we are in the automatic mode' ignore changes  				if (Automatic)  					return;    				// Calculate value  				var p = Math.Pow (Duration.Value' ExposureDurationPower);  				var minDurationSeconds = Math.Max (ThisApp.CaptureDevice.ActiveFormat.MinExposureDuration.Seconds' ExposureMinimumDuration);  				var maxDurationSeconds = ThisApp.CaptureDevice.ActiveFormat.MaxExposureDuration.Seconds;  				var newDurationSeconds = p * (maxDurationSeconds - minDurationSeconds ) + minDurationSeconds;    				NSError err;  				// Update Focus position  				if (ThisApp.CaptureDevice.LockForConfiguration (out err)) {  					ThisApp.CaptureDevice.LockExposure (CMTime.FromSeconds (newDurationSeconds' 1000 * 1000 * 1000)' AVCaptureDevice.ISOCurrent' null);  					ThisApp.CaptureDevice.UnlockForConfiguration ();  				}  			};
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: Duration.ValueChanged += (sender' e) => {    				// If we are in the automatic mode' ignore changes  				if (Automatic)  					return;    				// Calculate value  				var p = Math.Pow (Duration.Value' ExposureDurationPower);  				var minDurationSeconds = Math.Max (ThisApp.CaptureDevice.ActiveFormat.MinExposureDuration.Seconds' ExposureMinimumDuration);  				var maxDurationSeconds = ThisApp.CaptureDevice.ActiveFormat.MaxExposureDuration.Seconds;  				var newDurationSeconds = p * (maxDurationSeconds - minDurationSeconds ) + minDurationSeconds;    				NSError err;  				// Update Focus position  				if (ThisApp.CaptureDevice.LockForConfiguration (out err)) {  					ThisApp.CaptureDevice.LockExposure (CMTime.FromSeconds (newDurationSeconds' 1000 * 1000 * 1000)' AVCaptureDevice.ISOCurrent' null);  					ThisApp.CaptureDevice.UnlockForConfiguration ();  				}  			};
Magic Number,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following statement contains a magic number: Duration.ValueChanged += (sender' e) => {    				// If we are in the automatic mode' ignore changes  				if (Automatic)  					return;    				// Calculate value  				var p = Math.Pow (Duration.Value' ExposureDurationPower);  				var minDurationSeconds = Math.Max (ThisApp.CaptureDevice.ActiveFormat.MinExposureDuration.Seconds' ExposureMinimumDuration);  				var maxDurationSeconds = ThisApp.CaptureDevice.ActiveFormat.MaxExposureDuration.Seconds;  				var newDurationSeconds = p * (maxDurationSeconds - minDurationSeconds ) + minDurationSeconds;    				NSError err;  				// Update Focus position  				if (ThisApp.CaptureDevice.LockForConfiguration (out err)) {  					ThisApp.CaptureDevice.LockExposure (CMTime.FromSeconds (newDurationSeconds' 1000 * 1000 * 1000)' AVCaptureDevice.ISOCurrent' null);  					ThisApp.CaptureDevice.UnlockForConfiguration ();  				}  			};
Magic Number,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following statement contains a magic number: Temperature.MinValue = 1000f;
Magic Number,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following statement contains a magic number: Temperature.MaxValue = 10000f;
Magic Number,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following statement contains a magic number: Tint.MinValue = -150f;
Magic Number,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following statement contains a magic number: Tint.MaxValue = 150f;
Magic Number,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following statement contains a magic number: SampleTimer = new Timer (5000);
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,BuildOutputView,The following statement contains a magic number: var label = new UILabel (new CGRect (0' 20' CameraView.Frame.Width' 24));
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,BuildOutputView,The following statement contains a magic number: var label = new UILabel (new CGRect (0' 20' CameraView.Frame.Width' 24));
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The following statement contains a magic number: ScrollView.ContentSize = new CGSize (CameraView.Frame.Width * 4f' CameraView.Frame.Height);
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The following statement contains a magic number: Output.Add (BuildOutputView (2));
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The following statement contains a magic number: Output.Add (BuildOutputView (3));
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The following statement contains a magic number: var Settings = new AVCaptureBracketedStillImageSettings[] {  				AVCaptureAutoExposureBracketedStillImageSettings.Create (-2f)'  				AVCaptureAutoExposureBracketedStillImageSettings.Create (0f)'  				AVCaptureAutoExposureBracketedStillImageSettings.Create (2f)  			};
Magic Number,ManualCameraControls,BracketedViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\BracketedViewController.cs,ViewDidLoad,The following statement contains a magic number: var Settings = new AVCaptureBracketedStillImageSettings[] {  				AVCaptureAutoExposureBracketedStillImageSettings.Create (-2f)'  				AVCaptureAutoExposureBracketedStillImageSettings.Create (0f)'  				AVCaptureAutoExposureBracketedStillImageSettings.Create (2f)  			};
Magic Number,ManualCameraControls,OutputRecorder,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\Classes\OutputRecorder.cs,DidOutputSampleBuffer,The following statement contains a magic number: DisplayView.BeginInvokeOnMainThread(() => {  						// Set the image  						var oldImg = DisplayView.Image;  						oldImg?.Dispose ();    						DisplayView.Image = image;    						// Rotate image to the correct display orientation  						DisplayView.Transform = CGAffineTransform.MakeRotation((float)Math.PI/2);  					});
Missing Default,ManualCameraControls,FocusViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\FocusViewController.cs,ViewDidLoad,The following switch statement is missing a default case: switch (Segments.SelectedSegment) {  					case 0:  					// Activate auto focus and start monitoring position  						Position.Enabled = false;  						ThisApp.CaptureDevice.FocusMode = AVCaptureFocusMode.ContinuousAutoFocus;  						SampleTimer.Start ();  						Automatic = true;  						break;  					case 1:  					// Stop auto focus and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.FocusMode = AVCaptureFocusMode.Locked;  						Automatic = false;  						Position.Enabled = true;  						break;  					}
Missing Default,ManualCameraControls,ExposureViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\ExposureViewController.cs,ViewDidLoad,The following switch statement is missing a default case: switch (Segments.SelectedSegment) {  					case 0:  					// Activate auto exposure and start monitoring position  						Duration.Enabled = false;  						ISO.Enabled = false;  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.ContinuousAutoExposure;  						SampleTimer.Start ();  						Automatic = true;  						break;  					case 1:  					// Lock exposure and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.Locked;  						Automatic = false;  						Duration.Enabled = false;  						ISO.Enabled = false;  						break;  					case 2:  					// Custom exposure and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.ExposureMode = AVCaptureExposureMode.Custom;  						Automatic = false;  						Duration.Enabled = true;  						ISO.Enabled = true;  						break;  					}
Missing Default,ManualCameraControls,WhiteBalanceViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ManualCameraControls\ManualCameraControls\WhiteBalanceViewController.cs,ViewDidLoad,The following switch statement is missing a default case: switch (Segments.SelectedSegment) {  					case 0:  					// Activate auto focus and start monitoring position  						Temperature.Enabled = false;  						Tint.Enabled = false;  						ThisApp.CaptureDevice.WhiteBalanceMode = AVCaptureWhiteBalanceMode.ContinuousAutoWhiteBalance;  						SampleTimer.Start ();  						Automatic = true;  						break;  					case 1:  					// Stop auto focus and allow the user to control the camera  						SampleTimer.Stop ();  						ThisApp.CaptureDevice.WhiteBalanceMode = AVCaptureWhiteBalanceMode.Locked;  						Automatic = false;  						Temperature.Enabled = true;  						Tint.Enabled = true;  						break;  					}
