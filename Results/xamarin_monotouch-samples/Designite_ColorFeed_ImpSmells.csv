Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ColorFeed,MockDownloadTask,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Mocks.cs,MockDownloadTask,The method has 5 parameters. Parameters: delay' startDate' success' cancelled' cancellationToken
Long Statement,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,SetImage,The length of the statement  "			var options = UIViewAnimationOptions.TransitionCrossDissolve | UIViewAnimationOptions.BeginFromCurrentState | UIViewAnimationOptions.AllowUserInteraction; " is 154.
Magic Number,ColorFeed,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\AppDelegate.cs,ScheduleAppRefresh,The following statement contains a magic number: var request = new BGAppRefreshTaskRequest (RefreshTaskId) {  				EarliestBeginDate = (NSDate)DateTime.Now.AddMinutes (15) // Fetch no earlier than 15 minutes from now  			};
Magic Number,ColorFeed,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\AppDelegate.cs,ScheduleDatabaseCleaningIfNeeded,The following statement contains a magic number: now <= lastCleanDate.AddDays (7)
Magic Number,ColorFeed,FeedTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\FeedTableViewController.cs,LoadPosts,The following statement contains a magic number: return Task.Factory.StartNew (async () => {  				var insertedPostCount = 0;  				// Let's load posts while the database is being generated  				while (true) {  					await Task.Delay (1500);  					posts = await DBManager.SharedInstance.GetPosts ();    					if (DBManager.SharedInstance.IsReady)  						break;    					InvokeOnMainThread (() => {  						InsertPostsIntoTable (insertedPostCount);  						insertedPostCount = posts.Count;  					});  		}    				posts = await DBManager.SharedInstance.GetPosts ();  				InvokeOnMainThread (() => {  					InsertPostsIntoTable (insertedPostCount);  					RefreshControl.EndRefreshing ();  					RefreshControl.AttributedTitle = new NSAttributedString ("Pull to fetch new Posts");  				});  			});
Magic Number,ColorFeed,FeedTableViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\FeedTableViewController.cs,InsertPostsIntoTable,The following statement contains a magic number: Task.Factory.StartNew (() => {  				var totalPosts = posts.Length;  				for (int i = 0; i < totalPosts; i++) {  					if (cancellationToken.IsCancellationRequested)  						return;  					  					Task.Delay (delayInSeconds * 1000).Wait ();    					this.posts.Insert (0' posts [i]);    					InvokeOnMainThread (() => {  						TableView.BeginUpdates ();  						TableView.InsertRows (new [] { NSIndexPath.FromRowSection (0' 0) }' UITableViewRowAnimation.Right);  						TableView.EndUpdates ();  					});  				}    				InvokeOnMainThread (() => RefreshControl.EndRefreshing ());    				if (task != null)  					NSNotificationCenter.DefaultCenter.PostNotificationName (AppDelegate.RefreshSuccessNotificationName' task);  			}' cancellationToken);
Magic Number,ColorFeed,MockServer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Mocks.cs,GetFetchEntriesSinceTask,The following statement contains a magic number: var delay = random.Next (0' 26) / 10d;
Magic Number,ColorFeed,MockServer,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Mocks.cs,GetFetchEntriesSinceTask,The following statement contains a magic number: var delay = random.Next (0' 26) / 10d;
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var start = now.AddSeconds (-(7 * 24 * 60 * 60));
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var start = now.AddSeconds (-(7 * 24 * 60 * 60));
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var start = now.AddSeconds (-(7 * 24 * 60 * 60));
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var start = now.AddSeconds (-(7 * 24 * 60 * 60));
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var end = now.AddSeconds (-(60 * 60));
Magic Number,ColorFeed,DBManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\DBManager.cs,LoadInitialData,The following statement contains a magic number: var end = now.AddSeconds (-(60 * 60));
Magic Number,ColorFeed,Operations,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\Model\Operations.cs,DeletePosts,The following statement contains a magic number: Task.Factory.StartNew (async () => {  				var posts = (await DBManager.SharedInstance.GetPosts ()).Where (p => p.Timestamp < beforeDate).ToList ();    				foreach (var post in posts) {  					if (cancellationToken.IsCancellationRequested)  						return;    					Debug.WriteLine ($"Deleting post with timestamp: {post.Timestamp.ToString ("M/dd h:mm tt")}");  					await DBManager.SharedInstance.DeletePost (post);  					await Task.Delay (5);  				}    				PostsDeleted?.Invoke (this' new PostsDeletedEventArgs (task));  			}' cancellationToken);
Magic Number,ColorFeed,ServerUtils,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Server.cs,GenerateFakePosts,The following statement contains a magic number: return Task<Post []>.Factory.StartNew (() => {  				var entries = new List<Post> ();  				var unixStart = (startDate - new DateTime (1970' 1' 1)).TotalSeconds;  				var unixEnd = (endDate - new DateTime (1970' 1' 1)).TotalSeconds;    				for (double i = unixStart; i < unixEnd; i += interval) {  					var randomVariation = random.Next (-variation' variation);  					var fakeTime = Math.Max (unixStart' Math.Min (i + randomVariation' unixEnd));  					entries.Add (CreateRandomPost (new DateTime (1970' 1' 1).AddSeconds (fakeTime)));  				}    				return entries.ToArray ();  			});
Magic Number,ColorFeed,ServerUtils,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Server.cs,GenerateFakePosts,The following statement contains a magic number: return Task<Post []>.Factory.StartNew (() => {  				var entries = new List<Post> ();  				var unixStart = (startDate - new DateTime (1970' 1' 1)).TotalSeconds;  				var unixEnd = (endDate - new DateTime (1970' 1' 1)).TotalSeconds;    				for (double i = unixStart; i < unixEnd; i += interval) {  					var randomVariation = random.Next (-variation' variation);  					var fakeTime = Math.Max (unixStart' Math.Min (i + randomVariation' unixEnd));  					entries.Add (CreateRandomPost (new DateTime (1970' 1' 1).AddSeconds (fakeTime)));  				}    				return entries.ToArray ();  			});
Magic Number,ColorFeed,ServerUtils,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\SimulatedServer\Server.cs,GenerateFakePosts,The following statement contains a magic number: return Task<Post []>.Factory.StartNew (() => {  				var entries = new List<Post> ();  				var unixStart = (startDate - new DateTime (1970' 1' 1)).TotalSeconds;  				var unixEnd = (endDate - new DateTime (1970' 1' 1)).TotalSeconds;    				for (double i = unixStart; i < unixEnd; i += interval) {  					var randomVariation = random.Next (-variation' variation);  					var fakeTime = Math.Max (unixStart' Math.Min (i + randomVariation' unixEnd));  					entries.Add (CreateRandomPost (new DateTime (1970' 1' 1).AddSeconds (fakeTime)));  				}    				return entries.ToArray ();  			});
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,SetImage,The following statement contains a magic number: Transition (imageView' 0.2' options' () => imageView.Image = image' null);
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var angle = post.GradientDirection / 360;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startX = Math.Pow (Math.Sin (2 * Math.PI * (.75 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startX = Math.Pow (Math.Sin (2 * Math.PI * (.75 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startX = Math.Pow (Math.Sin (2 * Math.PI * (.75 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startX = Math.Pow (Math.Sin (2 * Math.PI * (.75 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startY = Math.Pow (Math.Sin (2 * Math.PI * angle / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startY = Math.Pow (Math.Sin (2 * Math.PI * angle / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var startY = Math.Pow (Math.Sin (2 * Math.PI * angle / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endX = Math.Pow (Math.Sin (2 * Math.PI * (.25 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endX = Math.Pow (Math.Sin (2 * Math.PI * (.25 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endX = Math.Pow (Math.Sin (2 * Math.PI * (.25 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endX = Math.Pow (Math.Sin (2 * Math.PI * (.25 + angle) / 2)' 2) * rect.Width;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endY = Math.Pow (Math.Sin (2 * Math.PI * (.5 + angle) / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endY = Math.Pow (Math.Sin (2 * Math.PI * (.5 + angle) / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endY = Math.Pow (Math.Sin (2 * Math.PI * (.5 + angle) / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var endY = Math.Pow (Math.Sin (2 * Math.PI * (.5 + angle) / 2)' 2) * rect.Height;
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var font = UIFont.SystemFontOfSize (48' UIFontWeight.Bold);
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: var drawBounds = rect.Inset (0' (rect.Height - font.PointSize) / 2);
Magic Number,ColorFeed,ColorView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios13\RefreshingAndMaintainingYourAppUsingBackgroundTasks\ColorFeed\UI\ColorView.cs,Render,The following statement contains a magic number: new NSAttributedString (text' new UIStringAttributes {  					ParagraphStyle = paragraphStyle'  					ForegroundColor = UIColor.FromWhiteAlpha (1' .5f)'  					Font = font  				}).DrawString (drawBounds);
