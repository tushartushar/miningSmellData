Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,SetRegionOfInterestWithProposedRegionOfInterest,Cyclomatic complexity of the method is 10
Complex Method,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,ResizeRegionOfInterestWithGestureRecognizer,Cyclomatic complexity of the method is 12
Long Parameter List,AVCamBarcode,ItemSelectionViewController<T>,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\ItemSelectionViewController.cs,ItemSelectionViewController,The method has 5 parameters. Parameters: delegate' identifier' items' selectedItems' isMultipleSelectionAllowed
Long Identifier,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,,The length of the parameter RegionOfInterestCornerTouchThreshold is 36.
Long Identifier,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,,The length of the parameter RegionOfInterestControlDiameter is 31.
Long Identifier,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,,The length of the parameter resizeRegionOfInterestGestureRecognizer is 39.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OpenBarcodeUrl,The length of the parameter openBarcodeURLGestureRecognizer is 31.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter openBarcodeURLGestureRecognizer is 31.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter interruptionEndedNotificationToken is 34.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter wasInterruptedNotificationToken is 31.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter removeMetadataObjectOverlayLayersTimer is 38.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter MetadataObjectTypeItemSelectionIdentifier is 41.
Long Identifier,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,,The length of the parameter SessionPresetItemSelectionIdentifier is 36.
Long Statement,AVCamBarcode,ItemSelectionViewController<T>,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\ItemSelectionViewController.cs,GetCell,The length of the statement  "            cell.Accessory = this.selectedItems.Contains(item) ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None; " is 120.
Long Statement,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,LayoutSubviews,The length of the statement  "            // Create the path for the mask layer. We use the even odd fill rule so that the region of interest does not have a fill color. " is 127.
Long Statement,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,ShouldReceiveTouch,The length of the statement  "                var paddedRegionOfInterest = this.RegionOfInterest.Inset(-RegionOfInterestCornerTouchThreshold' -RegionOfInterestCornerTouchThreshold); " is 135.
Long Statement,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,ShouldRecognizeSimultaneously,The length of the statement  "            // Allow multiple gesture recognizers to be recognized simultaneously if and only if the touch location is not within the touch threshold. " is 138.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The length of the statement  "                AVCaptureDevice defaultVideoDevice = AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera' AVMediaType.Video' AVCaptureDevicePosition.Back) ?? " is 165.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The length of the statement  "                                                     AVCaptureDevice.GetDefaultDevice(AVCaptureDeviceType.BuiltInWideAngleCamera' AVMediaType.Video' AVCaptureDevicePosition.Front) ?? " is 129.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The length of the statement  "                    this.metadataOutput.MetadataObjectTypes = this.metadataOutput.AvailableMetadataObjectTypes; // Use all metadata object types by default " is 135.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,AddObservers,The length of the statement  "            this.runtimeErrorNotificationToken = notificationCenter.AddObserver(AVCaptureSession.RuntimeErrorNotification' this.OnRuntimeErrorNotification' this.session); " is 158.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,AddObservers,The length of the statement  "            this.wasInterruptedNotificationToken = notificationCenter.AddObserver(AVCaptureSession.WasInterruptedNotification' this.OnSessionWasInterrupted' this.session); " is 159.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,AddObservers,The length of the statement  "            this.interruptionEndedNotificationToken = notificationCenter.AddObserver(AVCaptureSession.InterruptionEndedNotification' this.OnSessionInterruptionEnded' this.session); " is 168.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OnRunningChanged,The length of the statement  "                // When the session starts running' the aspect ration of the video preview may also change if a new session present was applied . " is 129.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OnRunningChanged,The length of the statement  "                // To keep the preview view's region of interest within the visible portion of the video preview' the preview view's region of  " is 126.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,AddMetadataOverlayLayers,The length of the statement  "            // Add the metadata object overlays as sublayers of the video preview layer. We disable actions to allow for fast drawing. " is 122.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,AddMetadataOverlayLayers,The length of the statement  "            this.removeMetadataObjectOverlayLayersTimer = NSTimer.CreateScheduledTimer(TimeSpan.FromSeconds(1)' (param) => this.RemoveMetadataObjectOverlayLayers()); " is 153.
Long Statement,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,DidOutputMetadataObjects,The length of the statement  "            // resetEvent is used to drop new notifications if old ones are still processing' to avoid queuing up a bunch of stale data. " is 124.
Magic Number,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,Initialize,The following statement contains a magic number: this.maskLayer.Opacity = 0.6f;
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The following statement contains a magic number: var width = 0.25;
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The following statement contains a magic number: var height = 0.8;
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The following statement contains a magic number: var x = (1 - width) / 2;
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ConfigureSession,The following statement contains a magic number: var y = (1 - height) / 2;
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ChangeCamera,The following statement contains a magic number: DispatchQueue.MainQueue.DispatchAsync(() =>              {                  var preferredPosition = AVCaptureDevicePosition.Unspecified;                  switch (this.videoDeviceInput.Device.Position)                  {                      case AVCaptureDevicePosition.Unspecified:                      case AVCaptureDevicePosition.Front:                          preferredPosition = AVCaptureDevicePosition.Back;                          break;                        case AVCaptureDevicePosition.Back:                          preferredPosition = AVCaptureDevicePosition.Front;                          break;                  }                    var devices = AVCaptureDevice.DevicesWithMediaType(AVMediaType.Video);                  var videoDevice = devices.FirstOrDefault(device => device.Position == preferredPosition);                  if (videoDevice != null)                  {                      NSError error;                      var captureDeviceInput = AVCaptureDeviceInput.FromDevice(videoDevice' out error);                      if (error != null)                      {                          Console.WriteLine($"Error occurred while creating video device input: {error}");                          return;                      }                        this.session.BeginConfiguration();                        // Remove the existing device input first' since using the front and back camera simultaneously is not supported.                      this.session.RemoveInput(this.videoDeviceInput);                        // When changing devices' a session preset that may be supported                      // on one device may not be supported by another. To allow the                      // user to successfully switch devices' we must save the previous                      // session preset' set the default session preset (High)' and                      // attempt to restore it after the new video device has been                      // added. For example' the 4K session preset is only supported                      // by the back device on the iPhone 6s and iPhone 6s Plus. As a                      // result' the session will not let us add a video device that                      // does not support the current session preset.                      var previousSessionPreset = this.session.SessionPreset;                      this.session.SessionPreset = AVCaptureSession.PresetHigh;                        if (this.session.CanAddInput(captureDeviceInput))                      {                          this.session.AddInput(captureDeviceInput);                          this.videoDeviceInput = captureDeviceInput;                      }                      else                      {                          this.session.AddInput(this.videoDeviceInput);                      }                        // Restore the previous session preset if we can.                      if (this.session.CanSetSessionPreset(previousSessionPreset))                      {                          this.session.SessionPreset = previousSessionPreset;                      }                        this.session.CommitConfiguration();                  }                    this.MetadataObjectTypesButton.Enabled = true;                  this.SessionPresetsButton.Enabled = true;                  this.CameraButton.Enabled = true;                  this.ZoomSlider.Enabled = true;                    this.ZoomSlider.MaxValue = (float)NMath.Min(this.videoDeviceInput.Device.ActiveFormat.VideoMaxZoomFactor' 8);                  this.ZoomSlider.Value = (float)this.videoDeviceInput.Device.VideoZoomFactor;              });
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OnRunningChanged,The following statement contains a magic number: DispatchQueue.MainQueue.DispatchAsync(() =>              {                  this.CameraButton.Enabled = isSessionRunning && AVCaptureDevice.DevicesWithMediaType(AVMediaType.Video).Length > 1;                  this.MetadataObjectTypesButton.Enabled = isSessionRunning;                  this.SessionPresetsButton.Enabled = isSessionRunning;                    this.ZoomSlider.Enabled = isSessionRunning;                  this.ZoomSlider.MaxValue = (float)NMath.Min(this.videoDeviceInput.Device.ActiveFormat.VideoMaxZoomFactor' 8);                  this.ZoomSlider.Value = (float)(this.videoDeviceInput.Device.VideoZoomFactor);                    // After the session stop running' remove the metadata object overlays'                  // if any' so that if the view appears again' the previously displayed                  // metadata object overlays are removed.                  if (!isSessionRunning)                  {                      this.RemoveMetadataObjectOverlayLayers();                  }                    // When the session starts running' the aspect ration of the video preview may also change if a new session present was applied .                  // To keep the preview view's region of interest within the visible portion of the video preview' the preview view's region of                   // interest will need to be updates.                  if (isSessionRunning)                  {                      this.PreviewView.SetRegionOfInterestWithProposedRegionOfInterest(this.PreviewView.RegionOfInterest);                  }              });
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OnSessionWasInterrupted,The following statement contains a magic number: UIView.Animate(0.25d' () => this.CameraUnavailableLabel.Alpha = 1);
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,OnSessionInterruptionEnded,The following statement contains a magic number: UIView.Animate(0.25' () =>                  {                      this.CameraUnavailableLabel.Alpha = 0;                  }' () =>                  {                      this.CameraUnavailableLabel.Hidden = true;                  });
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,CreateMetadataOverlay,The following statement contains a magic number: var metadataObjectOverlayLayer = new MetadataObjectLayer              {                  LineWidth = 7'                  LineJoin = CAShapeLayer.JoinRound'                  MetadataObject = transformedMetadataObject'                  FillColor = this.View.TintColor.ColorWithAlpha(0.3f).CGColor'                  StrokeColor = this.View.TintColor.ColorWithAlpha(0.7f).CGColor'              };
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,CreateMetadataOverlay,The following statement contains a magic number: var metadataObjectOverlayLayer = new MetadataObjectLayer              {                  LineWidth = 7'                  LineJoin = CAShapeLayer.JoinRound'                  MetadataObject = transformedMetadataObject'                  FillColor = this.View.TintColor.ColorWithAlpha(0.3f).CGColor'                  StrokeColor = this.View.TintColor.ColorWithAlpha(0.7f).CGColor'              };
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,CreateMetadataOverlay,The following statement contains a magic number: var metadataObjectOverlayLayer = new MetadataObjectLayer              {                  LineWidth = 7'                  LineJoin = CAShapeLayer.JoinRound'                  MetadataObject = transformedMetadataObject'                  FillColor = this.View.TintColor.ColorWithAlpha(0.3f).CGColor'                  StrokeColor = this.View.TintColor.ColorWithAlpha(0.7f).CGColor'              };
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,CreateMetadataOverlay,The following statement contains a magic number: var font = UIFont.BoldSystemFontOfSize(19).ToCTFont();
Magic Number,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,CreateMetadataOverlay,The following statement contains a magic number: var textLayer = new CATextLayer                      {                          AlignmentMode = CATextLayer.AlignmentCenter'                          Bounds = new CGRect(0' 0' barcodeOverlayBoundingBox.Size.Width' barcodeOverlayBoundingBox.Size.Height)'                          ContentsScale = UIScreen.MainScreen.Scale'                          Position = new CGPoint(barcodeOverlayBoundingBox.GetMidX()' barcodeOverlayBoundingBox.GetMidY())'                          Wrapped = true'                            // Invert the effect of transform of the video preview so the text is oriented with the interface orientation                          Transform = CATransform3D.MakeFromAffine(this.PreviewView.Transform).Invert()'                          String = textLayerString'                          AttributedString = new NSAttributedString(textLayerString' new CTStringAttributes                          {                              Font = font'                              StrokeWidth = -5'                              StrokeColor = UIColor.Black.CGColor'                              ForegroundColor = UIColor.White.CGColor'                          })'                      };
Missing Default,AVCamBarcode,PreviewView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\PreviewView.cs,ResizeRegionOfInterestWithGestureRecognizer,The following switch statement is missing a default case: switch (this.currentControlCorner)                      {                          case ControlCorner.None:                              // Update the new region of interest with the gesture recognizer's translation.                              var translation = gestureRecognizer.TranslationInView(gestureRecognizer.View);                                // Move the region of interest with the gesture recognizer's translation.                              if (this.RegionOfInterest.Contains(touchLocation))                              {                                  newRegionOfInterest.X += translation.X;                                  newRegionOfInterest.Y += translation.Y;                              }                                // If the touch location goes outside the preview layer'                              // we will only translate the region of interest in the                              // plane that is not out of bounds.                              var normalizedRect = new CGRect(0' 0' 1' 1);                              if (!normalizedRect.Contains(this.VideoPreviewLayer.PointForCaptureDevicePointOfInterest(touchLocation)))                              {                                  if (touchLocation.X < RegionOfInterest.GetMinX() || touchLocation.X > RegionOfInterest.GetMaxX())                                  {                                      newRegionOfInterest.Y += translation.Y;                                  }                                  else if (touchLocation.Y < RegionOfInterest.GetMinY() || touchLocation.Y > RegionOfInterest.GetMaxY())                                  {                                      newRegionOfInterest.X += translation.X;                                  }                              }                                // Set the translation to be zero so that the new gesture                              // recognizer's translation is in respect to the region of                              // interest's new position.                              gestureRecognizer.SetTranslation(CGPoint.Empty' gestureRecognizer.View);                              break;                            case ControlCorner.TopLeft:                              newRegionOfInterest = new CGRect(touchLocation.X' touchLocation.Y'                                                               oldRegionOfInterest.Width + oldRegionOfInterest.X - touchLocation.X'                                                               oldRegionOfInterest.Height + oldRegionOfInterest.Y - touchLocation.Y);                              break;                            case ControlCorner.TopRight:                              newRegionOfInterest = new CGRect(newRegionOfInterest.X'                                                               touchLocation.Y'                                                               touchLocation.X - newRegionOfInterest.X'                                                               oldRegionOfInterest.Height + newRegionOfInterest.Y - touchLocation.Y);                              break;                              case ControlCorner.BottomLeft:                              newRegionOfInterest = new CGRect(touchLocation.X'                                                               oldRegionOfInterest.Y'                                                               oldRegionOfInterest.Width + oldRegionOfInterest.X - touchLocation.X'                                                               touchLocation.Y - oldRegionOfInterest.Y);                              break;                            case ControlCorner.BottomRight:                              newRegionOfInterest = new CGRect(oldRegionOfInterest.X'                                                               oldRegionOfInterest.Y'                                                               touchLocation.X - oldRegionOfInterest.X'                                                               touchLocation.Y - oldRegionOfInterest.Y);                              break;                      }
Missing Default,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ViewWillAppear,The following switch statement is missing a default case: switch (this.setupResult)                  {                      case SessionSetupResult.Success:                          // Only setup observers and start the session running if setup succeeded.                          this.AddObservers();                          this.session.StartRunning();                          this.isSessionRunning = session.Running;                            break;                        case SessionSetupResult.NotAuthorized:                          DispatchQueue.MainQueue.DispatchAsync(() =>                          {                              var message = "AVCamBarcode doesn't have permission to use the camera' please change privacy settings";                              var alertController = UIAlertController.Create("AVCamBarcode"' message' UIAlertControllerStyle.Alert);                              alertController.AddAction(UIAlertAction.Create("OK"' UIAlertActionStyle.Cancel' null));                              alertController.AddAction(UIAlertAction.Create("Settings"' UIAlertActionStyle.Default' action =>                              {                                  UIApplication.SharedApplication.OpenUrl(new NSUrl(UIApplication.OpenSettingsUrlString));                              }));                                this.PresentViewController(alertController' true' null);                          });                          break;                        case SessionSetupResult.ConfigurationFailed:                          DispatchQueue.MainQueue.DispatchAsync(() =>                          {                              var message = "Unable to capture media";                              var alertController = UIAlertController.Create("AVCamBarcode"' message' UIAlertControllerStyle.Alert);                              alertController.AddAction(UIAlertAction.Create("OK"' UIAlertActionStyle.Cancel' null));                                this.PresentViewController(alertController' true' null);                          });                          break;                  }
Missing Default,AVCamBarcode,CameraViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios11\AVCamBarcode\AVCamBarcode\CameraViewController.designer.cs,ChangeCamera,The following switch statement is missing a default case: switch (this.videoDeviceInput.Device.Position)                  {                      case AVCaptureDevicePosition.Unspecified:                      case AVCaptureDevicePosition.Front:                          preferredPosition = AVCaptureDevicePosition.Back;                          break;                        case AVCaptureDevicePosition.Back:                          preferredPosition = AVCaptureDevicePosition.Front;                          break;                  }
