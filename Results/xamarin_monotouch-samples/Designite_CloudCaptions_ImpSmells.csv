Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,OnLoadNewPostComplted,The method has 5 parameters. Parameters: cursor' operationError' newPosts' lastRecordInOperation' retryPost
Long Statement,CloudCaptions,AppDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\AppDelegate.cs,FinishedLaunching,The length of the statement  "			UIUserNotificationSettings notificationSettings = UIUserNotificationSettings.GetSettingsForTypes (UIUserNotificationType.Alert' null); " is 134.
Long Statement,CloudCaptions,SubscriptionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubscriptionController.cs,CreateSubscription,The length of the statement  "			CKSubscription subscriptionToUpload = new CKSubscription (Post.RecordType' NSPredicate.FromValue (true)' SubscriptionID' CKSubscriptionOptions.FiresOnRecordCreation); " is 166.
Long Statement,CloudCaptions,SubscriptionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubscriptionController.cs,HandleSubscribeError,The length of the statement  "						Console.WriteLine ("If you see this it's because you've tried to subscribe to new Post records when CloudKit hasn't seen the Post record type yet. Either manually create the record type in dashboard or upload a post"); " is 218.
Long Statement,CloudCaptions,SubscriptionController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubscriptionController.cs,HandleError,The length of the statement  "				// This error occurs if it can't find the subscription named autoUpdate. (It tries to delete one that doesn't exits or it searches for one it can't find) " is 153.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,LoadNewPosts,The length of the statement  "			// The last record we see will be the most recent we see on the server' we'll set the property to this in the completion handler " is 128.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,LoadNewPosts,The length of the statement  "			queryOp.Completed = (CKQueryCursor cursor' NSError operationError) => OnLoadNewPostComplted (cursor' operationError' newPosts' lastPostSeenOnServer' post); " is 155.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,TryLoadFirstBatch,The length of the statement  "					// If we get here' we must have no posts. That must mean that last time we tried loading a batch nothing came through so we locked the method. Let's unlock it " is 158.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,OnLoadNewPostFetchRecord,The length of the statement  "			// If the record we just fetched doesn't match recordIDs to any item in our newPosts array' let's make an Post and add it " is 121.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,OnLoadNewPostFetchRecord,The length of the statement  "				// If we already have this record we don't have to fetch. We'll still update lastRecordInOperation because we did see it on the server " is 134.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,OnLoadNewPostComplted,The length of the statement  "					// lastRecordCreationDate is the most recent record we've seen on server' let's set our property to that for next time we get a push " is 132.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,HandleError,The length of the statement  "					Console.WriteLine ("If a post has never been made' CKErrorCode.UnknownItem will be returned in PostManager because it has never seen the Post record type"); " is 156.
Long Statement,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,HandleError,The length of the statement  "					Console.WriteLine ("If invalid arguments is returned in PostManager with a message about not being marked indexable or sortable' go into CloudKit dashboard and set the Post record type as sortable on date created (under metadata index)"); " is 238.
Long Statement,CloudCaptions,Post,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Post.cs,HandleError,The length of the statement  "					// This shouldn't happen. If an Image record is deleted it should delete all Post records that reference it (CKReferenceActionDeleteSelf) " is 137.
Long Statement,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,ViewDidLoad,The length of the statement  "			// This ensures that there are always three images per row whether it's an iPhone or an iPad (20 px subtracted to account for four 5 px spaces between thumbnails) " is 162.
Long Statement,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,LoadImages,The length of the statement  "					// If we get an ignore error they're not often recoverable. I'll leave loadImages locked indefinitely (this is up to the developer) " is 131.
Long Statement,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,HandleError,The length of the statement  "					Console.WriteLine ("If an image has never been uploaded' CKErrorCode.UnknownItem will be returned in ExistingImageViewController because it has never seen the Image record type"); " is 179.
Long Statement,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,HandleError,The length of the statement  "					Console.WriteLine ("If invalid arguments is returned in ExistingImageViewController with a message about not being marked indexable or sortable' go into CloudKit dashboard and set the Image record type as sortable on date created"); " is 232.
Long Statement,CloudCaptions,SubmitPostViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,HandleError,The length of the statement  "					// This error occurs if it can't find the subscription named autoUpdate. (It tries to delete one that doesn't exits or it searches for one it can't find) " is 153.
Magic Number,CloudCaptions,MainViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\MainViewController.cs,Scrolled,The following statement contains a magic number: count > 0 && index != null && index.Row + 5 > count
Magic Number,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,TryLoadFirstBatch,The following statement contains a magic number: var dispatchTime = new DispatchTime (DispatchTime.Now' 2 * 1000000000);
Magic Number,CloudCaptions,PostManager,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\PostManager.cs,TryLoadFirstBatch,The following statement contains a magic number: var dispatchTime = new DispatchTime (DispatchTime.Now' 2 * 1000000000);
Magic Number,CloudCaptions,PostCell,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\View\PostCell.cs,LayoutSubviews,The following statement contains a magic number: UIFont labelFont = UIFont.FromName (fontName' 24);
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,Image,The following statement contains a magic number: UIImage fullImage = Resize (cropped' image.CurrentScale' image.Orientation' new CGSize (1500' 1500));
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,Image,The following statement contains a magic number: UIImage fullImage = Resize (cropped' image.CurrentScale' image.Orientation' new CGSize (1500' 1500));
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,Image,The following statement contains a magic number: UIImage thumbImage = Resize (cropped' image.CurrentScale' image.Orientation' new CGSize (200' 200));
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,Image,The following statement contains a magic number: UIImage thumbImage = Resize (cropped' image.CurrentScale' image.Orientation' new CGSize (200' 200));
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,Crop,The following statement contains a magic number: var offset = (h - w) / 2;
Magic Number,CloudCaptions,Image,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Model\Image.cs,SaveToTmp,The following statement contains a magic number: NSData imageData = img.AsJPEG (0.5f);
Magic Number,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,ViewDidLoad,The following statement contains a magic number: nfloat imageWidth = (smallerDimension - 20) / 3;
Magic Number,CloudCaptions,ExistingImageViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,ViewDidLoad,The following statement contains a magic number: nfloat imageWidth = (smallerDimension - 20) / 3;
Magic Number,CloudCaptions,CollectionViewDelegate,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\ExistingImageViewController.cs,Scrolled,The following statement contains a magic number: (int)rowsLeft < 5
Magic Number,CloudCaptions,SubmitPostViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,ViewDidLoad,The following statement contains a magic number: ImageLabel.Font = UIFont.FromName (UIFont.FamilyNames [randomFont]' 24);
Magic Number,CloudCaptions,SubmitPostViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,PublishPost,The following statement contains a magic number: saveOp.PerRecordProgress = (CKRecord record' double progress) => {  				// Image record type is probably going to take the longest to upload. Reflect it's progress in the progress bar  				if (record.RecordType == Image.RecordType)  					InvokeOnMainThread (() => {  						var val = (float)(progress * 0.95);  						ProgressBar.SetProgress (val' true);  					});  			};
Magic Number,CloudCaptions,SubmitPostViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,PublishPost,The following statement contains a magic number: saveOp.Completed = (CKRecord[] savedRecords' CKRecordID[] deletedRecordIDs' NSError operationError) => {  				Error errorResponse = HandleError (operationError);  				switch (errorResponse) {  					case Error.Success:  						// Tells delegate to update so it can display our new post  						InvokeOnMainThread (() => {  							DismissViewController (true' null);  							MainController.Submit (newPost);  						});  						break;    					case Error.Retry:  						CKErrorInfo errorInfo = new CKErrorInfo (operationError.UserInfo);  						nint retryAfter = errorInfo.RetryAfter.HasValue ? errorInfo.RetryAfter.Value : 3;  						Console.WriteLine ("Error: {0}. Recoverable' retry after {1} seconds"' operationError.Description' retryAfter);  						Task.Delay ((int)retryAfter * 1000).ContinueWith (_ => PublishPost (sender));  						break;    					case Error.Ignore:  						Console.WriteLine ("Error saving record: {0}"' operationError.Description);    						string errorTitle = "Error";  						string dismissButton = "Okay";  						string errorMessage = operationError.Code == (long)CKErrorCode.NotAuthenticated  							? "You must be logged in to iCloud in order to post"  							: "Unrecoverable error with the upload' check console logs";    						InvokeOnMainThread (() => {  							UIAlertController alert = UIAlertController.Create (errorTitle' errorMessage' UIAlertControllerStyle.Alert);  							alert.AddAction (UIAlertAction.Create (dismissButton' UIAlertActionStyle.Cancel' null));    							PostButton.Enabled = true;  							PresentViewController (alert' true' null);  							ProgressBar.Hidden = true;  							PostButton.CustomView = null;  						});  						break;    					default:  						throw new NotImplementedException ();  				}  			};
Magic Number,CloudCaptions,SubmitPostViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,PublishPost,The following statement contains a magic number: saveOp.Completed = (CKRecord[] savedRecords' CKRecordID[] deletedRecordIDs' NSError operationError) => {  				Error errorResponse = HandleError (operationError);  				switch (errorResponse) {  					case Error.Success:  						// Tells delegate to update so it can display our new post  						InvokeOnMainThread (() => {  							DismissViewController (true' null);  							MainController.Submit (newPost);  						});  						break;    					case Error.Retry:  						CKErrorInfo errorInfo = new CKErrorInfo (operationError.UserInfo);  						nint retryAfter = errorInfo.RetryAfter.HasValue ? errorInfo.RetryAfter.Value : 3;  						Console.WriteLine ("Error: {0}. Recoverable' retry after {1} seconds"' operationError.Description' retryAfter);  						Task.Delay ((int)retryAfter * 1000).ContinueWith (_ => PublishPost (sender));  						break;    					case Error.Ignore:  						Console.WriteLine ("Error saving record: {0}"' operationError.Description);    						string errorTitle = "Error";  						string dismissButton = "Okay";  						string errorMessage = operationError.Code == (long)CKErrorCode.NotAuthenticated  							? "You must be logged in to iCloud in order to post"  							: "Unrecoverable error with the upload' check console logs";    						InvokeOnMainThread (() => {  							UIAlertController alert = UIAlertController.Create (errorTitle' errorMessage' UIAlertControllerStyle.Alert);  							alert.AddAction (UIAlertAction.Create (dismissButton' UIAlertActionStyle.Cancel' null));    							PostButton.Enabled = true;  							PresentViewController (alert' true' null);  							ProgressBar.Hidden = true;  							PostButton.CustomView = null;  						});  						break;    					default:  						throw new NotImplementedException ();  				}  			};
Magic Number,CloudCaptions,PickerViewModel,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,GetView,The following statement contains a magic number: fontLabel.Font = UIFont.FromName (familyName' 24);
Magic Number,CloudCaptions,PickerViewModel,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,GetRowHeight,The following statement contains a magic number: return 35;
Magic Number,CloudCaptions,PickerViewModel,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\SubmitPostViewController.cs,Selected,The following statement contains a magic number: controller.ImageLabel.Font = UIFont.FromName (fontName' 24);
Magic Number,CloudCaptions,Utils,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\Utils.cs,FetchRetryDelay,The following statement contains a magic number: return (int)(errorInfo.RetryAfter.HasValue ? errorInfo.RetryAfter.Value : 3);
Magic Number,CloudCaptions,Utils,D:\research\architectureSmells\repos\xamarin_monotouch-samples\ios8\CloudCaptions\CloudCaptions\Controllers\Utils.cs,Retry,The following statement contains a magic number: Task.Delay ((int)retryDelayInSec * 1000).ContinueWith (_ => action ());
