Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SimpleTextInput,SimpleCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleCoreTextView.cs,CaretRect,The length of the statement  "				return new CGRect (origin.X' origin.Y - (nfloat)Math.Abs (font.Descender)' 3' font.Ascender + (nfloat)Math.Abs (font.Descender)); " is 129.
Magic Number,SimpleTextInput,SimpleTextInputViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleTextInputViewController.cs,ViewDidLoad,The following statement contains a magic number: editableCoreTextView = new EditableCoreTextView (View.Bounds.Inset (5' 40));
Magic Number,SimpleTextInput,SimpleTextInputViewController,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleTextInputViewController.cs,ViewDidLoad,The following statement contains a magic number: editableCoreTextView = new EditableCoreTextView (View.Bounds.Inset (5' 40));
Magic Number,SimpleTextInput,EditableCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\EditableCoreTextView.cs,EditableCoreTextView,The following statement contains a magic number: textView = new SimpleCoreTextView (Bounds.Inset (5' 5));
Magic Number,SimpleTextInput,EditableCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\EditableCoreTextView.cs,EditableCoreTextView,The following statement contains a magic number: textView = new SimpleCoreTextView (Bounds.Inset (5' 5));
Magic Number,SimpleTextInput,SimpleCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleCoreTextView.cs,SimpleCoreTextView,The following statement contains a magic number: Font = UIFont.SystemFontOfSize (18);
Magic Number,SimpleTextInput,SimpleCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleCoreTextView.cs,CaretRect,The following statement contains a magic number: return new CGRect (origin.X' origin.Y - (nfloat)Math.Abs (font.Descender)' 3' font.Ascender + (nfloat)Math.Abs (font.Descender));
Magic Number,SimpleTextInput,SimpleCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleCoreTextView.cs,CaretRect,The following statement contains a magic number: return new CGRect (xPos' origins [0].Y - descent' 3' ascent + descent);
Magic Number,SimpleTextInput,SimpleCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\SimpleCoreTextView.cs,CaretRect,The following statement contains a magic number: return new CGRect (xPos' origins [0].Y - descent' 3' ascent + descent);
Missing Default,SimpleTextInput,EditableCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\EditableCoreTextView.cs,GetPosition,The following switch statement is missing a default case: switch (direction) {  			case UITextLayoutDirection.Right:  				newPos += offset;  				break;  			case UITextLayoutDirection.Left:  				newPos -= offset;  				break;  			case UITextLayoutDirection.Up:  			case UITextLayoutDirection.Down:  				// This sample does not support vertical text directions  				break;  			}
Missing Default,SimpleTextInput,EditableCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\EditableCoreTextView.cs,GetPosition,The following switch statement is missing a default case: switch (direction) {  			case UITextLayoutDirection.Up:  			case UITextLayoutDirection.Left:  				pos = (int)r.Range.Location;  				break;  			case UITextLayoutDirection.Right:  			case UITextLayoutDirection.Down:  				pos = (int)(r.Range.Location + r.Range.Length);  				break;  			}
Missing Default,SimpleTextInput,EditableCoreTextView,D:\research\architectureSmells\repos\xamarin_monotouch-samples\SimpleTextInput\EditableCoreTextView.cs,GetCharacterRange,The following switch statement is missing a default case: switch (direction) {  			case UITextLayoutDirection.Up:  			case UITextLayoutDirection.Left:  				result = new NSRange (pos.Index - 1' 1);  				break;  			case UITextLayoutDirection.Right:  			case UITextLayoutDirection.Down:  				result = new NSRange (pos.Index' 1);  				break;  			}
