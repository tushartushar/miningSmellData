Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBTExplorer.Model,FilterExpressionConverter,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\FilterExpressionParser.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,NBTExplorer.Model,NbtPathEnumerator,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\NbtPath.cs,EnumerateNodes,Cyclomatic complexity of the method is 13
Complex Method,NBTExplorer.Model,TagCompoundDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagCompoundDataNode.cs,SyncTag,Cyclomatic complexity of the method is 8
Complex Method,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,DefaultTag,Cyclomatic complexity of the method is 14
Complex Method,NBTExplorer.Model.Search,IntegralTagRule<T>,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,Cyclomatic complexity of the method is 12
Complex Method,NBTExplorer.Model.Search,FloatTagRule<T>,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,Cyclomatic complexity of the method is 12
Complex Method,NBTExplorer.Model.Search,StringTagRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,Cyclomatic complexity of the method is 16
Complex Method,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,Cyclomatic complexity of the method is 16
Complex Method,NBTExplorer.Utility,NaturalComparer,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Utility\NaturalComparer.cs,Compare,Cyclomatic complexity of the method is 8
Complex Conditional,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,RenameNode,The conditional expression  "CanRenameNode && TagParent != null && TagParent.IsNamedContainer && FormRegistry.EditString != null"  is complex.
Empty Catch Block,NBTExplorer.Model,FileTypeRegistry,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\FileTypeRegistry.cs,FileTypeRegistry,The method has an empty catch block.
Empty Catch Block,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The method has an empty catch block.
Magic Number,NBTExplorer.Model,CubicRegionDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\CubicRegionDataNode.cs,ExpandCore,The following statement contains a magic number: z < 32
Magic Number,NBTExplorer.Model,CubicRegionDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\CubicRegionDataNode.cs,ExpandCore,The following statement contains a magic number: x < 32
Magic Number,NBTExplorer.Model,CubicRegionFile,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\CubicRegionFile.cs,parseCoordinatesFromName,The following statement contains a magic number: z = Convert.ToInt32(match.Groups[3].Value);
Magic Number,NBTExplorer.Model,RegionFileDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,RegionCoordinates,The following statement contains a magic number: rz = int.Parse(match.Groups[2].Value);
Magic Number,NBTExplorer.Model,RegionFileDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,RegionCoordinates,The following statement contains a magic number: match.Success && match.Groups.Count > 3
Magic Number,NBTExplorer.Model,RegionFileDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,ExpandCore,The following statement contains a magic number: z < 32
Magic Number,NBTExplorer.Model,RegionFileDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,ExpandCore,The following statement contains a magic number: x < 32
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: byte[] byteData = new byte[iatag.Length * 2];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 2 * i' 2);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 2 * i' 2);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: iatag.Data = new short[data.Data.Length / 2];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: byte[] byteData = new byte[iatag.Length * 4];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 4 * i' 4);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 4 * i' 4);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: iatag.Data = new int[data.Data.Length / 4];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: byte[] byteData = new byte[latag.Length * 8];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 8 * i' 8);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: Array.Copy(buf' 0' byteData' 8 * i' 8);
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: latag.Data = new long[data.Data.Length / 8];
Magic Number,NBTExplorer.Model,TagDataNode,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);
Missing Default,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (tag.GetTagType()) {                      case TagType.TAG_BYTE:                      case TagType.TAG_INT:                      case TagType.TAG_LONG:                      case TagType.TAG_SHORT:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (long.Parse(Value) != tag.ToTagLong())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (long.Parse(Value) == tag.ToTagLong())                                      return false;                                  break;                          }                            if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                      case TagType.TAG_FLOAT:                      case TagType.TAG_DOUBLE:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (double.Parse(Value) != tag.ToTagDouble())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (double.Parse(Value) == tag.ToTagDouble())                                      return false;                                  break;                          }                                                    if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                      case TagType.TAG_STRING:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (Value != tag.ToTagString().Data)                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (Value == tag.ToTagString().Data)                                      return false;                                  break;                          }                            if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                  }
Missing Default,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (long.Parse(Value) != tag.ToTagLong())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (long.Parse(Value) == tag.ToTagLong())                                      return false;                                  break;                          }
Missing Default,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (double.Parse(Value) != tag.ToTagDouble())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (double.Parse(Value) == tag.ToTagDouble())                                      return false;                                  break;                          }
Missing Default,NBTExplorer.Model.Search,WildcardRule,D:\research\architectureSmells\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (Value != tag.ToTagString().Data)                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (Value == tag.ToTagString().Data)                                      return false;                                  break;                          }
