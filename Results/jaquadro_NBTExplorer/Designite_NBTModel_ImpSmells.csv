Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBTExplorer.Model,TagCompoundDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagCompoundDataNode.cs,SyncTag,Cyclomatic complexity of the method is 8
Complex Conditional,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,RenameNode,The conditional expression  "CanRenameNode && TagParent != null && TagParent.IsNamedContainer && FormRegistry.EditString != null"  is complex.
Empty Catch Block,NBTExplorer.Model,FileTypeRegistry,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\FileTypeRegistry.cs,FileTypeRegistry,The method has an empty catch block.
Empty Catch Block,NBTExplorer.Model.Search,WildcardRule,C:\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The method has an empty catch block.
Magic Number,NBTExplorer.Model,CubicRegionDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\CubicRegionDataNode.cs,ExpandCore,The following statement contains a magic number: try {                  if (_region == null)                      _region = new CubicRegionFile(_path);                    for (int x = 0; x < 32; x++) {                      for (int z = 0; z < 32; z++) {                          if (_region.HasChunk(x' z)) {                              Nodes.Add(new RegionChunkDataNode(_region' x' z));                          }                      }                  }              }              catch {                  if (FormRegistry.MessageBox != null)                      FormRegistry.MessageBox("Not a valid cubic region file.");              }
Magic Number,NBTExplorer.Model,CubicRegionDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\CubicRegionDataNode.cs,ExpandCore,The following statement contains a magic number: try {                  if (_region == null)                      _region = new CubicRegionFile(_path);                    for (int x = 0; x < 32; x++) {                      for (int z = 0; z < 32; z++) {                          if (_region.HasChunk(x' z)) {                              Nodes.Add(new RegionChunkDataNode(_region' x' z));                          }                      }                  }              }              catch {                  if (FormRegistry.MessageBox != null)                      FormRegistry.MessageBox("Not a valid cubic region file.");              }
Magic Number,NBTExplorer.Model,CubicRegionFile,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\CubicRegionFile.cs,parseCoordinatesFromName,The following statement contains a magic number: z = Convert.ToInt32(match.Groups[3].Value);
Magic Number,NBTExplorer.Model,RegionFileDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,RegionCoordinates,The following statement contains a magic number: if (match.Success && match.Groups.Count > 3) {                  rx = int.Parse(match.Groups[1].Value);                  rz = int.Parse(match.Groups[2].Value);              }
Magic Number,NBTExplorer.Model,RegionFileDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,RegionCoordinates,The following statement contains a magic number: if (match.Success && match.Groups.Count > 3) {                  rx = int.Parse(match.Groups[1].Value);                  rz = int.Parse(match.Groups[2].Value);              }
Magic Number,NBTExplorer.Model,RegionFileDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,ExpandCore,The following statement contains a magic number: try {                  if (_region == null)                      _region = new RegionFile(_path);                    for (int x = 0; x < 32; x++) {                      for (int z = 0; z < 32; z++) {                          if (_region.HasChunk(x' z)) {                              Nodes.Add(new RegionChunkDataNode(_region' x' z));                          }                      }                  }              }              catch (Exception e) {                  if (FormRegistry.MessageBox != null)                      FormRegistry.MessageBox("Not a valid region file.");              }
Magic Number,NBTExplorer.Model,RegionFileDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\RegionFileDataNode.cs,ExpandCore,The following statement contains a magic number: try {                  if (_region == null)                      _region = new RegionFile(_path);                    for (int x = 0; x < 32; x++) {                      for (int z = 0; z < 32; z++) {                          if (_region.HasChunk(x' z)) {                              Nodes.Add(new RegionChunkDataNode(_region' x' z));                          }                      }                  }              }              catch (Exception e) {                  if (FormRegistry.MessageBox != null)                      FormRegistry.MessageBox("Not a valid region file.");              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditShortHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeShortArray iatag = tag.ToTagShortArray();                  byte[] byteData = new byte[iatag.Length * 2];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 2 * i' 2);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 2'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new short[data.Data.Length / 2];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt16(data.Data' i * 2);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditIntHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null) {                  TagNodeIntArray iatag = tag.ToTagIntArray();                  byte[] byteData = new byte[iatag.Length * 4];                  for (int i = 0; i < iatag.Length; i++) {                      byte[] buf = BitConverter.GetBytes(iatag.Data[i]);                      Array.Copy(buf' 0' byteData' 4 * i' 4);                  }                    ByteArrayFormData data = new ByteArrayFormData() {                      NodeName = NodeName'                      BytesPerElement = 4'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data)) {                      iatag.Data = new int[data.Data.Length / 4];                      for (int i = 0; i < iatag.Length; i++) {                          iatag.Data[i] = BitConverter.ToInt32(data.Data' i * 4);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Magic Number,NBTExplorer.Model,TagDataNode,C:\repos\jaquadro_NBTExplorer\NBTModel\Data\Nodes\TagDataNode.cs,EditLongHexValue,The following statement contains a magic number: if (FormRegistry.EditByteArray != null)              {                  TagNodeLongArray latag = tag.ToTagLongArray();                  byte[] byteData = new byte[latag.Length * 8];                  for (int i = 0; i < latag.Length; i++)                  {                      byte[] buf = BitConverter.GetBytes(latag.Data[i]);                      Array.Copy(buf' 0' byteData' 8 * i' 8);                  }                    ByteArrayFormData data = new ByteArrayFormData()                  {                      NodeName = NodeName'                      BytesPerElement = 8'                      Data = byteData'                  };                    if (FormRegistry.EditByteArray(data))                  {                      latag.Data = new long[data.Data.Length / 8];                      for (int i = 0; i < latag.Length; i++)                      {                          latag.Data[i] = BitConverter.ToInt64(data.Data' i * 8);                      }                        IsDataModified = true;                      return true;                  }              }
Missing Default,NBTExplorer.Model.Search,WildcardRule,C:\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (tag.GetTagType()) {                      case TagType.TAG_BYTE:                      case TagType.TAG_INT:                      case TagType.TAG_LONG:                      case TagType.TAG_SHORT:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (long.Parse(Value) != tag.ToTagLong())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (long.Parse(Value) == tag.ToTagLong())                                      return false;                                  break;                          }                            if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                      case TagType.TAG_FLOAT:                      case TagType.TAG_DOUBLE:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (double.Parse(Value) != tag.ToTagDouble())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (double.Parse(Value) == tag.ToTagDouble())                                      return false;                                  break;                          }                                                    if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                      case TagType.TAG_STRING:                          switch (Operator) {                              case WildcardOperator.Equals:                                  if (Value != tag.ToTagString().Data)                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (Value == tag.ToTagString().Data)                                      return false;                                  break;                          }                            if (!matchedNodes.Contains(childNode))                              matchedNodes.Add(childNode);                          return true;                  }
Missing Default,NBTExplorer.Model.Search,WildcardRule,C:\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (long.Parse(Value) != tag.ToTagLong())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (long.Parse(Value) == tag.ToTagLong())                                      return false;                                  break;                          }
Missing Default,NBTExplorer.Model.Search,WildcardRule,C:\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (double.Parse(Value) != tag.ToTagDouble())                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (double.Parse(Value) == tag.ToTagDouble())                                      return false;                                  break;                          }
Missing Default,NBTExplorer.Model.Search,WildcardRule,C:\repos\jaquadro_NBTExplorer\NBTModel\Search\SearchRule.cs,Matches,The following switch statement is missing a default case: switch (Operator) {                              case WildcardOperator.Equals:                                  if (Value != tag.ToTagString().Data)                                      return false;                                  break;                              case WildcardOperator.NotEquals:                                  if (Value == tag.ToTagString().Data)                                      return false;                                  break;                          }
