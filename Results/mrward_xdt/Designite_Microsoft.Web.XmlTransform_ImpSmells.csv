Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Web.XmlTransform,XmlAttributePreservationDict,C:\repos\mrward_xdt\XmlTransform\XmlAttributePreservationDict.cs,UpdatePreservationInfo,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Web.XmlTransform,XmlFormatter,C:\repos\mrward_xdt\XmlTransform\XmlFormatter.cs,FormatLoop,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Web.XmlTransform,XmlFormatter,C:\repos\mrward_xdt\XmlTransform\XmlFormatter.cs,ReorderNewItemsAtEnd,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Web.XmlTransform,XmlFormatter,C:\repos\mrward_xdt\XmlTransform\XmlFormatter.cs,FindLastNewLine,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,GetAxisString,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Web.XmlTransform,Transform,C:\repos\mrward_xdt\XmlTransform\XmlTransform.cs,HandleMissingTarget,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessTransformDocument,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,GetXPathToAttribute,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,Cyclomatic complexity of the method is 16
Long Parameter List,Microsoft.Web.XmlTransform,IXmlTransformationLogger,C:\repos\mrward_xdt\XmlTransform\IXmlTransformationLogger.cs,LogWarning,The method has 5 parameters.
Long Parameter List,Microsoft.Web.XmlTransform,IXmlTransformationLogger,C:\repos\mrward_xdt\XmlTransform\IXmlTransformationLogger.cs,LogError,The method has 5 parameters.
Long Parameter List,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The method has 6 parameters.
Long Statement,Microsoft.Web.XmlTransform,NamedTypeFactory,C:\repos\mrward_xdt\XmlTransform\NamedTypeFactory.cs,Construct,The length of the statement  "			throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_UnknownTypeName' typeName' typeof(ObjectType).Name)); " is 176.
Long Statement,Microsoft.Web.XmlTransform,NamedTypeFactory,C:\repos\mrward_xdt\XmlTransform\NamedTypeFactory.cs,Construct,The length of the statement  "			throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_IncorrectBaseType' type.FullName' typeof(ObjectType).Name)); " is 183.
Long Statement,Microsoft.Web.XmlTransform,NamedTypeFactory,C:\repos\mrward_xdt\XmlTransform\NamedTypeFactory.cs,Construct,The length of the statement  "				throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_NoValidConstructor' type.FullName)); " is 159.
Long Statement,Microsoft.Web.XmlTransform,NamedTypeFactory,C:\repos\mrward_xdt\XmlTransform\NamedTypeFactory.cs,GetType,The length of the statement  "					throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_AmbiguousTypeMatch' typeName)); " is 154.
Long Statement,Microsoft.Web.XmlTransform,XmlAttributePreservationDict,C:\repos\mrward_xdt\XmlTransform\XmlAttributePreservationDict.cs,ReadPreservationInfo,The length of the statement  "	Debug.Assert (elementStartTag.StartsWith ("<"' StringComparison.Ordinal) && elementStartTag.EndsWith (">"' StringComparison.Ordinal)' "Expected string containing exactly a single tag"); " is 185.
Long Statement,Microsoft.Web.XmlTransform,XmlElementContext,C:\repos\mrward_xdt\XmlTransform\XmlElementContext.cs,GetService,The length of the statement  "		//Debug.Assert(service != null' String.Format(CultureInfo.InvariantCulture' "Service provider didn't provide {0}"' typeof(ServiceType).Name)); " is 142.
Long Statement,Microsoft.Web.XmlTransform,XmlElementContext,C:\repos\mrward_xdt\XmlTransform\XmlElementContext.cs,CreateObjectFromAttribute,The length of the statement  "	objectAttribute = Element.Attributes.GetNamedItem (typeof(ObjectType).Name' XmlTransformation.TransformNamespace) as XmlAttribute; " is 130.
Long Statement,Microsoft.Web.XmlTransform,XmlElementContext,C:\repos\mrward_xdt\XmlTransform\XmlElementContext.cs,HasTargetParent,The length of the statement  "		while (failedContext.parentContext != null && !String.IsNullOrEmpty (failedContext.parentContext.ParentXPath) && failedContext.parentContext.TargetParents.Count == 0) { " is 168.
Long Statement,Microsoft.Web.XmlTransform,XmlFormatter,C:\repos\mrward_xdt\XmlTransform\XmlFormatter.cs,FormatLoop,The length of the statement  "			Debug.Fail (String.Format (CultureInfo.InvariantCulture' "Unexpected element type '{0}' while formatting document"' node.NodeType.ToString ())); " is 144.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,AppendStep,The length of the statement  "	return String.Concat (EnsureTrailingSlash (basePath)' GetAxisString (stepAxis)' stepNodeTest' EnsureBracketedPredicate (predicate)); " is 132.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,EnsureArguments,The length of the statement  "		throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_RequiresMinimumArguments' GetType ().Name' min)); " is 172.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,EnsureArguments,The length of the statement  "			throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_RequiresExactArguments' GetType ().Name' min)); " is 170.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,EnsureArguments,The length of the statement  "		throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_TooManyArguments' GetType ().Name)); " is 159.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,ConstructPath,The length of the statement  "	Debug.Assert (this.parentPath == null && this.context == null && this.argumentString == null' "Do not call ConstructPath recursively"); " is 135.
Long Statement,Microsoft.Web.XmlTransform,Locator,C:\repos\mrward_xdt\XmlTransform\XmlLocator.cs,ConstructParentPath,The length of the statement  "	Debug.Assert (this.parentPath == null && this.context == null && this.argumentString == null' "Do not call ConstructPath recursively"); " is 135.
Long Statement,Microsoft.Web.XmlTransform,Match,C:\repos\mrward_xdt\XmlTransform\XmlLocators.cs,ConstructPredicate,The length of the statement  "			throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_MatchAttributeDoesNotExist' key)); " is 157.
Long Statement,Microsoft.Web.XmlTransform,Transform,C:\repos\mrward_xdt\XmlTransform\XmlTransform.cs,WriteApplyMessage,The length of the statement  "		Log.LogMessage (MessageType.Verbose' SR.XMLTRANSFORMATION_TransformStatusApplyTarget' targetNode.Name' lineInfo.LineNumber' lineInfo.LinePosition); " is 147.
Long Statement,Microsoft.Web.XmlTransform,Transform,C:\repos\mrward_xdt\XmlTransform\XmlTransform.cs,HandleMissingTarget,The length of the statement  "	string messageFormat = existedInOriginal ? SR.XMLTRANSFORMATION_TransformSourceMatchWasRemoved : SR.XMLTRANSFORMATION_TransformNoMatchingTargetNodes; " is 149.
Long Statement,Microsoft.Web.XmlTransform,Transform,C:\repos\mrward_xdt\XmlTransform\XmlTransform.cs,HandleMissingTarget,The length of the statement  "	string message = string.Format (System.Globalization.CultureInfo.CurrentCulture' messageFormat' matchFailureContext.XPath); " is 123.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,Apply,The length of the statement  "				logger.LogMessage (MessageType.Normal' "The expected namespace {0} was not found in the transform file"' TransformNamespace); " is 125.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,HandleElement,The length of the statement  "		XmlAttribute SupressWarningsAttribute = context.Element.Attributes.GetNamedItem (XmlTransformation.SupressWarnings' XmlTransformation.TransformNamespace) as XmlAttribute; " is 170.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,HandleElement,The length of the statement  "			bool fSupressWarning = System.Convert.ToBoolean (SupressWarningsAttribute.Value' System.Globalization.CultureInfo.InvariantCulture); " is 132.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,The length of the statement  "		throw new XmlNodeException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_ImportUnknownAttribute' attribute.Name)' attribute); " is 165.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,The length of the statement  "		throw new XmlNodeException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_ImportAttributeConflict)' context.Element); " is 156.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,The length of the statement  "		throw new XmlNodeException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_ImportMissingAssembly)' context.Element); " is 154.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,The length of the statement  "		throw new XmlNodeException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_ImportMissingNamespace)' context.Element); " is 155.
Long Statement,Microsoft.Web.XmlTransform,XmlTransformationLogger,C:\repos\mrward_xdt\XmlTransform\XmlTransformationLogger.cs,LogErrorFromException,The length of the statement  "			externalLogger.LogErrorFromException (nodeException' ConvertUriToFileName (nodeException.FileName)' nodeException.LineNumber' nodeException.LinePosition); " is 154.
Long Statement,Microsoft.Web.XmlTransform,InsertAfter,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,Apply,The length of the statement  "	Log.LogMessage (MessageType.Verbose' string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_TransformMessageInsert' TransformNode.Name)); " is 167.
Long Statement,Microsoft.Web.XmlTransform,InsertBefore,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,Apply,The length of the statement  "	Log.LogMessage (MessageType.Verbose' string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_TransformMessageInsert' TransformNode.Name)); " is 167.
Long Statement,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,GetXPathToAttribute,The length of the statement  "						throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_MatchAttributeDoesNotExist' match)); " is 159.
Long Statement,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The length of the statement  "						// string.Concat("$(ReplacableToken_#("' SetTokenizedAttributes.ParameterAttribute' ")_#("' SetTokenizedAttributes.TokenNumber' "))"); " is 134.
Long Statement,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The length of the statement  "						// which ParameterAttribute will be translate to parameterDictionary["parameter"} and TokenNumber will be translate to parameter  " is 128.
Empty Catch Block,Microsoft.Web.XmlTransform,XmlTransformationLogger,C:\repos\mrward_xdt\XmlTransform\XmlTransformationLogger.cs,ConvertUriToFileName,The method has an empty catch block.
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (stream.CanSeek) {  	byte[] buffer = new byte[3];  	stream.Read (buffer' 0' buffer.Length);  	if (buffer [0] == 0xEF && buffer [1] == 0xBB && buffer [2] == 0xBF)  		encoding = Encoding.UTF8;  	else if (buffer [0] == 0xFE && buffer [1] == 0xFF)  		encoding = Encoding.BigEndianUnicode;  	else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  		encoding = Encoding.Unicode;  	else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  		encoding = Encoding.UTF7;  	// Reset the stream  	stream.Seek (0' SeekOrigin.Begin);  }  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (stream.CanSeek) {  	byte[] buffer = new byte[3];  	stream.Read (buffer' 0' buffer.Length);  	if (buffer [0] == 0xEF && buffer [1] == 0xBB && buffer [2] == 0xBF)  		encoding = Encoding.UTF8;  	else if (buffer [0] == 0xFE && buffer [1] == 0xFF)  		encoding = Encoding.BigEndianUnicode;  	else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  		encoding = Encoding.Unicode;  	else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  		encoding = Encoding.UTF7;  	// Reset the stream  	stream.Seek (0' SeekOrigin.Begin);  }  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (stream.CanSeek) {  	byte[] buffer = new byte[3];  	stream.Read (buffer' 0' buffer.Length);  	if (buffer [0] == 0xEF && buffer [1] == 0xBB && buffer [2] == 0xBF)  		encoding = Encoding.UTF8;  	else if (buffer [0] == 0xFE && buffer [1] == 0xFF)  		encoding = Encoding.BigEndianUnicode;  	else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  		encoding = Encoding.Unicode;  	else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  		encoding = Encoding.UTF7;  	// Reset the stream  	stream.Seek (0' SeekOrigin.Begin);  }  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (buffer [0] == 0xEF && buffer [1] == 0xBB && buffer [2] == 0xBF)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xFE && buffer [1] == 0xFF)  	encoding = Encoding.BigEndianUnicode;  else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (buffer [0] == 0xEF && buffer [1] == 0xBB && buffer [2] == 0xBF)  	encoding = Encoding.UTF8;  else if (buffer [0] == 0xFE && buffer [1] == 0xFF)  	encoding = Encoding.BigEndianUnicode;  else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (buffer [0] == 0xFE && buffer [1] == 0xFF)  	encoding = Encoding.BigEndianUnicode;  else if (buffer [0] == 0xFF && buffer [1] == 0xFE)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (buffer [0] == 0xFF && buffer [1] == 0xFE)  	encoding = Encoding.Unicode;  else if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,GetEncodingFromStream,The following statement contains a magic number: if (buffer [0] == 0x2B && buffer [1] == 0x2F && buffer [2] == 0x76)  	encoding = Encoding.UTF7;  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,CloneNodeFromOtherDocument,The following statement contains a magic number: try {  	IXmlLineInfo lineInfo = element as IXmlLineInfo;  	if (lineInfo != null) {  		_reader = new XmlTextReader (new StringReader (element.OuterXml));  		_lineNumberOffset = lineInfo.LineNumber - 1;  		_linePositionOffset = lineInfo.LinePosition - 2;  		_fileName = element.OwnerDocument.BaseURI;  		clone = ReadNode (_reader);  	}  	else {  		_fileName = null;  		_reader = null;  		clone = ReadNode (new XmlTextReader (new StringReader (element.OuterXml)));  	}  }  finally {  	_lineNumberOffset = 0;  	_linePositionOffset = 0;  	_fileName = oldFileName;  	_reader = oldReader;  }  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,CloneNodeFromOtherDocument,The following statement contains a magic number: if (lineInfo != null) {  	_reader = new XmlTextReader (new StringReader (element.OuterXml));  	_lineNumberOffset = lineInfo.LineNumber - 1;  	_linePositionOffset = lineInfo.LinePosition - 2;  	_fileName = element.OwnerDocument.BaseURI;  	clone = ReadNode (_reader);  }  else {  	_fileName = null;  	_reader = null;  	clone = ReadNode (new XmlTextReader (new StringReader (element.OuterXml)));  }  
Magic Number,Microsoft.Web.XmlTransform,XmlFileInfoDocument,C:\repos\mrward_xdt\XmlTransform\XmlFileInfoDocument.cs,CloneNodeFromOtherDocument,The following statement contains a magic number: _linePositionOffset = lineInfo.LinePosition - 2;  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,GetXPathToAttribute,The following statement contains a magic number: if (xmlAttribute != null) {  	string pathToNode = GetXPathToNode (xmlAttribute.OwnerElement);  	if (!string.IsNullOrEmpty (pathToNode)) {  		System.Text.StringBuilder identifier = new StringBuilder (256);  		if (!(locators == null || locators.Count == 0)) {  			foreach (string match in locators) {  				string val = this.GetAttributeValue (match);  				if (!string.IsNullOrEmpty (val)) {  					if (identifier.Length != 0) {  						identifier.Append (" and ");  					}  					identifier.Append (String.Format (System.Globalization.CultureInfo.InvariantCulture' "@{0}='{1}'"' match' val));  				}  				else {  					throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_MatchAttributeDoesNotExist' match));  				}  			}  		}  		if (identifier.Length == 0) {  			for (int i = 0; i < TargetNodes.Count; i++) {  				if (TargetNodes [i] == xmlAttribute.OwnerElement) {  					// Xpath is 1 based  					identifier.Append ((i + 1).ToString (System.Globalization.CultureInfo.InvariantCulture));  					break;  				}  			}  		}  		pathToNode = string.Concat (pathToNode' "["' identifier.ToString ()' "]");  	}  	path = string.Concat (pathToNode' "/@"' xmlAttribute.Name);  }  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,GetXPathToAttribute,The following statement contains a magic number: if (!string.IsNullOrEmpty (pathToNode)) {  	System.Text.StringBuilder identifier = new StringBuilder (256);  	if (!(locators == null || locators.Count == 0)) {  		foreach (string match in locators) {  			string val = this.GetAttributeValue (match);  			if (!string.IsNullOrEmpty (val)) {  				if (identifier.Length != 0) {  					identifier.Append (" and ");  				}  				identifier.Append (String.Format (System.Globalization.CultureInfo.InvariantCulture' "@{0}='{1}'"' match' val));  			}  			else {  				throw new XmlTransformationException (string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.XMLTRANSFORMATION_MatchAttributeDoesNotExist' match));  			}  		}  	}  	if (identifier.Length == 0) {  		for (int i = 0; i < TargetNodes.Count; i++) {  			if (TargetNodes [i] == xmlAttribute.OwnerElement) {  				// Xpath is 1 based  				identifier.Append ((i + 1).ToString (System.Globalization.CultureInfo.InvariantCulture));  				break;  			}  		}  	}  	pathToNode = string.Concat (pathToNode' "["' identifier.ToString ()' "]");  }  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The following statement contains a magic number: if (fTokenizeParameter && parameters != null) {  	int position = 0;  	System.Text.StringBuilder strbuilder = new StringBuilder (transformValue.Length);  	position = 0;  	List<RegularExpressions.Match> matchs = new List<RegularExpressions.Match> ();  	do {  		position = transformValue.IndexOf ("{%"' position' StringComparison.OrdinalIgnoreCase);  		if (position > -1) {  			RegularExpressions.Match match = DirRegex.Match (transformValue' position);  			// Add the successful match to collection  			if (match.Success) {  				matchs.Add (match);  				position = match.Index + match.Length;  			}  			else {  				position++;  			}  		}  	}  	while (position > -1);  	if (matchs.Count > 0) {  		strbuilder.Remove (0' strbuilder.Length);  		position = 0;  		int index = 0;  		foreach (RegularExpressions.Match match in matchs) {  			strbuilder.Append (transformValue.Substring (position' match.Index - position));  			RegularExpressions.CaptureCollection attrnames = match.Groups ["attrname"].Captures;  			if (attrnames != null && attrnames.Count > 0) {  				RegularExpressions.CaptureCollection attrvalues = match.Groups ["attrval"].Captures;  				Dictionary<string' string> paramDictionary = new Dictionary<string' string> (4' StringComparer.OrdinalIgnoreCase);  				paramDictionary [XPathWithIndex] = xpath;  				paramDictionary [TokenNumber] = index.ToString (System.Globalization.CultureInfo.InvariantCulture);  				// Get the key-value pare of the in the tranform form  				for (int i = 0; i < attrnames.Count; i++) {  					string name = attrnames [i].Value;  					string val = null;  					if (attrvalues != null && i < attrvalues.Count) {  						val = EscapeDirRegexSpecialCharacter (attrvalues [i].Value' false);  					}  					paramDictionary [name] = val;  				}  				//Identify the Token format  				string strTokenFormat = null;  				if (!paramDictionary.TryGetValue (Token' out strTokenFormat)) {  					strTokenFormat = storageDictionary.TokenFormat;  				}  				if (!string.IsNullOrEmpty (strTokenFormat)) {  					paramDictionary [Token] = strTokenFormat;  				}  				// Second translation of #() -- replace with the existing Parameters  				int count = paramDictionary.Count;  				string[] keys = new string[count];  				paramDictionary.Keys.CopyTo (keys' 0);  				for (int i = 0; i < count; i++) {  					// if token format contain the #()'we replace with the known value such that it is unique identify  					// for example' intokenizeTransformXml.cs' default token format is  					// string.Concat("$(ReplacableToken_#("' SetTokenizedAttributes.ParameterAttribute' ")_#("' SetTokenizedAttributes.TokenNumber' "))");  					// which ParameterAttribute will be translate to parameterDictionary["parameter"} and TokenNumber will be translate to parameter   					// parameterDictionary["TokenNumber"]  					string keyindex = keys [i];  					string val = paramDictionary [keyindex];  					string newVal = SubstituteKownValue (val' TokenFormatRegex' "#("' delegate (string key) {  						return paramDictionary.ContainsKey (key) ? paramDictionary [key] : null;  					});  					paramDictionary [keyindex] = newVal;  				}  				if (paramDictionary.TryGetValue (Token' out strTokenFormat)) {  					// Replace with token  					strbuilder.Append (strTokenFormat);  				}  				string attributeLocator;  				if (paramDictionary.TryGetValue (XpathLocator' out attributeLocator) && !string.IsNullOrEmpty (attributeLocator)) {  					IList<string> locators = XmlArgumentUtility.SplitArguments (attributeLocator);  					string xpathwithlocator = GetXPathToAttribute (targetAttribute' locators);  					if (!string.IsNullOrEmpty (xpathwithlocator)) {  						paramDictionary [XPathWithLocator] = xpathwithlocator;  					}  				}  				parameters.Add (paramDictionary);  			}  			position = match.Index + match.Length;  			index++;  		}  		strbuilder.Append (transformValue.Substring (position));  		transformValue = strbuilder.ToString ();  	}  }  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The following statement contains a magic number: if (matchs.Count > 0) {  	strbuilder.Remove (0' strbuilder.Length);  	position = 0;  	int index = 0;  	foreach (RegularExpressions.Match match in matchs) {  		strbuilder.Append (transformValue.Substring (position' match.Index - position));  		RegularExpressions.CaptureCollection attrnames = match.Groups ["attrname"].Captures;  		if (attrnames != null && attrnames.Count > 0) {  			RegularExpressions.CaptureCollection attrvalues = match.Groups ["attrval"].Captures;  			Dictionary<string' string> paramDictionary = new Dictionary<string' string> (4' StringComparer.OrdinalIgnoreCase);  			paramDictionary [XPathWithIndex] = xpath;  			paramDictionary [TokenNumber] = index.ToString (System.Globalization.CultureInfo.InvariantCulture);  			// Get the key-value pare of the in the tranform form  			for (int i = 0; i < attrnames.Count; i++) {  				string name = attrnames [i].Value;  				string val = null;  				if (attrvalues != null && i < attrvalues.Count) {  					val = EscapeDirRegexSpecialCharacter (attrvalues [i].Value' false);  				}  				paramDictionary [name] = val;  			}  			//Identify the Token format  			string strTokenFormat = null;  			if (!paramDictionary.TryGetValue (Token' out strTokenFormat)) {  				strTokenFormat = storageDictionary.TokenFormat;  			}  			if (!string.IsNullOrEmpty (strTokenFormat)) {  				paramDictionary [Token] = strTokenFormat;  			}  			// Second translation of #() -- replace with the existing Parameters  			int count = paramDictionary.Count;  			string[] keys = new string[count];  			paramDictionary.Keys.CopyTo (keys' 0);  			for (int i = 0; i < count; i++) {  				// if token format contain the #()'we replace with the known value such that it is unique identify  				// for example' intokenizeTransformXml.cs' default token format is  				// string.Concat("$(ReplacableToken_#("' SetTokenizedAttributes.ParameterAttribute' ")_#("' SetTokenizedAttributes.TokenNumber' "))");  				// which ParameterAttribute will be translate to parameterDictionary["parameter"} and TokenNumber will be translate to parameter   				// parameterDictionary["TokenNumber"]  				string keyindex = keys [i];  				string val = paramDictionary [keyindex];  				string newVal = SubstituteKownValue (val' TokenFormatRegex' "#("' delegate (string key) {  					return paramDictionary.ContainsKey (key) ? paramDictionary [key] : null;  				});  				paramDictionary [keyindex] = newVal;  			}  			if (paramDictionary.TryGetValue (Token' out strTokenFormat)) {  				// Replace with token  				strbuilder.Append (strTokenFormat);  			}  			string attributeLocator;  			if (paramDictionary.TryGetValue (XpathLocator' out attributeLocator) && !string.IsNullOrEmpty (attributeLocator)) {  				IList<string> locators = XmlArgumentUtility.SplitArguments (attributeLocator);  				string xpathwithlocator = GetXPathToAttribute (targetAttribute' locators);  				if (!string.IsNullOrEmpty (xpathwithlocator)) {  					paramDictionary [XPathWithLocator] = xpathwithlocator;  				}  			}  			parameters.Add (paramDictionary);  		}  		position = match.Index + match.Length;  		index++;  	}  	strbuilder.Append (transformValue.Substring (position));  	transformValue = strbuilder.ToString ();  }  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The following statement contains a magic number: foreach (RegularExpressions.Match match in matchs) {  	strbuilder.Append (transformValue.Substring (position' match.Index - position));  	RegularExpressions.CaptureCollection attrnames = match.Groups ["attrname"].Captures;  	if (attrnames != null && attrnames.Count > 0) {  		RegularExpressions.CaptureCollection attrvalues = match.Groups ["attrval"].Captures;  		Dictionary<string' string> paramDictionary = new Dictionary<string' string> (4' StringComparer.OrdinalIgnoreCase);  		paramDictionary [XPathWithIndex] = xpath;  		paramDictionary [TokenNumber] = index.ToString (System.Globalization.CultureInfo.InvariantCulture);  		// Get the key-value pare of the in the tranform form  		for (int i = 0; i < attrnames.Count; i++) {  			string name = attrnames [i].Value;  			string val = null;  			if (attrvalues != null && i < attrvalues.Count) {  				val = EscapeDirRegexSpecialCharacter (attrvalues [i].Value' false);  			}  			paramDictionary [name] = val;  		}  		//Identify the Token format  		string strTokenFormat = null;  		if (!paramDictionary.TryGetValue (Token' out strTokenFormat)) {  			strTokenFormat = storageDictionary.TokenFormat;  		}  		if (!string.IsNullOrEmpty (strTokenFormat)) {  			paramDictionary [Token] = strTokenFormat;  		}  		// Second translation of #() -- replace with the existing Parameters  		int count = paramDictionary.Count;  		string[] keys = new string[count];  		paramDictionary.Keys.CopyTo (keys' 0);  		for (int i = 0; i < count; i++) {  			// if token format contain the #()'we replace with the known value such that it is unique identify  			// for example' intokenizeTransformXml.cs' default token format is  			// string.Concat("$(ReplacableToken_#("' SetTokenizedAttributes.ParameterAttribute' ")_#("' SetTokenizedAttributes.TokenNumber' "))");  			// which ParameterAttribute will be translate to parameterDictionary["parameter"} and TokenNumber will be translate to parameter   			// parameterDictionary["TokenNumber"]  			string keyindex = keys [i];  			string val = paramDictionary [keyindex];  			string newVal = SubstituteKownValue (val' TokenFormatRegex' "#("' delegate (string key) {  				return paramDictionary.ContainsKey (key) ? paramDictionary [key] : null;  			});  			paramDictionary [keyindex] = newVal;  		}  		if (paramDictionary.TryGetValue (Token' out strTokenFormat)) {  			// Replace with token  			strbuilder.Append (strTokenFormat);  		}  		string attributeLocator;  		if (paramDictionary.TryGetValue (XpathLocator' out attributeLocator) && !string.IsNullOrEmpty (attributeLocator)) {  			IList<string> locators = XmlArgumentUtility.SplitArguments (attributeLocator);  			string xpathwithlocator = GetXPathToAttribute (targetAttribute' locators);  			if (!string.IsNullOrEmpty (xpathwithlocator)) {  				paramDictionary [XPathWithLocator] = xpathwithlocator;  			}  		}  		parameters.Add (paramDictionary);  	}  	position = match.Index + match.Length;  	index++;  }  
Magic Number,Microsoft.Web.XmlTransform,SetTokenizedAttributes,C:\repos\mrward_xdt\XmlTransform\XmlTransforms.cs,TokenizeValue,The following statement contains a magic number: if (attrnames != null && attrnames.Count > 0) {  	RegularExpressions.CaptureCollection attrvalues = match.Groups ["attrval"].Captures;  	Dictionary<string' string> paramDictionary = new Dictionary<string' string> (4' StringComparer.OrdinalIgnoreCase);  	paramDictionary [XPathWithIndex] = xpath;  	paramDictionary [TokenNumber] = index.ToString (System.Globalization.CultureInfo.InvariantCulture);  	// Get the key-value pare of the in the tranform form  	for (int i = 0; i < attrnames.Count; i++) {  		string name = attrnames [i].Value;  		string val = null;  		if (attrvalues != null && i < attrvalues.Count) {  			val = EscapeDirRegexSpecialCharacter (attrvalues [i].Value' false);  		}  		paramDictionary [name] = val;  	}  	//Identify the Token format  	string strTokenFormat = null;  	if (!paramDictionary.TryGetValue (Token' out strTokenFormat)) {  		strTokenFormat = storageDictionary.TokenFormat;  	}  	if (!string.IsNullOrEmpty (strTokenFormat)) {  		paramDictionary [Token] = strTokenFormat;  	}  	// Second translation of #() -- replace with the existing Parameters  	int count = paramDictionary.Count;  	string[] keys = new string[count];  	paramDictionary.Keys.CopyTo (keys' 0);  	for (int i = 0; i < count; i++) {  		// if token format contain the #()'we replace with the known value such that it is unique identify  		// for example' intokenizeTransformXml.cs' default token format is  		// string.Concat("$(ReplacableToken_#("' SetTokenizedAttributes.ParameterAttribute' ")_#("' SetTokenizedAttributes.TokenNumber' "))");  		// which ParameterAttribute will be translate to parameterDictionary["parameter"} and TokenNumber will be translate to parameter   		// parameterDictionary["TokenNumber"]  		string keyindex = keys [i];  		string val = paramDictionary [keyindex];  		string newVal = SubstituteKownValue (val' TokenFormatRegex' "#("' delegate (string key) {  			return paramDictionary.ContainsKey (key) ? paramDictionary [key] : null;  		});  		paramDictionary [keyindex] = newVal;  	}  	if (paramDictionary.TryGetValue (Token' out strTokenFormat)) {  		// Replace with token  		strbuilder.Append (strTokenFormat);  	}  	string attributeLocator;  	if (paramDictionary.TryGetValue (XpathLocator' out attributeLocator) && !string.IsNullOrEmpty (attributeLocator)) {  		IList<string> locators = XmlArgumentUtility.SplitArguments (attributeLocator);  		string xpathwithlocator = GetXPathToAttribute (targetAttribute' locators);  		if (!string.IsNullOrEmpty (xpathwithlocator)) {  			paramDictionary [XPathWithLocator] = xpathwithlocator;  		}  	}  	parameters.Add (paramDictionary);  }  
Missing Default,Microsoft.Web.XmlTransform,XmlArgumentUtility,C:\repos\mrward_xdt\XmlTransform\XmlArgumentUtility.cs,CountParens,The following switch statement is missing a default case: switch (ch) {  case '(':  	parenCount++;  	break;  case ')':  	parenCount--;  	break;  }  
Missing Default,Microsoft.Web.XmlTransform,Transform,C:\repos\mrward_xdt\XmlTransform\XmlTransform.cs,HandleMissingTarget,The following switch statement is missing a default case: switch (MissingTargetMessage) {  case MissingTargetMessage.None:  	Log.LogMessage (MessageType.Verbose' message);  	break;  case MissingTargetMessage.Information:  	Log.LogMessage (MessageType.Normal' message);  	break;  case MissingTargetMessage.Warning:  	Log.LogWarning (matchFailureContext.Node' message);  	break;  case MissingTargetMessage.Error:  	throw new XmlNodeException (message' matchFailureContext.Node);  }  
Missing Default,Microsoft.Web.XmlTransform,XmlTransformation,C:\repos\mrward_xdt\XmlTransform\XmlTransformation.cs,PreprocessImportElement,The following switch statement is missing a default case: switch (attribute.Name) {  case "assembly":  	assemblyName = attribute.Value;  	continue;  case "namespace":  	nameSpace = attribute.Value;  	continue;  case "path":  	path = attribute.Value;  	continue;  }  
