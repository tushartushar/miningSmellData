Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,Cyclomatic complexity of the method is 11
Long Parameter List,SampleApp.WinDesktop,NullToCollapsedConverter,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\NullToCollapsedConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,SampleApp.WinDesktop,NullToCollapsedConverter,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\NullToCollapsedConverter.cs,ConvertBack,The method has 4 parameters.
Long Statement,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,StartDevice,The length of the statement  "		currentDeviceInfo.Text = string.Format ("SerialPortDevice( port={0}' baud={1} )"' ((NmeaParser.SerialPortDevice)device).Port.PortName' ((NmeaParser.SerialPortDevice)device).Port.BaudRate); " is 188.
Long Statement,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,device_MessageReceived,The length of the statement  "			var ctrl = MessagePanel.Children.OfType<UnknownMessageControl> ().Where (c => c.Message.MessageType == args.Message.MessageType).FirstOrDefault (); " is 147.
Empty Catch Block,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The method has an empty catch block.
Magic Number,SampleApp.WinDesktop,PolarPlacementItem,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\SatelliteView.xaml.cs,ArrangeOverride,The following statement contains a magic number: X = arrangeBounds.Width * .5 * X;  
Magic Number,SampleApp.WinDesktop,PolarPlacementItem,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\SatelliteView.xaml.cs,ArrangeOverride,The following statement contains a magic number: Y = arrangeBounds.Height * .5 * Y;  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,device_MessageReceived,The following statement contains a magic number: Dispatcher.BeginInvoke ((Action)delegate () {  	messages.Enqueue (args.Message.MessageType + ": " + args.Message.ToString ());  	if (messages.Count > 100)  		messages.Dequeue ();  	//Keep message queue at 100  	output.Text = string.Join ("\n"' messages.ToArray ());  	output.Select (output.Text.Length - 1' 0);  	//scroll to bottom  	if (args.Message is NmeaParser.Nmea.Gps.Gpgsv) {  		var gpgsv = (NmeaParser.Nmea.Gps.Gpgsv)args.Message;  		if (args.IsMultipart && args.MessageParts != null)  			satView.GpgsvMessages = args.MessageParts.OfType<NmeaParser.Nmea.Gps.Gpgsv> ();  	}  	if (args.Message is NmeaParser.Nmea.Gps.Gprmc)  		gprmcView.Message = args.Message as NmeaParser.Nmea.Gps.Gprmc;  	else if (args.Message is NmeaParser.Nmea.Gps.Gpgga)  		gpggaView.Message = args.Message as NmeaParser.Nmea.Gps.Gpgga;  	else if (args.Message is NmeaParser.Nmea.Gps.Gpgsa)  		gpgsaView.Message = args.Message as NmeaParser.Nmea.Gps.Gpgsa;  	else if (args.Message is NmeaParser.Nmea.Gps.Gpgll)  		gpgllView.Message = args.Message as NmeaParser.Nmea.Gps.Gpgll;  	else if (args.Message is NmeaParser.Nmea.Gps.Garmin.Pgrme)  		pgrmeView.Message = args.Message as NmeaParser.Nmea.Gps.Garmin.Pgrme;  	else if (args.Message is NmeaParser.Nmea.UnknownMessage) {  		var ctrl = MessagePanel.Children.OfType<UnknownMessageControl> ().Where (c => c.Message.MessageType == args.Message.MessageType).FirstOrDefault ();  		if (ctrl == null) {  			ctrl = new UnknownMessageControl () {  				Style = this.Resources ["card"] as Style  			};  			MessagePanel.Children.Add (ctrl);  		}  		ctrl.Message = args.Message as NmeaParser.Nmea.UnknownMessage;  	} else {  		//  	}  });  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,device_MessageReceived,The following statement contains a magic number: if (messages.Count > 100)  	messages.Dequeue ();  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var portName in ports) {  	using (var port = new System.IO.Ports.SerialPort (portName)) {  		var defaultRate = port.BaudRate;  		List<int> baudRatesToTest = new List<int> (new[] {  			9600'  			4800'  			115200'  			19200'  			57600'  			38400'  			2400  		});  		//Ordered by likelihood  		//Move default rate to first spot  		if (baudRatesToTest.Contains (defaultRate))  			baudRatesToTest.Remove (defaultRate);  		baudRatesToTest.Insert (0' defaultRate);  		foreach (var baud in baudRatesToTest) {  			if (progress != null)  				progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  			port.BaudRate = baud;  			port.ReadTimeout = 2000;  			//this might not be long enough  			bool success = false;  			try {  				port.Open ();  				if (!port.IsOpen)  					continue;  				//couldn't open port  				try {  					port.ReadTo ("$GP");  				} catch (TimeoutException) {  					continue;  				}  			} catch {  				//Error reading  			} finally {  				port.Close ();  			}  			if (success) {  				return new System.IO.Ports.SerialPort (portName' baud);  			}  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: using (var port = new System.IO.Ports.SerialPort (portName)) {  	var defaultRate = port.BaudRate;  	List<int> baudRatesToTest = new List<int> (new[] {  		9600'  		4800'  		115200'  		19200'  		57600'  		38400'  		2400  	});  	//Ordered by likelihood  	//Move default rate to first spot  	if (baudRatesToTest.Contains (defaultRate))  		baudRatesToTest.Remove (defaultRate);  	baudRatesToTest.Insert (0' defaultRate);  	foreach (var baud in baudRatesToTest) {  		if (progress != null)  			progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  		port.BaudRate = baud;  		port.ReadTimeout = 2000;  		//this might not be long enough  		bool success = false;  		try {  			port.Open ();  			if (!port.IsOpen)  				continue;  			//couldn't open port  			try {  				port.ReadTo ("$GP");  			} catch (TimeoutException) {  				continue;  			}  		} catch {  			//Error reading  		} finally {  			port.Close ();  		}  		if (success) {  			return new System.IO.Ports.SerialPort (portName' baud);  		}  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: foreach (var baud in baudRatesToTest) {  	if (progress != null)  		progress.Report (string.Format ("Trying {0} @ {1}baud"' portName' port.BaudRate));  	port.BaudRate = baud;  	port.ReadTimeout = 2000;  	//this might not be long enough  	bool success = false;  	try {  		port.Open ();  		if (!port.IsOpen)  			continue;  		//couldn't open port  		try {  			port.ReadTo ("$GP");  		} catch (TimeoutException) {  			continue;  		}  	} catch {  		//Error reading  	} finally {  		port.Close ();  	}  	if (success) {  		return new System.IO.Ports.SerialPort (portName' baud);  	}  }  
Magic Number,SampleApp.WinDesktop,MainWindow,D:\newReposJune17\dotMorten_NmeaParser\src\SampleApp.WinDesktop\MainWindow.xaml.cs,FindPort,The following statement contains a magic number: port.ReadTimeout = 2000;  
