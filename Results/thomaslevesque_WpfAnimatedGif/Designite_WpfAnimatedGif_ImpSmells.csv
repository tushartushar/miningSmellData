Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WpfAnimatedGif,CacheKey,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\AnimationCache.cs,GetUri,Cyclomatic complexity of the method is 9
Complex Method,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetDecoder,Cyclomatic complexity of the method is 8
Long Identifier,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,,The length of the parameter AnimationControllerPropertyKey is 30.
Long Statement,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetDecoder,The length of the statement  "                    throw new InvalidOperationException("Can't get URI or Stream from the source. AnimatedSource should be either a BitmapImage' or a BitmapFrame constructed from a URI."); " is 168.
Long Statement,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetDecoder,The length of the statement  "                throw new InvalidOperationException("Can't get a decoder from the source. AnimatedSource should be either a BitmapImage or a BitmapFrame."); " is 140.
Magic Number,WpfAnimatedGif,CacheKey,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\AnimationCache.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      return (ImageGetHashCode(_source) * 397) ^ _repeatBehavior.GetHashCode();                  }
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,MakeFrame,The following statement contains a magic number: var bitmap = new RenderTargetBitmap(                  fullSize.Width' fullSize.Height'                  96' 96'                  PixelFormats.Pbgra32);
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,MakeFrame,The following statement contains a magic number: var bitmap = new RenderTargetBitmap(                  fullSize.Width' fullSize.Height'                  96' 96'                  PixelFormats.Pbgra32);
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetRepeatCount,The following statement contains a magic number: if (ext != null)              {                  byte[] bytes = ext.GetQueryOrNull<byte[]>("/Data");                  if (bytes != null && bytes.Length >= 4)                      return BitConverter.ToUInt16(bytes' 2);              }
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetRepeatCount,The following statement contains a magic number: if (ext != null)              {                  byte[] bytes = ext.GetQueryOrNull<byte[]>("/Data");                  if (bytes != null && bytes.Length >= 4)                      return BitConverter.ToUInt16(bytes' 2);              }
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetFrameMetadata,The following statement contains a magic number: var delay = TimeSpan.FromMilliseconds(100);
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetFrameMetadata,The following statement contains a magic number: var metadataDelay = metadata.GetQueryOrDefault("/grctlext/Delay"' 10);
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetFrameMetadata,The following statement contains a magic number: if (metadataDelay != 0)                  delay = TimeSpan.FromMilliseconds(metadataDelay * 10);
Magic Number,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetFrameMetadata,The following statement contains a magic number: var frameMetadata = new FrameMetadata                                  {                                      Left = d.Left'                                      Top = d.Top'                                      Width = d.Width'                                      Height = d.Height'                                      Delay = TimeSpan.FromMilliseconds(100)'                                      DisposalMethod = FrameDisposalMethod.None                                  };
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: byte[] bytes = new byte[12];
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 11)                  throw GifHelpers.InvalidBlockSizeException("Application Extension"' 11' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 11)                  throw GifHelpers.InvalidBlockSizeException("Application Extension"' 11' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: ApplicationIdentifier = Encoding.ASCII.GetString(bytes' 1' 8);
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: byte[] authCode = new byte[3];
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: Array.Copy(bytes' 9' authCode' 0' 3);
Magic Number,WpfAnimatedGif.Decoding,GifApplicationExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifApplicationExtension.cs,Read,The following statement contains a magic number: Array.Copy(bytes' 9' authCode' 0' 3);
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: byte[] bytes = new byte[6];
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 4)                  throw GifHelpers.InvalidBlockSizeException("Graphic Control Extension"' 4' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 4)                  throw GifHelpers.InvalidBlockSizeException("Graphic Control Extension"' 4' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: DisposalMethod = (packedFields & 0x1C) >> 2;
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: Delay = BitConverter.ToUInt16(bytes' 2) * 10;
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: Delay = BitConverter.ToUInt16(bytes' 2) * 10;
Magic Number,WpfAnimatedGif.Decoding,GifGraphicControlExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifGraphicControlExtension.cs,Read,The following statement contains a magic number: TransparencyIndex = bytes[4];
Magic Number,WpfAnimatedGif.Decoding,GifHeader,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHeader.cs,Read,The following statement contains a magic number: Signature = GifHelpers.ReadString(stream' 3);
Magic Number,WpfAnimatedGif.Decoding,GifHeader,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHeader.cs,Read,The following statement contains a magic number: Version = GifHelpers.ReadString(stream' 3);
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,ReadColorTable,The following statement contains a magic number: int length = 3 * size;
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,ReadColorTable,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte r = bytes[3 * i];                  byte g = bytes[3 * i + 1];                  byte b = bytes[3 * i + 2];                  colorTable[i] = new GifColor(r' g' b);              }
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,ReadColorTable,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte r = bytes[3 * i];                  byte g = bytes[3 * i + 1];                  byte b = bytes[3 * i + 2];                  colorTable[i] = new GifColor(r' g' b);              }
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,ReadColorTable,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte r = bytes[3 * i];                  byte g = bytes[3 * i + 1];                  byte b = bytes[3 * i + 2];                  colorTable[i] = new GifColor(r' g' b);              }
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,ReadColorTable,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte r = bytes[3 * i];                  byte g = bytes[3 * i + 1];                  byte b = bytes[3 * i + 2];                  colorTable[i] = new GifColor(r' g' b);              }
Magic Number,WpfAnimatedGif.Decoding,GifHelpers,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifHelpers.cs,GetRepeatCount,The following statement contains a magic number: if (ext.Data.Length >= 3)              {                  return BitConverter.ToUInt16(ext.Data' 1);              }
Magic Number,WpfAnimatedGif.Decoding,GifImageDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifImageDescriptor.cs,Read,The following statement contains a magic number: byte[] bytes = new byte[9];
Magic Number,WpfAnimatedGif.Decoding,GifImageDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifImageDescriptor.cs,Read,The following statement contains a magic number: Top = BitConverter.ToUInt16(bytes' 2);
Magic Number,WpfAnimatedGif.Decoding,GifImageDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifImageDescriptor.cs,Read,The following statement contains a magic number: Width = BitConverter.ToUInt16(bytes' 4);
Magic Number,WpfAnimatedGif.Decoding,GifImageDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifImageDescriptor.cs,Read,The following statement contains a magic number: Height = BitConverter.ToUInt16(bytes' 6);
Magic Number,WpfAnimatedGif.Decoding,GifImageDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifImageDescriptor.cs,Read,The following statement contains a magic number: byte packedFields = bytes[8];
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: byte[] bytes = new byte[7];
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: Height = BitConverter.ToUInt16(bytes' 2);
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: byte packedFields = bytes[4];
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: ColorResolution = ((packedFields & 0x70) >> 4) + 1;
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: BackgroundColorIndex = bytes[5];
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: PixelAspectRatio =                  bytes[5] == 0                      ? 0.0                      : (15 + bytes[5]) / 64.0;
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: PixelAspectRatio =                  bytes[5] == 0                      ? 0.0                      : (15 + bytes[5]) / 64.0;
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: PixelAspectRatio =                  bytes[5] == 0                      ? 0.0                      : (15 + bytes[5]) / 64.0;
Magic Number,WpfAnimatedGif.Decoding,GifLogicalScreenDescriptor,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifLogicalScreenDescriptor.cs,Read,The following statement contains a magic number: PixelAspectRatio =                  bytes[5] == 0                      ? 0.0                      : (15 + bytes[5]) / 64.0;
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: byte[] bytes = new byte[13];
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 12)                  throw GifHelpers.InvalidBlockSizeException("Plain Text Extension"' 12' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: if (BlockSize != 12)                  throw GifHelpers.InvalidBlockSizeException("Plain Text Extension"' 12' BlockSize);
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: Top = BitConverter.ToUInt16(bytes' 3);
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: Width = BitConverter.ToUInt16(bytes' 5);
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: Height = BitConverter.ToUInt16(bytes' 7);
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: CellWidth = bytes[9];
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: CellHeight = bytes[10];
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: ForegroundColorIndex = bytes[11];
Magic Number,WpfAnimatedGif.Decoding,GifPlainTextExtension,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifPlainTextExtension.cs,Read,The following statement contains a magic number: BackgroundColorIndex = bytes[12];
Missing Default,WpfAnimatedGif,ImageBehavior,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\ImageBehavior.cs,GetAnimation,The following switch statement is missing a default case: switch (metadata.DisposalMethod)                      {                          case FrameDisposalMethod.None:                          case FrameDisposalMethod.DoNotDispose:                              baseFrame = frame;                              break;                          case FrameDisposalMethod.RestoreBackground:                              if (IsFullFrame(metadata' fullSize))                              {                                  baseFrame = null;                              }                              else                              {                                  baseFrame = ClearArea(frame' metadata);                              }                              break;                          case FrameDisposalMethod.RestorePrevious:                              // Reuse same base frame                              break;                      }
Missing Default,WpfAnimatedGif.Decoding,GifFile,C:\repos\thomaslevesque_WpfAnimatedGif\WpfAnimatedGif\Decoding\GifFile.cs,ReadFrames,The following switch statement is missing a default case: switch (extension.Kind)                      {                          case GifBlockKind.Control:                              controlExtensions.Add(extension);                              break;                          case GifBlockKind.SpecialPurpose:                              specialExtensions.Add(extension);                              break;                      }
