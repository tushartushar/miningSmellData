Implementation smell,Namespace,Class,File,Method,Description
Complex Method,pt.sapo.gis.trace.wcf,TraceMessageInspector,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\wcf\TraceMessageInspector.cs,AfterReceiveRequest,Cyclomatic complexity of the method is 8
Long Identifier,pt.sapo.gis.trace.sdb,SDBTraceProperties,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\sdb\SDBTraceProperties.cs,,The length of the parameter SERVICE_OPERATION_NAME_PROPERTY is 31.
Long Statement,pt.sapo.gis.trace.appender.SMI,SDBTraceAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SDBTraceAppender.cs,ToSDBTrace,The length of the statement  "            if (t.Properties.ContainsKey(SDBTraceProperties.TRACE_RESULT_PROPERTY) && t.Properties.ContainsKey(SDBTraceProperties.TRACE_SUCCESS_PROPERTY)) " is 142.
Long Statement,pt.sapo.gis.trace.appender.SMI,SDBTraceAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SDBTraceAppender.cs,OnTrace,The length of the statement  "                var request = (HttpWebRequest)WebRequest.Create(String.Format("{0}://{1}{2}/{3}?traceContext={4}"' Properties.Protocol' Properties.Host' Properties.Port.HasValue ? ":" + Properties.Port.Value : String.Empty' Properties.Path.TrimStart('/')' t.ContextId)); " is 254.
Long Statement,pt.sapo.gis.trace.appender.SMI,SDBTraceAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SDBTraceAppender.cs,OnTrace,The length of the statement  "                        log.ErrorFormat("SDB trace publish fail: [{0}-{1}] {2}"' (int)response.StatusCode' response.StatusDescription' reader.ReadToEnd()); " is 131.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,OnEntry,The length of the statement  "            FillFailure(e' failures' et => severities.ContainsKey(eventType.entry) == false || severities[eventType.entry].Contains(et.Severity)); " is 134.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,OnEntry,The length of the statement  "            Send(report' e.Parent.Properties.ContainsKey(REPORT_ACTIVITY_ID_PROPERTY) ? e.Parent.Properties[REPORT_ACTIVITY_ID_PROPERTY] as String : null' e.Parent.Properties.ContainsKey(REPORT_AGENT_ID_PROPERTY) ? e.Parent.Properties[REPORT_AGENT_ID_PROPERTY] as String : null); " is 267.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,OnTrace,The length of the statement  "                FillFailures(e' failures' et => severities.ContainsKey(eventType.trace) == false || severities[eventType.trace].Contains(et.Severity)); " is 135.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,OnTrace,The length of the statement  "            Send(report' t.Properties.ContainsKey(REPORT_ACTIVITY_ID_PROPERTY) ? t.Properties[REPORT_ACTIVITY_ID_PROPERTY] as String : null' t.Properties.ContainsKey(REPORT_AGENT_ID_PROPERTY) ? t.Properties[REPORT_AGENT_ID_PROPERTY] as String : null); " is 239.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,BuildReport,The length of the statement  "                SourceID = trace.Properties.ContainsKey(REPORT_SOURCE_ID_PROPERTY) ? trace.Properties[REPORT_SOURCE_ID_PROPERTY] as String : Properties.DefaultSourceId " is 151.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,FillFailure,The length of the statement  "                    SourceID = entry.Properties.ContainsKey(FAILURE_SOURCE_ID_PROPERTY) ? entry.Properties[FAILURE_SOURCE_ID_PROPERTY] as String : (TraceManager.Trace.Properties.ContainsKey(REPORT_SOURCE_ID_PROPERTY) ? TraceManager.Trace.Properties[REPORT_SOURCE_ID_PROPERTY] as String : Properties.DefaultSourceId)' " is 296.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,FillFailure,The length of the statement  "                    //Details = entry.Properties.Where(e => e.Key != FAILURE_SOURCE_ID_PROPERTY).ToDictionary(x => x.Key' x => x.Value) //correction for exceptionEntries " is 149.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,FillFailure,The length of the statement  "                FillFailureDetails(entry.Properties.Where(e => e.Key != FAILURE_SOURCE_ID_PROPERTY).ToDictionary(x => x.Key' x => x.Value)' failure); " is 133.
Long Statement,pt.sapo.gis.trace.appender.SMI,SMILoggerAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\SMI\SMILoggerAppender.cs,FillFailureDetails,The length of the statement  "            var details = entryProperties.Where(e => e.Key != ExceptionEntry.EXCEPTION_PROPERTY).ToDictionary(e => e.Key' e => e.Value.ToString()); " is 135.
Long Statement,pt.sapo.gis.trace.appender,TextWriterAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\TextWriterAppender.cs,Write,The length of the statement  "            writer.Write("\n--------------\n Trace from {0:yyyy-MM-dd HH:mm:ss.fff} to {1:yyyy-MM-dd HH:mm:ss.fff} \n entries:"' t.Start' t.End); " is 133.
Long Statement,pt.sapo.gis.trace.appender,TextWriterAppender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\TextWriterAppender.cs,Write,The length of the statement  "            writer.WriteLine("{{ description: '{0}'' offset: {1:0.000}' duration: {2:0.000}' severity: {3}' properties: {4}' entries: ["' e.Description' e.Offset' e.Duration' e.Severity' str.ToString()); " is 191.
Long Statement,pt.sapo.gis.trace,Entry,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\Entry.cs,GetHashCode,The length of the statement  "            return base.GetHashCode() + Type.GetHashCode() + Description.GetHashCode() + Offset.GetHashCode() + Duration.GetHashCode() + Entries.GetHashCode() + Properties.GetHashCode(); " is 174.
Long Statement,pt.sapo.gis.trace,TraceManager,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\TraceManager.cs,LoadConfig,The length of the statement  "                        (configuration.configuration)new XmlSerializer(typeof(trace.configuration.configuration)).Deserialize(new FileStream(envConfigFile' FileMode.Open)) : " is 149.
Long Statement,pt.sapo.gis.trace,TraceManager,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\TraceManager.cs,LoadConfig,The length of the statement  "                                 System.Diagnostics.Trace.TraceError(String.Format("An error occurred on loading trace configuration.{0}{1}{0}{2}"' Environment.NewLine' ex.Message' ex.StackTrace)); " is 164.
Long Statement,pt.sapo.gis.trace.wcf,TraceMessageInspector,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\wcf\TraceMessageInspector.cs,AfterReceiveRequest,The length of the statement  "                    HttpRequestMessageProperty httpProperty = (HttpRequestMessageProperty)OperationContext.Current.RequestContext.RequestMessage.Properties[HttpRequestMessageProperty.Name]; " is 169.
Long Statement,pt.sapo.gis.trace.wcf,TraceMessageInspector,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\wcf\TraceMessageInspector.cs,AfterReceiveRequest,The length of the statement  "                        var traceContext = Newtonsoft.Json.Linq.JObject.Load(new JsonTextReader(new StreamReader(new MemoryStream(Convert.FromBase64String(context))))); " is 144.
Long Statement,pt.sapo.gis.trace.configuration,TraceConfigurationSectionHandler,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\configuration\TraceConfigurationSectionHandler.cs,Create,The length of the statement  "                return new XmlSerializer(typeof(trace.configuration.configuration)).Deserialize(new XmlNodeReader(section.SelectSingleNode("c:configuration"' xnsm))); " is 150.
Long Statement,pt.sapo.gis.trace.ant,NAntListenerTracer,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\nant\NAntListenerTracer.cs,BuildStarted,The length of the statement  "            autoTrace = be.Project.Properties.Contains("trace.ant.disableAutoTrace") && be.Project.Properties["trace.ant.disableAutoTrace"].Equals("true"' StringComparison.InvariantCultureIgnoreCase); " is 188.
Long Statement,pt.sapo.gis.trace.ant,NAntListenerTracer,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\nant\NAntListenerTracer.cs,MessageLogged,The length of the statement  "            TraceManager.Trace.TraceEntry(new Entry(String.Format(""' be.Message)' be.MessageLevel != Level.Error ? severityType.INFO : severityType.ERROR)); " is 145.
Long Statement,pt.sapo.sdb.trace,ExtensionMethods,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\sdb\trace\ExtensionMethods.cs,ToNameValueCollection,The length of the statement  "                    ValuePairs = e.Value is IDictionary<String' Object> ? ToNameValueCollection(e.Value as IDictionary<String' Object>) : null' " is 123.
Virtual Method Call from Constructor,pt.sapo.gis.trace.appender,Appender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\Appender.cs,Appender,The constructor "Appender" calls a virtual method "OnEntry".
Virtual Method Call from Constructor,pt.sapo.gis.trace.appender,Appender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\Appender.cs,Appender,The constructor "Appender" calls a virtual method "OnEntry".
Virtual Method Call from Constructor,pt.sapo.gis.trace.appender,Appender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\Appender.cs,Appender,The constructor "Appender" calls a virtual method "OnTrace".
Virtual Method Call from Constructor,pt.sapo.gis.trace.appender,Appender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\Appender.cs,Appender,The constructor "Appender" calls a virtual method "OnTrace".
Magic Number,pt.sapo.gis.trace.wcf,TraceMessageInspector,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\wcf\TraceMessageInspector.cs,TraceMessageInspector,The following statement contains a magic number: TraceManager.LoadConfig(1000);
Magic Number,pt.sapo.gis.trace.wcf,TraceMessageInspector,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\wcf\TraceMessageInspector.cs,AfterReceiveRequest,The following statement contains a magic number: try              {                  String action = OperationContext.Current.IncomingMessageHeaders.Action;                  String activityId = null;                  String context = null;                  Trace trace = null;                  Guid traceId = Guid.NewGuid();                  if(OperationContext.Current.RequestContext.RequestMessage.Properties.ContainsKey(HttpRequestMessageProperty.Name))                  {                      HttpRequestMessageProperty httpProperty = (HttpRequestMessageProperty)OperationContext.Current.RequestContext.RequestMessage.Properties[HttpRequestMessageProperty.Name];                      if (action == null)                      {                          action = httpProperty.Headers.Get("SOAPAction");                      }                      activityId = httpProperty.Headers.Get("ESBActivityId");                      context = httpProperty.Headers.Get("ESBTraceContext");                  }                  if (context != null)                  {                      try                      {                          var traceContext = Newtonsoft.Json.Linq.JObject.Load(new JsonTextReader(new StreamReader(new MemoryStream(Convert.FromBase64String(context)))));                          Guid.TryParse(traceContext.Value<String>("LinkedTraceId")' out traceId);                      }                      catch (Exception e){                          log.ErrorFormat("Fail to parse 'ESBTraceContext: {0}{1}{2}"' e.Message' Environment.NewLine' e.StackTrace);                      }                                        }                  trace = TraceManager.BeginTrace(traceId' context);                    if (activityId != null)                  {                      trace.Properties.Add(SMILoggerAppender.REPORT_ACTIVITY_ID_PROPERTY' activityId);                  }                    if (action != null)                  {                      var match = actionRegularExpression.Match(action);                      if (match.Success)                      {                          //TO SDB trace it cannot have METADATA/GIS as service name but only GIS                          string[] splitServiceName = match.Groups[1].Value.Split('/');                          trace.Properties[SDBTraceProperties.SERVICE_NAME_PROPERTY] = splitServiceName[splitServiceName.Length-1];                          trace.Properties[SDBTraceProperties.SERVICE_OPERATION_NAME_PROPERTY] = match.Groups[2].Value;                      }                  }                    if (HttpContext.Current != null)                  {                      trace.ServerInfo = IPAddress.Parse(HttpContext.Current.Request.ServerVariables["LOCAL_ADDR"]);                      trace.ClientInfo = IPAddress.Parse(GetClientIP());                  }                }              catch (Exception e)              {                  log.ErrorFormat("Fail on trace initialize: {0}{1}{2}"' e.Message' Environment.NewLine' e.StackTrace);              }
Missing Default,pt.sapo.gis.trace.appender,Appender,C:\repos\sapo_sapo-services-sdk\SMI-SDK\.NET SDK\Library\gis\trace\appender\Appender.cs,Appender,The following switch statement is missing a default case: switch(evt.type) {                      case eventType.entry:                          if (evt.filters == null || evt.filters.Length == 0)                              onEntry = e => OnEntry(e);                                                      else                               onEntry = e => { if(evt.filters.Contains(e.Severity)) OnEntry(e); };                          TraceManager.OnEntry += onEntry;                          break;                      case eventType.trace:                          if (evt.filters == null || evt.filters.Length == 0)                              onTrace = t => OnTrace(t);                          else                               onTrace = t => { if(t.GetSeverityTypes().Any(s => evt.filters.Contains(s))) OnTrace(t); };                          TraceManager.OnTrace += onTrace;                          break;                  }
