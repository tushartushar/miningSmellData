Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Drawing.Graphics,DLLImports,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\DLLImports.cs,gdImageCopyResized,The method has 10 parameters. Parameters: destination' source' destinationX' destinationY' sourceX' sourceY' destinationWidth' destinationHeight' sourceWidth' sourceHeight
Long Parameter List,System.Drawing.Graphics,DLLImports,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\DLLImports.cs,gdImageCopyMerge,The method has 9 parameters. Parameters: destination' source' dstX' dstY' srcX' srcY' w' h' pct
Long Statement,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,Resize,The length of the statement  "                    destinationImage.WidthInPixels' destinationImage.HeightInPixels' sourceImage.WidthInPixels' sourceImage.HeightInPixels); " is 120.
Long Statement,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The length of the statement  "            currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]); " is 126.
Long Statement,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The length of the statement  "                        if ((x - radius - xOffset) * (x - radius - xOffset) + (y - radius - yOffset) * (y - radius - yOffset) > (radius * radius)) " is 122.
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,SetAlphaPercentage,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                    for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                          //mask to just get the alpha value (7 bits)                          double currentAlpha = (currentColor >> 24) & 0xff;                          //if the current alpha is transparent                          //dont bother/ skip over                          if (currentAlpha == 127)                              continue;                          //calculate the new alpha value given the adjustment                          currentAlpha += (127 - currentAlpha) * alphaAdjustment;                            //make a new color with the new alpha to set the pixel                          currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          pStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,SetAlphaPercentage,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                    for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                          //mask to just get the alpha value (7 bits)                          double currentAlpha = (currentColor >> 24) & 0xff;                          //if the current alpha is transparent                          //dont bother/ skip over                          if (currentAlpha == 127)                              continue;                          //calculate the new alpha value given the adjustment                          currentAlpha += (127 - currentAlpha) * alphaAdjustment;                            //make a new color with the new alpha to set the pixel                          currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          pStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,SetAlphaPercentage,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                    for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                          //mask to just get the alpha value (7 bits)                          double currentAlpha = (currentColor >> 24) & 0xff;                          //if the current alpha is transparent                          //dont bother/ skip over                          if (currentAlpha == 127)                              continue;                          //calculate the new alpha value given the adjustment                          currentAlpha += (127 - currentAlpha) * alphaAdjustment;                            //make a new color with the new alpha to set the pixel                          currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          pStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,SetAlphaPercentage,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                    for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                          //mask to just get the alpha value (7 bits)                          double currentAlpha = (currentColor >> 24) & 0xff;                          //if the current alpha is transparent                          //dont bother/ skip over                          if (currentAlpha == 127)                              continue;                          //calculate the new alpha value given the adjustment                          currentAlpha += (127 - currentAlpha) * alphaAdjustment;                            //make a new color with the new alpha to set the pixel                          currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          pStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: double currentAlpha = (currentColor >> 24) & 0xff;
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: double currentRed = (currentColor >> 16) & 0xff;
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: double currentBlue = (currentColor >> 8) & 0xff;
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: double[] pixelFinals = new double[4];
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i++)              {                  double sum = 0;                  for (int j = 0; j < pixel.Length; j++)                  {                      //should alpha be dealt with seperately???????????? :(                      //which direction should it go...                      if(i == 0 && j == 0)                      {                          sum += pixel[j] + ((127 - pixel[j]) * (1 - matrixMultiplier[j' i]));                        }                      else                      {                          sum += pixel[j] * matrixMultiplier[j' i];                      }                  }                  if(sum > 255)                  {                      sum = 255;                  }                    //deal with overflow that is not intentional negation                  pixelFinals[i] = (int)sum & 0xff;              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i++)              {                  double sum = 0;                  for (int j = 0; j < pixel.Length; j++)                  {                      //should alpha be dealt with seperately???????????? :(                      //which direction should it go...                      if(i == 0 && j == 0)                      {                          sum += pixel[j] + ((127 - pixel[j]) * (1 - matrixMultiplier[j' i]));                        }                      else                      {                          sum += pixel[j] * matrixMultiplier[j' i];                      }                  }                  if(sum > 255)                  {                      sum = 255;                  }                    //deal with overflow that is not intentional negation                  pixelFinals[i] = (int)sum & 0xff;              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i++)              {                  double sum = 0;                  for (int j = 0; j < pixel.Length; j++)                  {                      //should alpha be dealt with seperately???????????? :(                      //which direction should it go...                      if(i == 0 && j == 0)                      {                          sum += pixel[j] + ((127 - pixel[j]) * (1 - matrixMultiplier[j' i]));                        }                      else                      {                          sum += pixel[j] * matrixMultiplier[j' i];                      }                  }                  if(sum > 255)                  {                      sum = 255;                  }                    //deal with overflow that is not intentional negation                  pixelFinals[i] = (int)sum & 0xff;              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]);
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]);
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]);
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]);
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,ApplyFilter,The following statement contains a magic number: currentColor = ((int)pixelFinals[0] << 24) | ((int)pixelFinals[1] << 16) | ((int)pixelFinals[2] << 8) | ((int)pixelFinals[3]);
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,Draw,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStructSource = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                  DLLImports.gdImageStruct* pStructDest = (DLLImports.gdImageStruct*)destinationImage.gdImageStructPtr;                    //loop through the source image                  for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          //ignores what falls outside the bounds of dsetination image                          if ((y + yOffset) >= destinationImage.HeightInPixels || (x + xOffset) >= destinationImage.WidthInPixels)                          {                              continue;                          }                                                    int sourceColor = pStructSource->tpixels[y][x];                          int alpha = (sourceColor >> 24) & 0xff;                          //should not have 127 as magic                          if (alpha == 127)                          {                              continue;                          }                          int destColor = pStructDest->tpixels[y + yOffset][x + xOffset];                          int blendedColor = DLLImports.gdAlphaBlend(destColor' sourceColor);                            pStructDest->tpixels[y + yOffset][x + xOffset] = blendedColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,Draw,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStructSource = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                  DLLImports.gdImageStruct* pStructDest = (DLLImports.gdImageStruct*)destinationImage.gdImageStructPtr;                    //loop through the source image                  for (int y = 0; y < sourceImage.HeightInPixels; y++)                  {                      for (int x = 0; x < sourceImage.WidthInPixels; x++)                      {                          //ignores what falls outside the bounds of dsetination image                          if ((y + yOffset) >= destinationImage.HeightInPixels || (x + xOffset) >= destinationImage.WidthInPixels)                          {                              continue;                          }                                                    int sourceColor = pStructSource->tpixels[y][x];                          int alpha = (sourceColor >> 24) & 0xff;                          //should not have 127 as magic                          if (alpha == 127)                          {                              continue;                          }                          int destColor = pStructDest->tpixels[y + yOffset][x + xOffset];                          int blendedColor = DLLImports.gdAlphaBlend(destColor' sourceColor);                            pStructDest->tpixels[y + yOffset][x + xOffset] = blendedColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: if (sourceImage.HeightInPixels < sourceImage.WidthInPixels)              {                  radius = sourceImage.HeightInPixels / 2;              }                else              {                  radius = sourceImage.WidthInPixels / 2;              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: if (sourceImage.HeightInPixels < sourceImage.WidthInPixels)              {                  radius = sourceImage.HeightInPixels / 2;              }                else              {                  radius = sourceImage.WidthInPixels / 2;              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: diameter = 2 * radius;
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                  DLLImports.gdImageStruct* fStruct = (DLLImports.gdImageStruct*)destinationImage.gdImageStructPtr;                    for (int y = 0; y < diameter; y++)                  {                      for (int x = 0; x < diameter; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                            if ((x - radius - xOffset) * (x - radius - xOffset) + (y - radius - yOffset) * (y - radius - yOffset) > (radius * radius))                          {                              //mask to just get the alpha value (7 bits)                              double currentAlpha = (currentColor >> 24) & 0xff;                              currentAlpha = 127;                              //make a new color with the new alpha to set the pixel                              currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          }                          fStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                  DLLImports.gdImageStruct* fStruct = (DLLImports.gdImageStruct*)destinationImage.gdImageStructPtr;                    for (int y = 0; y < diameter; y++)                  {                      for (int x = 0; x < diameter; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                            if ((x - radius - xOffset) * (x - radius - xOffset) + (y - radius - yOffset) * (y - radius - yOffset) > (radius * radius))                          {                              //mask to just get the alpha value (7 bits)                              double currentAlpha = (currentColor >> 24) & 0xff;                              currentAlpha = 127;                              //make a new color with the new alpha to set the pixel                              currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          }                          fStruct->tpixels[y][x] = currentColor;                      }                  }              }
Magic Number,System.Drawing.Graphics,ImageExtensions,C:\repos\dotnet_corefxlab\src\System.Drawing.Graphics\System\Drawing\Graphics\ImageExtensions.cs,CircleCrop,The following statement contains a magic number: unsafe              {                  DLLImports.gdImageStruct* pStruct = (DLLImports.gdImageStruct*)sourceImage.gdImageStructPtr;                  DLLImports.gdImageStruct* fStruct = (DLLImports.gdImageStruct*)destinationImage.gdImageStructPtr;                    for (int y = 0; y < diameter; y++)                  {                      for (int x = 0; x < diameter; x++)                      {                          int currentColor = pStruct->tpixels[y][x];                            if ((x - radius - xOffset) * (x - radius - xOffset) + (y - radius - yOffset) * (y - radius - yOffset) > (radius * radius))                          {                              //mask to just get the alpha value (7 bits)                              double currentAlpha = (currentColor >> 24) & 0xff;                              currentAlpha = 127;                              //make a new color with the new alpha to set the pixel                              currentColor = (currentColor & 0x00ffffff | ((int)currentAlpha << 24));                          }                          fStruct->tpixels[y][x] = currentColor;                      }                  }              }
