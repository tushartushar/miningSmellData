Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Buffers,SpanLiteralExtensions,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\SpanLiteralExtensions.cs,AppendCharLiteral,Cyclomatic complexity of the method is 13
Long Parameter List,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_Sequence,The method has 5 parameters. Parameters: parser' sequence' splitSequence' min' max
Long Statement,System.Buffers.Tests,BufferWriterTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BufferWriterTests.cs,Writable,The length of the statement  "            Assert.Equal(OperationStatus.Done' Base64.DecodeFromUtf8(writer.Written' AsBytes(ulongerSpan)' out int consumed' out int written)); " is 131.
Long Statement,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The length of the statement  "            Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> sequence' new byte[] { 42' 47 }' advancePastDelimiter));    //  */ " is 122.
Complex Conditional,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateSplitBuffer,The conditional expression  "buffer == null || buffer.Length == 0 || minSize <= 0 || maxSize <= 0 || minSize > maxSize"  is complex.
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WritePlainText,The following statement contains a magic number: DateHeader.SetDateValues(new DateTimeOffset(2018' 3' 16' 10' 22' 15' 10' TimeSpan.FromMilliseconds(0)));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,BufferWriterTransform,The following statement contains a magic number: byte[] buffer = new byte[10];
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,BufferWriterTransform,The following statement contains a magic number: var transformation = new TransformationFormat(new RemoveTransformation(2));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,BufferWriterTransform,The following statement contains a magic number: ReadOnlyMemory<byte> value = new byte[] { 1' 2' 3 };
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,BufferWriterTransform,The following statement contains a magic number: ReadOnlyMemory<byte> value = new byte[] { 1' 2' 3 };
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,BufferWriterTransform,The following statement contains a magic number: Assert.Equal(-1' buffer.AsSpan().IndexOf((byte)2));
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,WriteInt32Transformed,The following statement contains a magic number: writer.Write(255' widen);
Magic Number,System.Buffers.Tests,Sink,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,Sink,The following statement contains a magic number: _buffer = new byte[4096];
Magic Number,System.Buffers.Tests,AsciiToUtf16,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,Transform,The following statement contains a magic number: written = dataLength * 2;
Magic Number,System.Buffers.Tests,AsciiToUtf16,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BasicUnitTests.cs,Transform,The following statement contains a magic number: buffer[i - 1] = buffer[i / 2];
Magic Number,System.Buffers.Tests,BufferWriterTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BufferWriterTests.cs,Basics,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[256];
Magic Number,System.Buffers.Tests,BufferWriterTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BufferWriterTests.cs,Writable,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[256];
Magic Number,System.Buffers.Tests,BufferWriterTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BufferWriterTests.cs,WriteDateTime,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[256];
Magic Number,System.Buffers.Tests,GenericBufferWriterTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\BufferWriterTests_sequence.cs,Writable,The following statement contains a magic number: writer.Write(123);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: var reader = new BufferReader<T>(BufferUtilities.CreateBuffer(GetInputData(5)));
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: reader.Advance(2);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(2' reader.CurrentSpanIndex);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(InputData[2]' reader.CurrentSpan[reader.CurrentSpanIndex]);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(InputData[2]' value);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: reader.Advance(2);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(InputData[4]' value);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(4' reader.CurrentSpanIndex);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceSingleBufferSkipsBytes,The following statement contains a magic number: Assert.Equal(InputData[4]' reader.CurrentSpan[reader.CurrentSpanIndex]);
Magic Number,System.Buffers.Tests,SingleSegment<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,TakeReturnsByteAndMoves,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(2)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,PeekReturnsWithoutMoving,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(2)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,CursorIsCorrectAtEnd,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(2)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,CursorIsCorrectWithEmptyLastBlock,The following statement contains a magic number: last.SetMemory(new OwnedArray<T>(new T[4])' 0' 4);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,CursorIsCorrectWithEmptyLastBlock,The following statement contains a magic number: last.SetMemory(new OwnedArray<T>(new T[4])' 0' 4);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,CursorIsCorrectWithEmptyLastBlock,The following statement contains a magic number: first.SetMemory(new OwnedArray<T>(GetInputData(2))' 0' 2);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,CursorIsCorrectWithEmptyLastBlock,The following statement contains a magic number: first.SetMemory(new OwnedArray<T>(GetInputData(2))' 0' 2);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,PeekReturnsDefaultInTheEnd,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(2)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceToEndThenPeekReturnsDefault,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(5)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceToEndThenPeekReturnsDefault,The following statement contains a magic number: reader.Advance(5);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvancingPastLengthThrows,The following statement contains a magic number: var reader = new BufferReader<T>(Factory.CreateWithContent(GetInputData(5)));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvancingPastLengthThrows,The following statement contains a magic number: reader.Advance(6);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,EmptySegmentsAreSkippedOnMoveNext,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(2));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTraversesSegments,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(3));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTraversesSegments,The following statement contains a magic number: reader.Advance(2);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTraversesSegments,The following statement contains a magic number: Assert.Equal(InputData[2]' reader.CurrentSpan[reader.CurrentSpanIndex]);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTraversesSegments,The following statement contains a magic number: Assert.Equal(InputData[2]' value);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceThrowsPastLengthMultipleSegments,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(3));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceThrowsPastLengthMultipleSegments,The following statement contains a magic number: reader.Advance(4);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,TakeTraversesSegments,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(3));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,TakeTraversesSegments,The following statement contains a magic number: Assert.Equal(InputData[2]' value);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,PeekTraversesSegments,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(2));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,ReturnsCorrectCursor,The following statement contains a magic number: var readableBuffer = Factory.CreateWithContent(GetInputData(10));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,SlicingBufferReturnsCorrectCursor,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(10));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,SlicingBufferReturnsCorrectCursor,The following statement contains a magic number: var sliced = buffer.Slice(2L);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,SlicingBufferReturnsCorrectCursor,The following statement contains a magic number: Assert.Equal(InputData[2]' value);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,ReaderIndexIsCorrect,The following statement contains a magic number: var buffer = Factory.CreateWithContent(GetInputData(10));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,Advance_PositionIsCorrect,The following statement contains a magic number: ReadOnlySequence<T> buffer = Factory.CreateWithContent(GetInputData(10));
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTo,The following statement contains a magic number: T[] inputData = GetInputData(10);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTo_AdvancePast,The following statement contains a magic number: T[] inputData = GetInputData(10);
Magic Number,System.Buffers.Tests,ReaderBasicTests<T>,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBasicTests.cs,AdvanceTo_AdvancePast,The following statement contains a magic number: start < 2
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> ab' 3));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(ab.First.SequenceEqual(new byte[] { 1' 2 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> cd' 6));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(cd.First.SequenceEqual(new byte[] { 4' 5 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(cd.First.SequenceEqual(new byte[] { 4' 5 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> ef' new byte[] { 8' 9 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> ef' new byte[] { 8' 9 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SingleSegmentBytesReader,The following statement contains a magic number: Assert.True(ef.First.SequenceEqual(new byte[] { 7 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: var bytes = singleSegment                  ? new ReadOnlySequence<byte>(buffer)                  : BufferUtilities.CreateSplitBuffer(buffer' 2' 4);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: var bytes = singleSegment                  ? new ReadOnlySequence<byte>(buffer)                  : BufferUtilities.CreateSplitBuffer(buffer' 2' 4);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.False(skipReader.TryAdvanceTo(10));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.True(skipReader.TryAdvanceTo(4' advancePastDelimiter: false));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(4' value);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.True(skipReader.TryAdvanceToAny(new byte[] { 3' 12' 7 }' advancePastDelimiter: false));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.True(skipReader.TryAdvanceToAny(new byte[] { 3' 12' 7 }' advancePastDelimiter: false));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.True(skipReader.TryAdvanceToAny(new byte[] { 3' 12' 7 }' advancePastDelimiter: false));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(7' value);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(1' skipReader.AdvancePast(8));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(9' value);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(0' skipReader.AdvancePast(2));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(3' skipReader.AdvancePastAny(new byte[] { 2' 3' 1 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(3' skipReader.AdvancePastAny(new byte[] { 2' 3' 1 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(3' skipReader.AdvancePastAny(new byte[] { 2' 3' 1 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,SkipTests,The following statement contains a magic number: Assert.Equal(4' value);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: var bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }'                  new byte[] { 8' 0       }'                  new byte[] { 1'         }'                  new byte[] { 0' 2'      }'                  new byte[] { 1' 2' 3' 4 }'                  new byte[] { 5' 6       }'                  new byte[] { 7' 8' 9'   }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4' 5       }'                  new byte[] { 6' 7' 8' 9 }'                  new byte[] { 0' 1' 2' 3 }'                  new byte[] { 4          }'              });
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> bytesValue' 2));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.True(reader.TryReadTo(out bytesValue' 5));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(3' span[0]);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(4' span[1]);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.True(reader.TryReadTo(out bytesValue' new byte[] { 8' 8 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.True(reader.TryReadTo(out bytesValue' new byte[] { 8' 8 }));
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(6' span[0]);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(7' span[1]);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt32(new byte[] { 0' 1' 0' 2 })' intValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt32(new byte[] { 4' 3' 2' 1 })' intValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt32(new byte[] { 4' 3' 2' 1 })' intValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt32(new byte[] { 4' 3' 2' 1 })' intValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 5' 6' 7' 8' 9' 0' 1' 2 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt64(new byte[] { 0' 9' 8' 7' 6' 5' 4' 3 })' longValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt16(new byte[] { 1' 2 })' shortValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt16(new byte[] { 4' 3 })' shortValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,MultiSegmentBytesReaderNumbers,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt16(new byte[] { 4' 3 })' shortValue);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,BytesReaderParse,The following statement contains a magic number: Assert.Equal(123' l64);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,BytesReaderParse,The following statement contains a magic number: Assert.Equal(456' l64);
Magic Number,System.Buffers.Tests,BytesReaderTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReaderBytesTests.cs,BytesReaderParse,The following statement contains a magic number: Assert.Equal(789' l64);
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 2 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 2 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 3 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 4 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 4 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: false));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.False(reader.IsNext(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 0' 1' 2' 3 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 4' 5' 6 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 4' 5' 6 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.True(reader.IsNext(new byte[] { 4' 5' 6 }' advancePast: true));
Magic Number,System.Buffers.Tests,Reader_IsNext,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_IsNext.cs,IsNext_Span,The following statement contains a magic number: Assert.Equal(7' value);
Magic Number,System.Buffers.Tests,Reader_ParseFloatingPoint,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseFloatingPoint.cs,TryParse_Special,The following statement contains a magic number: Assert.Equal(8' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseFloatingPoint,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseFloatingPoint.cs,TryParse_Special,The following statement contains a magic number: Assert.Equal(8' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseFloatingPoint,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseFloatingPoint.cs,TryParse_Special,The following statement contains a magic number: Assert.Equal(9' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseFloatingPoint,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseFloatingPoint.cs,TryParse_Special,The following statement contains a magic number: Assert.Equal(9' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseFloatingPoint,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseFloatingPoint.cs,TryParse_Special,The following statement contains a magic number: Assert.Equal(3' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,Reader_ParseInteger,The following statement contains a magic number: BufferUtilities.FillIntegerUtf8Array(s_array' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,Reader_ParseInteger,The following statement contains a magic number: s_rosSplit = BufferUtilities.CreateSplitBuffer(s_array' 1' 11);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,Reader_ParseInteger,The following statement contains a magic number: BufferUtilities.FillIntegerUtf8Array(s_signedArray' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,Reader_ParseInteger,The following statement contains a magic number: BufferUtilities.FillIntegerUtf8Array(s_signedArray' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,Reader_ParseInteger,The following statement contains a magic number: s_rosSignedSplit = BufferUtilities.CreateSplitBuffer(s_signedArray' 1' 11);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteBasic,The following statement contains a magic number: TryParse_Sequence<byte>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteBasic,The following statement contains a magic number: TryParse_Sequence<sbyte>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteBasic,The following statement contains a magic number: TryParse_Sequence<sbyte>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteBasic,The following statement contains a magic number: TryParse_Sequence<sbyte>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortBasic,The following statement contains a magic number: TryParse_Sequence<ushort>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortBasic,The following statement contains a magic number: TryParse_Sequence<short>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortBasic,The following statement contains a magic number: TryParse_Sequence<short>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortBasic,The following statement contains a magic number: TryParse_Sequence<short>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntBasic,The following statement contains a magic number: TryParse_Sequence<uint>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntBasic,The following statement contains a magic number: TryParse_Sequence<int>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntBasic,The following statement contains a magic number: TryParse_Sequence<int>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntBasic,The following statement contains a magic number: TryParse_Sequence<int>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongBasic,The following statement contains a magic number: TryParse_Sequence<ulong>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongBasic,The following statement contains a magic number: TryParse_Sequence<long>(ReaderExtensions.TryParse' s_ros' s_rosSplit' 0' 123);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongBasic,The following statement contains a magic number: TryParse_Sequence<long>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongBasic,The following statement contains a magic number: TryParse_Sequence<long>(ReaderExtensions.TryParse' s_rosSigned' s_rosSignedSplit' -119' 119);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(-12345' value);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(6' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(2' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(-12345' value);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(20' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(2' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: reader.Advance(3);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_MultiSegment,The following statement contains a magic number: Assert.Equal(11' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' byte.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' sbyte.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ByteLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' sbyte.MinValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' ushort.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' short.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_ShortLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' short.MinValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' uint.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' int.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_IntLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' int.MinValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' ulong.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' long.MaxValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LongLeadingZeroes,The following statement contains a magic number: TryParse_LeadingZeroes(ReaderExtensions.TryParse' long.MinValue / 2' formatString' standardFormat);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LeadingZeroes,The following statement contains a magic number: reader.Advance(140);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LeadingZeroes,The following statement contains a magic number: Assert.Equal(140' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParse_LeadingZeroes,The following statement contains a magic number: Assert.True(reader.Consumed > 20' "should have consumed all of the leading zeroes");
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_SingleNonDigit,The following statement contains a magic number: Assert.Equal(-123' value);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_SingleNonDigit,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_SingleNonDigit,The following statement contains a magic number: Assert.Equal(123' value);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_SingleNonDigit,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseInteger,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseInteger.cs,TryParseInt_SingleNonDigit,The following statement contains a magic number: Assert.Equal(2' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseStruct,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseStruct.cs,TryParseGuid_MultiSegment,The following statement contains a magic number: Assert.Equal(36' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseStruct,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseStruct.cs,TryParseGuid_MultiSegment,The following statement contains a magic number: Assert.Equal(36' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseStruct,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseStruct.cs,TryParseGuid_MultiSegment,The following statement contains a magic number: Assert.Equal(36' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ParseStruct,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ParseStruct.cs,TryParseGuid_MultiSegment,The following statement contains a magic number: Assert.Equal(38' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out ReadOnlySpan<byte> span' i' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' i' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Span,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out span' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out span' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0 }'                  new byte[] { 1' 2 }'                  new byte[] { }'                  new byte[] { 3' 4' 5' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out ReadOnlySequence<byte> sequence' i' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' i' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.True(                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_Sequence,The following statement contains a magic number: Assert.Equal(!advancePastDelimiter'                      useEscapeOverload                          ? copy.TryReadTo(out sequence' 6' 255' advancePastDelimiter)                          : copy.TryReadTo(out sequence' 6' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0' 0 }'                  new byte[] { 1' 1' 2' 2 }'                  new byte[] { }'                  new byte[] { 3' 3' 4' 4' 5' 5' 6' 6 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: byte[] expected = new byte[i * 2 + 1];
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: expected[j] = (byte)(j / 2);
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: expected[i * 2] = i;
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: i < bytes.Length / 2 - 1
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 47' 42' 66' 32' 42' 32' 66' 42' 47 }   // /*b * b*/              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> sequence' new byte[] { 42' 47 }' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(reader.TryReadTo(out ReadOnlySequence<byte> sequence' new byte[] { 42' 47 }' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadToSpan_Sequence,The following statement contains a magic number: Assert.True(sequence.ToArray().AsSpan().SequenceEqual(new byte[] { 47' 42' 66' 32' 42' 32' 66 }));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Span,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Span,The following statement contains a magic number: reader.Advance(4);
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Span,The following statement contains a magic number: Assert.False(reader.TryReadTo(out ReadOnlySpan<byte> span' 255' 0' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Sequence,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 1 }'                  new byte[] { 2' 3' 255 }              });
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Sequence,The following statement contains a magic number: reader.Advance(4);
Magic Number,System.Buffers.Tests,Reader_ReadTo,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_ReadTo.cs,TryReadTo_NotFound_Sequence,The following statement contains a magic number: Assert.False(reader.TryReadTo(out ReadOnlySequence<byte> span' 255' 0' advancePastDelimiter));
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_Rewind,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_Rewind.cs,Rewind_ByOne,The following statement contains a magic number: ReadOnlySequence<byte> bytes = BufferFactory.Create(new byte[][] {                  new byte[] { 0          }'                  new byte[] { 1' 2       }'                  new byte[] { 3' 4       }'                  new byte[] { 5' 6' 7' 8 }              });
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(8' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_Runs,The following statement contains a magic number: Assert.Equal(5' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_Runs,The following statement contains a magic number: Assert.Equal(5' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_Runs,The following statement contains a magic number: Assert.Equal(5' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_Runs,The following statement contains a magic number: Assert.Equal(6' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_Runs,The following statement contains a magic number: Assert.Equal(2' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(29' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(30' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(8' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,Reader_SkipDelimiter,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\Reader_SkipDelimiter.cs,TryReadTo_SkipDelimiter_ReadOnlySequence,The following statement contains a magic number: Assert.Equal(4' reader.Consumed);
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateBuffer,The following statement contains a magic number: T[] chars = new T[length * 8];
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateBuffer,The following statement contains a magic number: current.SetMemory(ownedBuffer' length' length * 2);
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,FillIntegerUtf8Array,The following statement contains a magic number: int next = r.Next(minValue + 1' maxValue) + r.Next(-1' 2);
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,FillIntegerUtf8Array,The following statement contains a magic number: next = r.Next(minValue + 1' maxValue) + r.Next(-1' 2);
Magic Number,System.IO.Pipelines.Tests,ArrayTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateOfSize,The following statement contains a magic number: return new ReadOnlySequence<T>(new T[size + 20]' 10' size);
Magic Number,System.IO.Pipelines.Tests,ArrayTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateOfSize,The following statement contains a magic number: return new ReadOnlySequence<T>(new T[size + 20]' 10' size);
Magic Number,System.IO.Pipelines.Tests,ArrayTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: var startSegment = new T[data.Length + 20];
Magic Number,System.IO.Pipelines.Tests,ArrayTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: System.Array.Copy(data' 0' startSegment' 10' data.Length);
Magic Number,System.IO.Pipelines.Tests,ArrayTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: return new ReadOnlySequence<T>(startSegment' 10' data.Length);
Magic Number,System.IO.Pipelines.Tests,MemoryTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: var startSegment = new T[data.Length + 20];
Magic Number,System.IO.Pipelines.Tests,MemoryTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: System.Array.Copy(data' 0' startSegment' 10' data.Length);
Magic Number,System.IO.Pipelines.Tests,MemoryTestBufferFactory,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.ReaderWriter.Tests\ReadOnlyBufferFactory.cs,CreateWithContent,The following statement contains a magic number: return new ReadOnlySequence<T>(new Memory<T>(startSegment' 10' data.Length));
