Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,BufferBasics,Cyclomatic complexity of the method is 8
Complex Method,System.Buffers,SpanLiteralExtensions,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\SpanLiteralExtensions.cs,AppendCharLiteral,Cyclomatic complexity of the method is 13
Long Parameter List,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SequentialEqualityOfSpansOfFloatingPointTypesDoesNotUseBitwiseComparison,The method has 5 parameters. Parameters: negativeInfinity' positiveInfinity' negativeZero' positiveZero' NaN
Long Parameter List,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,SpanOfByteCopyToAnotherSpanOfByteTwoDifferentBuffersValidCases,The method has 7 parameters. Parameters: expected' a' aidx' acount' b' bidx' bcount
Long Parameter List,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,ReadOnlySpanOfByteCopyToAnotherSpanOfByteTwoDifferentBuffersValidCases,The method has 7 parameters. Parameters: expected' a' aidx' acount' b' bidx' bcount
Long Parameter List,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,ReadOnlySpanOfByteCopyToAnotherSpanOfByteTwoDifferentBuffersValidCasesNative,The method has 7 parameters. Parameters: expected' a' aidx' acount' b' bidx' bcount
Long Parameter List,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,SpanCopyToArrayTwoDifferentBuffersValidCases,The method has 5 parameters. Parameters: expected' a' aidx' acount' b
Long Parameter List,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,ROSpanCopyToArrayTwoDifferentBuffersValidCases,The method has 5 parameters. Parameters: expected' a' aidx' acount' b
Long Identifier,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,EmptySpansAreSequentiallyAndStructurallyEqual,The length of the parameter spanFromNonEmptyArrayButWithZeroLength is 38.
Long Identifier,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SequentialEqualityOfSpansOfFloatingPointTypesDoesNotUseBitwiseComparison,The length of the parameter elementsCountThatNormallyWouldInvolveMemCmp is 43.
Long Statement,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SequentialEqualityOfSpansOfFloatingPointTypesDoesNotUseBitwiseComparison,The length of the statement  "            var negativeInfinities = Enumerable.Repeat(negativeInfinity' elementsCountThatNormallyWouldInvolveMemCmp).ToArray().AsSpan(); " is 125.
Long Statement,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SequentialEqualityOfSpansOfFloatingPointTypesDoesNotUseBitwiseComparison,The length of the statement  "            var positiveInfinities = Enumerable.Repeat(positiveInfinity' elementsCountThatNormallyWouldInvolveMemCmp).ToArray().AsSpan(); " is 125.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartUInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartLengthInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartLengthUInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,CastOverflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartUInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartLengthInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartLengthUInt32Overflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyCastOverflow,The length of the statement  "                return;  // It's not implausible to believe that a 3gb allocation will fail - if so' skip this test to avoid unnecessary test flakiness. " is 136.
Long Statement,System.Slices.Tests,UsageScenarioTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\UsageScenarioTests.cs,ReadOnlySpanOfByteCopyToAnotherSpanOfByteTwoDifferentBuffersValidCases,The length of the statement  "            ReadOnlySpanOfByteCopyToAnotherSpanOfByteTwoDifferentBuffersValidCasesNative(expected' a' aidx' acount' b' bidx' bcount); " is 121.
Complex Conditional,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateSplitBuffer,The conditional expression  "buffer == null || buffer.Length == 0 || minSize <= 0 || maxSize <= 0 || minSize > maxSize"  is complex.
Empty Catch Block,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SpansMustNotBeBoxed,The method has an empty catch block.
Empty Catch Block,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SpansMustNotBeBoxed,The method has an empty catch block.
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,ByteSpanEqualsTestsTwoDifferentInstancesOfBuffersWithOneValueDifferent,The following statement contains a magic number: const int bufferLength = 128;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,ByteReadOnlySpanEqualsTestsTwoDifferentInstancesOfBuffersWithOneValueDifferent,The following statement contains a magic number: const int bufferLength = 128;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetSpan,The following statement contains a magic number: var destination = new Span<byte>(new byte[100]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetSpan,The following statement contains a magic number: var source = new Span<byte>(new byte[] { 1' 2' 3 });
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetSpan,The following statement contains a magic number: var source = new Span<byte>(new byte[] { 1' 2' 3 });
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetArray,The following statement contains a magic number: var destination = new Span<byte>(new byte[100]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetArray,The following statement contains a magic number: var source = new byte[] { 1' 2' 3 };
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,SetArray,The following statement contains a magic number: var source = new byte[] { 1' 2' 3 };
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,CovariantSlicesNotSupported1,The following statement contains a magic number: object[] array = new string[10];
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,CovariantSlicesNotSupported2,The following statement contains a magic number: object[] array = new string[10];
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,CovariantSlicesNotSupported3,The following statement contains a magic number: object[] array = new string[10];
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,CovariantSlicesNotSupported3,The following statement contains a magic number: var slice = new Span<object>(array' 0' 10);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: MemoryManager<byte> owned = new CustomMemoryForTest<byte>(new byte[1024]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: span[5] = 42;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: span[5] = 42;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: sliceSpan[10] = 24;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: sliceSpan[10] = 24;
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: GC.Collect(2);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: Assert.Equal(42' span[5]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: Assert.Equal(42' span[5]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: Assert.Equal(24' sliceSpan[10]);
Magic Number,System.Buffers.Tests,BasicUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BasicUnitTests.cs,OwnedBufferDisposedAfterFinalizerGCKeepAliveTest,The following statement contains a magic number: Assert.Equal(24' sliceSpan[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: span[10] = 10;
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: span[10] = 10;
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' span[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' span[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' memory.Span[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' memory.Span[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' array[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' array[10]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Span<byte> copy = new byte[20];
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: memory.Span.Slice(10' 20).CopyTo(copy);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: memory.Span.Slice(10' 20).CopyTo(copy);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,MemoryAccessBasics,The following statement contains a magic number: Assert.Equal(10' copy[0]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,Span,The following statement contains a magic number: span[i] = (byte)(i % 254 + 1);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,Span,The following statement contains a magic number: var slice = buffer.GetSpan().Slice(5' memory.Length - 5);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,Span,The following statement contains a magic number: var slice = buffer.GetSpan().Slice(5' memory.Length - 5);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,Span,The following statement contains a magic number: Assert.Equal(span.Length - 5' slice.Length);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,Span,The following statement contains a magic number: Assert.Equal(span[i + 5]' slice[i]);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,BufferLifetimeBasics,The following statement contains a magic number: Memory<byte> slice = memory.Slice(10);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,BufferLifetimeBasicsAuto,The following statement contains a magic number: Memory<byte> slice = memory.Slice(10);
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,BufferBasics,The following statement contains a magic number: span[i] = 100;
Magic Number,System.Buffers.Tests,BufferReferenceTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTesting.cs,BufferBasics,The following statement contains a magic number: slice.Span[i] = 101;
Magic Number,System.Buffers.Tests,BufferReferenceUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTests.cs,OwnedArrayReferenceTests,The following statement contains a magic number: BufferReferenceTests.TestMemoryManager(() => {                  return new CustomMemoryForTest<byte>(new byte[1024]);              });
Magic Number,System.Buffers.Tests,BufferReferenceUnitTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferReferenceTests.cs,ArrayBufferReferenceTests,The following statement contains a magic number: BufferReferenceTests.TestBuffer(() => {                  return (Memory<byte>)new byte[1024];              });
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateBuffer,The following statement contains a magic number: T[] chars = new T[length * 8];
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,CreateBuffer,The following statement contains a magic number: current.SetMemory(ownedBuffer' length' length * 2);
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,FillIntegerUtf8Array,The following statement contains a magic number: int next = r.Next(minValue + 1' maxValue) + r.Next(-1' 2);
Magic Number,System.Buffers.Tests,BufferUtilities,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\BufferUtilities.cs,FillIntegerUtf8Array,The following statement contains a magic number: next = r.Next(minValue + 1' maxValue) + r.Next(-1' 2);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,TryWrite,The following statement contains a magic number: Span<byte> buffer = new byte[4];
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,TryWrite,The following statement contains a magic number: Assert.Equal(255' buffer[i]);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: var ints = new int[100000];
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Random r = new Random(42324232);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4]' (ints[i] & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 1]' (ints[i] >> 8 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 1]' (ints[i] >> 8 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 2]' (ints[i] >> 16 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 2]' (ints[i] >> 16 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 2]' (ints[i] >> 16 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 3]' (ints[i] >> 24 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 3]' (ints[i] >> 24 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,IntArraySpanCastedToByteArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(bytes[i * 4 + 3]' (ints[i] >> 24 & 0xff));
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,ByteArraySpanCastedToIntArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: var bytes = new byte[100000];
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,ByteArraySpanCastedToIntArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Random r = new Random(541345);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,ByteArraySpanCastedToIntArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: bytes[i] = (byte)r.Next(256);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,ByteArraySpanCastedToIntArraySpanHasSameBytesAsOriginalArray,The following statement contains a magic number: Assert.Equal(BitConverter.ToInt32(bytes' i * 4)' ints[i]);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,SourceTypeLargerThanTargetOneCorrectlyCalcsTargetsLength,The following statement contains a magic number: Assert.Equal((sourceLength * 7) / sizeof(short)' targetSlice.Length);
Magic Number,System.Buffers.Tests,CastTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\CastTests.cs,WhenSourceTypeLargerThaTargetAndOverflowsInt32ThrowsException,The following statement contains a magic number: int sourceLength = 620000000;
Magic Number,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,EmptySpansAreSequentiallyAndStructurallyEqual,The following statement contains a magic number: var spanFromNonEmptyArrayButWithZeroLength = new int[1] { 123 }.AsSpan(0' 0);
Magic Number,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SlicesReferencingBothHeapsAndStackCanBeComparedForEquality,The following statement contains a magic number: const int arraySize = 100;
Magic Number,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,ReadOnlySlicesReferencingBothHeapsAndStackCanBeComparedForEquality,The following statement contains a magic number: const int arraySize = 100;
Magic Number,System.Buffers.Tests,EqualityTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,SequentialEqualityOfSpansOfFloatingPointTypesDoesNotUseBitwiseComparison,The following statement contains a magic number: const int elementsCountThatNormallyWouldInvolveMemCmp = 1000;
Magic Number,System.Buffers.Tests,CustomStructWithNonTrivialEquals,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\EqualityTests.cs,Equals,The following statement contains a magic number: return Field == other.Field + 1245;
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,FindInUniqueValues,The following statement contains a magic number: var range = Enumerable.Range(0' 10).ToArray();
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,FindInNonUniqueValues,The following statement contains a magic number: var range = Enumerable.Range(0' 10).ToArray();
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,DontFindNonExisting,The following statement contains a magic number: var range = Enumerable.Range(0' 10).ToArray();
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,DontFindNonExisting,The following statement contains a magic number: NonExistingValuesFailure(                  range.Take(5).ToArray()'                  range.Skip(5).ToArray());
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,DontFindNonExisting,The following statement contains a magic number: NonExistingValuesFailure(                  range.Take(5).ToArray()'                  range.Skip(5).ToArray());
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,DontFindNonExisting,The following statement contains a magic number: NonExistingValuesFailure(                  guids.Take(5).ToArray()'                  guids.Skip(5).ToArray());
Magic Number,System.Buffers.Tests,IndexOfTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\IndexOfTests.cs,DontFindNonExisting,The following statement contains a magic number: NonExistingValuesFailure(                  guids.Take(5).ToArray()'                  guids.Skip(5).ToArray());
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartLengthInt32Overflow,The following statement contains a magic number: var slice = span.Slice(GuidTwoGiBLimit + 1' 20);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,SliceStartLengthUInt32Overflow,The following statement contains a magic number: var slice = span.Slice(GuidTwoGiBLimit + 1' 20);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartOverflow,The following statement contains a magic number: var arr = new Guid[20];
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartOverflow,The following statement contains a magic number: var slice = arr.AsSpan(2);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartOverflow,The following statement contains a magic number: Assert.Equal(guid' arr[3]);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartLengthOverflow,The following statement contains a magic number: var arr = new Guid[20];
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartLengthOverflow,The following statement contains a magic number: var slice = arr.AsSpan(2' 2);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartLengthOverflow,The following statement contains a magic number: var slice = arr.AsSpan(2' 2);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ArrayCtorStartLengthOverflow,The following statement contains a magic number: Assert.Equal(guid' arr[3]);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,CastOverflow,The following statement contains a magic number: asULong[ULongTwoGiBLimit + 4] = 42;
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,CastOverflow,The following statement contains a magic number: asULong[ULongTwoGiBLimit + 4] = 42;
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,CastOverflow,The following statement contains a magic number: Assert.Equal((ulong)42' span[ULongTwoGiBLimit + 4]);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,CastOverflow,The following statement contains a magic number: Assert.Equal((ulong)42' span[ULongTwoGiBLimit + 4]);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartLengthInt32Overflow,The following statement contains a magic number: var slice = span.Slice(GuidTwoGiBLimit + 1' 20);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlySliceStartLengthUInt32Overflow,The following statement contains a magic number: var slice = span.Slice(GuidTwoGiBLimit + 1' 20);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyArrayCtorStartLengthOverflow,The following statement contains a magic number: var arr = new Guid[20];
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyArrayCtorStartLengthOverflow,The following statement contains a magic number: var slice = new ReadOnlySpan<Guid>(arr' 2' 2);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyArrayCtorStartLengthOverflow,The following statement contains a magic number: var slice = new ReadOnlySpan<Guid>(arr' 2' 2);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyArrayCtorStartLengthOverflow,The following statement contains a magic number: arr[3] = guid;
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyCastOverflow,The following statement contains a magic number: writable[ULongTwoGiBLimit + 4] = 42;
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyCastOverflow,The following statement contains a magic number: writable[ULongTwoGiBLimit + 4] = 42;
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyCastOverflow,The following statement contains a magic number: Assert.Equal((ulong)42' asULong[ULongTwoGiBLimit + 4]);
Magic Number,System.Buffers.Tests,OverflowTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Buffers.Primitives.Tests\OverflowTests.cs,ReadOnlyCastOverflow,The following statement contains a magic number: Assert.Equal((ulong)42' asULong[ULongTwoGiBLimit + 4]);
