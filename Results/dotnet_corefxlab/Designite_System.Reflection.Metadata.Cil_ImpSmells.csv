Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Reflection.Metadata.Cil,CilField,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilField.cs,GetContractFlags,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata.Cil,CilMethodDefinition,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilMethodDefinition.cs,GetContractFlags,Cyclomatic complexity of the method is 11
Complex Method,System.Reflection.Metadata.Cil.Decoder,CilTypeProvider,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilTypeProvider.cs,GetParameterList,Cyclomatic complexity of the method is 8
Complex Method,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,Cyclomatic complexity of the method is 11
Long Parameter List,System.Reflection.Metadata.Cil,CilExceptionRegion,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilExceptionRegion.cs,CilExceptionRegion,The method has 5 parameters. Parameters: kind' catchType' startOffset' filterHandlerStart' endOffset
Long Parameter List,System.Reflection.Metadata.Cil.Instructions,CilStringInstruction,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Instructions\CilStringInstruction.cs,CilStringInstruction,The method has 5 parameters. Parameters: opCode' value' token' size' isPrintable
Long Parameter List,System.Reflection.Metadata.Cil.Instructions,CilSwitchInstruction,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Instructions\CilSwitchInstruction.cs,CilSwitchInstruction,The method has 6 parameters. Parameters: opCode' ilOffset' jumps' token' value' size
Long Parameter List,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,WriteMethodBody,The method has 6 parameters. Parameters: methodDefinition' exceptionRegions' instructionIndex' ilOffset' regionIndex' nextRegionIndex
Long Identifier,System.Reflection.Metadata.Cil,CilModuleDefinition,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilModuleDefinition.cs,,The length of the parameter _isBaseGenerationIdIsInitialized is 32.
Long Identifier,System.Reflection.Metadata.Cil,CilTypeDefinition,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilTypeDefinition.cs,,The length of the parameter _methodImplementationDictionary is 31.
Long Statement,System.Reflection.Metadata.Cil,CilField,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilField.cs,GetSignature,The length of the statement  "            return string.Format("{0}{1} {2}{3} {4}"' GetAccessibilityFlags()' GetContractFlags()' GetMarshalAttributes()' Type 'Name); " is 123.
Long Statement,System.Reflection.Metadata.Cil,CilMethodDefinition,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilMethodDefinition.cs,GetDecodedSignature,The length of the statement  "            return String.Format("{0}{1} {2}{3}{4} {5}"' attributes' signature.ToString()' Name' GetGenericParametersString()' GetParameterListString()' GetImplementationFlags()); " is 167.
Long Statement,System.Reflection.Metadata.Cil,CilMethodImport,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilMethodImport.cs,GetFlags,The length of the statement  "            return string.Format("{0}{1}{2}{3}{4}{5}"' noMangle' GetFormatFlags()' lastError' GetCallingConventionFlags()' GetBestFitFlags()' GetCharMapErrorFlag()); " is 153.
Long Statement,System.Reflection.Metadata.Cil,CilProperty,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilProperty.cs,GetDecodedSignature,The length of the statement  "            return string.Format("{0}{1} {2}{3}"' attributes' signature.ToString()' Name' CilDecoder.DecodeSignatureParamerTypes(Signature)); " is 129.
Long Statement,System.Reflection.Metadata.Cil,SignatureDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\SignatureDecoder.cs,NewDecoder,The length of the statement  "            return new SignatureDecoder<CilType>(provider' provider.Reader' SignatureDecoderOptions.DifferentiateClassAndValueTypes); " is 121.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,CreateVersionString,The length of the statement  "            return String.Format("{0}:{1}:{2}:{3}"' version.Major.ToString()' version.Minor.ToString()' build.ToString()' revision.ToString()); " is 131.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeEntityHandle,The length of the statement  "            throw new BadImageFormatException("Event definition type must be either type reference' type definition or type specification"); " is 128.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "            return DecodeMethodBody(methodDefinition.IlReader' methodDefinition._readers.MdReader' methodDefinition.Provider' methodDefinition); " is 132.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,HasArgument,The length of the statement  "            bool isLoad = opCode == OpCodes.Ldarg || opCode == OpCodes.Ldarga || opCode == OpCodes.Ldarga_S || opCode == OpCodes.Ldarg_S; " is 125.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                    //The instruction size is the expected size (1 or 2 depending if it is a one or two byte instruction) + the size of the operand. " is 128.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilStringInstruction(opCode' str' intOperand' expectedSize + (int)CilInstructionSize.Int32' isPrintable); " is 123.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilDoubleInstruction(opCode' ilReader.ReadDouble()' -1' expectedSize + (int)CilInstructionSize.Double); " is 121.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilInt16BranchInstruction(opCode' ilReader.ReadSByte()' ilOffset' expectedSize + (int)CilInstructionSize.Byte); " is 129.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilBranchInstruction(opCode' ilReader.ReadInt32()' ilOffset' expectedSize + (int)CilInstructionSize.Int32); " is 125.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilSingleInstruction(opCode' ilReader.ReadSingle()' -1' expectedSize + (int)CilInstructionSize.Single); " is 121.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilInt16VariableInstruction(opCode' GetVariableName(opCode' token' methodDefinition)' token' expectedSize + (int)CilInstructionSize.Byte); " is 156.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilVariableInstruction(opCode' GetVariableName(opCode' shortOperand' methodDefinition)' shortOperand' expectedSize + (int)CilInstructionSize.Int16); " is 166.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The length of the statement  "                        instruction = new CilStringInstruction(opCode' GetSignature(metadataReader' intOperand' provider)' intOperand' expectedSize + (int)CilInstructionSize.Int32); " is 157.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,ProcessAndNormalizeString,The length of the statement  "                if (category == UnicodeCategory.Control || category == UnicodeCategory.OtherNotAssigned || category == UnicodeCategory.OtherSymbol || c == '"') " is 143.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,GetMemberRef,The length of the statement  "                return String.Format("{0} {1}::{2}{3}{4}"' signatureValue' type' GetString(metadataReader' reference.Name)' genericParameterSignature'parameters); " is 146.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,SolveMethodName,The length of the statement  "            return string.Format("{0} {1}::{2}{3}{4}"'returnType' parentType.ToString(false)' GetString(metadataReader' definition.Name)' genericParameters' parameters); " is 157.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,GetFieldInformation,The length of the statement  "            return String.Format("{0} {1}::{2}"' signature.ToString()' typeSignature.ToString(false)' GetString(metadataReader' definition.Name)); " is 134.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilTypeProvider,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilTypeProvider.cs,GetFullName,The length of the statement  "                    return String.Format("[.module {0}]{1}"' Reader.GetString(Reader.GetModuleReference((ModuleReferenceHandle)resolutionScope).Name)' name); " is 137.
Long Statement,System.Reflection.Metadata.Cil.Decoder,CilTypeProvider,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilTypeProvider.cs,GetFullName,The length of the statement  "                    return String.Format("[{0}]{1}"' Reader.GetString(Reader.GetAssemblyReference((AssemblyReferenceHandle)resolutionScope).Name)' name); " is 133.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The length of the statement  "                WriteMethodBody(methodDefinition' methodDefinition.ExceptionRegions' ref instructionIndex' ilOffset' lastRegionIndex' out lastRegionIndex); " is 139.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,WriteOverridenMethod,The length of the statement  "            _writer.Write(CilDecoder.DecodeOverridenMethodName(methodDefinition._readers.MdReader' token' methodDefinition.Provider)); " is 122.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,WriteMethodBody,The length of the statement  "                    ilOffset = WriteMethodBody(methodDefinition' exceptionRegions' ref instructionIndex' ilOffset' regionIndex + 1' out regionIndex); " is 129.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,WritePropertyOrEventAccessor,The length of the statement  "            _writer.Write(string.Format("{0} {1}::{2}{3}{4}"' accessor.Signature.ReturnType' accessor.DeclaringType.FullName' accessor.Name' genericParameters.ToString()' CilDecoder.DecodeSignatureParamerTypes(accessor.Signature))); " is 220.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,EndFilterRegion,The length of the statement  "            return lastRegionIndex >= 0 && exceptionRegions[lastRegionIndex].Kind == HandlerKind.Filter && exceptionRegions[lastRegionIndex].StartOffset == ilOffset; " is 153.
Long Statement,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,StartRegion,The length of the statement  "                (exceptionRegions[regionIndex].StartOffset == ilOffset || exceptionRegions[regionIndex].FilterHandlerStart == ilOffset); " is 120.
Complex Conditional,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,ProcessAndNormalizeString,The conditional expression  "category == UnicodeCategory.Control || category == UnicodeCategory.OtherNotAssigned || category == UnicodeCategory.OtherSymbol || c == '"'"  is complex.
Magic Number,System.Reflection.Metadata.Cil,CilConstant,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilConstant.cs,GetFloatString,The following statement contains a magic number: if (single == 0.0)              {                  var bytes = BitConverter.GetBytes(single);                  if (bytes[bytes.Length - 1] == 128)                  {                      return "float32(-0.0)";                  }                  return "float32(0.0)";              }
Magic Number,System.Reflection.Metadata.Cil,CilConstant,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilConstant.cs,GetDoubleString,The following statement contains a magic number: if (number == 0.0)              {                  var bytes = BitConverter.GetBytes(number);                  if (bytes[bytes.Length - 1] == 128)                  {                      return "float64(-0.0)";                  }                  return "float64(0.0)";              }
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,CreateByteArrayString,The following statement contains a magic number: char[] chars = new char[3 + 3 * array.Length];
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,CreateByteArrayString,The following statement contains a magic number: char[] chars = new char[3 + 3 * array.Length];
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,CreateByteArrayString,The following statement contains a magic number: foreach(byte b in array)              {                  chars[i++] = HexadecimalNibble((byte)(b >> 4)); //get every byte char in Hex X2 representation.                  chars[i++] = HexadecimalNibble((byte)(b & 0xF));                  chars[i++] = ' ';              }
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,DecodeMethodBody,The following statement contains a magic number: while (ilReader.Offset < ilReader.Length)              {                  OpCode opCode;                  int expectedSize;                  byte _byte = ilReader.ReadByte();                  /*If the byte read is 0xfe it means is a two byte instruction'                   so since it is going to read the second byte to get the actual                  instruction it has to check that the offset is still less than the length.*/                  if (_byte == 0xfe && ilReader.Offset < ilReader.Length)                  {                      opCode = CilDecoderHelpers.Instance.twoByteOpCodes[ilReader.ReadByte()];                      expectedSize = 2;                  }                  else                  {                      opCode = CilDecoderHelpers.Instance.oneByteOpCodes[_byte];                      expectedSize = 1;                  }                  switch (opCode.OperandType)                  {                      //The instruction size is the expected size (1 or 2 depending if it is a one or two byte instruction) + the size of the operand.                      case OperandType.InlineField:                          intOperand = ilReader.ReadInt32();                          string fieldInfo = GetFieldInformation(metadataReader' intOperand' provider);                          instruction = new CilStringInstruction(opCode' fieldInfo' intOperand' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.InlineString:                          intOperand = ilReader.ReadInt32();                          bool isPrintable;                          string str = GetArgumentString(metadataReader' intOperand' out isPrintable);                          instruction = new CilStringInstruction(opCode' str' intOperand' expectedSize + (int)CilInstructionSize.Int32' isPrintable);                          break;                      case OperandType.InlineMethod:                          intOperand = ilReader.ReadInt32();                          string methodCall = SolveMethodName(metadataReader' intOperand' provider);                          instruction = new CilStringInstruction(opCode' methodCall' intOperand' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.InlineType:                          intOperand = ilReader.ReadInt32();                          string type = GetTypeInformation(metadataReader' intOperand' provider);                          instruction = new CilStringInstruction(opCode' type' intOperand' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.InlineTok:                          intOperand = ilReader.ReadInt32();                          string tokenType = GetInlineTokenType(metadataReader' intOperand' provider);                          instruction = new CilStringInstruction(opCode' tokenType' intOperand' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.InlineI:                          instruction = new CilInt32Instruction(opCode' ilReader.ReadInt32()' -1' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.InlineI8:                          instruction = new CilInt64Instruction(opCode' ilReader.ReadInt64()' -1' expectedSize + (int)CilInstructionSize.Int64);                          break;                      case OperandType.InlineR:                          instruction = new CilDoubleInstruction(opCode' ilReader.ReadDouble()' -1' expectedSize + (int)CilInstructionSize.Double);                          break;                      case OperandType.InlineSwitch:                          instruction = CreateSwitchInstruction(ref ilReader' expectedSize' ilOffset' opCode);                          break;                      case OperandType.ShortInlineBrTarget:                          instruction = new CilInt16BranchInstruction(opCode' ilReader.ReadSByte()' ilOffset' expectedSize + (int)CilInstructionSize.Byte);                          break;                      case OperandType.InlineBrTarget:                          instruction = new CilBranchInstruction(opCode' ilReader.ReadInt32()' ilOffset' expectedSize + (int)CilInstructionSize.Int32);                          break;                      case OperandType.ShortInlineI:                          instruction = new CilByteInstruction(opCode' ilReader.ReadByte()' -1' expectedSize + (int)CilInstructionSize.Byte);                          break;                      case OperandType.ShortInlineR:                          instruction = new CilSingleInstruction(opCode' ilReader.ReadSingle()' -1' expectedSize + (int)CilInstructionSize.Single);                          break;                      case OperandType.InlineNone:                          instruction = new CilInstructionWithNoValue(opCode' expectedSize);                          break;                      case OperandType.ShortInlineVar:                          byte token = ilReader.ReadByte();                          instruction = new CilInt16VariableInstruction(opCode' GetVariableName(opCode' token' methodDefinition)' token' expectedSize + (int)CilInstructionSize.Byte);                          break;                      case OperandType.InlineVar:                          shortOperand = ilReader.ReadUInt16();                          instruction = new CilVariableInstruction(opCode' GetVariableName(opCode' shortOperand' methodDefinition)' shortOperand' expectedSize + (int)CilInstructionSize.Int16);                          break;                      case OperandType.InlineSig:                          intOperand = ilReader.ReadInt32();                          instruction = new CilStringInstruction(opCode' GetSignature(metadataReader' intOperand' provider)' intOperand' expectedSize + (int)CilInstructionSize.Int32);                          break;                      default:                          break;                  }                  ilOffset += instruction.Size;                  yield return instruction;              }
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,GetTokenType,The following statement contains a magic number: return unchecked((CilTokenType)(token >> 24));
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,HexadecimalNibble,The following statement contains a magic number: return (char)(b >= 0 && b <= 9 ? '0' + b : 'A' + (b - 10));
Magic Number,System.Reflection.Metadata.Cil.Decoder,CilDecoder,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Decoder\CilDecoder.cs,HexadecimalNibble,The following statement contains a magic number: return (char)(b >= 0 && b <= 9 ? '0' + b : 'A' + (b - 10));
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: foreach (var type in assembly.TypeDefinitions)              {                  if (type.Token == 33554433) continue; //skipping <Module> type definition for emitting correct IL.                  type.Accept(this);              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if(instruction.Value == 0.0)              {                  var bytes = BitConverter.GetBytes(instruction.Value);                  if(bytes[bytes.Length-1] == 128)                  {                      _writer.WriteLine("-0.0");                      return;                  }                  _writer.WriteLine("0.0");                  return;              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (instruction.Value % 10 == 0)              {                  _writer.Write('.');              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (_options.ShowBytes)              {                  int tok = instruction.Token;                  uint RIDMask = (1 << 24) - 1;                  string tokenValue = string.Format("({0:X2}){1:X6}"' (tok >> 24)' (tok & RIDMask));                  WriteBytes(tokenValue' instruction);              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (_options.ShowBytes)              {                  int tok = instruction.Token;                  uint RIDMask = (1 << 24) - 1;                  string tokenValue = string.Format("({0:X2}){1:X6}"' (tok >> 24)' (tok & RIDMask));                  WriteBytes(tokenValue' instruction);              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (instruction.Token >> 24 == 0x70)              {                  if (instruction.IsPrintable)                  {                      _writer.WriteLine(string.Format("\"{0}\""' instruction.Value));                      return;                  }                  _writer.WriteLine(string.Format("{0}"' instruction.Value));                  return;              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (instruction.Value == 0.0)              {                  var bytes = BitConverter.GetBytes(instruction.Value);                  if (bytes[bytes.Length - 1] == 128)                  {                      _writer.WriteLine("-0.0");                      return;                  }                  _writer.WriteLine("0.0");                  return;              }
Magic Number,System.Reflection.Metadata.Cil.Visitor,CilToStringVisitor,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\Visitor\CilToStringVisitor.cs,Visit,The following statement contains a magic number: if (instruction.Value % 10 == 0)              {                  _writer.Write('.');              }
Missing Default,System.Reflection.Metadata.Cil,CilExceptionRegion,C:\repos\dotnet_corefxlab\src\System.Reflection.Metadata.Cil\CilExceptionRegion.cs,CreateRegions,The following switch statement is missing a default case: switch (region.Kind)                  {                      case ExceptionRegionKind.Catch:                          spans.Add(new CilExceptionRegion(HandlerKind.Catch' region.CatchType' startOffset' -1' endOffset));                          break;                      case ExceptionRegionKind.Fault:                          spans.Add(new CilExceptionRegion(HandlerKind.Fault' region.CatchType' startOffset' -1' endOffset));                          break;                      case ExceptionRegionKind.Filter:                          spans.Add(new CilExceptionRegion(HandlerKind.Filter' region.CatchType' startOffset' region.FilterOffset' endOffset));                          break;                      case ExceptionRegionKind.Finally:                          spans.Add(new CilExceptionRegion(HandlerKind.Finally' region.CatchType' startOffset' -1' endOffset));                          break;                  }
