Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,AppendUntyped,Cyclomatic complexity of the method is 16
Complex Method,System.Text.Parsing,TextSequenceExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Parsing\SequenceParser.cs,TryParseUInt64,Cyclomatic complexity of the method is 13
Complex Method,System.Text.Parsing,TextSequenceExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Parsing\SequenceParser.cs,TryParseUInt32,Cyclomatic complexity of the method is 13
Long Parameter List,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The method has 5 parameters. Parameters: formatter' compositeFormat' arg0' arg1' arg2
Long Parameter List,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The method has 6 parameters. Parameters: formatter' compositeFormat' arg0' arg1' arg2' arg3
Long Parameter List,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The method has 7 parameters. Parameters: formatter' compositeFormat' arg0' arg1' arg2' arg3' arg4
Long Parameter List,System.Text.Formatting,CompositeFormatReader,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,TryParse,The method has 5 parameters. Parameters: compositeFormat' start' count' value' consumed
Long Statement,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Append,The length of the statement  "                Debug.Assert(false' "this should never happen"); // because I pre-resized the buffer to 4 bytes per char at the top of this method. " is 131.
Long Statement,System.Text.Formatting,CompositeFormatReader,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,ParseInsertionPoint,The length of the statement  "                var StandardFormat = (formatSpecifier.HasValue && formatSpecifier.Value != 0) ? new StandardFormat(formatSpecifier.Value) : default; " is 132.
Long Statement,System.Text.Parsing,TextSequenceExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Parsing\SequenceParser.cs,TryParseUInt64,The length of the statement  "            // I left this code here' as we will need it for custom cultures and possibly when we shrink the stack allocated buffer. " is 120.
Long Statement,System.Text.Parsing,TextSequenceExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Parsing\SequenceParser.cs,TryParseUInt32,The length of the statement  "            // I left this code here' as we will need it for custom cultures and possibly when we shrink the stack allocated buffer. " is 120.
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else if (segment.Value.Index == 3) formatter.AppendUntyped(arg3' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else if (segment.Value.Index == 3) formatter.AppendUntyped(arg3' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else if (segment.Value.Index == 3) formatter.AppendUntyped(arg3' segment.Value.Format);                      else if (segment.Value.Index == 4) formatter.AppendUntyped(arg4' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else if (segment.Value.Index == 3) formatter.AppendUntyped(arg3' segment.Value.Format);                      else if (segment.Value.Index == 4) formatter.AppendUntyped(arg4' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Format,The following statement contains a magic number: while (true)              {                  var segment = reader.Next();                  if (segment == null) return;                    if (segment.Value.Count == 0) // insertion point                  {                      if (segment.Value.Index == 0) formatter.AppendUntyped(arg0' segment.Value.Format);                      else if (segment.Value.Index == 1) formatter.AppendUntyped(arg1' segment.Value.Format);                      else if (segment.Value.Index == 2) formatter.AppendUntyped(arg2' segment.Value.Format);                      else if (segment.Value.Index == 3) formatter.AppendUntyped(arg3' segment.Value.Format);                      else if (segment.Value.Index == 4) formatter.AppendUntyped(arg4' segment.Value.Format);                      else throw new Exception("invalid insertion point");                  }                  else // literal                  {                      formatter.Append(compositeFormat' segment.Value.Index' segment.Value.Count);                  }              }
Magic Number,System.Text.Formatting,CompositeFormattingExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,Append,The following statement contains a magic number: var maxBytes = count << 4;
Magic Number,System.Text.Formatting,CompositeFormatReader,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,TryParse,The following statement contains a magic number: for (int i = start; i < start + count; i++)                  {                      var digit = (byte)(compositeFormat[i] - '0');                      if (digit >= 0 && digit <= 9)                      {                          value *= 10;                          value += digit;                          consumed++;                      }                      else                      {                          if (i == start) return false;                          else return true;                      }                  }
Magic Number,System.Text.Formatting,CompositeFormatReader,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,TryParse,The following statement contains a magic number: for (int i = start; i < start + count; i++)                  {                      var digit = (byte)(compositeFormat[i] - '0');                      if (digit >= 0 && digit <= 9)                      {                          value *= 10;                          value += digit;                          consumed++;                      }                      else                      {                          if (i == start) return false;                          else return true;                      }                  }
Magic Number,System.Text.Formatting,CompositeFormatReader,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\CompositeFormat.cs,ParseInsertionPoint,The following statement contains a magic number: if (!TryParse(_compositeFormatString' _currentIndex' 5' out uint arg' out int consumed))                  {                      throw new Exception("invalid insertion point");                  }
Magic Number,System.Text.Formatting,ArrayFormatter,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\Formatters\ArrayFormatter.cs,Enlarge,The following statement contains a magic number: var doubleCount = _buffer.Free.Count * 2;
Magic Number,System.Text.Formatting,StreamFormatter,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\Formatters\StreamFormatter.cs,Enlarge,The following statement contains a magic number: var newSize = _buffer.Length * 2;
Magic Number,System.Text.Formatting,StringFormatter,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\Formatters\StringFormatter.cs,StringFormatter,The following statement contains a magic number: _buffer = new ResizableArray<byte>(_pool.Rent(characterCapacity * 2));
Magic Number,System.Text.Formatting,StringFormatter,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\Formatters\StringFormatter.cs,Append,The following statement contains a magic number: _buffer.Add((byte)(character >> 8));
Magic Number,System.Text.Formatting,StringFormatter,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\Formatters\StringFormatter.cs,Enlarge,The following statement contains a magic number: var doubleCount = _buffer.Free.Count * 2;
Magic Number,System.Text.Formatting,IOutputExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\IOutputExtensions.cs,Append,The following statement contains a magic number: if (value.Length <= 256)              {                  while (!formatter.TryAppend(value' symbolTable)) {                      formatter.Enlarge();                  }              }              else // slice the span into smaller pieces' otherwise the enlarge might fail.              {                  var leftToWrite = value;                  while (leftToWrite.Length > 0)                  {                      var chunkLength = leftToWrite.Length < 256 ? leftToWrite.Length : 256;                      if (char.IsHighSurrogate(leftToWrite[chunkLength - 1]))                      {                          chunkLength--;                          if (chunkLength == 0) throw new Exception("value ends in a high surrogate");                      }                        var chunk = leftToWrite.Slice(0' chunkLength);                      formatter.Append(chunk' symbolTable);                      leftToWrite = leftToWrite.Slice(chunkLength);                  }              }
Magic Number,System.Text.Formatting,IOutputExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\IOutputExtensions.cs,Append,The following statement contains a magic number: if (value.Length <= 256)              {                  while (!formatter.TryAppend(value' symbolTable)) {                      formatter.Enlarge();                  }              }              else // slice the span into smaller pieces' otherwise the enlarge might fail.              {                  var leftToWrite = value;                  while (leftToWrite.Length > 0)                  {                      var chunkLength = leftToWrite.Length < 256 ? leftToWrite.Length : 256;                      if (char.IsHighSurrogate(leftToWrite[chunkLength - 1]))                      {                          chunkLength--;                          if (chunkLength == 0) throw new Exception("value ends in a high surrogate");                      }                        var chunk = leftToWrite.Slice(0' chunkLength);                      formatter.Append(chunk' symbolTable);                      leftToWrite = leftToWrite.Slice(chunkLength);                  }              }
Magic Number,System.Text.Formatting,IOutputExtensions,C:\repos\dotnet_corefxlab\src\System.Text.Formatting\System\Text\Formatting\IOutputExtensions.cs,Append,The following statement contains a magic number: if (value.Length <= 256)              {                  while (!formatter.TryAppend(value' symbolTable)) {                      formatter.Enlarge();                  }              }              else // slice the span into smaller pieces' otherwise the enlarge might fail.              {                  var leftToWrite = value;                  while (leftToWrite.Length > 0)                  {                      var chunkLength = leftToWrite.Length < 256 ? leftToWrite.Length : 256;                      if (char.IsHighSurrogate(leftToWrite[chunkLength - 1]))                      {                          chunkLength--;                          if (chunkLength == 0) throw new Exception("value ends in a high surrogate");                      }                        var chunk = leftToWrite.Slice(0' chunkLength);                      formatter.Append(chunk' symbolTable);                      leftToWrite = leftToWrite.Slice(chunkLength);                  }              }
