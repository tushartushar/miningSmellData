Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The method has 133 lines of code.
Long Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The method has 120 lines of code.
Complex Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,VerifyJoin,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,VerifyMerge,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIEnumerable,Cyclomatic complexity of the method is 11
Long Statement,Microsoft.Data.Analysis.Tests,ArrayComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,CompareArrays,The length of the statement  "            Assert.True(expectedArray.Values.Slice(0' expectedArray.Length).SequenceEqual(actualArray.Values.Slice(0' actualArray.Length))); " is 128.
Long Statement,Microsoft.Data.Analysis.Tests,ArrayComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,CompareArrays,The length of the statement  "            Assert.True(expectedArray.Values.Slice(0' booleanByteCount).SequenceEqual(actualArray.Values.Slice(0' booleanByteCount))); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,ArrayComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,CompareArrays,The length of the statement  "            Assert.True(expectedArray.Values.Slice(0' expectedArray.Length).SequenceEqual(actualArray.Values.Slice(0' actualArray.Length))); " is 128.
Long Statement,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The length of the statement  "                .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build()) " is 137.
Long Statement,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestInconsistentNullBitMapLength,The length of the statement  "            // Arrow allocates buffers of length 64 by default. 64 * 8 = 512 bits in the NullBitMapBuffer. Anything lesser than 512 will not trigger a throw " is 144.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The length of the statement  "            PrimitiveDataFrameColumn<int> dataFrameColumn1 = new PrimitiveDataFrameColumn<int>("Int1"' Enumerable.Range(0' 10).Select(x => x)); " is 131.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestValidity,The length of the statement  "            PrimitiveDataFrameColumn<int> dataFrameColumn1 = new PrimitiveDataFrameColumn<int>("Int1"' Enumerable.Range(0' 10).Select(x => x)); " is 131.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The length of the statement  "            ArrowStringDataFrameColumn stringColumn = new ArrowStringDataFrameColumn("String"' dataMemory' offsetMemory' nullMemory' strArray.Length' strArray.NullCount); " is 158.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The length of the statement  "            ArrowStringDataFrameColumn stringColumn = new ArrowStringDataFrameColumn("String"' dataMemory' offsetMemory' nullMemory' 4' 1); " is 127.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The length of the statement  "            ArrowStringDataFrameColumn stringColumn = new ArrowStringDataFrameColumn("String"' dataMemory' offsetMemory' nullMemory' strArray.Length' strArray.NullCount); " is 158.
Long Statement,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The length of the statement  "            ArrowStringDataFrameColumn column = new ArrowStringDataFrameColumn("String"' dataMemory' offsetMemory' nullMemory' strArray.Length' strArray.NullCount); " is 152.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithTwoColumns,The length of the statement  "            DataFrameColumn dataFrameColumn1 = new PrimitiveDataFrameColumn<int>("Int1"' Enumerable.Range(0' length).Select(x => x)); " is 121.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithTwoColumns,The length of the statement  "            DataFrameColumn dataFrameColumn2 = new PrimitiveDataFrameColumn<int>("Int2"' Enumerable.Range(10' length).Select(x => x)); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithAllMutableColumnTypes,The length of the statement  "            DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' length).Select(x => x % 2 == 0)); " is 125.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndBoolColumns,The length of the statement  "            DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' length).Select(x => x % 2 == 0)); " is 125.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndStringColumns,The length of the statement  "            DataFrameColumn stringColumn = new StringDataFrameColumn("String"' Enumerable.Range(0' length).Select(x => x.ToString())); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndStringColumns,The length of the statement  "            DataFrameColumn charColumn = new PrimitiveDataFrameColumn<char>("Char"' Enumerable.Range(0' length).Select(x => (char)(x + 65))); " is 129.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn byteColumn = new PrimitiveDataFrameColumn<byte>("Byte"' Enumerable.Range(0' length).Select(x => (byte)x)); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn decimalColumn = new PrimitiveDataFrameColumn<decimal>("Decimal"' Enumerable.Range(0' length).Select(x => (decimal)x)); " is 134.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn doubleColumn = new PrimitiveDataFrameColumn<double>("Double"' Enumerable.Range(0' length).Select(x => (double)x)); " is 130.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn floatColumn = new PrimitiveDataFrameColumn<float>("Float"' Enumerable.Range(0' length).Select(x => (float)x)); " is 126.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn longColumn = new PrimitiveDataFrameColumn<long>("Long"' Enumerable.Range(0' length).Select(x => (long)x)); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn sbyteColumn = new PrimitiveDataFrameColumn<sbyte>("Sbyte"' Enumerable.Range(0' length).Select(x => (sbyte)x)); " is 126.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn shortColumn = new PrimitiveDataFrameColumn<short>("Short"' Enumerable.Range(0' length).Select(x => (short)x)); " is 126.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn uintColumn = new PrimitiveDataFrameColumn<uint>("Uint"' Enumerable.Range(0' length).Select(x => (uint)x)); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn ulongColumn = new PrimitiveDataFrameColumn<ulong>("Ulong"' Enumerable.Range(0' length).Select(x => (ulong)x)); " is 126.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrameColumn ushortColumn = new PrimitiveDataFrameColumn<ushort>("Ushort"' Enumerable.Range(0' length).Select(x => (ushort)x)); " is 130.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The length of the statement  "            DataFrame dataFrame = new DataFrame(new List<DataFrameColumn> { byteColumn' decimalColumn' doubleColumn' floatColumn' intColumn' longColumn' sbyteColumn' shortColumn' uintColumn' ulongColumn' ushortColumn }); " is 208.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrame,The length of the statement  "            DataFrameColumn baseColumn1 = new PrimitiveDataFrameColumn<T1>("Column1"' Enumerable.Range(0' length).Select(x => (T1)Convert.ChangeType(x % 2 == 0 ? 0 : 1' typeof(T1)))); " is 171.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrame,The length of the statement  "            DataFrameColumn baseColumn2 = new PrimitiveDataFrameColumn<T2>("Column2"' Enumerable.Range(0' length).Select(x => (T2)Convert.ChangeType(x % 2 == 0 ? 0 : 1' typeof(T2)))); " is 171.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The length of the statement  "            DataFrameColumn floatColumn = new PrimitiveDataFrameColumn<float>("FloatColumn"' Enumerable.Range(0' 10).Select(x => (float)x)); " is 128.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The length of the statement  "            DataFrameColumn bigColumn = new PrimitiveDataFrameColumn<float>("BigColumn"' Enumerable.Range(0' 11).Select(x => (float)x)); " is 124.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The length of the statement  "            DataFrameColumn repeatedName = new PrimitiveDataFrameColumn<float>("FloatColumn"' Enumerable.Range(0' 10).Select(x => (float)x)); " is 129.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The length of the statement  "            DataFrameColumn differentIntColumn = new PrimitiveDataFrameColumn<int>("IntColumn1"' Enumerable.Range(0' 10).Select(x => x)); " is 125.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The length of the statement  "            ArrowStringDataFrameColumn stringColumn = new ArrowStringDataFrameColumn("String"' strArray.ValueBuffer.Memory' strArray.ValueOffsetsBuffer.Memory' strArray.NullBitmapBuffer.Memory' strArray.Length' strArray.NullCount); " is 219.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The length of the statement  "            ArrowStringDataFrameColumn stringColumnCopy = new ArrowStringDataFrameColumn("String"' strArray.ValueBuffer.Memory' strArray.ValueOffsetsBuffer.Memory' strArray.NullBitmapBuffer.Memory' strArray.Length' strArray.NullCount); " is 223.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The length of the statement  "            DataFrameColumn stringColumnCopy = new StringDataFrameColumn("String"' Enumerable.Range(0' 10).Select(x => x.ToString())); " is 122.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The length of the statement  "            var dataFrameColumn1 = new PrimitiveDataFrameColumn<bool>("Bool1"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false)); " is 131.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The length of the statement  "            var dataFrameColumn2 = new PrimitiveDataFrameColumn<bool>("Bool2"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false)); " is 131.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,VerifyJoin,The length of the statement  "                        DataFrameColumn compareColumn = rightColumn.Length <= join.RowCount ? rightColumn.Clone(numberOfNullsToAppend: join.RowCount - rightColumn.Length) : rightColumn.Clone(mapIndices); " is 179.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,VerifyJoin,The length of the statement  "                        DataFrameColumn compareColumn = leftColumn.Length <= join.RowCount ? leftColumn.Clone(numberOfNullsToAppend: join.RowCount - leftColumn.Length) : leftColumn.Clone(mapIndices); " is 175.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnCreationFromExisitingColumn,The length of the statement  "            PrimitiveDataFrameColumn<bool> bigInts = new PrimitiveDataFrameColumn<bool>("BigInts"' df["Int"].ElementwiseGreaterThan(5)); " is 124.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The length of the statement  "            df.Append(new List<KeyValuePair<string' object>> { KeyValuePair.Create("Column1"' (object)5)' KeyValuePair.Create("Column2"' (object)false) }); " is 143.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The length of the statement  "            Assert.Throws<FormatException>(() => df.Append(new List<KeyValuePair<string' object>> { KeyValuePair.Create("Column2"' (object)"str") })); " is 138.
Long Statement,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The length of the statement  "            DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' (int)df.RowCount).Select(x => x % 2 == 1)); " is 135.
Complex Conditional,Microsoft.Data.Analysis.Tests,FieldComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,Equals,The conditional expression  "f2 != null && f1 != null && f1.Name == f2.Name && f1.IsNullable == f2.IsNullable &&                  f1.DataType.TypeId == f2.DataType.TypeId && f1.HasMetadata == f2.HasMetadata"  is complex.
Complex Conditional,Microsoft.Data.Analysis.Tests,SchemaComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,Equals,The conditional expression  "s2 == null || s1 == null || s1.HasMetadata != s2.HasMetadata || s1.Fields.Count != s2.Fields.Count"  is complex.
Complex Conditional,Microsoft.Data.Analysis.Tests,SchemaComparer,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrayComparer.cs,Equals,The conditional expression  "!s1.Fields.Keys.All(k => s2.Fields.ContainsKey(k) && FieldComparer.Equals(s1.Fields[k]' s2.Fields[k])) ||                  !s2.Fields.Keys.All(k => s1.Fields.ContainsKey(k) && FieldComparer.Equals(s2.Fields[k]' s1.Fields[k]))"  is complex.
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestArrowIntegration,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("Column2"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      length: 10'                      nullCount: 1'                      offset: 0))                  .Append("Column3"' true' new Int32Array(                      valueBuffer: new ArrowBuffer.Builder<int>().AppendRange(Enumerable.Range(0' 10)).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0))                  .Append("NullableBooleanColumn"' true' new BooleanArray(                      valueBuffer: new ArrowBuffer.Builder<byte>().Append(0xfd).Append(0xff).Build()'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0xed).Append(0xff).Build()'                      length: 10'                      nullCount: 2'                      offset: 0))                  .Append("StringDataFrameColumn"' false' new StringArray.Builder().AppendRange(Enumerable.Range(0' 10).Select(x => x.ToString())).Build())                  .Append("DoubleColumn"' false' new DoubleArray.Builder().AppendRange(Enumerable.Repeat(1.0' 10)).Build())                  .Append("FloatColumn"' false' new FloatArray.Builder().AppendRange(Enumerable.Repeat(1.0f' 10)).Build())                  .Append("ShortColumn"' false' new Int16Array.Builder().AppendRange(Enumerable.Repeat((short)1' 10)).Build())                  .Append("LongColumn"' false' new Int64Array.Builder().AppendRange(Enumerable.Repeat((long)1' 10)).Build())                  .Append("UIntColumn"' false' new UInt32Array.Builder().AppendRange(Enumerable.Repeat((uint)1' 10)).Build())                  .Append("UShortColumn"' false' new UInt16Array.Builder().AppendRange(Enumerable.Repeat((ushort)1' 10)).Build())                  .Append("ULongColumn"' false' new UInt64Array.Builder().AppendRange(Enumerable.Repeat((ulong)1' 10)).Build())                  .Append("ByteColumn"' false' new Int8Array.Builder().AppendRange(Enumerable.Repeat((sbyte)1' 10)).Build())                  .Append("UByteColumn"' false' new UInt8Array.Builder().AppendRange(Enumerable.Repeat((byte)1' 10)).Build())                  .Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestMutationOnArrowColumn,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10)))).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestMutationOnArrowColumn,The following statement contains a magic number: df["Column1"][1] = 100;
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestMutationOnArrowColumn,The following statement contains a magic number: Assert.Equal(100' df["Column1"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("EmptyNullBitMapColumn"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("EmptyDataColumn"' true' new Int32Array(                      valueBuffer: ArrowBuffer.Empty'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("EmptyNullBitMapColumn"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("EmptyDataColumn"' true' new Int32Array(                      valueBuffer: ArrowBuffer.Empty'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("EmptyNullBitMapColumn"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10))))                  .Append("EmptyDataColumn"' true' new Int32Array(                      valueBuffer: ArrowBuffer.Empty'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Append(0x00).Build()'                      length: 10'                      nullCount: 10'                      offset: 0)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: Assert.Equal(10' df["EmptyNullBitMapColumn"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: df["EmptyNullBitMapColumn"][9] = null;
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: Assert.Equal(10' df["EmptyDataColumn"].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: Assert.Equal(10' df["EmptyDataColumn"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: df["EmptyDataColumn"][9] = 9;
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: df["EmptyDataColumn"][9] = 9;
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: Assert.Equal(9' df["EmptyDataColumn"].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: Assert.Equal(10' df["EmptyDataColumn"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestEmptyArrowColumns,The following statement contains a magic number: i < 9
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestInconsistentNullBitMapLength,The following statement contains a magic number: Int32Array int32 = new Int32Array.Builder().AppendRange(Enumerable.Range(0' 520)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestInconsistentNullBitMapLength,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("EmptyDataColumn"' true' new Int32Array(                      valueBuffer: int32.ValueBuffer'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Build()'                      length: 520'                      nullCount: 520'                      offset: 0)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,ArrowIntegrationTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\ArrowIntegrationTests.cs,TestInconsistentNullBitMapLength,The following statement contains a magic number: RecordBatch originalBatch = new RecordBatch.Builder()                  .Append("EmptyDataColumn"' true' new Int32Array(                      valueBuffer: int32.ValueBuffer'                      nullBitmapBuffer: new ArrowBuffer.Builder<byte>().Append(0x00).Build()'                      length: 520'                      nullCount: 520'                      offset: 0)).Build();
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: PrimitiveDataFrameColumn<int> dataFrameColumn1 = new PrimitiveDataFrameColumn<int>("Int1"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: PrimitiveDataFrameColumn<int> column3 = new PrimitiveDataFrameColumn<int>("Int3"' 10);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(10' column3.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: column2[1] = 10;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(2' column2.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: column2[1] = 5;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: StringDataFrameColumn strCol1 = new StringDataFrameColumn("String1"' 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: StringDataFrameColumn strCol2 = new StringDataFrameColumn("String"' Enumerable.Range(0' 10).Select(x => x.ToString()));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: StringDataFrameColumn strCol3 = new StringDataFrameColumn("String"' Enumerable.Range(0' 10).Select(x => (string)null));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(10' strCol3.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(2' strCol.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: intColumn.Append(2);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: intColumn.Append(3);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Null(intColumn[2]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(2' intColumn[3]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(2' intColumn[3]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Null(intColumn[4]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(3' intColumn[5]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCounts,The following statement contains a magic number: Assert.Equal(3' intColumn[5]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: PrimitiveDataFrameColumn<int> intColumn = new PrimitiveDataFrameColumn<int>("Int"' 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: Assert.Equal(5' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: intColumn[2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: Assert.Equal(5' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: intColumn[2] = 5;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: intColumn[2] = 5;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestNullCountWithIndexers,The following statement contains a magic number: Assert.Equal(4' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestValidity,The following statement contains a magic number: PrimitiveDataFrameColumn<int> dataFrameColumn1 = new PrimitiveDataFrameColumn<int>("Int1"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestValidity,The following statement contains a magic number: Assert.False(dataFrameColumn1.IsValid(10));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn.AppendMany(null' 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(5' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(5' intColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn.AppendMany(5' 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn.AppendMany(5' 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(5' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(10' intColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn[2] = 10;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn[2] = 10;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(4' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.True(intColumn.IsValid(2));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: intColumn[7] = null;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.Equal(5' intColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestAppendMany,The following statement contains a magic number: Assert.False(intColumn.IsValid(7));
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestBasicArrowStringColumn,The following statement contains a magic number: Assert.Equal(2' stringColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 3' 0' 0' 0' 7' 0' 0' 0' 7' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 3' 0' 0' 0' 7' 0' 0' 0' 7' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 3' 0' 0' 0' 7' 0' 0' 0' 7' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 3' 0' 0' 0' 7' 0' 0' 0' 7' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: ArrowStringDataFrameColumn stringColumn = new ArrowStringDataFrameColumn("String"' dataMemory' offsetMemory' nullMemory' 4' 1);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Assert.Equal(4' stringColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Assert.Equal("mark"' stringColumn[2]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Assert.Equal(""' stringColumn[3]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: List<string> ret = stringColumn[0' 4];
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Assert.Equal("mark"' ret[2]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnWithNulls,The following statement contains a magic number: Assert.Equal(""' ret[3]);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: DataFrameColumn clone = stringColumn.Clone(numberOfNullsToAppend: 5);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: Assert.Equal(7' clone.Length);
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnClone,The following statement contains a magic number: i < 7
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestPrimitiveColumnGetReadOnlyBuffers,The following statement contains a magic number: RecordBatch recordBatch = new RecordBatch.Builder()                  .Append("Column1"' false' col => col.Int32(array => array.AppendRange(Enumerable.Range(0' 10)))).Build();
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestPrimitiveColumnGetReadOnlyBuffers,The following statement contains a magic number: return ((curBitMap >> (index & 7)) & 1) != 0;
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestPrimitiveColumnGetReadOnlyBuffers,The following statement contains a magic number: j * 8 + k == column.Length
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestPrimitiveColumnGetReadOnlyBuffers,The following statement contains a magic number: k < 8
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> dataMemory = new byte[] { 102' 111' 111' 98' 97' 114 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,BufferTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\BufferTests.cs,TestArrowStringColumnGetReadOnlyBuffers,The following statement contains a magic number: Memory<byte> offsetMemory = new byte[] { 0' 0' 0' 0' 3' 0' 0' 0' 6' 0' 0' 0 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal(4' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal(7' df.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal("CMT"' df["vendor_id"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: DataFrame reducedRows = DataFrame.LoadCsv(GetStream(data)' numberOfRowsToRead: 3);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal(3' reducedRows.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal(7' reducedRows.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvWithHeader,The following statement contains a magic number: Assert.Equal("CMT"' reducedRows["vendor_id"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal(4' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal(7' df.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal("CMT"' df["Column0"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: DataFrame reducedRows = DataFrame.LoadCsv(GetStream(data)' header: false' numberOfRowsToRead: 3);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal(3' reducedRows.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal(7' reducedRows.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestReadCsvNoHeader,The following statement contains a magic number: Assert.Equal("CMT"' reducedRows["Column0"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithTwoColumns,The following statement contains a magic number: DataFrameColumn dataFrameColumn2 = new PrimitiveDataFrameColumn<int>("Int2"' Enumerable.Range(10' length).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithTwoColumns,The following statement contains a magic number: dataFrameColumn1[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithTwoColumns,The following statement contains a magic number: dataFrameColumn2[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: byte[] dataMemory = new byte[length * 3];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: byte[] offsetMemory = new byte[(length + 1) * 4];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: offsetMemory[2] = 0;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: offsetMemory[3] = 0;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: withNulls && i == length / 2
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: int offsetIndex = (i + 1) * 4;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,CreateArrowStringColumn,The following statement contains a magic number: offsetMemory[offsetIndex++] = (byte)(3 * validStringsIndex);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithAllMutableColumnTypes,The following statement contains a magic number: DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' length).Select(x => x % 2 == 0));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithAllMutableColumnTypes,The following statement contains a magic number: boolColumn[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndBoolColumns,The following statement contains a magic number: DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' length).Select(x => x % 2 == 0));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndBoolColumns,The following statement contains a magic number: boolColumn[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndStringColumns,The following statement contains a magic number: stringColumn[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndStringColumns,The following statement contains a magic number: DataFrameColumn charColumn = new PrimitiveDataFrameColumn<char>("Char"' Enumerable.Range(0' length).Select(x => (char)(x + 65)));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericAndStringColumns,The following statement contains a magic number: charColumn[length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrameWithNumericColumns,The following statement contains a magic number: dataFrame.Columns[i][length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrame,The following statement contains a magic number: DataFrameColumn baseColumn1 = new PrimitiveDataFrameColumn<T1>("Column1"' Enumerable.Range(0' length).Select(x => (T1)Convert.ChangeType(x % 2 == 0 ? 0 : 1' typeof(T1))));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrame,The following statement contains a magic number: DataFrameColumn baseColumn2 = new PrimitiveDataFrameColumn<T2>("Column2"' Enumerable.Range(0' length).Select(x => (T2)Convert.ChangeType(x % 2 == 0 ? 0 : 1' typeof(T2))));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,MakeDataFrame,The following statement contains a magic number: dataFrame.Columns[i][length / 2] = null;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: DataFrame dataFrame = MakeDataFrameWithTwoColumns(length: 10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(11' dataFrame[1' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(2' dataFrame.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: var headList = dataFrame.Head(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(14' (int)headList[4][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(14' (int)headList[4][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: var tailList = dataFrame.Tail(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(19' (int)tailList[4][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(19' (int)tailList[4][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: dataFrame[2' 1] = 1000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: dataFrame[2' 1] = 1000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(1000' dataFrame[2' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(1000' dataFrame[2' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: var row = dataFrame[4];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(14' (int)row[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(1000' (int)column[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIndexer,The following statement contains a magic number: Assert.Equal(1000' (int)column[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn intColumn = new PrimitiveDataFrameColumn<int>("IntColumn"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn floatColumn = new PrimitiveDataFrameColumn<float>("FloatColumn"' Enumerable.Range(0' 10).Select(x => (float)x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Equal(10' dataFrame.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Equal(2' dataFrame.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Equal(10' dataFrame.Columns[0].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Equal(10' dataFrame.Columns[1].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn bigColumn = new PrimitiveDataFrameColumn<float>("BigColumn"' Enumerable.Range(0' 11).Select(x => (float)x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn repeatedName = new PrimitiveDataFrameColumn<float>("FloatColumn"' Enumerable.Range(0' 10).Select(x => (float)x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => dataFrame.Columns.Insert(2' bigColumn));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => dataFrame.Columns.Insert(2' repeatedName));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => dataFrame.Columns.Insert(10' repeatedName));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: Assert.Equal(2' dataFrame.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn intColumnCopy = new PrimitiveDataFrameColumn<int>("IntColumn"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,ColumnAndTableCreationTest,The following statement contains a magic number: DataFrameColumn differentIntColumn = new PrimitiveDataFrameColumn<int>("IntColumn1"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,InsertAndRemoveColumnTests,The following statement contains a magic number: DataFrame dataFrame = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,InsertAndRemoveColumnTests,The following statement contains a magic number: DataFrameColumn intColumn = new PrimitiveDataFrameColumn<int>("IntColumn"' Enumerable.Range(0' 10).Select(x => x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: DataFrame df = MakeDataFrameWithTwoColumns(12);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: IReadOnlyList<int> listOfInts = new List<int>() { 5' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: IReadOnlyList<int> listOfInts = new List<int>() { 5' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: var ret = df.Add(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' ret[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' ret[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: ret = df.Subtract(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(-5' ret[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(-5' ret[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: ret = df.Multiply(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' ret[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' ret[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: ret = df.Divide(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(1' ret[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(1' ret[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: ret = df.Modulo(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(0' ret[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(0' ret[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseGreaterThanOrEqual(5)[7' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseGreaterThanOrEqual(5)[7' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseGreaterThanOrEqual(listOfInts)[7' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseLessThanOrEqual(5)[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseLessThanOrEqual(5)[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(true' df.ElementwiseLessThanOrEqual(listOfInts)[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseGreaterThan(5)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseGreaterThan(5)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseGreaterThan(listOfInts)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseLessThan(5)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseLessThan(5)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(false' df.ElementwiseLessThan(listOfInts)[5' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Add(5' inPlace: true)[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Add(5' inPlace: true)[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(10' df.Add(listOfInts' inPlace: true)[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Subtract(5' inPlace: true)[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Subtract(5' inPlace: true)[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Multiply(5' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Multiply(5' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(25' df.Multiply(listOfInts' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Divide(5' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(5' df.Divide(5' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(1' df.Modulo(5' inPlace: true)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(2' df.LeftShift(1)[1' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperations,The following statement contains a magic number: Assert.Equal(1' df.RightShift(1)[2' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithColumns,The following statement contains a magic number: int length = 10;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithColumns,The following statement contains a magic number: verify = newColumn.ElementwiseEquals(df1.Columns[i] * 2);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithConversions,The following statement contains a magic number: DataFrame df = DataFrameTests.MakeDataFrameWithTwoColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithConversions,The following statement contains a magic number: DataFrame dfd = df.Add(5.0f);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithConversions,The following statement contains a magic number: DataFrame dfm = df.Add(5.0m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsWithConversions,The following statement contains a magic number: var dataFrameColumn1 = new PrimitiveDataFrameColumn<double>("Double1"' Enumerable.Range(0' 10).Select(x => (double)x));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: var dataFrameColumn1 = new PrimitiveDataFrameColumn<bool>("Bool1"' Enumerable.Range(0' 10).Select(x => true));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: var dataFrameColumn2 = new PrimitiveDataFrameColumn<bool>("Bool2"' Enumerable.Range(0' 10).Select(x => true));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => df.Add(5));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => df.LeftShift(5));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(true' newdf[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(false' newdf1[4' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(true' newdf[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(true' newdf1[4' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(false' newdf[4' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnBoolColumn,The following statement contains a magic number: Assert.Equal(true' newdf1[4' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: DataFrameColumn newCol = stringColumn.ElementwiseEquals(4);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: Assert.Equal(true' newCol[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: Assert.Equal(true' newCol[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: newCol = stringColumn.ElementwiseNotEquals(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnArrowStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: DataFrameColumn stringColumn = new StringDataFrameColumn("String"' Enumerable.Range(0' 10).Select(x => x.ToString()));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: DataFrameColumn newCol = stringColumn.ElementwiseEquals(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(true' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(true' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: DataFrameColumn stringColumnCopy = new StringDataFrameColumn("String"' Enumerable.Range(0' 10).Select(x => x.ToString()));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(true' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: newCol = stringColumn.ElementwiseNotEquals(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnStringColumn,The following statement contains a magic number: Assert.Equal(false' newCol[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: var df = MakeDataFrameWithNumericColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df + 1.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] + 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df + 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] + 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df - 1.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] - 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df - 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] - 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df * 1.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] * 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df * 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] * 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df / 1.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] / 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df / 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] / 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df % 1.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] % 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = df % 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] % 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1 + df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] + 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1m + df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] + 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1 - df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' 1.1 - (byte)df[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1m - df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' 1.1m - (byte)df[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1 * df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] * 1.1);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1m * df;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (byte)df[0' 0] * 1.1m);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1 / plusOne;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' 1.1 / (double)plusOne[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: var plusDecimal = df + 1.1m;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1m / plusDecimal;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' (1.1m) / (decimal)plusDecimal[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1 % plusOne;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' 1.1 % (double)plusOne[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: tempDf = 1.1m % plusDecimal;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsWithConversions,The following statement contains a magic number: Assert.Equal(tempDf[0' 0]' 1.1m % (decimal)plusDecimal[0' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: var dataFrameColumn1 = new PrimitiveDataFrameColumn<bool>("Bool1"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: var dataFrameColumn1 = new PrimitiveDataFrameColumn<bool>("Bool1"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: var dataFrameColumn2 = new PrimitiveDataFrameColumn<bool>("Bool2"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: var dataFrameColumn2 = new PrimitiveDataFrameColumn<bool>("Bool2"' Enumerable.Range(0' 10).Select(x => x % 2 == 0 ? true : false));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: i % 2 == 0
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperatorsOnBoolColumns,The following statement contains a magic number: i % 2 == 0
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnColumns,The following statement contains a magic number: PrimitiveDataFrameColumn<int> column = new PrimitiveDataFrameColumn<int>("Int"' Enumerable.Range(0' 10));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnColumns,The following statement contains a magic number: Assert.ThrowsAny<ArgumentException>(() => column.Add(5.5' inPlace: true));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestBinaryOperationsOnColumns,The following statement contains a magic number: Assert.ThrowsAny<ArgumentException>(() => column.ReverseAdd(5.5' inPlace: true));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnReverseOrderState,The following statement contains a magic number: var column = new PrimitiveDataFrameColumn<int>("Int"' Enumerable.Range(0' 10));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestProjectionAndAppend,The following statement contains a magic number: DataFrame df = MakeDataFrameWithTwoColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestProjectionAndAppend,The following statement contains a magic number: df["Int3"] = df["Int1"] * 2 + df["Int2"];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestProjectionAndAppend,The following statement contains a magic number: Assert.Equal(16' df["Int3"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestProjectionAndAppend,The following statement contains a magic number: Assert.Equal(16' df["Int3"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: df["Int"][0] = -10;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(-10' df["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(10' absColumn[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(-10' df["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(10' df["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: df["Double"][0] = 100.0;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: i == 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: i == 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: df["Float"][0] = -10.0f;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: i == 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(9.0f' df["Float"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(9.0f' df["Float"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: i == 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((uint)0' uintColumn[8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((uint)8' df["Uint"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((uint)8' df["Uint"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((uint)0' df["Uint"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)40' ushortColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)40' ushortColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)9' df["Ushort"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)9' df["Ushort"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)40' df["Ushort"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)40' df["Ushort"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(100.0' df["Double"].Max());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(-10.0f' df["Float"].Min());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal((ushort)140' df["Ushort"].Sum());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: df["Double"][0] = 100.1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(100.1' df["Double"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(100.0' roundColumn[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(100.1' df["Double"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestComputations,The following statement contains a magic number: Assert.Equal(100.0' df["Double"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(20);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: df["Int"][0] = 100;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: df["Int"][19] = -1;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: df["Int"][5] = 2000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: df["Int"][5] = 2000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Null(sortedDf["Int"][19]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(100' sortedDf["Int"][17]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(100' sortedDf["Int"][17]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(2000' sortedDf["Int"][18]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(2000' sortedDf["Int"][18]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Null(sortedDf["Int"][19]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(-1' sortedDf["Int"][18]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(100' sortedDf["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(2000' sortedDf["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Null(sortedDf["Int"][19]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(8' sortedDf["Int"][17]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(8' sortedDf["Int"][17]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(9' sortedDf["Int"][18]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(9' sortedDf["Int"][18]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Null(sortedDf["Int"][19]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(8' sortedDf["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSort,The following statement contains a magic number: Assert.Equal(9' sortedDf["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(20);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: df["Int"][0] = 100000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: df["Int"][5] = 200000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: df["Int"][5] = 200000;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: DataFrame dfTrain = SplitTrainTest(df' 0.8f' out dfTest);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: Assert.Equal(100000' sortedDf["Int"][sortedDf.RowCount - 3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: Assert.Equal(100000' sortedDf["Int"][sortedDf.RowCount - 3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: Assert.Equal(200000' sortedDf["Int"][sortedDf.RowCount - 2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSplitAndSort,The following statement contains a magic number: Assert.Equal(200000' sortedDf["Int"][sortedDf.RowCount - 2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: i < 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: Assert.Equal(5' strColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: Assert.Equal(5' sortedStrColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: i < 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: Assert.Equal(5' strColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: Assert.Null(sortedStrColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestStringColumnSort,The following statement contains a magic number: Assert.Null(sortedStrColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestPrimitiveColumnSort,The following statement contains a magic number: i < 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestPrimitiveColumnSort,The following statement contains a magic number: Assert.Null(sortedIntColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestPrimitiveColumnSort,The following statement contains a magic number: Assert.Equal(4' sortedIntColumn[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestPrimitiveColumnSort,The following statement contains a magic number: Assert.Null(sortedIntColumn[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: DataFrame left = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: DataFrame right = MakeDataFrameWithAllMutableColumnTypes(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_right"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_right"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_right"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_right"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: right = MakeDataFrameWithAllMutableColumnTypes(15);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][6]' right["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][6]' right["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_left"][12]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Null(join["Int_left"][12]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestJoin,The following statement contains a magic number: Assert.Equal(join["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: DataFrame df = MakeDataFrameWithNumericAndBoolColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' count.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)5' count["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)4' count["Decimal"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)(r == 0 ? 5 : 4)' count.Columns[c][r]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)(r == 0 ? 5 : 4)' count.Columns[c][r]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' first.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: r < 2
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: DataFrame head = df.GroupBy("Bool").Head(3);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> verify = new List<int>() { 0' 3' 1' 4' 2' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> verify = new List<int>() { 0' 3' 1' 4' 2' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> verify = new List<int>() { 0' 3' 1' 4' 2' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> verify = new List<int>() { 0' 3' 1' 4' 2' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: r < 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(originalColumn[5]' headColumn[verify[5]]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(originalColumn[5]' headColumn[verify[5]]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(6' head.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: DataFrame tail = df.GroupBy("Bool").Tail(3);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(6' tail.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> originalColumnVerify = new List<int>() { 6' 8' 7' 9 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> originalColumnVerify = new List<int>() { 6' 8' 7' 9 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> originalColumnVerify = new List<int>() { 6' 8' 7' 9 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> originalColumnVerify = new List<int>() { 6' 8' 7' 9 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> tailColumnVerity = new List<int>() { 1' 2' 4' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> tailColumnVerity = new List<int>() { 1' 2' 4' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: List<int> tailColumnVerity = new List<int>() { 1' 2' 4' 5 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: r < 4
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' max.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(((long)(r == 0 ? 8 : 9)).ToString()' maxColumn[r].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(((long)(r == 0 ? 8 : 9)).ToString()' maxColumn[r].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: r < 2
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' min.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' product.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' sum.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' mean.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: r < 2
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' columnSum.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(20' columnSum["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(20' columnSum["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' columnMax.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(8' columnMax["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(9' columnMax["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' columnProduct.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' columnMin.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' countIntColumn.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' countIntColumn.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)5' countIntColumn["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal((long)4' countIntColumn["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' firstDecimalColumn.Columns.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGroupBy,The following statement contains a magic number: Assert.Equal(2' firstDecimalColumn.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: Assert.Equal(2' grouped.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: DataFrame df = MakeDataFrame<byte' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<char' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<decimal' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<double' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<float' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<int' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<long' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<sbyte' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<short' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<uint' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<ulong' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestGoupByDifferentColumnTypes,The following statement contains a magic number: df = MakeDataFrame<ushort' bool>(10' false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIEnumerable,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIEnumerable,The following statement contains a magic number: Assert.Equal(10 * df.Columns.Count' totalValueCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: DataFrame df = MakeDataFrameWithNumericColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: DataFrameColumn clipped = df["Int"].Clip(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: DataFrameColumn clipped = df["Int"].Clip(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(2' df["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(2' df["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' clipped[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' clipped[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' clipped[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' df["Int"][4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' df["Int"][4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Null(clipped[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Null(df["Int"][5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' clipped[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' clipped[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' df["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' df["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(8' df["Int"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(8' df["Int"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' clipped[9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(9' df["Int"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(9' df["Int"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: df["Int"].Clip(3' 7' true);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: df["Int"].Clip(3' 7' true);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(3' df["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' df["Int"][4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(4' df["Int"][4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Null(df["Int"][5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' df["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(6' df["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][7]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][8]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnClip,The following statement contains a magic number: Assert.Equal(7' df["Int"][9]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: DataFrame df = MakeDataFrameWithNumericColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: DataFrameColumn filtered = df["Int"].Filter(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: DataFrameColumn filtered = df["Int"].Filter(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(4' filtered.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(3' filtered[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(4' filtered[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(6' filtered[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(6' filtered[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(7' filtered[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnFilter,The following statement contains a magic number: Assert.Equal(7' filtered[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: i < 4
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: Assert.Equal(4.ToString()' column[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: Assert.Equal(4.ToString()' column[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: Assert.Null(column[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: Assert.Equal(6.ToString()' column[6].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: Assert.Equal(6.ToString()' column[6].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: DataFrame clipped = df.Clip(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: DataFrame clipped = df.Clip(3' 7);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: i != 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: df.Clip(3' 7' true);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameClip,The following statement contains a magic number: df.Clip(3' 7' true);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: List<int> verify = new List<int> { 0' 2' 4' 6' 8 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: List<int> verify = new List<int> { 0' 2' 4' 6' 8 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: List<int> verify = new List<int> { 0' 2' 4' 6' 8 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: List<int> verify = new List<int> { 0' 2' 4' 6' 8 };
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: Assert.Equal(5' boolColumnFiltered.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: DataFrame intEnumerableFiltered = df[Enumerable.Range(0' 10)];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: DataFrame boolEnumerableFiltered = df[Enumerable.Range(0' 10).Select(x => true)];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDataFrameFilter,The following statement contains a magic number: DataFrame longEnumerableFiltered = df[Enumerable.Range(0' 10).Select(x => (long)x)];
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestPrefixAndSuffix,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSample,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSample,The following statement contains a magic number: DataFrame sampled = df.Sample(3);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestSample,The following statement contains a magic number: Assert.Equal(3' sampled.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: DataFrame left = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: DataFrame right = MakeDataFrameWithAllMutableColumnTypes(5);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(10' merge.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_right"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_left"][5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(5' merge.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][3]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_right"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_right"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_right"][4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: right = MakeDataFrameWithAllMutableColumnTypes(15);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][6]' right["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][6]' right["Int"][6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_left"][12]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(16' merge.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_left"][12]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Null(merge["Int_left"][5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(9' merge.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestMerge,The following statement contains a magic number: Assert.Equal(merge["Int_right"][2]' right["Int"][2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal("Min"' descriptionColumn[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal("Mean"' descriptionColumn[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal(4' column.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)9' column[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)9' column[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)0' column[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)4' column[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)4' column[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal(4' dateTimeColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Equal((float)10' dateTimeColumn[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Null(dateTimeColumn[2]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDescription,The following statement contains a magic number: Assert.Null(dateTimeColumn[3]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestInfo,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestInfo,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestInfo,The following statement contains a magic number: Assert.Equal(2' column.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDropNulls,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(20);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDropNulls,The following statement contains a magic number: Assert.Equal(19' anyNulls.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestDropNulls,The following statement contains a magic number: Assert.Equal(19' allNulls.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: DataFrame df = MakeDataFrameWithTwoColumns(20);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Null(df[10' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: DataFrame fillNulls = df.FillNulls(1000);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(1000' (int)fillNulls[10' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(1000' (int)fillNulls[10' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Null(df[10' 0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: df.FillNulls(1000' true);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(1000' df[10' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(1000' df[10' 1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' strColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' strColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' strColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' strColumn.NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' filled.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestFillNulls,The following statement contains a magic number: Assert.Equal(2' strColumn.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestValueCounts,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10' withNulls: false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestValueCounts,The following statement contains a magic number: Assert.Equal(2' valueCounts.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestValueCounts,The following statement contains a magic number: Assert.Equal((long)5' valueCounts["Counts"][0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestValueCounts,The following statement contains a magic number: Assert.Equal((long)5' valueCounts["Counts"][1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestApplyElementwiseNullCount,The following statement contains a magic number: DataFrame df = MakeDataFrameWithTwoColumns(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestApplyElementwiseNullCount,The following statement contains a magic number: column.ApplyElementwise((int? value' long rowIndex) =>              {                  return 5;              });
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnCreationFromExisitingColumn,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnCreationFromExisitingColumn,The following statement contains a magic number: PrimitiveDataFrameColumn<bool> bigInts = new PrimitiveDataFrameColumn<bool>("BigInts"' df["Int"].ElementwiseGreaterThan(5));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnCreationFromExisitingColumn,The following statement contains a magic number: i <= 5
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumnCreationFromExisitingColumn,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestColumns,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllColumnTypes(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: DataFrame df = MakeDataFrame<int' bool>(10);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: df.Append(new List<object> { 5' true });
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(11' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: df.Append(new List<object> { 100 });
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(12' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(2' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(13' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(2' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(3' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: df.Append(new List<KeyValuePair<string' object>> { KeyValuePair.Create("Column1"' (object)5)' KeyValuePair.Create("Column2"' (object)false) });
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(14' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(2' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(3' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: df.Append(new List<KeyValuePair<string' object>> { KeyValuePair.Create("Column1"' (object)5) });
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(15' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(15' df["Column1"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(15' df["Column2"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(2' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(4' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(16' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(16' df["Column1"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(16' df["Column2"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(3' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(4' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(17' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(17' df["Column1"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(17' df["Column2"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(4' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(5' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Throws<FormatException>(() => df.Append(new List<object> { 5' "str" }));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => df.Append(new List<object> { 5' true' true }));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(18' df.RowCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(18' df["Column1"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(18' df["Column2"].Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(5' df.Columns[0].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestAppendRow,The following statement contains a magic number: Assert.Equal(6' df.Columns[1].NullCount);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: IDataView dataView = MakeDataFrameWithAllColumnTypes(10' withNulls: false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal(10' preview.RowView.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal(15' preview.ColumnView.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Double"' preview.ColumnView[2].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((double)0' preview.ColumnView[2].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((double)1' preview.ColumnView[2].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Float"' preview.ColumnView[3].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((float)0' preview.ColumnView[3].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((float)1' preview.ColumnView[3].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Int"' preview.ColumnView[4].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((int)0' preview.ColumnView[4].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((int)1' preview.ColumnView[4].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Long"' preview.ColumnView[5].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((long)0' preview.ColumnView[5].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((long)1' preview.ColumnView[5].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Sbyte"' preview.ColumnView[6].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((sbyte)0' preview.ColumnView[6].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((sbyte)1' preview.ColumnView[6].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Short"' preview.ColumnView[7].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((short)0' preview.ColumnView[7].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((short)1' preview.ColumnView[7].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Uint"' preview.ColumnView[8].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((uint)0' preview.ColumnView[8].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((uint)1' preview.ColumnView[8].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Ulong"' preview.ColumnView[9].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ulong)0' preview.ColumnView[9].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ulong)1' preview.ColumnView[9].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Ushort"' preview.ColumnView[10].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[10].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)1' preview.ColumnView[10].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("String"' preview.ColumnView[11].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("0".AsMemory()' preview.ColumnView[11].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("1".AsMemory()' preview.ColumnView[11].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Char"' preview.ColumnView[12].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)65' preview.ColumnView[12].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)65' preview.ColumnView[12].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)66' preview.ColumnView[12].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal((ushort)66' preview.ColumnView[12].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("Bool"' preview.ColumnView[13].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal(false' preview.ColumnView[13].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("ArrowString"' preview.ColumnView[14].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("foo".ToString()' preview.ColumnView[14].Values[0].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataView,The following statement contains a magic number: Assert.Equal("foo".ToString()' preview.ColumnView[14].Values[1].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The following statement contains a magic number: DataFrame df = MakeDataFrameWithAllMutableColumnTypes(10' withNulls: false);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The following statement contains a magic number: Assert.Equal(14' schema.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The following statement contains a magic number: Assert.Equal(13' schema.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The following statement contains a magic number: DataFrameColumn boolColumn = new PrimitiveDataFrameColumn<bool>("Bool"' Enumerable.Range(0' (int)df.RowCount).Select(x => x % 2 == 1));
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewSchemaInvalidate,The following statement contains a magic number: Assert.Equal(14' schema.Count);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: int length = 10;
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(15' preview.ColumnView.Length);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((byte)4' preview.ColumnView[0].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((byte)4' preview.ColumnView[0].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((byte)0' preview.ColumnView[0].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((byte)6' preview.ColumnView[0].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((byte)6' preview.ColumnView[0].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)4' preview.ColumnView[1].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)4' preview.ColumnView[1].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(double.NaN' preview.ColumnView[1].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)6' preview.ColumnView[1].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)6' preview.ColumnView[1].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Double"' preview.ColumnView[2].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)0' preview.ColumnView[2].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)1' preview.ColumnView[2].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)4' preview.ColumnView[2].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)4' preview.ColumnView[2].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)4' preview.ColumnView[2].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(double.NaN' preview.ColumnView[2].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(double.NaN' preview.ColumnView[2].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)6' preview.ColumnView[2].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)6' preview.ColumnView[2].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((double)6' preview.ColumnView[2].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Float"' preview.ColumnView[3].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)0' preview.ColumnView[3].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)1' preview.ColumnView[3].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)4' preview.ColumnView[3].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)4' preview.ColumnView[3].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)4' preview.ColumnView[3].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(float.NaN' preview.ColumnView[3].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(float.NaN' preview.ColumnView[3].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)6' preview.ColumnView[3].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)6' preview.ColumnView[3].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((float)6' preview.ColumnView[3].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Int"' preview.ColumnView[4].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)0' preview.ColumnView[4].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)1' preview.ColumnView[4].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)4' preview.ColumnView[4].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)4' preview.ColumnView[4].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)4' preview.ColumnView[4].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)0' preview.ColumnView[4].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)0' preview.ColumnView[4].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)6' preview.ColumnView[4].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)6' preview.ColumnView[4].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((int)6' preview.ColumnView[4].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Long"' preview.ColumnView[5].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)0' preview.ColumnView[5].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)1' preview.ColumnView[5].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)4' preview.ColumnView[5].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)4' preview.ColumnView[5].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)4' preview.ColumnView[5].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)0' preview.ColumnView[5].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)0' preview.ColumnView[5].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)6' preview.ColumnView[5].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)6' preview.ColumnView[5].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((long)6' preview.ColumnView[5].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Sbyte"' preview.ColumnView[6].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)0' preview.ColumnView[6].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)1' preview.ColumnView[6].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)4' preview.ColumnView[6].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)4' preview.ColumnView[6].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)4' preview.ColumnView[6].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)0' preview.ColumnView[6].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)0' preview.ColumnView[6].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)6' preview.ColumnView[6].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)6' preview.ColumnView[6].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((sbyte)6' preview.ColumnView[6].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Short"' preview.ColumnView[7].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)0' preview.ColumnView[7].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)1' preview.ColumnView[7].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)4' preview.ColumnView[7].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)4' preview.ColumnView[7].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)4' preview.ColumnView[7].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)0' preview.ColumnView[7].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)0' preview.ColumnView[7].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)6' preview.ColumnView[7].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)6' preview.ColumnView[7].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((short)6' preview.ColumnView[7].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Uint"' preview.ColumnView[8].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)0' preview.ColumnView[8].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)1' preview.ColumnView[8].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)4' preview.ColumnView[8].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)4' preview.ColumnView[8].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)4' preview.ColumnView[8].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)0' preview.ColumnView[8].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)0' preview.ColumnView[8].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)6' preview.ColumnView[8].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)6' preview.ColumnView[8].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((uint)6' preview.ColumnView[8].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Ulong"' preview.ColumnView[9].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)0' preview.ColumnView[9].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)1' preview.ColumnView[9].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)4' preview.ColumnView[9].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)4' preview.ColumnView[9].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)4' preview.ColumnView[9].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)0' preview.ColumnView[9].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)0' preview.ColumnView[9].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)6' preview.ColumnView[9].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)6' preview.ColumnView[9].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ulong)6' preview.ColumnView[9].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Ushort"' preview.ColumnView[10].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[10].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)1' preview.ColumnView[10].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)4' preview.ColumnView[10].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)4' preview.ColumnView[10].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)4' preview.ColumnView[10].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[10].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[10].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)6' preview.ColumnView[10].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)6' preview.ColumnView[10].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)6' preview.ColumnView[10].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("String"' preview.ColumnView[11].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("0"' preview.ColumnView[11].Values[0].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("1"' preview.ColumnView[11].Values[1].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("4"' preview.ColumnView[11].Values[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("4"' preview.ColumnView[11].Values[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(""' preview.ColumnView[11].Values[5].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(""' preview.ColumnView[11].Values[5].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("6"' preview.ColumnView[11].Values[6].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("6"' preview.ColumnView[11].Values[6].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Char"' preview.ColumnView[12].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)65' preview.ColumnView[12].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)65' preview.ColumnView[12].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)66' preview.ColumnView[12].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)66' preview.ColumnView[12].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)69' preview.ColumnView[12].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)69' preview.ColumnView[12].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)69' preview.ColumnView[12].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[12].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)0' preview.ColumnView[12].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)71' preview.ColumnView[12].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)71' preview.ColumnView[12].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal((ushort)71' preview.ColumnView[12].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("Bool"' preview.ColumnView[13].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[0]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(false' preview.ColumnView[13].Values[1]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[4]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(false' preview.ColumnView[13].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(false' preview.ColumnView[13].Values[5]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(true' preview.ColumnView[13].Values[6]);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("ArrowString"' preview.ColumnView[14].Column.Name);
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[0].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[1].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[4].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(""' preview.ColumnView[14].Values[5].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal(""' preview.ColumnView[14].Values[5].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[6].ToString());
Magic Number,Microsoft.Data.Analysis.Tests,DataFrameTests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\Microsoft.Data.Analysis.Tests\DataFrame.IOTests.cs,TestIDataViewWithNulls,The following statement contains a magic number: Assert.Equal("foo"' preview.ColumnView[14].Values[6].ToString());
