Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,DecodeNoNeedToStich,The method has 5 parameters. Parameters: source1' source2' destination' bytesConsumed' bytesWritten
Long Parameter List,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,DecodeStichUsingStack,The method has 6 parameters. Parameters: source1' source2' destination' stackSpan' bytesConsumed' bytesWritten
Long Statement,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,DecodeStichUsingStack,The length of the statement  "                    Base64.DecodeFromUtf8(stackSpan.Slice(0' amountOfData)' destination.Slice(written1)' out int consumed2' out int written2); " is 122.
Long Statement,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,DecodeStichUsingStack,The length of the statement  "            Base64.DecodeFromUtf8(source2.Slice(afterMergeSlice)' destination.Slice(bytesWritten)' out int consumed3' out int written3); " is 124.
Long Statement,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaksMime,The length of the statement  "                Assert.Equal(OperationStatus.Done' Base64.EncodeToUtf8(source' encodedBytes' out int consumed' out int encodedBytesCount)); " is 123.
Long Statement,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaksMime,The length of the statement  "                Assert.True(OperationStatus.Done == Base64Experimental.EncodeToUtf8(source' encodedBytesWithLineBreaks' out consumed' out encodedBytesCount' format)' "At index: " + numBytes); " is 175.
Long Statement,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaks,The length of the statement  "                Assert.True(OperationStatus.Done == Base64Experimental.EncodeToUtf8(source' encodedBytesWithLineBreaks' out int consumed' out int encodedBytesCount' format)' "At index: " + numBytes); " is 183.
Long Statement,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The length of the statement  "            Assert.Equal(OperationStatus.Done' Base64.DecodeFromUtf8(inputSpan' expected' out int bytesConsumed' out int bytesWritten)); " is 124.
Magic Number,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,SplitSourceIntoSpans,The following statement contains a magic number: int boundary = inputBufferSize / 5 * 2 + (misaligned ? 2 : 0);
Magic Number,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,SplitSourceIntoSpans,The following statement contains a magic number: int boundary = inputBufferSize / 5 * 2 + (misaligned ? 2 : 0);
Magic Number,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,SplitSourceIntoSpans,The following statement contains a magic number: int boundary = inputBufferSize / 5 * 2 + (misaligned ? 2 : 0);
Magic Number,System.Binary.Base64Experimental.Tests,Base64TestHelper,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\Base64TestHelper.cs,DecodeStichUsingStack,The following statement contains a magic number: leftOverBytes < 4
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaksMime,The following statement contains a magic number: char[] charArray = new char[numBytes * 10];
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaksMime,The following statement contains a magic number: numBytes < 1000
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaks,The following statement contains a magic number: var format = new StandardFormat('N'' 64);
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaks,The following statement contains a magic number: char[] charArray = new char[numBytes * 10];
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,BasicEncodingWithLineBreaks,The following statement contains a magic number: numBytes < 1000
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: Span<byte> inputSpan = new byte[1000];
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: byte[][] input = new byte[10][];
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: int[] split = { 100' 102' 98' 101' 2' 97' 101' 1' 2' 396 };
Magic Number,System.Binary.Base64Experimental.Tests,Base64Tests,D:\research\architectureSmells\repos\dotnet_corefxlab\tests\System.Binary.Base64.Tests\BasicUnitTests.cs,ValidInputOnlyMultiByte,The following statement contains a magic number: Assert.Equal(1000' sum);
