Implementation smell,Namespace,Class,File,Method,Description
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,TryDecodeCodePoint,The following statement contains a magic number: switch (bytesConsumed)              {                  case 1:                      codePoint = first;                      break;                    case 2:                      codePoint = (uint)(first & b0001_1111U);                      break;                    case 3:                      codePoint = (uint)(first & b0000_1111U);                      break;                    case 4:                      codePoint = (uint)(first & b0000_0111U);                      break;                    default:                      codePoint = default;                      bytesConsumed = 0;                      return false;              }
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,TryDecodeCodePoint,The following statement contains a magic number: switch (bytesConsumed)              {                  case 1:                      codePoint = first;                      break;                    case 2:                      codePoint = (uint)(first & b0001_1111U);                      break;                    case 3:                      codePoint = (uint)(first & b0000_1111U);                      break;                    case 4:                      codePoint = (uint)(first & b0000_0111U);                      break;                    default:                      codePoint = default;                      bytesConsumed = 0;                      return false;              }
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,TryDecodeCodePoint,The following statement contains a magic number: switch (bytesConsumed)              {                  case 1:                      codePoint = first;                      break;                    case 2:                      codePoint = (uint)(first & b0001_1111U);                      break;                    case 3:                      codePoint = (uint)(first & b0000_1111U);                      break;                    case 4:                      codePoint = (uint)(first & b0000_0111U);                      break;                    default:                      codePoint = default;                      bytesConsumed = 0;                      return false;              }
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,TryDecodeCodePoint,The following statement contains a magic number: for (var i = 1; i < bytesConsumed; i++)              {                  uint current = utf8[index + i];                  if ((current & b1100_0000U) != b1000_0000U)                  {                      bytesConsumed = 0;                      codePoint = default;                      return false;                  }                    codePoint = (codePoint << 6) | (b0011_1111U & current);              }
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetEncodedBytes,The following statement contains a magic number: if ((b & b1110_0000U) == b1100_0000U)                  return 2;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetEncodedBytes,The following statement contains a magic number: if ((b & b1111_0000U) == b1110_0000U)                  return 3;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetEncodedBytes,The following statement contains a magic number: if ((b & b1111_1000U) == b1111_0000U)                  return 4;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetNumberOfEncodedBytes,The following statement contains a magic number: if (codePoint <= 0x7FF)                  return 2;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetNumberOfEncodedBytes,The following statement contains a magic number: if (codePoint <= 0xFFFF)                  return 3;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,GetNumberOfEncodedBytes,The following statement contains a magic number: if (codePoint <= 0x10FFFF)                  return 4;
Magic Number,System.Text.Primitives,Utf8Helper,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Primitives\Utf8Helper.cs,TryDecodeCodePointFromString,The following statement contains a magic number: encodedChars = char.IsHighSurrogate(s[index]) ? 2 : 1;
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
Magic Number,System.Text.Utf8,Utf8Span,C:\repos\dotnet_corefxlab\src\System.Text.Utf8String\System\Text\Utf8Span.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (Bytes.Length <= 4)                  {                      int hash = Bytes.Length;                      for (int i = 0; i < Bytes.Length; i++)                      {                          hash <<= 8;                          hash ^= (byte)Bytes[i];                      }                      return hash;                  }                  else                  {                      int hash = Bytes.Length;                      hash ^= (byte)Bytes[0];                      hash <<= 8;                      hash ^= (byte)Bytes[1];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 2];                      hash <<= 8;                      hash ^= (byte)Bytes[Bytes.Length - 1];                      return hash;                  }              }
