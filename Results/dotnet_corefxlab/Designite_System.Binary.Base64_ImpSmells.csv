Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The method has 6 parameters. Parameters: bytes' utf8' consumed' written' format' isFinalBlock
Long Statement,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The length of the statement  "                status = Base64.EncodeToUtf8(bytes.Slice(0' bytesInOneLine)' utf8.Slice(0' lineLength)' out int bytesConsumedLoop' out int bytesWrittenLoop); " is 141.
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,ValidateFormat,The following statement contains a magic number: if (symbol == 'N')              {                  if (format.Precision > MaxLineLength || format.Precision % 4 != 0 || format.Precision == 0)                  {                      throw new FormatException($"Format {format.Symbol}:{format.Precision} not supported for Base64 Encoding.");                  }                  return format;              }
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,GetMaxEncodedToUtf8Length,The following statement contains a magic number: int bytesInOneLine = (format.Precision >> 2) * 3;
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,GetMaxEncodedToUtf8Length,The following statement contains a magic number: int bytesInOneLine = (format.Precision >> 2) * 3;
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,GetMaxEncodedToUtf8Length,The following statement contains a magic number: int extra = ((length - 1) / bytesInOneLine) * 2;
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The following statement contains a magic number: int bytesInOneLine = (format.Precision >> 2) * 3;
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The following statement contains a magic number: int bytesInOneLine = (format.Precision >> 2) * 3;
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The following statement contains a magic number: int numLineBreaks = utf8.Length / (lineLength + 2);
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The following statement contains a magic number: if ((utf8.Length % (lineLength + 2)) == (lineLength + 1))              {                  numLineBreaks++;              }
Magic Number,System.Binary.Base64Experimental,Base64Experimental,C:\repos\dotnet_corefxlab\src\System.Binary.Base64\System\Binary\Base64Decoder.cs,EncodeToUtf8,The following statement contains a magic number: for (int i = 0; i < numLineBreaks; i++)              {                  status = Base64.EncodeToUtf8(bytes.Slice(0' bytesInOneLine)' utf8.Slice(0' lineLength)' out int bytesConsumedLoop' out int bytesWrittenLoop);                  utf8[lineLength] = (byte)'\r';                  utf8[lineLength + 1] = (byte)'\n';                  bytesWrittenLoop += 2;                  bytes = bytes.Slice(bytesConsumedLoop);                  utf8 = utf8.Slice(bytesWrittenLoop);                  consumed += bytesConsumedLoop;                  written += bytesWrittenLoop;              }
