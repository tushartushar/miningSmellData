Implementation smell,Namespace,Class,File,Method,Description
Magic Number,LibuvWithNonAllocatingFormatters,Program,D:\research\architectureSmells\repos\dotnet_corefxlab\samples\LibuvWithNonAllocatingFormatters\Program.cs,Main,The following statement contains a magic number: args.Length < 1 || args[0].Substring(0' 4) != "/ip:"
Magic Number,LibuvWithNonAllocatingFormatters,Program,D:\research\architectureSmells\repos\dotnet_corefxlab\samples\LibuvWithNonAllocatingFormatters\Program.cs,Main,The following statement contains a magic number: var options = args[0].Substring(4).Split(':');
Magic Number,LibuvWithNonAllocatingFormatters,Program,D:\research\architectureSmells\repos\dotnet_corefxlab\samples\LibuvWithNonAllocatingFormatters\Program.cs,Main,The following statement contains a magic number: options.Length != 2
Magic Number,LibuvWithNonAllocatingFormatters,Program,D:\research\architectureSmells\repos\dotnet_corefxlab\samples\LibuvWithNonAllocatingFormatters\Program.cs,RunLoop,The following statement contains a magic number: listener.ConnectionAccepted += (Tcp connection) =>              {                  if (log)                  {                      Console.WriteLine("connection accepted");                  }                    connection.ReadCompleted += (data) =>                  {                      if (log)                      {                          unsafe                          {                              var requestString = new Utf8Span(data.Span);                              Console.WriteLine("*REQUEST:\n {0}"' requestString.ToString());                          }                      }                        var formatter = new ArrayFormatter(512' SymbolTable.InvariantUtf8);                      formatter.Clear();                      formatter.Append("HTTP/1.1 200 OK");                      formatter.Append("\r\n\r\n");                      formatter.Append("Hello World!");                      if (log)                      {                          formatter.Format(" @ {0:O}"' DateTime.UtcNow);                      }                        var segment = formatter.Formatted;                      using (var memory = new OwnedPinnedBuffer<byte>(segment.Array))                      {                          connection.TryWrite(memory.Memory.Slice(segment.Offset' segment.Count));                          connection.Dispose();                      }                  };                    connection.ReadStart();              };
