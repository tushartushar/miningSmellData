Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,TryGetValue,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,TryGetValue,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,PeekType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,ParseNumber,Cyclomatic complexity of the method is 8
Long Statement,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,HasValue,The length of the statement  "                return (_values[record.Location] != 'n' || _values[record.Location + 1] != 'u' || _values[record.Location + 2] != 'l' || _values[record.Location + 3] != 'l'); " is 158.
Long Statement,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,FindLocation,The length of the statement  "                if (row.Length == -1 && (lookingForObject ? row.Type == JsonObject.JsonValueType.Object : row.Type == JsonObject.JsonValueType.Array)) { " is 136.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The conditional expression  "length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The conditional expression  "length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The conditional expression  "length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The conditional expression  "length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeInfinity,The conditional expression  "length < 8 + idx                      || Unsafe.Add(ref src' idx++) != 'I'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'f'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 't'                      || Unsafe.Add(ref src' idx++) != 'y'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeInfinity,The conditional expression  "length < 16 + idx                      || Unsafe.Add(ref chars' idx++) != 'I'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'f'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 't'                      || Unsafe.Add(ref chars' idx++) != 'y'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The conditional expression  "length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The conditional expression  "length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The conditional expression  "length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The conditional expression  "length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The conditional expression  "length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e'"  is complex.
Complex Conditional,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The conditional expression  "length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e'"  is complex.
Magic Number,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,TryGetValue,The following statement contains a magic number: for (int i = DbRow.Size; i <= _db.Length; i += DbRow.Size) {                  record = ReadMachineEndian<DbRow>(_db.Slice(i));                    if (!record.IsSimpleValue) {                      i += record.Length * DbRow.Size;                      continue;                  }                    if (new Utf8Span(_values.Slice(record.Location' record.Length)) == propertyName) {                      int newStart = i + DbRow.Size;                      int newEnd = newStart + DbRow.Size;                        record = ReadMachineEndian<DbRow>(_db.Slice(newStart));                        if (!record.IsSimpleValue) {                          newEnd = newEnd + DbRow.Size * record.Length;                      }                        value = new JsonObject(_values' _db.Slice(newStart' newEnd - newStart));                      return true;                  }                    var valueType = ReadMachineEndian<JsonValueType>(_db.Slice(i + DbRow.Size + 8));                  if (valueType != JsonValueType.Object && valueType != JsonValueType.Array) {                      i += DbRow.Size;                  }              }
Magic Number,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,TryGetValue,The following statement contains a magic number: for (int i = DbRow.Size; i <= _db.Length; i += DbRow.Size) {                  record = ReadMachineEndian<DbRow>(_db.Slice(i));                    if (!record.IsSimpleValue) {                      i += record.Length * DbRow.Size;                      continue;                  }                    if (new Utf8Span(_values.Slice(record.Location' record.Length)) == propertyName) {                      int newStart = i + DbRow.Size;                      int newEnd = newStart + DbRow.Size;                        record = ReadMachineEndian<DbRow>(_db.Slice(newStart));                        if (!record.IsSimpleValue) {                          newEnd = newEnd + DbRow.Size * record.Length;                      }                        value = new JsonObject(_values' _db.Slice(newStart' newEnd - newStart));                      return true;                  }                    var valueType = ReadMachineEndian<JsonValueType>(_db.Slice(i + DbRow.Size + 8));                  if (valueType != JsonValueType.Object && valueType != JsonValueType.Array) {                      i += DbRow.Size;                  }              }
Magic Number,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,HasValue,The following statement contains a magic number: if (!record.IsSimpleValue) {                  if (record.Length == 0) return false;                  return true;              } else {                  if (_values[record.Location - 1] == '"' && _values[record.Location + 4] == '"') {                      return true;                  }                  return (_values[record.Location] != 'n' || _values[record.Location + 1] != 'u' || _values[record.Location + 2] != 'l' || _values[record.Location + 3] != 'l');              }
Magic Number,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,HasValue,The following statement contains a magic number: if (!record.IsSimpleValue) {                  if (record.Length == 0) return false;                  return true;              } else {                  if (_values[record.Location - 1] == '"' && _values[record.Location + 4] == '"') {                      return true;                  }                  return (_values[record.Location] != 'n' || _values[record.Location + 1] != 'u' || _values[record.Location + 2] != 'l' || _values[record.Location + 3] != 'l');              }
Magic Number,System.Text.Json,JsonObject,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParseObject.cs,HasValue,The following statement contains a magic number: if (!record.IsSimpleValue) {                  if (record.Length == 0) return false;                  return true;              } else {                  if (_values[record.Location - 1] == '"' && _values[record.Location + 4] == '"') {                      return true;                  }                  return (_values[record.Location] != 'n' || _values[record.Location + 1] != 'u' || _values[record.Location + 2] != 'l' || _values[record.Location + 3] != 'l');              }
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,TwoStacks,The following statement contains a magic number: capacity = _memory.Length/8;
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,TryPushObject,The following statement contains a magic number: if (!IsFull) {                  WriteMachineEndian(_memory.Slice(topOfStackObj - 8).Span' ref value);                  topOfStackObj -= 8;                  objectStackCount++;                  return true;              }
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,TryPushObject,The following statement contains a magic number: if (!IsFull) {                  WriteMachineEndian(_memory.Slice(topOfStackObj - 8).Span' ref value);                  topOfStackObj -= 8;                  objectStackCount++;                  return true;              }
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,TryPushArray,The following statement contains a magic number: if (!IsFull) {                  WriteMachineEndian(_memory.Slice(topOfStackArr - 4).Span' ref value);                  topOfStackArr -= 8;                  arrayStackCount++;                  return true;              }
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,TryPushArray,The following statement contains a magic number: if (!IsFull) {                  WriteMachineEndian(_memory.Slice(topOfStackArr - 4).Span' ref value);                  topOfStackArr -= 8;                  arrayStackCount++;                  return true;              }
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,PopObject,The following statement contains a magic number: topOfStackObj += 8;
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,PopArray,The following statement contains a magic number: var value = ReadMachineEndian<int>(_memory.Slice(topOfStackArr + 4).Span);
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,PopArray,The following statement contains a magic number: topOfStackArr += 8;
Magic Number,System.Text.Json,TwoStacks,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,Resize,The following statement contains a magic number: _memory.Slice(0' Math.Max(objectStackCount' arrayStackCount) * 8).Span.CopyTo(newStackMemory.Span);
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,Parse,The following statement contains a magic number: _scratchManager = _pool.Rent(utf8Json.Length * 4);
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,Parse,The following statement contains a magic number: int dbLength = _scratchMemory.Length / 2;
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,ResizeDb,The following statement contains a magic number: var newScratch = _pool.Rent(_scratchMemory.Length * 2);
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,ResizeDb,The following statement contains a magic number: int dbLength = newScratch.Length / 2;
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,FindLocation,The following statement contains a magic number: while (true) {                  int rowStartOffset = rowNumber * DbRow.Size;                  var row = ReadMachineEndian<DbRow>(_db.Slice(rowStartOffset).Span);                    int lengthOffset = rowStartOffset + 4;                                    if (row.Length == -1 && (lookingForObject ? row.Type == JsonObject.JsonValueType.Object : row.Type == JsonObject.JsonValueType.Array)) {                      numFound++;                  }                    if (index == numFound - 1) {                      return lengthOffset;                  } else {                      if (row.Length > 0 && (row.Type == JsonObject.JsonValueType.Object || row.Type == JsonObject.JsonValueType.Array)) {                          rowNumber += row.Length;                      }                      rowNumber++;                  }              }
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,ParseString,The following statement contains a magic number: do {                  indexOfClosingQuote = _values.Slice(indexOfClosingQuote).IndexOf((byte)'"');              } while (AreNumOfBackSlashesAtEndOfStringOdd(_valuesIndex + indexOfClosingQuote - 2));
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,AreNumOfBackSlashesAtEndOfStringOdd,The following statement contains a magic number: while (nextByte == '\\') {                  numOfBackSlashes++;                  if ((length - numOfBackSlashes) < 0) return numOfBackSlashes % 2 != 0;                  nextByte = _values[count - numOfBackSlashes];              }
Magic Number,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,AreNumOfBackSlashesAtEndOfStringOdd,The following statement contains a magic number: return numOfBackSlashes % 2 != 0;
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNaN,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 3                      || Unsafe.Add(ref src' 0) != 'N'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 3;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 6                      || Unsafe.Add(ref chars' 0) != 'N'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'N')                  {                      throw new JsonReaderException();                  }                    return 6;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeNull,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 'n'                      || Unsafe.Add(ref src' 1) != 'u'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 'n'                      || Unsafe.Add(ref chars' 1) != 'u'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 'l')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeInfinity,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 8 + idx                      || Unsafe.Add(ref src' idx++) != 'I'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'f'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 't'                      || Unsafe.Add(ref src' idx++) != 'y')                  {                      throw new JsonReaderException();                  }                    return idx;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 16 + idx                      || Unsafe.Add(ref chars' idx++) != 'I'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'f'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 't'                      || Unsafe.Add(ref chars' idx++) != 'y')                  {                      throw new JsonReaderException();                  }                    return idx;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeInfinity,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 8 + idx                      || Unsafe.Add(ref src' idx++) != 'I'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'f'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 'n'                      || Unsafe.Add(ref src' idx++) != 'i'                      || Unsafe.Add(ref src' idx++) != 't'                      || Unsafe.Add(ref src' idx++) != 'y')                  {                      throw new JsonReaderException();                  }                    return idx;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 16 + idx                      || Unsafe.Add(ref chars' idx++) != 'I'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'f'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 'n'                      || Unsafe.Add(ref chars' idx++) != 'i'                      || Unsafe.Add(ref chars' idx++) != 't'                      || Unsafe.Add(ref chars' idx++) != 'y')                  {                      throw new JsonReaderException();                  }                    return idx;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeUndefined,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 9                      || Unsafe.Add(ref src' 0) != 'u'                      || Unsafe.Add(ref src' 1) != 'n'                      || Unsafe.Add(ref src' 2) != 'd'                      || Unsafe.Add(ref src' 3) != 'e'                      || Unsafe.Add(ref src' 4) != 'f'                      || Unsafe.Add(ref src' 5) != 'i'                      || Unsafe.Add(ref src' 6) != 'n'                      || Unsafe.Add(ref src' 7) != 'e'                      || Unsafe.Add(ref src' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 9;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 18                      || Unsafe.Add(ref chars' 0) != 'u'                      || Unsafe.Add(ref chars' 1) != 'n'                      || Unsafe.Add(ref chars' 2) != 'd'                      || Unsafe.Add(ref chars' 3) != 'e'                      || Unsafe.Add(ref chars' 4) != 'f'                      || Unsafe.Add(ref chars' 5) != 'i'                      || Unsafe.Add(ref chars' 6) != 'n'                      || Unsafe.Add(ref chars' 7) != 'e'                      || Unsafe.Add(ref chars' 8) != 'd')                  {                      throw new JsonReaderException();                  }                    return 18;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeFalse,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 5                      || Unsafe.Add(ref src' 0) != 'f'                      || Unsafe.Add(ref src' 1) != 'a'                      || Unsafe.Add(ref src' 2) != 'l'                      || Unsafe.Add(ref src' 3) != 's'                      || Unsafe.Add(ref src' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 5;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 10                      || Unsafe.Add(ref chars' 0) != 'f'                      || Unsafe.Add(ref chars' 1) != 'a'                      || Unsafe.Add(ref chars' 2) != 'l'                      || Unsafe.Add(ref chars' 3) != 's'                      || Unsafe.Add(ref chars' 4) != 'e')                  {                      throw new JsonReaderException();                  }                    return 10;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeTrue,The following statement contains a magic number: if (UseFastUtf8)              {                  if (length < 4                      || Unsafe.Add(ref src' 0) != 't'                      || Unsafe.Add(ref src' 1) != 'r'                      || Unsafe.Add(ref src' 2) != 'u'                      || Unsafe.Add(ref src' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 4;              }              else if (UseFastUtf16)              {                  ref char chars = ref Unsafe.As<byte' char>(ref src);                  if (length < 8                      || Unsafe.Add(ref chars' 0) != 't'                      || Unsafe.Add(ref chars' 1) != 'r'                      || Unsafe.Add(ref chars' 2) != 'u'                      || Unsafe.Add(ref chars' 3) != 'e')                  {                      throw new JsonReaderException();                  }                    return 8;              }              else                  throw new NotImplementedException();
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumePropertyNameUtf16,The following statement contains a magic number: consumed += 2;
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeStringUtf8,The following statement contains a magic number: Value = _buffer.Slice(startIndex' idx - 2);
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeStringUtf16,The following statement contains a magic number: int startIndex = (int)Unsafe.ByteOffset(ref _buffer.DangerousGetPinnableReference()' ref src) + 2;
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeStringUtf16,The following statement contains a magic number: length = (idx - 2) << 1;
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,GetNextCharAscii,The following statement contains a magic number: if (reader.UseFastUtf8)              {                  if (length < 1)                  {                      ch = default;                      return 0;                  }                    ch = (char)src;                  return 1;              }              else if (reader.UseFastUtf16)              {                  if (length < 2)                  {                      ch = default;                      return 0;                  }                    ch = Unsafe.As<byte' char>(ref src);                  return 2;              }              else              {                  throw new NotImplementedException();              }
Magic Number,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,GetNextCharAscii,The following statement contains a magic number: if (reader.UseFastUtf8)              {                  if (length < 1)                  {                      ch = default;                      return 0;                  }                    ch = (char)src;                  return 1;              }              else if (reader.UseFastUtf16)              {                  if (length < 2)                  {                      ch = default;                      return 0;                  }                    ch = Unsafe.As<byte' char>(ref src);                  return 2;              }              else              {                  throw new NotImplementedException();              }
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteControl,The following statement contains a magic number: if (UseFastUtf8)              {                  EnsureBuffer(1).DangerousGetPinnableReference() = value;                  _output.Advance(1);              }              else if (UseFastUtf16)              {                  var buffer = EnsureBuffer(2);                  Unsafe.As<byte' char>(ref buffer.DangerousGetPinnableReference()) = (char)value;                  _output.Advance(2);              }              else              {                  var buffer = _output.Buffer;                  int written;                  while (!_output.SymbolTable.TryEncode(value' buffer' out written))                      buffer = EnsureBuffer();                    _output.Advance(written);              }
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteControl,The following statement contains a magic number: if (UseFastUtf8)              {                  EnsureBuffer(1).DangerousGetPinnableReference() = value;                  _output.Advance(1);              }              else if (UseFastUtf16)              {                  var buffer = EnsureBuffer(2);                  Unsafe.As<byte' char>(ref buffer.DangerousGetPinnableReference()) = (char)value;                  _output.Advance(2);              }              else              {                  var buffer = _output.Buffer;                  int written;                  while (!_output.SymbolTable.TryEncode(value' buffer' out written))                      buffer = EnsureBuffer();                    _output.Advance(written);              }
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteSpacingUtf8,The following statement contains a magic number: var bytesNeeded = newline ? 2 : 0;
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteSpacingUtf8,The following statement contains a magic number: bytesNeeded += (indent + 1) * 2;
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteSpacingUtf16,The following statement contains a magic number: var bytesNeeded = newline ? 2 : 0;
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,WriteSpacingUtf16,The following statement contains a magic number: bytesNeeded += (indent + 1) * 2;
Magic Number,System.Text.Json,JsonWriter,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonWriter.cs,EnsureBuffer,The following statement contains a magic number: const int BufferEnlargeCount = 1024;
Missing Default,System.Text.Json,JsonParser,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonParser.cs,MoveToNextTokenType,The following switch statement is missing a default case: switch (_tokenType) {                  case JsonTokenType.ObjectStart:                      if (nextByte != '}') {                          _tokenType = JsonTokenType.Property;                          return;                      }                      break;                  case JsonTokenType.ObjectEnd:                      if (nextByte == ''') {                          _valuesIndex++;                          if (_insideObject == _insideArray) {                              _tokenType = !_jsonStartIsObject ? JsonTokenType.Property : JsonTokenType.Value;                              return;                          }                          _tokenType = _insideObject > _insideArray ? JsonTokenType.Property : JsonTokenType.Value;                          return;                      }                      break;                  case JsonTokenType.ArrayStart:                      if (nextByte != ']') {                          _tokenType = JsonTokenType.Value;                          return;                      }                      break;                  case JsonTokenType.ArrayEnd:                      if (nextByte == ''') {                          _valuesIndex++;                          if (_insideObject == _insideArray) {                              _tokenType = !_jsonStartIsObject ? JsonTokenType.Property : JsonTokenType.Value;                              return;                          }                          _tokenType = _insideObject > _insideArray ? JsonTokenType.Property : JsonTokenType.Value;                          return;                      }                      break;                  case JsonTokenType.Property:                      if (nextByte == ''') {                          _valuesIndex++;                          return;                      }                      break;                  case JsonTokenType.Value:                      if (nextByte == ''') {                          _valuesIndex++;                          return;                      }                      break;              }
Missing Default,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,Read,The following switch statement is missing a default case: switch (TokenType)              {                  case JsonTokenType.None:                      if (ch == JsonConstants.OpenBrace)                          StartObject();                      else if (ch == JsonConstants.OpenBracket)                          StartArray();                      else                          throw new JsonReaderException();                      break;                    case JsonTokenType.StartObject:                      if (ch == JsonConstants.CloseBrace)                          EndObject();                      else                          step = ConsumePropertyName(ref next' length);                      break;                    case JsonTokenType.StartArray:                      if (ch == JsonConstants.CloseBracket)                          EndArray();                      else                          step = ConsumeValue(ch' step' ref next' length);                      break;                    case JsonTokenType.PropertyName:                      step = ConsumeValue(ch' step' ref next' length);                      if (step == 0) return false;                      break;                    case JsonTokenType.EndArray:                  case JsonTokenType.EndObject:                  case JsonTokenType.Value:                      step = ConsumeNext(ch' step' ref next' length);                      if (step == 0) return false;                      break;              }
Missing Default,System.Text.Json,JsonReader,C:\repos\dotnet_corefxlab\src\System.Text.Json\System\Text\Json\JsonReader.cs,ConsumeValue,The following switch statement is missing a default case: switch (marker)              {                  case (char)JsonConstants.Quote:                      return ConsumeString(ref src' length);                    case (char)JsonConstants.OpenBrace:                      StartObject();                      ValueType = JsonValueType.Object;                      return markerBytes;                    case (char)JsonConstants.OpenBracket:                      StartArray();                      ValueType = JsonValueType.Array;                      return markerBytes;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return ConsumeNumber(ref src' length);                    case '-':                      int step = GetNextCharAscii(this' ref src' length' out char ch);                      if (step == 0) throw new JsonReaderException();                      return (ch == 'I')                          ? ConsumeInfinity(ref src' length' true)                          : ConsumeNumber(ref src' length);                    case 'f':                      return ConsumeFalse(ref src' length);                    case 't':                      return ConsumeTrue(ref src' length);                    case 'n':                      return ConsumeNull(ref src' length);                    case 'u':                      return ConsumeUndefined(ref src' length);                    case 'N':                      return ConsumeNaN(ref src' length);                    case 'I':                      return ConsumeInfinity(ref src' length' false);                    case '/':                      // TODO: Comments?                      throw new NotImplementedException();              }
