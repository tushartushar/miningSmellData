Implementation smell,Namespace,Class,File,Method,Description
Long Statement,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The length of the statement  "            var status = Encodings.Utf16.ToUtf8(localeId.AsReadOnlySpan().AsBytes()' idBytes' out int consumed' out int idByteCount); " is 121.
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: const int maxIdLength = 15;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: const int recordSize = 20;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: var numberOfIDs = b1 * 256 + b2;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: var indexSize = numberOfIDs * 20;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int record = 0; record < numberOfIDs; record++)              {                  var indexId = index.AsSpan().Slice(record * recordSize' idByteCount);                  if (id.Equals(new Utf8Span(indexId))) // found record                  {                      var indexData = index.AsSpan().Slice(record * recordSize + maxIdLength);                      recordStart = 0;                      recordStart += indexData[3] * 256 * 256 * 256;                      recordStart += indexData[2] * 256 * 256;                      recordStart += indexData[1] * 256;                      recordStart += indexData[0];                      break;                  }              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: const int bufferSize = 512;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: Debug.Assert(numberOfStrings == 17);
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int stringIndex = 0; stringIndex < numberOfStrings; stringIndex++)              {                  var stringStart = ReadUInt16At(data' stringIndex * 2 + 1);                  var stringLength = ReadUInt16At(data' stringIndex * 2 + 2);                  utf16digitsAndSymbols[stringIndex] = new byte[stringLength];                  Array.Copy(data' stringStart' utf16digitsAndSymbols[stringIndex]' 0' stringLength);              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int stringIndex = 0; stringIndex < numberOfStrings; stringIndex++)              {                  var stringStart = ReadUInt16At(data' stringIndex * 2 + 1);                  var stringLength = ReadUInt16At(data' stringIndex * 2 + 2);                  utf16digitsAndSymbols[stringIndex] = new byte[stringLength];                  Array.Copy(data' stringStart' utf16digitsAndSymbols[stringIndex]' 0' stringLength);              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,CreateSymbolTable,The following statement contains a magic number: for (int stringIndex = 0; stringIndex < numberOfStrings; stringIndex++)              {                  var stringStart = ReadUInt16At(data' stringIndex * 2 + 1);                  var stringLength = ReadUInt16At(data' stringIndex * 2 + 2);                  utf16digitsAndSymbols[stringIndex] = new byte[stringLength];                  Array.Copy(data' stringStart' utf16digitsAndSymbols[stringIndex]' 0' stringLength);              }
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,ReadUInt16At,The following statement contains a magic number: ushortIndex *= 2;
Magic Number,System.Text.Formatting,EncodingProvider,C:\repos\dotnet_corefxlab\src\System.Text.Formatting.Globalization\System\Text\Formatting\FormattingDataProvider.cs,ReadUInt16At,The following statement contains a magic number: ushort value = (ushort)(data[ushortIndex + 1] * 256 + data[ushortIndex + 0]);
