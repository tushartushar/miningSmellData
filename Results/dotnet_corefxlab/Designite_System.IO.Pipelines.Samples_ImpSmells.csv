Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.IO.Pipelines.Samples,PipelineHttpClientHandler,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpClient\PipelineHttpClientHandler.cs,ProduceResponse,The method has 138 lines of code.
Long Method,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The method has 119 lines of code.
Complex Method,System.IO.Pipelines.Samples,PipelineHttpClientHandler,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpClient\PipelineHttpClientHandler.cs,ProduceResponse,Cyclomatic complexity of the method is 20
Complex Method,System.IO.Pipelines.Samples,HttpRequestParser,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpRequestParser.cs,ParseRequest,Cyclomatic complexity of the method is 10
Complex Method,System.IO.Pipelines.Samples.Http,RequestHeaderDictionary,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\RequestHeaderDictionary.cs,GetHeaderKey,Cyclomatic complexity of the method is 11
Complex Method,System.IO.Pipelines.Samples.Http,ServerAddress,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ServerAddress.cs,FromUrl,Cyclomatic complexity of the method is 10
Long Statement,System.IO.Pipelines.Samples,Program,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Program.cs,PrintHelp,The length of the statement  "            foreach (var t in typeof(Program).GetTypeInfo().Assembly.GetTypes().Where(t => (typeof(ISample)).IsAssignableFrom(t) && !t.GetTypeInfo().IsAbstract)) " is 149.
Long Statement,System.IO.Pipelines.Samples.Http,HttpRequestStream<TContext>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpRequestStream.cs,Read,The length of the statement  "            // https://github.com/dotnet/corefx/blob/f9da3b4af08214764a51b2331f3595ffaf162abe/src/System.Threading.Tasks.Extensions/src/System/Threading/Tasks/ValueTask.cs#L156 " is 164.
Long Statement,System.IO.Pipelines.Samples.Http,ServerAddress,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ServerAddress.cs,ToString,The length of the statement  "            return Scheme.ToLowerInvariant() + "://" + Host.ToLowerInvariant() + ":" + Port.ToString(CultureInfo.InvariantCulture) + PathBase.ToLowerInvariant(); " is 149.
Long Statement,System.IO.Pipelines.Samples.Http,ServerAddress,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ServerAddress.cs,FromUrl,The length of the statement  "            int portDelimiterStart = url.LastIndexOf(":"' pathDelimiterStart - 1' pathDelimiterStart - schemeDelimiterEnd' StringComparison.Ordinal); " is 137.
Empty Catch Block,System.IO.Pipelines.Samples.Http,SocketHttpServer,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Socket\SocketHttpServer.cs,StartAccepting,The method has an empty catch block.
Magic Number,System.IO.Pipelines.Samples,PipelineHttpClientHandler,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpClient\PipelineHttpClientHandler.cs,ProduceResponse,The following statement contains a magic number: while (true)              {                  var result = await connection.Input.ReadAsync();                  var responseBuffer = result.Buffer;                    var consumed = responseBuffer.Start;                    var needMoreData = true;                    try                  {                      if (consumed == state.Consumed)                      {                          var oldBody = responseBuffer.Slice(0' state.PreviousContentLength);                            if (oldBody.Length != state.PreviousContentLength)                          {                              // Not enough data                              continue;                          }                            // The caller didn't read the body                          responseBuffer = responseBuffer.Slice(state.PreviousContentLength);                          consumed = responseBuffer.Start;                            state.Consumed = default;                      }                        if (responseBuffer.IsEmpty && result.IsCompleted)                      {                          break;                      }                      if (!responseBuffer.TrySliceTo((byte)'\r'' (byte)'\n'' out ReadableBuffer responseLine' out ReadCursor delim))                      {                          continue;                      }                        responseBuffer = responseBuffer.Slice(delim).Slice(2);                        if (!responseLine.TrySliceTo((byte)' '' out ReadableBuffer httpVersion' out delim))                      {                          // Bad request                          throw new InvalidOperationException();                      }                        consumed = responseBuffer.Start;                        responseLine = responseLine.Slice(delim).Slice(1);                        if (!responseLine.TrySliceTo((byte)' '' out ReadableBuffer statusCode' out delim))                      {                          // Bad request                          throw new InvalidOperationException();                      }                        response.StatusCode = (HttpStatusCode)statusCode.GetUInt32();                      responseLine = responseLine.Slice(delim).Slice(1);                        if (!responseLine.TrySliceTo((byte)' '' out ReadableBuffer remaining' out delim))                      {                          // Bad request                          throw new InvalidOperationException();                      }                        while (!responseBuffer.IsEmpty)                      {                          if (responseBuffer.Length == 0)                          {                              break;                          }                            int ch = responseBuffer.First.Span[0];                            if (ch == '\r')                          {                              // Check for final CRLF.                              responseBuffer = responseBuffer.Slice(1);                              if (responseBuffer.Length == 0)                              {                                  break;                              }                              ch = responseBuffer.First.Span[0];                              responseBuffer = responseBuffer.Slice(1);                                if (ch == '\n')                              {                                  consumed = responseBuffer.Start;                                  needMoreData = false;                                  break;                              }                                // Headers don't end in CRLF line.                              throw new Exception();                          }                            // End of the header                          // \n                          if (!responseBuffer.TrySliceTo((byte)'\n'' out ReadableBuffer headerPair' out delim))                          {                              break;                          }                            responseBuffer = responseBuffer.Slice(delim).Slice(1);                            // :                          if (!headerPair.TrySliceTo((byte)':'' out ReadableBuffer headerName' out delim))                          {                              throw new Exception();                          }                            headerName = headerName.TrimStart();                          headerPair = headerPair.Slice(headerName.End).Slice(1);                            // \r                          if (!headerPair.TrySliceTo((byte)'\r'' out ReadableBuffer headerValue' out delim))                          {                              // Bad request                              throw new Exception();                          }                            headerValue = headerValue.TrimStart();                          var hKey = headerName.GetAsciiString();                          var hValue = headerValue.GetAsciiString();                            if (!response.Content.Headers.TryAddWithoutValidation(hKey' hValue))                          {                              response.Headers.TryAddWithoutValidation(hKey' hValue);                          }                            // Move the consumed                          consumed = responseBuffer.Start;                      }                  }                  catch (Exception ex)                  {                      // Close the connection                      connection.Output.Complete(ex);                      break;                  }                  finally                  {                      connection.Input.Advance(consumed);                  }                    if (needMoreData)                  {                      continue;                  }                    // Only handle content length for now                  var length = response.Content.Headers.ContentLength;                    if (!length.HasValue)                  {                      throw new NotSupportedException();                  }                    checked                  {                      // BAD but it's a proof of concept ok?                      state.PreviousContentLength = (int)length.Value;                      ((PipelineHttpContent)response.Content).ContentLength = (int)length;                      state.Consumed = consumed;                  }                    break;              }
Magic Number,System.IO.Pipelines.Samples,HttpRequestParser,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpRequestParser.cs,ParseRequest,The following statement contains a magic number: if (_state == ParsingState.StartLine)              {                  if (!buffer.TrySliceTo((byte)'\r'' (byte)'\n'' out ReadableBuffer startLine' out ReadCursor delim))                  {                      return ParseResult.Incomplete;                  }                    // Move the buffer to the rest                  buffer = buffer.Slice(delim).Slice(2);                    if (!startLine.TrySliceTo((byte)' '' out ReadableBuffer method' out delim))                  {                      return ParseResult.BadRequest;                  }                    _method = method.Preserve();                    // Skip ' '                  startLine = startLine.Slice(delim).Slice(1);                    if (!startLine.TrySliceTo((byte)' '' out ReadableBuffer path' out delim))                  {                      return ParseResult.BadRequest;                  }                    _path = path.Preserve();                    // Skip ' '                  startLine = startLine.Slice(delim).Slice(1);                    var httpVersion = startLine;                  if (httpVersion.IsEmpty)                  {                      return ParseResult.BadRequest;                  }                    _httpVersion = httpVersion.Preserve();                    _state = ParsingState.Headers;                  consumed = buffer.Start;                  examined = buffer.Start;              }
Magic Number,System.IO.Pipelines.Samples,HttpRequestParser,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpRequestParser.cs,ParseRequest,The following statement contains a magic number: while (!buffer.IsEmpty)              {                  var headerValue = default(ReadableBuffer);                  if (!buffer.TrySliceTo((byte)'\r'' (byte)'\n'' out ReadableBuffer headerPair' out ReadCursor delim))                  {                      return ParseResult.Incomplete;                  }                    buffer = buffer.Slice(delim).Slice(2);                    consumed = buffer.Start;                  examined = buffer.Start;                    // End of headers                  if (headerPair.IsEmpty)                  {                      return ParseResult.Complete;                  }                    // :                  if (!headerPair.TrySliceTo((byte)':'' out ReadableBuffer headerName' out delim))                  {                      return ParseResult.BadRequest;                  }                    headerName = headerName.TrimStart();                  headerPair = headerPair.Slice(delim).Slice(1);                    headerValue = headerPair.TrimStart();                  RequestHeaders.SetHeader(ref headerName' ref headerValue);              }
Magic Number,System.IO.Pipelines.Samples,RawLibuvHttpClientSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Libuv\RawLibuvHttpClientSample.cs,RawLibuvHttpClientSample,The following statement contains a magic number: client = new UvTcpClient(thread' new IPEndPoint(IPAddress.Loopback' 5000));
Magic Number,System.IO.Pipelines.Samples,RawRioHttpServerSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Rio\RawRioHttpServerSample.cs,Start,The following statement contains a magic number: listener = new RioTcpServer((ushort)ipEndpoint.Port' bytes[0]' bytes[1]' bytes[2]' bytes[3]);
Magic Number,System.IO.Pipelines.Samples,RawRioHttpServerSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Rio\RawRioHttpServerSample.cs,Start,The following statement contains a magic number: listener = new RioTcpServer((ushort)ipEndpoint.Port' bytes[0]' bytes[1]' bytes[2]' bytes[3]);
Magic Number,System.IO.Pipelines.Samples,RioHttpClientSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Rio\RioHttpClientSample.cs,Run,The following statement contains a magic number: while (true)              {                  var response = await client.GetAsync("http://localhost:5000");                  Console.WriteLine(response);                  Console.WriteLine(await response.Content.ReadAsStringAsync());                  await Task.Delay(1000);              }
Magic Number,System.IO.Pipelines.Samples,AspNetSampleBase<TServer>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\SampleBase\AspNetSampleBase.cs,Run,The following statement contains a magic number: using (var httpServer = new TServer())              {                  var host = new WebHostBuilder()                                      .UseUrls("http://*:5000")                                      .UseServer(httpServer)                                      .Configure(app =>                                      {                                          app.Run(context =>                                          {                                              context.Response.StatusCode = 200;                                              context.Response.ContentType = "text/plain";                                              // HACK: Setting the Content-Length header manually avoids the cost of serializing the int to a string.                                              //       This is instead of: httpContext.Response.ContentLength = _helloWorldPayload.Length;                                              context.Response.Headers["Content-Length"] = _helloWorldLength;                                              return context.Response.Body.WriteAsync(_helloWorldPayload' 0' _helloWorldPayload.Length);                                          });                                      })                                      .Build();                  host.Run();              }
Magic Number,System.IO.Pipelines.Samples,HttpClientSampleBase<THandler>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\SampleBase\HttpClientSampleBase.cs,Run,The following statement contains a magic number: while (true)              {                  var response = await client.GetAsync("http://localhost:5000");                  Console.WriteLine(response);                  Console.WriteLine(await response.Content.ReadAsStringAsync());                  await Task.Delay(1000);              }
Magic Number,System.IO.Pipelines.Samples,RawHttpClientSampleBase,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\SampleBase\RawHttpClientSampleBase.cs,Run,The following statement contains a magic number: while (true)              {                  var buffer = connection.Output.Alloc();                  var output = buffer.AsOutput();                    output.Append("GET / HTTP/1.1"' SymbolTable.InvariantUtf8);                  output.Append("\r\n\r\n"' SymbolTable.InvariantUtf8);                  await buffer.FlushAsync();                    // Write the client output to the console                  await CopyCompletedAsync(connection.Input' consoleOutput);                    await Task.Delay(1000);              }
Magic Number,System.IO.Pipelines.Samples,RawHttpServerSampleBase,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\SampleBase\RawHttpServerSampleBase.cs,Run,The following statement contains a magic number: await Start(new IPEndPoint(IPAddress.Any' 5000));
Magic Number,System.IO.Pipelines.Samples,RawSocketHttpClientSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Socket\RawSocketHttpClientSample.cs,GetConnection,The following statement contains a magic number: s.Connect(new IPEndPoint(IPAddress.Loopback' 5000));
Magic Number,System.IO.Pipelines.Samples,RawSocketHttpServerSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Socket\RawSocketHttpServerSample.cs,Start,The following statement contains a magic number: int port = 5000;
Magic Number,System.IO.Pipelines.Samples,SocketHttpClientSample,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Socket\SocketHttpClientSample.cs,Run,The following statement contains a magic number: while (true)              {                  var response = await client.GetAsync("http://localhost:5000");                  Console.WriteLine(response);                  Console.WriteLine(await response.Content.ReadAsStringAsync());                  await Task.Delay(1000);              }
Magic Number,System.IO.Pipelines.Samples.Framing,ProtocolHandling,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Framing\Codec.cs,Run,The following statement contains a magic number: int port = 5000;
Magic Number,System.IO.Pipelines.Samples.Http,HttpConnection<TContext>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpConnection.cs,ProcessAllRequests,The following statement contains a magic number: while (true)              {                  var result = await _input.ReadAsync();                  var buffer = result.Buffer;                  var consumed = buffer.Start;                  var examined = buffer.Start;                    try                  {                      if (buffer.IsEmpty && result.IsCompleted)                      {                          // We're done with this connection                          return;                      }                        var parserResult = _parser.ParseRequest(buffer' out consumed' out examined);                        switch (parserResult)                      {                          case HttpRequestParser.ParseResult.Incomplete:                              if (result.IsCompleted)                              {                                  // Didn't get the whole request and the connection ended                                  throw new EndOfStreamException();                              }                              // Need more data                              continue;                          case HttpRequestParser.ParseResult.Complete:                              // Done                              break;                          case HttpRequestParser.ParseResult.BadRequest:                              // TODO: Don't throw here;                              throw new Exception();                          default:                              break;                      }                    }                  catch (Exception)                  {                      StatusCode = 400;                        await EndResponse();                        return;                  }                  finally                  {                      _input.Advance(consumed' examined);                  }                    var context = _application.CreateContext(this);                    try                  {                      await _application.ProcessRequestAsync(context);                  }                  catch (Exception ex)                  {                      StatusCode = 500;                        _application.DisposeContext(context' ex);                  }                  finally                  {                      await EndResponse();                  }                    if (!KeepAlive)                  {                      break;                  }                    Reset();              }
Magic Number,System.IO.Pipelines.Samples.Http,HttpConnection<TContext>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpConnection.cs,ProcessAllRequests,The following statement contains a magic number: while (true)              {                  var result = await _input.ReadAsync();                  var buffer = result.Buffer;                  var consumed = buffer.Start;                  var examined = buffer.Start;                    try                  {                      if (buffer.IsEmpty && result.IsCompleted)                      {                          // We're done with this connection                          return;                      }                        var parserResult = _parser.ParseRequest(buffer' out consumed' out examined);                        switch (parserResult)                      {                          case HttpRequestParser.ParseResult.Incomplete:                              if (result.IsCompleted)                              {                                  // Didn't get the whole request and the connection ended                                  throw new EndOfStreamException();                              }                              // Need more data                              continue;                          case HttpRequestParser.ParseResult.Complete:                              // Done                              break;                          case HttpRequestParser.ParseResult.BadRequest:                              // TODO: Don't throw here;                              throw new Exception();                          default:                              break;                      }                    }                  catch (Exception)                  {                      StatusCode = 400;                        await EndResponse();                        return;                  }                  finally                  {                      _input.Advance(consumed' examined);                  }                    var context = _application.CreateContext(this);                    try                  {                      await _application.ProcessRequestAsync(context);                  }                  catch (Exception ex)                  {                      StatusCode = 500;                        _application.DisposeContext(context' ex);                  }                  finally                  {                      await EndResponse();                  }                    if (!KeepAlive)                  {                      break;                  }                    Reset();              }
Magic Number,System.IO.Pipelines.Samples.Http,HttpConnection<TContext>,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\HttpConnection.cs,Reset,The following statement contains a magic number: StatusCode = 200;
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ReasonPhrases,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ReasonPhrases.cs,ToStatusBytes,The following statement contains a magic number: if (string.IsNullOrEmpty(reasonPhrase))              {                  switch (statusCode)                  {                      case 100:                          return _bytesStatus100;                      case 101:                          return _bytesStatus101;                      case 102:                          return _bytesStatus102;                      case 200:                          return _bytesStatus200;                      case 201:                          return _bytesStatus201;                      case 202:                          return _bytesStatus202;                      case 203:                          return _bytesStatus203;                      case 204:                          return _bytesStatus204;                      case 205:                          return _bytesStatus205;                      case 206:                          return _bytesStatus206;                      case 207:                          return _bytesStatus207;                      case 226:                          return _bytesStatus226;                      case 300:                          return _bytesStatus300;                      case 301:                          return _bytesStatus301;                      case 302:                          return _bytesStatus302;                      case 303:                          return _bytesStatus303;                      case 304:                          return _bytesStatus304;                      case 305:                          return _bytesStatus305;                      case 306:                          return _bytesStatus306;                      case 307:                          return _bytesStatus307;                      case 308:                          return _bytesStatus308;                      case 400:                          return _bytesStatus400;                      case 401:                          return _bytesStatus401;                      case 402:                          return _bytesStatus402;                      case 403:                          return _bytesStatus403;                      case 404:                          return _bytesStatus404;                      case 405:                          return _bytesStatus405;                      case 406:                          return _bytesStatus406;                      case 407:                          return _bytesStatus407;                      case 408:                          return _bytesStatus408;                      case 409:                          return _bytesStatus409;                      case 410:                          return _bytesStatus410;                      case 411:                          return _bytesStatus411;                      case 412:                          return _bytesStatus412;                      case 413:                          return _bytesStatus413;                      case 414:                          return _bytesStatus414;                      case 415:                          return _bytesStatus415;                      case 416:                          return _bytesStatus416;                      case 417:                          return _bytesStatus417;                      case 418:                          return _bytesStatus418;                      case 422:                          return _bytesStatus422;                      case 423:                          return _bytesStatus423;                      case 424:                          return _bytesStatus424;                      case 426:                          return _bytesStatus426;                      case 451:                          return _bytesStatus451;                      case 500:                          return _bytesStatus500;                      case 501:                          return _bytesStatus501;                      case 502:                          return _bytesStatus502;                      case 503:                          return _bytesStatus503;                      case 504:                          return _bytesStatus504;                      case 505:                          return _bytesStatus505;                      case 506:                          return _bytesStatus506;                      case 507:                          return _bytesStatus507;                      case 510:                          return _bytesStatus510;                      default:                          return Encoding.ASCII.GetBytes(statusCode.ToString(CultureInfo.InvariantCulture) + " Unknown");                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ServerAddress,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ServerAddress.cs,FromUrl,The following statement contains a magic number: if (!hasSpecifiedPort)              {                  if (string.Equals(serverAddress.Scheme' "http"' StringComparison.OrdinalIgnoreCase))                  {                      serverAddress.Port = 80;                  }                  else if (string.Equals(serverAddress.Scheme' "https"' StringComparison.OrdinalIgnoreCase))                  {                      serverAddress.Port = 443;                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,ServerAddress,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\HttpServer\ServerAddress.cs,FromUrl,The following statement contains a magic number: if (!hasSpecifiedPort)              {                  if (string.Equals(serverAddress.Scheme' "http"' StringComparison.OrdinalIgnoreCase))                  {                      serverAddress.Port = 80;                  }                  else if (string.Equals(serverAddress.Scheme' "https"' StringComparison.OrdinalIgnoreCase))                  {                      serverAddress.Port = 443;                  }              }
Magic Number,System.IO.Pipelines.Samples.Http,RioHttpServer,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Rio\RioHttpServer.cs,StartAccepting,The following statement contains a magic number: try              {                  _rioTcpServer = new RioTcpServer((ushort)port' addressBytes[0]' addressBytes[1]' addressBytes[2]' addressBytes[3]);              }              catch (Exception ex)              {                  Console.WriteLine(ex);              }
Magic Number,System.IO.Pipelines.Samples.Http,RioHttpServer,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Rio\RioHttpServer.cs,StartAccepting,The following statement contains a magic number: try              {                  _rioTcpServer = new RioTcpServer((ushort)port' addressBytes[0]' addressBytes[1]' addressBytes[2]' addressBytes[3]);              }              catch (Exception ex)              {                  Console.WriteLine(ex);              }
Magic Number,System.IO.Pipelines.Samples.Http,SocketHttpServer,C:\repos\dotnet_corefxlab\samples\System.IO.Pipelines.Samples\Socket\SocketHttpServer.cs,StartAccepting,The following statement contains a magic number: _listenSocket.Listen(10);
