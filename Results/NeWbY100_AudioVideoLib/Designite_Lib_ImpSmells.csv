Implementation smell,Namespace,Class,File,Method,Description
Long Method,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The method has 151 lines of code.
Long Method,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadFromStream,The method has 122 lines of code.
Long Method,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,The method has 106 lines of code.
Complex Method,AudioVideoLib,AudioInfo,C:\repos\NeWbY100_AudioVideoLib\Lib\AudioInfo.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,AudioVideoLib.Formats,FlacSubFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacSubFrameHeader.cs,ReadHeader,Cyclomatic complexity of the method is 13
Complex Method,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,Cyclomatic complexity of the method is 46
Complex Method,AudioVideoLib.Formats,FlacMetadataBlock,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacMetadataBlock.cs,ReadBlock,Cyclomatic complexity of the method is 24
Complex Method,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,ToByteArray,Cyclomatic complexity of the method is 9
Complex Method,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadFromStream,Cyclomatic complexity of the method is 20
Complex Method,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,Cyclomatic complexity of the method is 16
Long Parameter List,AudioVideoLib,AudioInfo,C:\repos\NeWbY100_AudioVideoLib\Lib\AudioInfo.cs,Save,The method has 8 parameters.
Long Parameter List,AudioVideoLib.Formats,FlacRicePartition,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacRicePartition.cs,Read,The method has 6 parameters.
Long Parameter List,AudioVideoLib.Formats,FlacCueSheetTrack,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacCueSheetTrack.cs,FlacCueSheetTrack,The method has 8 parameters.
Long Parameter List,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The method has 5 parameters.
Long Identifier,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,SeekPositionByTime,The length of the parameter durationInMillisecondsPerTocEntry is 33.
Long Identifier,AudioVideoLib.Tags,Id3v2EncryptionMethodRegistrationFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EncryptionMethodRegistrationFrame.cs,Equals,The length of the parameter encryptionMethodRegistrationFrame is 33.
Long Statement,AudioVideoLib.Collections,EventList,C:\repos\NeWbY100_AudioVideoLib\Lib\Collections\EventList.cs,InsertRangeItems,The length of the statement  "	for (int i = 0' insertedIndex; moveNext; moveNext = enumerator.MoveNext ()' item = enumerator.Current' i += (insertedIndex == 0) ? 0 : 1) " is 137.
Long Statement,AudioVideoLib,AudioInfo,C:\repos\NeWbY100_AudioVideoLib\Lib\AudioInfo.cs,Save,The length of the statement  "	foreach (byte[] bytes in AudioTags.Where (t => t.TagOrigin == TagOrigin.Start).OrderBy (a => a.StartOffset).Select (t => t.AudioTag.ToByteArray ())) " is 148.
Long Statement,AudioVideoLib,AudioInfo,C:\repos\NeWbY100_AudioVideoLib\Lib\AudioInfo.cs,Save,The length of the statement  "	foreach (byte[] bytes in AudioTags.Where (t => t.TagOrigin == TagOrigin.End).OrderBy (a => a.StartOffset).Select (t => t.AudioTag.ToByteArray ())) " is 146.
Long Statement,AudioVideoLib.IO,MpaStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\MpaStream.cs,IsValidFirstFrame,The length of the statement  "	////if ((curFrame.GetOffset() + curFrame.GetFrameLength() != nextFrame.GetOffset()) && (curFrameHeader.BitrateIndex != 0)) " is 122.
Long Statement,AudioVideoLib.IO,MpaStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\MpaStream.cs,IsValidFirstFrame,The length of the statement  "	return ((secondFrame.AudioVersion == firstFrame.AudioVersion) && (secondFrame.LayerVersion == firstFrame.LayerVersion) && (secondFrame.SamplingRate == firstFrame.SamplingRate) && (secondFrame.IsMono == firstFrame.IsMono) && (secondFrame.Emphasis == firstFrame.Emphasis)); " is 271.
Long Statement,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Calculate,The length of the statement  "		long crc32Result = buffer.Aggregate<byte' long> (0xFFFFFFFF' (current' t) => (current >> 8) ^ Crc32Table [t ^ (current & 0x000000FF)]); " is 135.
Long Statement,AudioVideoLib.Formats,FlacRicePartition,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacRicePartition.cs,Read,The length of the statement  "	int riceParameter = ricePartition._riceParameter & ((codingMethod == FlacResidualCodingMethod.PartitionedRice) ? 0x1F : 0xF); " is 125.
Long Statement,AudioVideoLib.Formats,FlacResidual,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacResidual.cs,Read,The length of the statement  "		residual.RicePartitions [i] = FlacRicePartition.Read (sb' i' residual.PartitionOrder' order' blockSize' residual.CodingMethod); " is 127.
Long Statement,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The length of the statement  "		FrameNumber = num * (FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().MinimumBlockSize : 1); " is 133.
Long Statement,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The length of the statement  "		SamplingRate = FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().SampleRate : 0; " is 120.
Long Statement,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The length of the statement  "	SampleSize = (sampleSize == 0x00) ? (FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().BitsPerSample : 0) : SampleSizes [sampleSize]; " is 173.
Long Statement,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,FindTag,The length of the statement  "	// If limiting the LAME string to 9 bytes "LAME X.YZu"' the extension revision 0 could take 27 bytes and it would still fit a 64 kbit 48kHz frame. " is 146.
Long Statement,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,FindTag,The length of the statement  "	return String.Compare (tagName' "LAME"' StringComparison.OrdinalIgnoreCase) == 0 ? new LameTag (firstFrameBuffer) : null; " is 121.
Long Statement,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,FindHeader,The length of the statement  "		return String.Compare (tagName' HeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0 ? new VbriHeader (firstFrame' buffer' Offset) : null; " is 143.
Long Statement,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,SeekPositionByTime,The length of the statement  "	int fraction = Convert.ToInt32 ((((accumaltedTimeMilliseconds - entryTimeMilliseconds) / durationInMillisecondsPerTocEntry) + (1.0f / (2.0f * FrameCount))) * FrameCount); " is 170.
Long Statement,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,SeekTimeByPosition,The length of the statement  "	int fraction = (int)((((accumulatedBytes - entryPointInBytes) / (float)Toc [i - 1]) + (1.0f / (2.0f * FrameCount))) * FrameCount); " is 130.
Long Statement,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,FindHeader,The length of the statement  "		if ((String.Compare (tagName' VbrHeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare (tagName' CbrHeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0)) " is 183.
Long Statement,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadFromStream,The length of the statement  "				throw new InvalidDataException (String.Format ("Size ({0}) is larger than the max allowed size ({1})"' footer.Size' ApeTag.MaxAllowedSize)); " is 140.
Long Statement,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadFromStream,The length of the statement  "		throw new IndexOutOfRangeException (String.Format ("Ape field ({0}) is bigger than amount of bytes left in stream ({1})."' totalSizeItems' sb.Length - sb.Position)); " is 165.
Long Statement,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadFromStream,The length of the statement  "		throw new InvalidDataException (String.Format ("Tag has more fields ('{0}') than the allowed max fields count ('{1}')."' items.Count' ApeTag.MaxAllowedFields)); " is 160.
Long Statement,AudioVideoLib.Tags,Lyrics3v2Field,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2FieldReader.cs,ReadFieldInstance,The length of the statement  "		//throw new InvalidDataException(String.Format("Size value for field {0} is not an int: {1}"' identifier' strFieldSize)); " is 121.
Long Statement,AudioVideoLib.Tags,Lyrics3TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3TagReader.cs,ReadFromStream,The length of the statement  "	// This tag can only be located at the end; the header does not contain a size field' so we're not able to calculate the end. " is 125.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,The length of the statement  "	MusicMatchHeader headerOrFooter = (tagOrigin == TagOrigin.Start) ? ReadHeader (sb' tagOrigin) : ReadFooter (sb' tagOrigin); " is 123.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,The length of the statement  "			versionInformation = ReadHeaderFooter (sb' startPositionHeader' endPositionHeader' HeaderIdentifierBytes' TagOrigin.Start); " is 123.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,The length of the statement  "			long startPositionFooter = Math.Max (startPosition + (audioMetaDataOffset - (sb.Position - startOffset) - (tag.UseHeader ? MusicMatchTag.HeaderSize : 0))' 0); " is 158.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeader,The length of the statement  "		MusicMatchHeader header = ReadHeaderFooter (stream' startPositionHeader' endPositionHeader' HeaderIdentifierBytes' TagOrigin.Start); " is 132.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeader,The length of the statement  "		MusicMatchHeader footer = ReadHeaderFooter (stream' startPositionHeader' endPositionHeader' HeaderIdentifierBytes' TagOrigin.End); " is 130.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFooter,The length of the statement  "		MusicMatchHeader footer = ReadHeaderFooter (stream' startPositionFooter' endPositionFooter' FooterIdentifierBytes' TagOrigin.End); " is 130.
Long Statement,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFooter,The length of the statement  "		MusicMatchHeader footer = ReadHeaderFooter (stream' startPositionFooter' endPositionFooter' FooterIdentifierBytes' TagOrigin.End); " is 130.
Long Statement,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,FindIdentifier,The length of the statement  "		long startPositionTag = (startPosition - Id3v1Tag.TotalSize) >= 0 ? startPosition - Id3v1Tag.TotalSize : Math.Max (startPosition - HeaderIdentifierBytes.Length' 0); " is 164.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameAdd,The length of the statement  "	if ((e.Item is Id3v2MusicCdIdentifierFrame || String.Equals (e.Item.Identifier' identifier' StringComparison.OrdinalIgnoreCase)) && TrackNumber == null) { " is 154.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameAdd,The length of the statement  "		throw new InvalidOperationException ("TrackNumber frame is required to be present and valid before adding a MusicCdIdentifier frame' even if the CD's only got one track."); " is 172.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameAdd,The length of the statement  "		if ((e.Item is Id3v2AudioSeekPointIndexFrame || String.Equals (e.Item.Identifier' identifier' StringComparison.OrdinalIgnoreCase)) && Length == null) { " is 151.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameAdd,The length of the statement  "			// The presence of an 'Audio seek point index' frame requires the existence of a TLEN frame' indicating the duration of the file in milliseconds. " is 145.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameAdd,The length of the statement  "			throw new InvalidOperationException ("Length frame is required to be present before adding an audio seek point index frame."); " is 126.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameRemove,The length of the statement  "		// The presence of an 'Audio seek point index' frame requires the existence of a TLEN frame' indicating the duration of the file in milliseconds. " is 145.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameRemove,The length of the statement  "			throw new InvalidOperationException ("The AudioSeekPointIndex frame needs to be removed before the Length frame can be removed."); " is 130.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameRemove,The length of the statement  "	else if (String.Equals (e.Item.Identifier' Id3v2TextFrame.GetIdentifier (Version' Id3v2TextFrameIdentifier.AlbumSortOrder))) { " is 126.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,FrameRemove,The length of the statement  "			throw new InvalidOperationException ("The music CD identifier frame needs to be removed before the TrackNumber frame can be removed."); " is 135.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,ClearFrames,The length of the statement  "	// Remove frame events' clear all frames' and add the frame events again. This so we can clear the events without triggering stuff. " is 131.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,ValidateFrames,The length of the statement  "		throw new InvalidOperationException ("TrackNumber frame is required to be present and valid before adding a MusicCdIdentifier frame' even if the CD's only got one track."); " is 172.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,ValidateFrames,The length of the statement  "			// The presence of an 'Audio seek point index' frame requires the existence of a TLEN frame' indicating the duration of the file in milliseconds. " is 145.
Long Statement,AudioVideoLib.Tags,Id3v2Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Events.cs,ValidateFrames,The length of the statement  "			throw new InvalidOperationException ("Length frame is required to be present before adding an audio seek point index frame."); " is 126.
Long Statement,AudioVideoLib.Tags,Id3v2TagRestrictions,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2TagRestrictions.cs,ToByte,The length of the statement  "		(byte)((((byte)TagSizeRestriction & TagSizeRestrictionFlags) << 6) | (((byte)TextEncodingRestriction & TextEncodingRestrictionFlags) << 5) | (((byte)TextFieldsSizeRestriction & TextFieldsSizeRestrictionFlags) << 3) | (((byte)ImageEncodingRestriction & ImageEncodingRestrictionFlags) << 2) | ((byte)ImageSizeRestriction & ImageSizeRestrictionFlags)) " is 348.
Long Statement,AudioVideoLib.Tags,Id3v2ExperimentalRelativeVolumeAdjustment2Frame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ExperimentalRelativeVolumeAdjustment2Frame.cs,Equals,The length of the statement  "	return (erva2.Version == Version) && String.Equals (erva2.Identification' Identification' StringComparison.OrdinalIgnoreCase); " is 126.
Long Statement,AudioVideoLib.Tags,Lyrics3v2IndicationsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2IndicationsField.cs,Equals,The length of the statement  "	return String.Equals (field.Identifier' Identifier' StringComparison.OrdinalIgnoreCase) && (field.LyricsFieldPresent == LyricsFieldPresent) && (field.LyricsContainTimeStamp == LyricsContainTimeStamp) && (field.InhibitTrack == InhibitTrack); " is 240.
Long Statement,AudioVideoLib.Tags,Lyrics3v2LyricsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2LyricsField.cs,Equals,The length of the statement  "	return String.Equals (field.Identifier' Identifier' StringComparison.OrdinalIgnoreCase) && field.LyricLines.SequenceEqual (LyricLines); " is 135.
Long Statement,AudioVideoLib.Tags,Id3v2CompressedDataMetaFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2CompressedDataMetaFrame.cs,Equals,The length of the statement  "	return (Version == compressedDataMeta.Version) && StreamBuffer.SequenceEqual (compressedDataMeta.CompressedData' CompressedData); " is 129.
Long Statement,AudioVideoLib.Tags,Lyrics3v2ImageFileField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2ImageFileField.cs,Equals,The length of the statement  "	return String.Equals (field.Identifier' Identifier' StringComparison.OrdinalIgnoreCase) && field.ImageFiles.SequenceEqual (ImageFiles); " is 135.
Long Statement,AudioVideoLib.Tags,Lyrics3Tag,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3Tag.cs,SetLyrics,The length of the statement  "		throw new InvalidDataException (String.Format ("The lyrics may not contain the string {0} or {1}"' HeaderIdentifier' FooterIdentifier)); " is 136.
Long Statement,AudioVideoLib.Tags,AudioTags,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\AudioTags.cs,ReadTags,The length of the statement  "	List<IAudioTagOffset> tags = (tagOrigin == TagOrigin.Start) ? ReadTagsAtStart (stream' streamPosition' streamLength) : ReadTagsAtEnd (stream' streamPosition); " is 158.
Long Statement,AudioVideoLib.Tags,AudioTags,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\AudioTags.cs,RemoveReader,The length of the statement  "	List<Type> tagReaderTypes = _audioTagFactory.Where (r => r.Value.GetType () == typeof(TR)).Select (f => f.Key).ToList (); " is 121.
Long Statement,AudioVideoLib.Tags,Id3v2SignatureFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2SignatureFrame.cs,Equals,The length of the statement  "	return (signature.Version == Version) && (signature.GroupSymbol == GroupSymbol) && StreamBuffer.SequenceEqual (signature.SignatureData' SignatureData); " is 151.
Long Statement,AudioVideoLib.Tags,Id3v2RelativeVolumeAdjustment2Frame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2RelativeVolumeAdjustment2Frame.cs,Equals,The length of the statement  "	return (rva2.Version == Version) && String.Equals (rva2.Identification' Identification' StringComparison.OrdinalIgnoreCase); " is 124.
Long Statement,AudioVideoLib.Tags,Id3v2Equalisation2Frame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2Equalisation2Frame.cs,Equals,The length of the statement  "	return (equalisation2.Version == Version) && String.Equals (equalisation2.Identification' Identification' StringComparison.OrdinalIgnoreCase); " is 142.
Long Statement,AudioVideoLib.Tags,Id3v2GroupIdentificationRegistrationFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2GroupIdentificationRegistrationFrame.cs,Equals,The length of the statement  "	return (gir.Version == Version) && ((gir.GroupSymbol == GroupSymbol) || String.Equals (gir.OwnerIdentifier' OwnerIdentifier' StringComparison.OrdinalIgnoreCase)); " is 162.
Long Statement,AudioVideoLib.Tags,Id3v2EncryptionMethodRegistrationFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EncryptionMethodRegistrationFrame.cs,Equals,The length of the statement  "	return (encryptionMethodRegistrationFrame.Version == Version) && ((encryptionMethodRegistrationFrame.MethodSymbol == MethodSymbol) || String.Equals (encryptionMethodRegistrationFrame.OwnerIdentifier' OwnerIdentifier' StringComparison.OrdinalIgnoreCase)); " is 254.
Long Statement,AudioVideoLib.Tags,Id3v2CommercialFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2CommercialFrame.cs,Equals,The length of the statement  "	return (commercial.Version == Version) && (commercial.TextEncoding == TextEncoding) && String.Equals (commercial.PriceString' PriceString' StringComparison.OrdinalIgnoreCase) && String.Equals (commercial.ValidUntil' ValidUntil' StringComparison.OrdinalIgnoreCase) && String.Equals (commercial.ContactUrl' ContactUrl' StringComparison.OrdinalIgnoreCase) && (commercial.ReceivedAs == ReceivedAs) && String.Equals (commercial.NameOfSeller' NameOfSeller' StringComparison.OrdinalIgnoreCase) && String.Equals (commercial.ShortDescription' ShortDescription' StringComparison.OrdinalIgnoreCase) && String.Equals (commercial.PictureMimeType' PictureMimeType' StringComparison.OrdinalIgnoreCase) && StreamBuffer.SequenceEqual (commercial.SellerLogo' SellerLogo); " is 753.
Long Statement,AudioVideoLib.Tags,Id3v2LinkedInformationFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2LinkedInformationFrame.cs,Equals,The length of the statement  "	return (li.Version == Version) && String.Equals (li.FrameIdentifier' FrameIdentifier' StringComparison.OrdinalIgnoreCase) && String.Equals (li.Url' Url' StringComparison.OrdinalIgnoreCase) && String.Equals (li.AdditionalIdData' AdditionalIdData' StringComparison.OrdinalIgnoreCase); " is 282.
Long Statement,AudioVideoLib.Tags,Id3v2AudioEncryptionFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2AudioEncryptionFrame.cs,Equals,The length of the statement  "	return (audioEncryptionFrame.Version == Version) && String.Equals (audioEncryptionFrame.OwnerIdentifier' OwnerIdentifier' StringComparison.OrdinalIgnoreCase); " is 158.
Long Statement,AudioVideoLib.Tags,Id3v2EncryptedMetaFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EncryptedMetaFrame.cs,Equals,The length of the statement  "	return (emf.Version == Version) && String.Equals (emf.OwnerIdentifier' OwnerIdentifier' StringComparison.OrdinalIgnoreCase); " is 124.
Long Statement,AudioVideoLib.Tags,Id3v2GeneralEncapsulatedObjectFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2GeneralEncapsulatedObjectFrame.cs,Equals,The length of the statement  "	return (geo.Version == Version) && String.Equals (geo.ContentDescription' ContentDescription' StringComparison.OrdinalIgnoreCase); " is 130.
Long Statement,AudioVideoLib.Tags,Id3v2AttachedPictureFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2AttachedPictureFrame.cs,Equals,The length of the statement  "	return (ap.Version == Version) && (String.Equals (ap.Description' Description' StringComparison.OrdinalIgnoreCase) || ((ap.PictureType == Id3v2AttachedPictureType.FileIcon && PictureType == Id3v2AttachedPictureType.FileIcon) || (ap.PictureType == Id3v2AttachedPictureType.OtherFileIcon && PictureType == Id3v2AttachedPictureType.OtherFileIcon))); " is 346.
Long Statement,AudioVideoLib.Tags,Id3v2CommentFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2CommentFrame.cs,Equals,The length of the statement  "	return (comment.Version == Version) && String.Equals (comment.Language' Language' StringComparison.OrdinalIgnoreCase) && String.Equals (comment.ShortContentDescription' ShortContentDescription' StringComparison.OrdinalIgnoreCase); " is 230.
Long Statement,AudioVideoLib.Tags,Id3v2SynchronizedLyricsFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2SynchronizedLyricsFrame.cs,Equals,The length of the statement  "	return (sl.Version == Version) && String.Equals (sl.Language' Language' StringComparison.OrdinalIgnoreCase) && String.Equals (sl.ContentDescriptor' ContentDescriptor' StringComparison.OrdinalIgnoreCase); " is 203.
Long Statement,AudioVideoLib.Tags,Id3v2SynchronizedLyricsFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2SynchronizedLyricsFrame.cs,LyricSyncAdd,The length of the statement  "		throw new InvalidDataException ("value contains one or more Syllable entries with one or more invalid characters for the current frame encoding type."); " is 152.
Long Statement,AudioVideoLib.Tags,Id3v2UnsynchronizedLyricsFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2UnsynchronizedLyricsFrame.cs,Equals,The length of the statement  "	return (ul.Version == Version) && String.Equals (ul.Language' Language' StringComparison.OrdinalIgnoreCase) && String.Equals (ul.ContentDescriptor' ContentDescriptor' StringComparison.OrdinalIgnoreCase); " is 203.
Long Statement,AudioVideoLib.Tags,Id3v2InvolvedPeopleListFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2InvolvedPeopleListFrame.cs,InvolvedPeopleAdd,The length of the statement  "		throw new InvalidDataException ("value contains one or more Involvee entries with one or more invalid characters for the current frame encoding type."); " is 152.
Long Statement,AudioVideoLib.Tags,Id3v2InvolvedPeopleListFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2InvolvedPeopleListFrame.cs,InvolvedPeopleAdd,The length of the statement  "		throw new InvalidDataException ("value contains one or more Involvement entries with one or more invalid characters for the current frame encoding type."); " is 155.
Long Statement,AudioVideoLib.Tags,Id3v2EventTimingCodesFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EventTimingCodesFrame.cs,IsValidKeyEventType,The length of the statement  "	// 0x17 - 0xDF  reserved for future use (Id3v2.2.0 and earlier: 0x0E - 0xDF) (Id3v2.3.0: 0x15 - 0xDF) (Id3v2.4.0 and later: 0x17 - 0xDF) " is 136.
Long Statement,AudioVideoLib.Tags,Id3v2EventTimingCodesFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EventTimingCodesFrame.cs,IsValidKeyEventType,The length of the statement  "	return ((keyEventType >= Id3v2KeyEventType.Padding) && (keyEventType <= maxAllowedOrderedKeyFrameType)) || ((keyEventType >= (Id3v2KeyEventType)0xE0) && keyEventType <= (Id3v2KeyEventType)0xEF) || ((keyEventType >= Id3v2KeyEventType.AudioEnd) && (keyEventType <= Id3v2KeyEventType.AudioFileEnds)) || (keyEventType == (Id3v2KeyEventType)0xFF); " is 342.
Long Statement,AudioVideoLib.Tags,Id3v2EventTimingCodesFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2EventTimingCodesFrame.cs,KeyEventAdd,The length of the statement  "		throw new InvalidDataException (String.Format ("value contains one or more key event types not supported in version {0}."' Version)); " is 133.
Long Statement,AudioVideoLib.Tags,Id3v2UniqueFileIdentifierFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2UniqueFileIdentifierFrame.cs,Equals,The length of the statement  "	return (ufi.Version == Version) && String.Equals (ufi.OwnerIdentifier' OwnerIdentifier' StringComparison.OrdinalIgnoreCase); " is 124.
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,BitStream,The following statement contains a magic number: _sb = new StreamBuffer (1024);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 8)  	value = ReadByte () >> (8 - newBitIndex);  else if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadByte () >> (8 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 16)  	value = ReadBytes (2) >> (16 - newBitIndex);  else if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (2) >> (16 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (2) >> (16 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 24)  	value = ReadBytes (3) >> (24 - newBitIndex);  else if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (3) >> (24 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (3) >> (24 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: if (newBitIndex <= 32)  	value = ReadBytes (4) >> (32 - newBitIndex);  else  	value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (4) >> (32 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (4) >> (32 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value = ReadBytes (5) >> (40 - newBitIndex);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: value &= 0xffffffffff >> (40 - width);  
Magic Number,AudioVideoLib.IO,BitStream,C:\repos\NeWbY100_AudioVideoLib\Lib\IO\BitStream.cs,ReadInt32,The following statement contains a magic number: _bitPosition = newBitIndex % 8;  
Magic Number,AudioVideoLib.Cryptography,Crc16,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc16.cs,Crc16,The following statement contains a magic number: for (int i = 0; i < Crc16Table.Length; ++i) {  	int value = 0;  	int temp = i;  	for (byte j = 0; j < 8; ++j) {  		if (((value ^ temp) & 0x0001) != 0)  			value = (value >> 1) ^ Polynomial;  		else  			value >>= 1;  		temp >>= 1;  	}  	Crc16Table [i] = value;  }  
Magic Number,AudioVideoLib.Cryptography,Crc16,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc16.cs,Crc16,The following statement contains a magic number: for (byte j = 0; j < 8; ++j) {  	if (((value ^ temp) & 0x0001) != 0)  		value = (value >> 1) ^ Polynomial;  	else  		value >>= 1;  	temp >>= 1;  }  
Magic Number,AudioVideoLib.Cryptography,Crc16,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc16.cs,Calculate,The following statement contains a magic number: unchecked {  	int[] crc =  {  		0x00  	};  	foreach (byte index in data.Select (t => (byte)(crc [0] ^ t)))  		crc [0] = (crc [0] >> 8) ^ Crc16Table [index];  	return crc [0];  }  
Magic Number,AudioVideoLib.Cryptography,Crc16,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc16.cs,Calculate,The following statement contains a magic number: foreach (byte index in data.Select (t => (byte)(crc [0] ^ t)))  	crc [0] = (crc [0] >> 8) ^ Crc16Table [index];  
Magic Number,AudioVideoLib.Cryptography,Crc16,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc16.cs,Calculate,The following statement contains a magic number: crc [0] = (crc [0] >> 8) ^ Crc16Table [index];  
Magic Number,AudioVideoLib.Cryptography,Crc8,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc8.cs,Crc8,The following statement contains a magic number: unchecked {  	for (int i = 0; i < 256; ++i) {  		int crc = i;  		for (int j = 0; j < 8; ++j) {  			if ((crc & 0x80) != 0) {  				crc = (crc << 1) ^ Polynomial;  			}  			else {  				crc <<= 1;  			}  		}  		Crc8Table [i] = (byte)crc;  	}  }  
Magic Number,AudioVideoLib.Cryptography,Crc8,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc8.cs,Crc8,The following statement contains a magic number: unchecked {  	for (int i = 0; i < 256; ++i) {  		int crc = i;  		for (int j = 0; j < 8; ++j) {  			if ((crc & 0x80) != 0) {  				crc = (crc << 1) ^ Polynomial;  			}  			else {  				crc <<= 1;  			}  		}  		Crc8Table [i] = (byte)crc;  	}  }  
Magic Number,AudioVideoLib.Cryptography,Crc8,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc8.cs,Crc8,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	int crc = i;  	for (int j = 0; j < 8; ++j) {  		if ((crc & 0x80) != 0) {  			crc = (crc << 1) ^ Polynomial;  		}  		else {  			crc <<= 1;  		}  	}  	Crc8Table [i] = (byte)crc;  }  
Magic Number,AudioVideoLib.Cryptography,Crc8,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc8.cs,Crc8,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	int crc = i;  	for (int j = 0; j < 8; ++j) {  		if ((crc & 0x80) != 0) {  			crc = (crc << 1) ^ Polynomial;  		}  		else {  			crc <<= 1;  		}  	}  	Crc8Table [i] = (byte)crc;  }  
Magic Number,AudioVideoLib.Cryptography,Crc8,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc8.cs,Crc8,The following statement contains a magic number: for (int j = 0; j < 8; ++j) {  	if ((crc & 0x80) != 0) {  		crc = (crc << 1) ^ Polynomial;  	}  	else {  		crc <<= 1;  	}  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	for (long i = 0; i < 256; i++) {  		long crc = i;  		for (long j = 8; j > 0; j--) {  			if ((crc & 0x01) == 0x01)  				crc = (crc >> 0x01) ^ Polynomial;  			else  				crc >>= 0x01;  		}  		Crc32Table [i] = crc;  	}  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	for (long i = 0; i < 256; i++) {  		long crc = i;  		for (long j = 8; j > 0; j--) {  			if ((crc & 0x01) == 0x01)  				crc = (crc >> 0x01) ^ Polynomial;  			else  				crc >>= 0x01;  		}  		Crc32Table [i] = crc;  	}  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Crc32,The following statement contains a magic number: for (long i = 0; i < 256; i++) {  	long crc = i;  	for (long j = 8; j > 0; j--) {  		if ((crc & 0x01) == 0x01)  			crc = (crc >> 0x01) ^ Polynomial;  		else  			crc >>= 0x01;  	}  	Crc32Table [i] = crc;  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Crc32,The following statement contains a magic number: for (long i = 0; i < 256; i++) {  	long crc = i;  	for (long j = 8; j > 0; j--) {  		if ((crc & 0x01) == 0x01)  			crc = (crc >> 0x01) ^ Polynomial;  		else  			crc >>= 0x01;  	}  	Crc32Table [i] = crc;  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Crc32,The following statement contains a magic number: for (long j = 8; j > 0; j--) {  	if ((crc & 0x01) == 0x01)  		crc = (crc >> 0x01) ^ Polynomial;  	else  		crc >>= 0x01;  }  
Magic Number,AudioVideoLib.Cryptography,Crc32,C:\repos\NeWbY100_AudioVideoLib\Lib\Cryptography\Crc32.cs,Calculate,The following statement contains a magic number: unchecked {  	long crc32Result = buffer.Aggregate<byte' long> (0xFFFFFFFF' (current' t) => (current >> 8) ^ Crc32Table [t ^ (current & 0x000000FF)]);  	return (int)~crc32Result;  }  
Magic Number,AudioVideoLib.Formats,FlacRicePartition,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacRicePartition.cs,Read,The following statement contains a magic number: if ((riceParameter < 0xF) || ((codingMethod == FlacResidualCodingMethod.PartitionedRice2) && (riceParameter < 0x1F))) {  	for (int i = 0; i < ricePartition.Samples; i++) {  		long msbs = sb.ReadUnaryInt ();  		long lsbs = sb.ReadBigEndianInt32 () & (0xFFFFFFFF >> (32 - riceParameter));  		long value = (msbs << riceParameter) | lsbs;  		ricePartition.Residuals [i] = ((value & 0x01) == 0x01) ? -((int)(value >> 1)) - 1 : (int)(value >> 1);  	}  }  else {  	// residuals in unencoded form' sample size read from the next 5  	// bits in the stream.  	int size = sb.ReadBigEndianInt32 ();  	for (int i = 0; i < ricePartition.Samples; i++)  		ricePartition.Residuals [i] = sb.ReadBigEndianInt32 ();  }  
Magic Number,AudioVideoLib.Formats,FlacRicePartition,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacRicePartition.cs,Read,The following statement contains a magic number: for (int i = 0; i < ricePartition.Samples; i++) {  	long msbs = sb.ReadUnaryInt ();  	long lsbs = sb.ReadBigEndianInt32 () & (0xFFFFFFFF >> (32 - riceParameter));  	long value = (msbs << riceParameter) | lsbs;  	ricePartition.Residuals [i] = ((value & 0x01) == 0x01) ? -((int)(value >> 1)) - 1 : (int)(value >> 1);  }  
Magic Number,AudioVideoLib.Formats,FlacLinearPredictorSubFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacLinearPredictorSubFrame.cs,Read,The following statement contains a magic number: QuantizedCoefficientShift = (other >> 4) & 0x1F;  
Magic Number,AudioVideoLib.Formats,FlacConstantSubFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacConstantSubFrame.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer sb = new StreamBuffer ()) {  	sb.Write (base.ToByteArray ());  	sb.WriteBigEndianBytes (UnencodedConstantValue' SampleSize / 8);  	return sb.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,FlacConstantSubFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacConstantSubFrame.cs,ToByteArray,The following statement contains a magic number: sb.WriteBigEndianBytes (UnencodedConstantValue' SampleSize / 8);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadBigEndianUtf8Int64,The following statement contains a magic number: if (value > ByteCountMask) {  	int bytes = 0;  	while (((value << bytes) & ByteCountMask) == ByteCountMask)  		bytes++;  	value &= ByteMask >> (bytes - 1);  	for (int i = bytes - 1; i > 0; i--)  		value = (value << (6 * i)) | ((long)sb.ReadByte () & ByteMask);  	byteCount += bytes - 1;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadBigEndianUtf8Int64,The following statement contains a magic number: for (int i = bytes - 1; i > 0; i--)  	value = (value << (6 * i)) | ((long)sb.ReadByte () & ByteMask);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadBigEndianUtf8Int64,The following statement contains a magic number: value = (value << (6 * i)) | ((long)sb.ReadByte () & ByteMask);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (((_header >> 18) & FrameSync) != FrameSync)  	return false;  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (blockSize) {  case 0x01:  	BlockSize = 192;  	break;  case 0x02:  case 0x03:  case 0x04:  case 0x05:  	BlockSize = 576 << (blockSize - 2);  	break;  case 0x06:  	BlockSize = sb.ReadByte () + 1;  	break;  case 0x07:  	BlockSize = sb.ReadBigEndianInt16 () + 1;  	break;  default:  	BlockSize = 256 << (blockSize - 8);  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (blockSize) {  case 0x01:  	BlockSize = 192;  	break;  case 0x02:  case 0x03:  case 0x04:  case 0x05:  	BlockSize = 576 << (blockSize - 2);  	break;  case 0x06:  	BlockSize = sb.ReadByte () + 1;  	break;  case 0x07:  	BlockSize = sb.ReadBigEndianInt16 () + 1;  	break;  default:  	BlockSize = 256 << (blockSize - 8);  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (blockSize) {  case 0x01:  	BlockSize = 192;  	break;  case 0x02:  case 0x03:  case 0x04:  case 0x05:  	BlockSize = 576 << (blockSize - 2);  	break;  case 0x06:  	BlockSize = sb.ReadByte () + 1;  	break;  case 0x07:  	BlockSize = sb.ReadBigEndianInt16 () + 1;  	break;  default:  	BlockSize = 256 << (blockSize - 8);  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (blockSize) {  case 0x01:  	BlockSize = 192;  	break;  case 0x02:  case 0x03:  case 0x04:  case 0x05:  	BlockSize = 576 << (blockSize - 2);  	break;  case 0x06:  	BlockSize = sb.ReadByte () + 1;  	break;  case 0x07:  	BlockSize = sb.ReadBigEndianInt16 () + 1;  	break;  default:  	BlockSize = 256 << (blockSize - 8);  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (blockSize) {  case 0x01:  	BlockSize = 192;  	break;  case 0x02:  case 0x03:  case 0x04:  case 0x05:  	BlockSize = 576 << (blockSize - 2);  	break;  case 0x06:  	BlockSize = sb.ReadByte () + 1;  	break;  case 0x07:  	BlockSize = sb.ReadBigEndianInt16 () + 1;  	break;  default:  	BlockSize = 256 << (blockSize - 8);  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: BlockSize = 192;  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: BlockSize = 576 << (blockSize - 2);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: BlockSize = 576 << (blockSize - 2);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: BlockSize = 256 << (blockSize - 8);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: BlockSize = 256 << (blockSize - 8);  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (samplingRate == 0x00) {  	SamplingRate = FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().SampleRate : 0;  }  else if (samplingRate <= 0x0B) {  	SamplingRate = SampleRates [samplingRate];  }  else {  	switch (samplingRate) {  	case 0x0C:  		// Sample rate in kHz  		SamplingRate = sb.ReadByte () * 1000;  		break;  	case 0x0D:  		// Sample rate in Hz  		SamplingRate = sb.ReadBigEndianInt16 ();  		break;  	case 0x0E:  		// Sample rate in 10s of Hz  		SamplingRate = sb.ReadBigEndianInt16 () * 10;  		break;  	}  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (samplingRate == 0x00) {  	SamplingRate = FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().SampleRate : 0;  }  else if (samplingRate <= 0x0B) {  	SamplingRate = SampleRates [samplingRate];  }  else {  	switch (samplingRate) {  	case 0x0C:  		// Sample rate in kHz  		SamplingRate = sb.ReadByte () * 1000;  		break;  	case 0x0D:  		// Sample rate in Hz  		SamplingRate = sb.ReadBigEndianInt16 ();  		break;  	case 0x0E:  		// Sample rate in 10s of Hz  		SamplingRate = sb.ReadBigEndianInt16 () * 10;  		break;  	}  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (samplingRate <= 0x0B) {  	SamplingRate = SampleRates [samplingRate];  }  else {  	switch (samplingRate) {  	case 0x0C:  		// Sample rate in kHz  		SamplingRate = sb.ReadByte () * 1000;  		break;  	case 0x0D:  		// Sample rate in Hz  		SamplingRate = sb.ReadBigEndianInt16 ();  		break;  	case 0x0E:  		// Sample rate in 10s of Hz  		SamplingRate = sb.ReadBigEndianInt16 () * 10;  		break;  	}  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (samplingRate <= 0x0B) {  	SamplingRate = SampleRates [samplingRate];  }  else {  	switch (samplingRate) {  	case 0x0C:  		// Sample rate in kHz  		SamplingRate = sb.ReadByte () * 1000;  		break;  	case 0x0D:  		// Sample rate in Hz  		SamplingRate = sb.ReadBigEndianInt16 ();  		break;  	case 0x0E:  		// Sample rate in 10s of Hz  		SamplingRate = sb.ReadBigEndianInt16 () * 10;  		break;  	}  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (samplingRate) {  case 0x0C:  	// Sample rate in kHz  	SamplingRate = sb.ReadByte () * 1000;  	break;  case 0x0D:  	// Sample rate in Hz  	SamplingRate = sb.ReadBigEndianInt16 ();  	break;  case 0x0E:  	// Sample rate in 10s of Hz  	SamplingRate = sb.ReadBigEndianInt16 () * 10;  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: switch (samplingRate) {  case 0x0C:  	// Sample rate in kHz  	SamplingRate = sb.ReadByte () * 1000;  	break;  case 0x0D:  	// Sample rate in Hz  	SamplingRate = sb.ReadBigEndianInt16 ();  	break;  case 0x0E:  	// Sample rate in 10s of Hz  	SamplingRate = sb.ReadBigEndianInt16 () * 10;  	break;  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: SamplingRate = sb.ReadByte () * 1000;  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: SamplingRate = sb.ReadBigEndianInt16 () * 10;  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: if (channelAssignment < 0x08) {  	ChannelAssignment = FlacChannelAssignment.Independent;  	Channels = channelAssignment + 1;  }  else {  	Channels = 2;  	switch (channelAssignment) {  	case 0x08:  		ChannelAssignment = FlacChannelAssignment.LeftSide;  		break;  	case 0x09:  		ChannelAssignment = FlacChannelAssignment.RightSide;  		break;  	case 0x0A:  		ChannelAssignment = FlacChannelAssignment.MidSide;  		break;  	}  }  
Magic Number,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following statement contains a magic number: Channels = 2;  
Magic Number,AudioVideoLib.Formats,FlacMetadataBlock,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacMetadataBlock.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	buffer.WriteBigEndianBytes (Flags' 1);  	buffer.WriteBigEndianBytes (Data.Length' 3);  	buffer.Write (Data);  	return buffer.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,FlacMetadataBlock,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacMetadataBlock.cs,ToByteArray,The following statement contains a magic number: buffer.WriteBigEndianBytes (Data.Length' 3);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: firstFrameBuffer.ReadString (4);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: float.TryParse (firstFrameBuffer.ReadString (4)' out ver);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: firstFrameBuffer.Seek (-8' SeekOrigin.Current);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: if (Version < 3.90f) {  	// Initial LAME info' 20 bytes for LAME tag. for example' "LAME3.12 (beta 6)"  	// LAME prior to 3.90 writes only a 20 byte encoder string.  	EncoderVersion = firstFrameBuffer.ReadString (20);  }  else {  	EncoderVersion = firstFrameBuffer.ReadString (9);  	// Revision Information Tag + VBR Info  	int infoAndVbr = firstFrameBuffer.ReadByte ();  	// Revision information in 4 MSB  	InfoTagRevision = infoAndVbr >> 4;  	if (InfoTagRevision == Formats.InfoTagRevision.Reserved)  		throw new ArgumentException ("InfoTagRevision bit is set to reserved (0xF)");  	// VBR info in 4 LSB  	VbrMethod = infoAndVbr & 0x0F;  	// lowpass information' multiply by 100 to get hz  	LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  	// Radio replay gain fields  	// Peak signal amplitude  	PeakSignalAmplitude = firstFrameBuffer.ReadFloat ();  	// Radio Replay Gain  	RadioReplayGain = firstFrameBuffer.ReadInt16 ();  	// Audiophile Replay Gain  	AudiophileReplayGain = firstFrameBuffer.ReadInt16 ();  	// Encoding Flags + ATH type  	int encodingFlagsAndAthType = firstFrameBuffer.ReadByte ();  	// Encoding Flags in 4 MSB  	EncodingFlags = encodingFlagsAndAthType >> 4;  	// LAME ATH Type in 4 LSB  	AthType = encodingFlagsAndAthType & 0x0F;  	// If ABR' this will be the specified bitrate  	// Otherwise (CBR/VBR)' the minimal bitrate (255 means 255 or bigger)  	BitRate = firstFrameBuffer.ReadByte ();  	// the 12 bit values (0-4095) of how many samples were added at start (encoder delay)  	// in X and how many 0-samples were padded at the end in Y to complete the last frame.  	EncoderDelays = firstFrameBuffer.ReadInt (3);  	EncoderDelaySamples = EncoderDelays & 0xFFF;  	EncoderDelayPaddingSamples = EncoderDelays >> 12;  	////int numberSamplesInOriginalWav = frameCount  	Misc = firstFrameBuffer.ReadByte ();  	// Any mp3 can be amplified by a factor 2 ^ ( x * 0.25) in a lossless manner by a tool like eg. mp3gain  	// if done so' this 8-bit field can be used to log such transformation happened so that any given time it can be undone.  	Mp3Gain = firstFrameBuffer.ReadByte ();  	// Preset and surround info  	PresetSurroundInfo = firstFrameBuffer.ReadInt16 ();  	// 32 bit integer filed containing the exact length in bytes of the mp3 file originally made by LAME excluded ID3 tag info at the end.  	MusicLength = firstFrameBuffer.ReadBigEndianInt32 ();  	// Contains a CRC-16 of the complete mp3 music data as made originally by LAME.   	_musicCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  	// contains a CRC-16 of the first 190 bytes (0x00 - 0xBD) of the Info header frame.  	// This field is calculated at the end' once all other fields are completed.   	_infoTagCrc = (short)firstFrameBuffer.ReadBigEndianInt16 ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: EncoderVersion = firstFrameBuffer.ReadString (20);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: EncoderVersion = firstFrameBuffer.ReadString (9);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: InfoTagRevision = infoAndVbr >> 4;  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: LowpassFilterValue = firstFrameBuffer.ReadByte () * 100;  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: EncodingFlags = encodingFlagsAndAthType >> 4;  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: EncoderDelays = firstFrameBuffer.ReadInt (3);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,LameTag,The following statement contains a magic number: EncoderDelayPaddingSamples = EncoderDelays >> 12;  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	if (Version < 3.09f) {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  	}  	else {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  		buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  		buffer.WriteByte ((byte)LowpassFilterValue);  		buffer.WriteFloat (PeakSignalAmplitude);  		buffer.WriteShort (RadioReplayGain);  		buffer.WriteShort (AudiophileReplayGain);  		buffer.WriteByte ((byte)EncodingFlags);  		buffer.WriteByte ((byte)BitRate);  		buffer.WriteBytes (EncoderDelays' 3);  		buffer.WriteByte ((byte)Misc);  		buffer.WriteByte ((byte)Mp3Gain);  		buffer.WriteShort (PresetSurroundInfo);  		buffer.WriteBigEndianInt32 (MusicLength);  		buffer.WriteBigEndianInt16 (_musicCrc);  		buffer.WriteBigEndianInt16 (_infoTagCrc);  	}  	return buffer.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	if (Version < 3.09f) {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  	}  	else {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  		buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  		buffer.WriteByte ((byte)LowpassFilterValue);  		buffer.WriteFloat (PeakSignalAmplitude);  		buffer.WriteShort (RadioReplayGain);  		buffer.WriteShort (AudiophileReplayGain);  		buffer.WriteByte ((byte)EncodingFlags);  		buffer.WriteByte ((byte)BitRate);  		buffer.WriteBytes (EncoderDelays' 3);  		buffer.WriteByte ((byte)Misc);  		buffer.WriteByte ((byte)Mp3Gain);  		buffer.WriteShort (PresetSurroundInfo);  		buffer.WriteBigEndianInt32 (MusicLength);  		buffer.WriteBigEndianInt16 (_musicCrc);  		buffer.WriteBigEndianInt16 (_infoTagCrc);  	}  	return buffer.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	if (Version < 3.09f) {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  	}  	else {  		buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  		buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  		buffer.WriteByte ((byte)LowpassFilterValue);  		buffer.WriteFloat (PeakSignalAmplitude);  		buffer.WriteShort (RadioReplayGain);  		buffer.WriteShort (AudiophileReplayGain);  		buffer.WriteByte ((byte)EncodingFlags);  		buffer.WriteByte ((byte)BitRate);  		buffer.WriteBytes (EncoderDelays' 3);  		buffer.WriteByte ((byte)Misc);  		buffer.WriteByte ((byte)Mp3Gain);  		buffer.WriteShort (PresetSurroundInfo);  		buffer.WriteBigEndianInt32 (MusicLength);  		buffer.WriteBigEndianInt16 (_musicCrc);  		buffer.WriteBigEndianInt16 (_infoTagCrc);  	}  	return buffer.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: if (Version < 3.09f) {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  }  else {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  	buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  	buffer.WriteByte ((byte)LowpassFilterValue);  	buffer.WriteFloat (PeakSignalAmplitude);  	buffer.WriteShort (RadioReplayGain);  	buffer.WriteShort (AudiophileReplayGain);  	buffer.WriteByte ((byte)EncodingFlags);  	buffer.WriteByte ((byte)BitRate);  	buffer.WriteBytes (EncoderDelays' 3);  	buffer.WriteByte ((byte)Misc);  	buffer.WriteByte ((byte)Mp3Gain);  	buffer.WriteShort (PresetSurroundInfo);  	buffer.WriteBigEndianInt32 (MusicLength);  	buffer.WriteBigEndianInt16 (_musicCrc);  	buffer.WriteBigEndianInt16 (_infoTagCrc);  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: if (Version < 3.09f) {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  }  else {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  	buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  	buffer.WriteByte ((byte)LowpassFilterValue);  	buffer.WriteFloat (PeakSignalAmplitude);  	buffer.WriteShort (RadioReplayGain);  	buffer.WriteShort (AudiophileReplayGain);  	buffer.WriteByte ((byte)EncodingFlags);  	buffer.WriteByte ((byte)BitRate);  	buffer.WriteBytes (EncoderDelays' 3);  	buffer.WriteByte ((byte)Misc);  	buffer.WriteByte ((byte)Mp3Gain);  	buffer.WriteShort (PresetSurroundInfo);  	buffer.WriteBigEndianInt32 (MusicLength);  	buffer.WriteBigEndianInt16 (_musicCrc);  	buffer.WriteBigEndianInt16 (_infoTagCrc);  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: if (Version < 3.09f) {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  }  else {  	buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  	buffer.WriteByte ((byte)((InfoTagRevision & 0xF0) | (VbrMethod & 0x0F)));  	buffer.WriteByte ((byte)LowpassFilterValue);  	buffer.WriteFloat (PeakSignalAmplitude);  	buffer.WriteShort (RadioReplayGain);  	buffer.WriteShort (AudiophileReplayGain);  	buffer.WriteByte ((byte)EncodingFlags);  	buffer.WriteByte ((byte)BitRate);  	buffer.WriteBytes (EncoderDelays' 3);  	buffer.WriteByte ((byte)Misc);  	buffer.WriteByte ((byte)Mp3Gain);  	buffer.WriteShort (PresetSurroundInfo);  	buffer.WriteBigEndianInt32 (MusicLength);  	buffer.WriteBigEndianInt16 (_musicCrc);  	buffer.WriteBigEndianInt16 (_infoTagCrc);  }  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: buffer.WriteString (EncoderVersion' Encoding.ASCII' 20);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: buffer.WriteString (EncoderVersion' Encoding.ASCII' 9);  
Magic Number,AudioVideoLib.Formats,LameTag,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\LameTag.cs,ToByteArray,The following statement contains a magic number: buffer.WriteBytes (EncoderDelays' 3);  
Magic Number,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,VbriHeader,The following statement contains a magic number: Name = firstFrameBuffer.ReadString (4);  
Magic Number,AudioVideoLib.Formats,VbriHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\VbriHeader.cs,FindHeader,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	byte[] data = firstFrame.ToByteArray ();  	buffer.Write (data);  	// 32 bytes = data indicating silence  	const long Offset = MpaFrame.FrameHeaderSize + SilenceDataSize;  	buffer.Seek (Offset' SeekOrigin.Begin);  	string tagName = buffer.ReadString (4' false' false);  	return String.Compare (tagName' HeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0 ? new VbriHeader (firstFrame' buffer' Offset) : null;  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: Name = firstFrameBuffer.ReadString (4);  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((Flags & XingHeaderFlags.TocFlag) != 0) {  	Toc = new int[100];  	for (int i = 0; i < 100; i++)  		Toc [i] = firstFrameBuffer.ReadByte ();  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((Flags & XingHeaderFlags.TocFlag) != 0) {  	Toc = new int[100];  	for (int i = 0; i < 100; i++)  		Toc [i] = firstFrameBuffer.ReadByte ();  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: Toc = new int[100];  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: for (int i = 0; i < 100; i++)  	Toc [i] = firstFrameBuffer.ReadByte ();  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,XingHeader,The following statement contains a magic number: LameTag = LameTag.FindTag (firstFrameBuffer' offset + 120);  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,FindHeader,The following statement contains a magic number: using (StreamBuffer buffer = new StreamBuffer ()) {  	byte[] data = firstFrame.ToByteArray ();  	buffer.Write (data);  	buffer.Seek (offset' SeekOrigin.Begin);  	string tagName = buffer.ReadString (4' false' false);  	if ((String.Compare (tagName' VbrHeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare (tagName' CbrHeaderIndicator' StringComparison.OrdinalIgnoreCase) == 0))  		return new XingHeader (firstFrame' buffer' offset);  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer buf = new StreamBuffer ()) {  	buf.WriteString (Name);  	buf.WriteBigEndianInt32 (Flags);  	if ((Flags & XingHeaderFlags.FrameCountFlag) != 0)  		buf.WriteBigEndianInt32 (FrameCount);  	if ((Flags & XingHeaderFlags.FileSizeFlag) != 0)  		buf.WriteBigEndianInt32 (FileSize);  	// Extract TOC (Table of Contents) for more accurate seeking  	if ((Flags & XingHeaderFlags.TocFlag) != 0) {  		for (int i = 0; i < 100; i++)  			buf.WriteByte ((byte)Toc [i]);  	}  	if ((Flags & XingHeaderFlags.VbrScaleFlag) != 0)  		buf.WriteBigEndianInt32 (Quality);  	return buf.ToByteArray ();  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,ToByteArray,The following statement contains a magic number: if ((Flags & XingHeaderFlags.TocFlag) != 0) {  	for (int i = 0; i < 100; i++)  		buf.WriteByte ((byte)Toc [i]);  }  
Magic Number,AudioVideoLib.Formats,XingHeader,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\XingHeader.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < 100; i++)  	buf.WriteByte ((byte)Toc [i]);  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == TagIdentifierBytes [y++]) {  		startHeaderPosition++;  		if (y != TagIdentifierBytes.Length)  			continue;  		ApeHeader hdr = new ApeHeader {  			Position = stream.Position - TagIdentifierBytes.Length'  			Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  			Size = stream.ReadLittleEndianInt32 ()'  			FrameCount = stream.ReadLittleEndianInt32 ()'  			Flags = stream.ReadLittleEndianInt32 ()'  			ReservedBytes = new byte[8]  		};  		stream.Read (hdr.ReservedBytes' 8);  		if (IsValidTag (hdr))  			return hdr;  		startHeaderPosition -= ApeTag.HeaderSize;  		stream.Position = startHeaderPosition + 1;  		break;  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == TagIdentifierBytes [y++]) {  		startHeaderPosition++;  		if (y != TagIdentifierBytes.Length)  			continue;  		ApeHeader hdr = new ApeHeader {  			Position = stream.Position - TagIdentifierBytes.Length'  			Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  			Size = stream.ReadLittleEndianInt32 ()'  			FrameCount = stream.ReadLittleEndianInt32 ()'  			Flags = stream.ReadLittleEndianInt32 ()'  			ReservedBytes = new byte[8]  		};  		stream.Read (hdr.ReservedBytes' 8);  		if (IsValidTag (hdr))  			return hdr;  		startHeaderPosition -= ApeTag.HeaderSize;  		stream.Position = startHeaderPosition + 1;  		break;  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == TagIdentifierBytes [y++]) {  		startHeaderPosition++;  		if (y != TagIdentifierBytes.Length)  			continue;  		ApeHeader hdr = new ApeHeader {  			Position = stream.Position - TagIdentifierBytes.Length'  			Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  			Size = stream.ReadLittleEndianInt32 ()'  			FrameCount = stream.ReadLittleEndianInt32 ()'  			Flags = stream.ReadLittleEndianInt32 ()'  			ReservedBytes = new byte[8]  		};  		stream.Read (hdr.ReservedBytes' 8);  		if (IsValidTag (hdr))  			return hdr;  		startHeaderPosition -= ApeTag.HeaderSize;  		stream.Position = startHeaderPosition + 1;  		break;  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (stream.ReadByte () == TagIdentifierBytes [y++]) {  	startHeaderPosition++;  	if (y != TagIdentifierBytes.Length)  		continue;  	ApeHeader hdr = new ApeHeader {  		Position = stream.Position - TagIdentifierBytes.Length'  		Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  		Size = stream.ReadLittleEndianInt32 ()'  		FrameCount = stream.ReadLittleEndianInt32 ()'  		Flags = stream.ReadLittleEndianInt32 ()'  		ReservedBytes = new byte[8]  	};  	stream.Read (hdr.ReservedBytes' 8);  	if (IsValidTag (hdr))  		return hdr;  	startHeaderPosition -= ApeTag.HeaderSize;  	stream.Position = startHeaderPosition + 1;  	break;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (stream.ReadByte () == TagIdentifierBytes [y++]) {  	startHeaderPosition++;  	if (y != TagIdentifierBytes.Length)  		continue;  	ApeHeader hdr = new ApeHeader {  		Position = stream.Position - TagIdentifierBytes.Length'  		Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  		Size = stream.ReadLittleEndianInt32 ()'  		FrameCount = stream.ReadLittleEndianInt32 ()'  		Flags = stream.ReadLittleEndianInt32 ()'  		ReservedBytes = new byte[8]  	};  	stream.Read (hdr.ReservedBytes' 8);  	if (IsValidTag (hdr))  		return hdr;  	startHeaderPosition -= ApeTag.HeaderSize;  	stream.Position = startHeaderPosition + 1;  	break;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: while (stream.ReadByte () == TagIdentifierBytes [y++]) {  	startHeaderPosition++;  	if (y != TagIdentifierBytes.Length)  		continue;  	ApeHeader hdr = new ApeHeader {  		Position = stream.Position - TagIdentifierBytes.Length'  		Version = (ApeVersion)(stream.ReadLittleEndianInt32 () / 1000)'  		Size = stream.ReadLittleEndianInt32 ()'  		FrameCount = stream.ReadLittleEndianInt32 ()'  		Flags = stream.ReadLittleEndianInt32 ()'  		ReservedBytes = new byte[8]  	};  	stream.Read (hdr.ReservedBytes' 8);  	if (IsValidTag (hdr))  		return hdr;  	startHeaderPosition -= ApeTag.HeaderSize;  	stream.Position = startHeaderPosition + 1;  	break;  }  
Magic Number,AudioVideoLib.Tags,ApeTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\ApeTagReader.cs,ReadHeader,The following statement contains a magic number: stream.Read (hdr.ReservedBytes' 8);  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadFromStream,The following statement contains a magic number: sb.Position += 16;  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,GetAudioMetaDataSize,The following statement contains a magic number: if (version <= 3.00)  	return 7868;  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,GetAudioMetaDataSize,The following statement contains a magic number: if (version <= 3.00)  	return 7868;  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,GetAudioMetaDataSize,The following statement contains a magic number: return 7868;  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (startHeaderPosition < endHeaderPosition) {  	int y = 0;  	while (stream.ReadByte () == identifierBytes [y++]) {  		startHeaderPosition++;  		if (y != identifierBytes.Count)  			continue;  		if (tagOrigin == TagOrigin.Start) {  			MusicMatchHeader header = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				Padding1 = new byte[2]'  				Padding2 = new byte[2]'  				Padding3 = new byte[2]'  				SpacePadding2 = new byte[226]  			};  			// 0x00 0x00 Padding  			stream.Read (header.Padding1' header.Padding1.Length);  			// <8-byte numerical ASCII string>  			header.XingEncoderVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding2' header.Padding2.Length);  			// Xing encoder version <8-byte numerical ASCII string>  			header.MusicMatchVersion = stream.ReadString (8);  			// 0x00 0x00 Padding  			stream.Read (header.Padding3' header.Padding3.Length);  			// Space padding <226 * 0x20 >                      			stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  			ValidateHeader (header' null);  			return header;  		}  		if (tagOrigin == TagOrigin.End) {  			MusicMatchHeader footer = new MusicMatchHeader {  				Position = stream.Position - identifierBytes.Count'  				SpacePadding1 = new byte[13]'  				SpacePadding2 = new byte[12]  			};  			// Space padding <13 * 0x20>  			stream.Read (footer.SpacePadding1' 13);  			// version <4-byte numerical ASCII string> e.g. 3.05  			footer.MusicMatchVersion = stream.ReadString (4);  			// Space padding <12 * 0x20>  			stream.Read (footer.SpacePadding2' 12);  			ValidateHeader (null' footer);  			return footer;  		}  	}  	startHeaderPosition++;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: while (stream.ReadByte () == identifierBytes [y++]) {  	startHeaderPosition++;  	if (y != identifierBytes.Count)  		continue;  	if (tagOrigin == TagOrigin.Start) {  		MusicMatchHeader header = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			Padding1 = new byte[2]'  			Padding2 = new byte[2]'  			Padding3 = new byte[2]'  			SpacePadding2 = new byte[226]  		};  		// 0x00 0x00 Padding  		stream.Read (header.Padding1' header.Padding1.Length);  		// <8-byte numerical ASCII string>  		header.XingEncoderVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding2' header.Padding2.Length);  		// Xing encoder version <8-byte numerical ASCII string>  		header.MusicMatchVersion = stream.ReadString (8);  		// 0x00 0x00 Padding  		stream.Read (header.Padding3' header.Padding3.Length);  		// Space padding <226 * 0x20 >                      		stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  		ValidateHeader (header' null);  		return header;  	}  	if (tagOrigin == TagOrigin.End) {  		MusicMatchHeader footer = new MusicMatchHeader {  			Position = stream.Position - identifierBytes.Count'  			SpacePadding1 = new byte[13]'  			SpacePadding2 = new byte[12]  		};  		// Space padding <13 * 0x20>  		stream.Read (footer.SpacePadding1' 13);  		// version <4-byte numerical ASCII string> e.g. 3.05  		footer.MusicMatchVersion = stream.ReadString (4);  		// Space padding <12 * 0x20>  		stream.Read (footer.SpacePadding2' 12);  		ValidateHeader (null' footer);  		return footer;  	}  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.Start) {  	MusicMatchHeader header = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		Padding1 = new byte[2]'  		Padding2 = new byte[2]'  		Padding3 = new byte[2]'  		SpacePadding2 = new byte[226]  	};  	// 0x00 0x00 Padding  	stream.Read (header.Padding1' header.Padding1.Length);  	// <8-byte numerical ASCII string>  	header.XingEncoderVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding2' header.Padding2.Length);  	// Xing encoder version <8-byte numerical ASCII string>  	header.MusicMatchVersion = stream.ReadString (8);  	// 0x00 0x00 Padding  	stream.Read (header.Padding3' header.Padding3.Length);  	// Space padding <226 * 0x20 >                      	stream.Read (header.SpacePadding2' header.SpacePadding2.Length);  	ValidateHeader (header' null);  	return header;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: header.XingEncoderVersion = stream.ReadString (8);  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: header.MusicMatchVersion = stream.ReadString (8);  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.End) {  	MusicMatchHeader footer = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		SpacePadding1 = new byte[13]'  		SpacePadding2 = new byte[12]  	};  	// Space padding <13 * 0x20>  	stream.Read (footer.SpacePadding1' 13);  	// version <4-byte numerical ASCII string> e.g. 3.05  	footer.MusicMatchVersion = stream.ReadString (4);  	// Space padding <12 * 0x20>  	stream.Read (footer.SpacePadding2' 12);  	ValidateHeader (null' footer);  	return footer;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.End) {  	MusicMatchHeader footer = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		SpacePadding1 = new byte[13]'  		SpacePadding2 = new byte[12]  	};  	// Space padding <13 * 0x20>  	stream.Read (footer.SpacePadding1' 13);  	// version <4-byte numerical ASCII string> e.g. 3.05  	footer.MusicMatchVersion = stream.ReadString (4);  	// Space padding <12 * 0x20>  	stream.Read (footer.SpacePadding2' 12);  	ValidateHeader (null' footer);  	return footer;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.End) {  	MusicMatchHeader footer = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		SpacePadding1 = new byte[13]'  		SpacePadding2 = new byte[12]  	};  	// Space padding <13 * 0x20>  	stream.Read (footer.SpacePadding1' 13);  	// version <4-byte numerical ASCII string> e.g. 3.05  	footer.MusicMatchVersion = stream.ReadString (4);  	// Space padding <12 * 0x20>  	stream.Read (footer.SpacePadding2' 12);  	ValidateHeader (null' footer);  	return footer;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.End) {  	MusicMatchHeader footer = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		SpacePadding1 = new byte[13]'  		SpacePadding2 = new byte[12]  	};  	// Space padding <13 * 0x20>  	stream.Read (footer.SpacePadding1' 13);  	// version <4-byte numerical ASCII string> e.g. 3.05  	footer.MusicMatchVersion = stream.ReadString (4);  	// Space padding <12 * 0x20>  	stream.Read (footer.SpacePadding2' 12);  	ValidateHeader (null' footer);  	return footer;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: if (tagOrigin == TagOrigin.End) {  	MusicMatchHeader footer = new MusicMatchHeader {  		Position = stream.Position - identifierBytes.Count'  		SpacePadding1 = new byte[13]'  		SpacePadding2 = new byte[12]  	};  	// Space padding <13 * 0x20>  	stream.Read (footer.SpacePadding1' 13);  	// version <4-byte numerical ASCII string> e.g. 3.05  	footer.MusicMatchVersion = stream.ReadString (4);  	// Space padding <12 * 0x20>  	stream.Read (footer.SpacePadding2' 12);  	ValidateHeader (null' footer);  	return footer;  }  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: stream.Read (footer.SpacePadding1' 13);  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: footer.MusicMatchVersion = stream.ReadString (4);  
Magic Number,AudioVideoLib.Tags,MusicMatchTagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\MusicMatchTagReader.cs,ReadHeaderFooter,The following statement contains a magic number: stream.Read (footer.SpacePadding2' 12);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((startOffset - Id3v1Tag.ExtendedSize) >= 0) {  	sb.Position = startOffset - Id3v1Tag.ExtendedSize;  	string extendedHeaderIdentifier = sb.ReadString (ExtendedHeaderIdentifierBytes.Length);  	if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  		startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  		extendedTrackTitle = sb.ReadString (60' _encoding);  		extendedArtist = sb.ReadString (60' _encoding);  		extendAlbumTitle = sb.ReadString (60' _encoding);  		Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  		tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  		tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  		tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  		tag.UseExtendedTag = true;  	}  	else  		sb.Position = startOffset + HeaderIdentifierBytes.Length;  }  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if (String.Equals (extendedHeaderIdentifier' Id3v1Tag.ExtendedHeaderIdentifier' StringComparison.OrdinalIgnoreCase)) {  	startOffset = startOffset - ExtendedHeaderIdentifierBytes.Length;  	extendedTrackTitle = sb.ReadString (60' _encoding);  	extendedArtist = sb.ReadString (60' _encoding);  	extendAlbumTitle = sb.ReadString (60' _encoding);  	Id3v1TrackSpeed trackSpeed = (Id3v1TrackSpeed)sb.ReadByte ();  	tag.TrackSpeed = Id3v1Tag.IsValidTrackSpeed (trackSpeed) ? trackSpeed : Id3v1TrackSpeed.Unset;  	tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  	tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  	tag.UseExtendedTag = true;  }  else  	sb.Position = startOffset + HeaderIdentifierBytes.Length;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: extendedTrackTitle = sb.ReadString (60' _encoding);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: extendedArtist = sb.ReadString (60' _encoding);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: extendAlbumTitle = sb.ReadString (60' _encoding);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.ExtendedTrackGenre = sb.ReadString (30' _encoding);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.StartTime = GetTimeSpan (sb.ReadString (6' _encoding));  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.EndTime = GetTimeSpan (sb.ReadString (6' _encoding));  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.TrackTitle = sb.ReadString (30' _encoding) + extendedTrackTitle;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.Artist = sb.ReadString (30' _encoding) + extendedArtist;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.AlbumTitle = sb.ReadString (30' _encoding) + extendAlbumTitle;  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.AlbumYear = sb.ReadString (4);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: if ((sb.Read (comment' 30) == 30) && (comment [28] == '\0') && (comment [29] != '\0')) {  	tag.TrackNumber = comment [29];  	tag.TrackComment = _encoding.GetString (comment' 0' 28);  }  else  	tag.TrackComment = _encoding.GetString (comment);  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.TrackNumber = comment [29];  
Magic Number,AudioVideoLib.Tags,Id3v1TagReader,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v1TagReader.cs,ReadFromStream,The following statement contains a magic number: tag.TrackComment = _encoding.GetString (comment' 0' 28);  
Magic Number,AudioVideoLib.Tags,VorbisComment,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\VobisComment.cs,ReadStream,The following statement contains a magic number: return s.Length >= 2 ? new VorbisComment {  	Name = s [0]'  	Value = String.Join (String.Empty' s' 1' s.Length - 1)  } : null;  
Magic Number,AudioVideoLib.Tags,Id3v2TagRestrictions,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2TagRestrictions.cs,ToByte,The following statement contains a magic number: return new[] {  	(byte)((((byte)TagSizeRestriction & TagSizeRestrictionFlags) << 6) | (((byte)TextEncodingRestriction & TextEncodingRestrictionFlags) << 5) | (((byte)TextFieldsSizeRestriction & TextFieldsSizeRestrictionFlags) << 3) | (((byte)ImageEncodingRestriction & ImageEncodingRestrictionFlags) << 2) | ((byte)ImageSizeRestriction & ImageSizeRestrictionFlags))  };  
Magic Number,AudioVideoLib.Tags,Id3v2TagRestrictions,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2TagRestrictions.cs,ToByte,The following statement contains a magic number: return new[] {  	(byte)((((byte)TagSizeRestriction & TagSizeRestrictionFlags) << 6) | (((byte)TextEncodingRestriction & TextEncodingRestrictionFlags) << 5) | (((byte)TextFieldsSizeRestriction & TextFieldsSizeRestrictionFlags) << 3) | (((byte)ImageEncodingRestriction & ImageEncodingRestrictionFlags) << 2) | ((byte)ImageSizeRestriction & ImageSizeRestrictionFlags))  };  
Magic Number,AudioVideoLib.Tags,Id3v2TagRestrictions,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2TagRestrictions.cs,ToByte,The following statement contains a magic number: return new[] {  	(byte)((((byte)TagSizeRestriction & TagSizeRestrictionFlags) << 6) | (((byte)TextEncodingRestriction & TextEncodingRestrictionFlags) << 5) | (((byte)TextFieldsSizeRestriction & TextFieldsSizeRestrictionFlags) << 3) | (((byte)ImageEncodingRestriction & ImageEncodingRestrictionFlags) << 2) | ((byte)ImageSizeRestriction & ImageSizeRestrictionFlags))  };  
Magic Number,AudioVideoLib.Tags,Id3v2TagRestrictions,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2TagRestrictions.cs,ToByte,The following statement contains a magic number: return new[] {  	(byte)((((byte)TagSizeRestriction & TagSizeRestrictionFlags) << 6) | (((byte)TextEncodingRestriction & TextEncodingRestrictionFlags) << 5) | (((byte)TextFieldsSizeRestriction & TextFieldsSizeRestrictionFlags) << 3) | (((byte)ImageEncodingRestriction & ImageEncodingRestrictionFlags) << 2) | ((byte)ImageSizeRestriction & ImageSizeRestrictionFlags))  };  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGain,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGain.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer stream = new StreamBuffer ()) {  	int value = ((int)NameCode & NameCodeMask) << 13;  	value &= ((int)OriginatorCode & OriginatorCodeMask) << 10;  	value &= ((int)Sign & SignMask) << 9;  	value &= Adjustment & AdjustmentMask;  	stream.WriteShort ((short)value);  	return stream.ToByteArray ();  }  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGain,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGain.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer stream = new StreamBuffer ()) {  	int value = ((int)NameCode & NameCodeMask) << 13;  	value &= ((int)OriginatorCode & OriginatorCodeMask) << 10;  	value &= ((int)Sign & SignMask) << 9;  	value &= Adjustment & AdjustmentMask;  	stream.WriteShort ((short)value);  	return stream.ToByteArray ();  }  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGain,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGain.cs,ToByteArray,The following statement contains a magic number: using (StreamBuffer stream = new StreamBuffer ()) {  	int value = ((int)NameCode & NameCodeMask) << 13;  	value &= ((int)OriginatorCode & OriginatorCodeMask) << 10;  	value &= ((int)Sign & SignMask) << 9;  	value &= Adjustment & AdjustmentMask;  	stream.WriteShort ((short)value);  	return stream.ToByteArray ();  }  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGain,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGain.cs,ToByteArray,The following statement contains a magic number: value &= ((int)OriginatorCode & OriginatorCodeMask) << 10;  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGain,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGain.cs,ToByteArray,The following statement contains a magic number: value &= ((int)Sign & SignMask) << 9;  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGainAdjustmentFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGainAdjustmentFrame.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (Version.GetHashCode () * 397) ^ (Identifier.GetHashCode () * 397);  }  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGainAdjustmentFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGainAdjustmentFrame.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (Version.GetHashCode () * 397) ^ (Identifier.GetHashCode () * 397);  }  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGainAdjustmentFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGainAdjustmentFrame.cs,GetHashCode,The following statement contains a magic number: return (Version.GetHashCode () * 397) ^ (Identifier.GetHashCode () * 397);  
Magic Number,AudioVideoLib.Tags,Id3v2ReplayGainAdjustmentFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Id3v2ReplayGainAdjustmentFrame.cs,GetHashCode,The following statement contains a magic number: return (Version.GetHashCode () * 397) ^ (Identifier.GetHashCode () * 397);  
Magic Number,AudioVideoLib.Tags,Lyrics3v2IndicationsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2IndicationsField.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Identifier.GetHashCode () * 397;  }  
Magic Number,AudioVideoLib.Tags,Lyrics3v2IndicationsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2IndicationsField.cs,GetHashCode,The following statement contains a magic number: return Identifier.GetHashCode () * 397;  
Magic Number,AudioVideoLib.Tags,Lyrics3v2LyricsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2LyricsField.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Identifier.GetHashCode () * 397;  }  
Magic Number,AudioVideoLib.Tags,Lyrics3v2LyricsField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2LyricsField.cs,GetHashCode,The following statement contains a magic number: return Identifier.GetHashCode () * 397;  
Magic Number,AudioVideoLib.Tags,Lyrics3v2ImageFileField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2ImageFileField.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Identifier.GetHashCode () * 397;  }  
Magic Number,AudioVideoLib.Tags,Lyrics3v2ImageFileField,C:\repos\NeWbY100_AudioVideoLib\Lib\Tags\Lyrics3v2ImageFileField.cs,GetHashCode,The following statement contains a magic number: return Identifier.GetHashCode () * 397;  
Missing Default,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following switch statement is missing a default case: switch (BlockingStrategy) {  case FlacBlockingStrategy.FixedBlocksize:  	Samples = num;  	FrameNumber = num * (FlacStream.StreamInfoMetadataBlocks.Any () ? FlacStream.StreamInfoMetadataBlocks.First ().MinimumBlockSize : 1);  	break;  case FlacBlockingStrategy.VariableBlocksize:  	Samples = num;  	FrameNumber = -1;  	break;  }  
Missing Default,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following switch statement is missing a default case: switch (samplingRate) {  case 0x0C:  	// Sample rate in kHz  	SamplingRate = sb.ReadByte () * 1000;  	break;  case 0x0D:  	// Sample rate in Hz  	SamplingRate = sb.ReadBigEndianInt16 ();  	break;  case 0x0E:  	// Sample rate in 10s of Hz  	SamplingRate = sb.ReadBigEndianInt16 () * 10;  	break;  }  
Missing Default,AudioVideoLib.Formats,FlacFrame,C:\repos\NeWbY100_AudioVideoLib\Lib\Formats\FlacFrameHeader.cs,ReadHeader,The following switch statement is missing a default case: switch (channelAssignment) {  case 0x08:  	ChannelAssignment = FlacChannelAssignment.LeftSide;  	break;  case 0x09:  	ChannelAssignment = FlacChannelAssignment.RightSide;  	break;  case 0x0A:  	ChannelAssignment = FlacChannelAssignment.MidSide;  	break;  }  
