Implementation smell,Namespace,Class,File,Method,Description
Long Statement,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The length of the statement  "		RegistryKeyObservable.Create<int> (RegistryKey' "QueryEndSession"' new TimeSpan (0' 0' 0' 1)' Cts0.Token).Subscribe (value =>  { " is 128.
Long Statement,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The length of the statement  "	var key = Registry.LocalMachine.OpenSubKey (string.Format (@"SOFTWARE\\Netmarks Inc.\\SecureSuiteV\\SMBCCF\\Sessions\\{0}"' CurrentSessionId)); " is 143.
Long Statement,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The length of the statement  "			Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId); " is 127.
Long Statement,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,OnSessionLock,The length of the statement  "	RegistryKey = Registry.LocalMachine.OpenSubKey (string.Format (@"SOFTWARE\\Netmarks Inc.\\SecureSuiteV\\SMBCCF\\Sessions\\{0}"' CurrentSessionId)' true); " is 153.
Empty Catch Block,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The method has an empty catch block.
Empty Catch Block,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,OnSessionUnlock,The method has an empty catch block.
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Controller,The following statement contains a magic number: DynamicSettings.SetDefault ("Timeout"' 120000);  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: while (!IsDisposed) {  	AutoResetEvent.WaitOne ();  	if (IsDisposed)  		break;  	Logger.DebugFormat ("RegistryMonitor started.");  	RegistryKeyObservable.Create<int> (RegistryKey' "QueryEndSession"' new TimeSpan (0' 0' 0' 1)' Cts0.Token).Subscribe (value =>  {  		switch (value) {  		case 0:  			Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			try {  				if (Cts1 != null)  					Cts1.Cancel ();  			}  			catch (ObjectDisposedException e) {  				Logger.Error (e);  			}  			break;  		case 1:  			Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			SetQueryEndSession (2);  			break;  		case 2:  			Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			Cts1 = new CancellationTokenSource ();  			Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  				if (t.Exception != null)  					Logger.Error (t.Exception);  			});  			break;  		}  	}' Logger.Error' () => Logger.DebugFormat ("RegistryMonitor stopped."));  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: while (!IsDisposed) {  	AutoResetEvent.WaitOne ();  	if (IsDisposed)  		break;  	Logger.DebugFormat ("RegistryMonitor started.");  	RegistryKeyObservable.Create<int> (RegistryKey' "QueryEndSession"' new TimeSpan (0' 0' 0' 1)' Cts0.Token).Subscribe (value =>  {  		switch (value) {  		case 0:  			Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			try {  				if (Cts1 != null)  					Cts1.Cancel ();  			}  			catch (ObjectDisposedException e) {  				Logger.Error (e);  			}  			break;  		case 1:  			Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			SetQueryEndSession (2);  			break;  		case 2:  			Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  			Cts1 = new CancellationTokenSource ();  			Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  				if (t.Exception != null)  					Logger.Error (t.Exception);  			});  			break;  		}  	}' Logger.Error' () => Logger.DebugFormat ("RegistryMonitor stopped."));  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: RegistryKeyObservable.Create<int> (RegistryKey' "QueryEndSession"' new TimeSpan (0' 0' 0' 1)' Cts0.Token).Subscribe (value =>  {  	switch (value) {  	case 0:  		Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		try {  			if (Cts1 != null)  				Cts1.Cancel ();  		}  		catch (ObjectDisposedException e) {  			Logger.Error (e);  		}  		break;  	case 1:  		Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		SetQueryEndSession (2);  		break;  	case 2:  		Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		Cts1 = new CancellationTokenSource ();  		Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  			if (t.Exception != null)  				Logger.Error (t.Exception);  		});  		break;  	}  }' Logger.Error' () => Logger.DebugFormat ("RegistryMonitor stopped."));  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: RegistryKeyObservable.Create<int> (RegistryKey' "QueryEndSession"' new TimeSpan (0' 0' 0' 1)' Cts0.Token).Subscribe (value =>  {  	switch (value) {  	case 0:  		Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		try {  			if (Cts1 != null)  				Cts1.Cancel ();  		}  		catch (ObjectDisposedException e) {  			Logger.Error (e);  		}  		break;  	case 1:  		Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		SetQueryEndSession (2);  		break;  	case 2:  		Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  		Cts1 = new CancellationTokenSource ();  		Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  			if (t.Exception != null)  				Logger.Error (t.Exception);  		});  		break;  	}  }' Logger.Error' () => Logger.DebugFormat ("RegistryMonitor stopped."));  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: switch (value) {  case 0:  	Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	try {  		if (Cts1 != null)  			Cts1.Cancel ();  	}  	catch (ObjectDisposedException e) {  		Logger.Error (e);  	}  	break;  case 1:  	Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	SetQueryEndSession (2);  	break;  case 2:  	Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	Cts1 = new CancellationTokenSource ();  	Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  		if (t.Exception != null)  			Logger.Error (t.Exception);  	});  	break;  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: switch (value) {  case 0:  	Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	try {  		if (Cts1 != null)  			Cts1.Cancel ();  	}  	catch (ObjectDisposedException e) {  		Logger.Error (e);  	}  	break;  case 1:  	Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	SetQueryEndSession (2);  	break;  case 2:  	Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	Cts1 = new CancellationTokenSource ();  	Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  		if (t.Exception != null)  			Logger.Error (t.Exception);  	});  	break;  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following statement contains a magic number: SetQueryEndSession (2);  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: try {  	if (CountdownEvent.Wait (timeout' token)) {  		var result = _canShutdown ? 1 : 2;  		Logger.DebugFormat ("Setting EndSessionResult to {0} [Thread:{1}]"' result' Thread.CurrentThread.ManagedThreadId);  		RegistryKey.SetValue ("EndSessionResult"' result' RegistryValueKind.DWord);  		proxy.Invoke ("Shutdown"' new {  			Status = result  		});  	}  	else {  		Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId);  		proxy.Invoke ("Shutdown"' new {  			Status = 2  		});  	}  }  catch (OperationCanceledException oce) {  	if (oce.CancellationToken != Cts1.Token)  		throw;  	Logger.DebugFormat ("Shutdown confirmation canceled [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	proxy.Invoke ("Shutdown"' new {  		Status = 2  	});  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: try {  	if (CountdownEvent.Wait (timeout' token)) {  		var result = _canShutdown ? 1 : 2;  		Logger.DebugFormat ("Setting EndSessionResult to {0} [Thread:{1}]"' result' Thread.CurrentThread.ManagedThreadId);  		RegistryKey.SetValue ("EndSessionResult"' result' RegistryValueKind.DWord);  		proxy.Invoke ("Shutdown"' new {  			Status = result  		});  	}  	else {  		Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId);  		proxy.Invoke ("Shutdown"' new {  			Status = 2  		});  	}  }  catch (OperationCanceledException oce) {  	if (oce.CancellationToken != Cts1.Token)  		throw;  	Logger.DebugFormat ("Shutdown confirmation canceled [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	proxy.Invoke ("Shutdown"' new {  		Status = 2  	});  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: try {  	if (CountdownEvent.Wait (timeout' token)) {  		var result = _canShutdown ? 1 : 2;  		Logger.DebugFormat ("Setting EndSessionResult to {0} [Thread:{1}]"' result' Thread.CurrentThread.ManagedThreadId);  		RegistryKey.SetValue ("EndSessionResult"' result' RegistryValueKind.DWord);  		proxy.Invoke ("Shutdown"' new {  			Status = result  		});  	}  	else {  		Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId);  		proxy.Invoke ("Shutdown"' new {  			Status = 2  		});  	}  }  catch (OperationCanceledException oce) {  	if (oce.CancellationToken != Cts1.Token)  		throw;  	Logger.DebugFormat ("Shutdown confirmation canceled [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	proxy.Invoke ("Shutdown"' new {  		Status = 2  	});  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: if (CountdownEvent.Wait (timeout' token)) {  	var result = _canShutdown ? 1 : 2;  	Logger.DebugFormat ("Setting EndSessionResult to {0} [Thread:{1}]"' result' Thread.CurrentThread.ManagedThreadId);  	RegistryKey.SetValue ("EndSessionResult"' result' RegistryValueKind.DWord);  	proxy.Invoke ("Shutdown"' new {  		Status = result  	});  }  else {  	Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId);  	proxy.Invoke ("Shutdown"' new {  		Status = 2  	});  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: if (CountdownEvent.Wait (timeout' token)) {  	var result = _canShutdown ? 1 : 2;  	Logger.DebugFormat ("Setting EndSessionResult to {0} [Thread:{1}]"' result' Thread.CurrentThread.ManagedThreadId);  	RegistryKey.SetValue ("EndSessionResult"' result' RegistryValueKind.DWord);  	proxy.Invoke ("Shutdown"' new {  		Status = result  	});  }  else {  	Logger.DebugFormat ("Shutdown confirmation timedout after {0}ms. [Thread:{1}]"' timeout' Thread.CurrentThread.ManagedThreadId);  	proxy.Invoke ("Shutdown"' new {  		Status = 2  	});  }  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: proxy.Invoke ("Shutdown"' new {  	Status = 2  });  
Magic Number,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,ConfirmShutdown,The following statement contains a magic number: proxy.Invoke ("Shutdown"' new {  	Status = 2  });  
Missing Default,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,Control,The following switch statement is missing a default case: switch (value) {  case 0:  	Logger.DebugFormat ("QueryEndSession:0 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	try {  		if (Cts1 != null)  			Cts1.Cancel ();  	}  	catch (ObjectDisposedException e) {  		Logger.Error (e);  	}  	break;  case 1:  	Logger.DebugFormat ("QueryEndSession:1 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	SetQueryEndSession (2);  	break;  case 2:  	Logger.DebugFormat ("QueryEndSession:2 [Thread:{0}]"' Thread.CurrentThread.ManagedThreadId);  	Cts1 = new CancellationTokenSource ();  	Task.Factory.StartNew (() => ConfirmShutdown (proxy' Cts1.Token)).ContinueWith (t =>  {  		if (t.Exception != null)  			Logger.Error (t.Exception);  	});  	break;  }  
Missing Default,weldR.SecureSuiteV,Controller,C:\repos\hanishi_weldr2\src\weldR.SecureSuiteV\Controller.cs,SessionChange,The following switch statement is missing a default case: switch ((string)json ["Reason"]) {  case "SessionLock":  	OnSessionLock ();  	break;  case "SessionUnlock":  	OnSessionUnlock ();  	break;  }  
