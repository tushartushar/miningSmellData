Implementation smell,Namespace,Class,File,Method,Description
Long Method,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,RenderError,The method has 129 lines of code.
Long Method,Elmah,ErrorMailModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorMailModule.cs,ReportError,The method has 142 lines of code.
Complex Method,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 11
Complex Method,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,GetError,Cyclomatic complexity of the method is 8
Complex Method,Elmah,ErrorJson,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorJson.cs,Member,Cyclomatic complexity of the method is 12
Complex Method,Elmah,ErrorLogDownloadHandler,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogDownloadHandler.cs,BeginProcessRequest,Cyclomatic complexity of the method is 13
Complex Method,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,FindHandler,Cyclomatic complexity of the method is 13
Complex Method,Elmah,ErrorMailModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorMailModule.cs,ReportError,Cyclomatic complexity of the method is 12
Complex Method,Elmah,ErrorXml,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorXml.cs,ReadInnerXml,Cyclomatic complexity of the method is 18
Complex Method,Elmah,ErrorXml,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorXml.cs,UpcodeTo,Cyclomatic complexity of the method is 11
Complex Method,Elmah,JsonTextWriter,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\JsonTextWriter.cs,Enquote,Cyclomatic complexity of the method is 25
Complex Method,Elmah,MemoryErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\MemoryErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 8
Complex Method,Elmah,MySqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\MySqlErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 10
Complex Method,Elmah,MySqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\MySqlErrorLog.cs,GetError,Cyclomatic complexity of the method is 10
Complex Method,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 10
Complex Method,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,Cyclomatic complexity of the method is 9
Complex Method,Elmah,PgsqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\PgsqlErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 12
Complex Method,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,InitializeDatabase,Cyclomatic complexity of the method is 9
Complex Method,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 13
Complex Method,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,GetError,Cyclomatic complexity of the method is 8
Complex Method,Elmah,StringFormatter,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StringFormatter.cs,FormatImpl,Cyclomatic complexity of the method is 11
Complex Method,Elmah,StringFormatter,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StringFormatter.cs,BindFormatToken,Cyclomatic complexity of the method is 10
Complex Method,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 10
Complex Method,Elmah,XmlFileErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\XmlFileErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 8
Complex Method,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,EncryptStringAES,Cyclomatic complexity of the method is 9
Complex Method,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,DecryptStringAES,Cyclomatic complexity of the method is 9
Complex Method,Elmah.Assertions,JScriptAssertion,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\JScriptAssertion.cs,ProcessDirectives,Cyclomatic complexity of the method is 14
Long Parameter List,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,StackFrameSpan,The method has 5 parameters.
Long Parameter List,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,StackFrameSpan,The method has 7 parameters.
Long Parameter List,Elmah,ErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLog.cs,BeginGetErrors,The method has 5 parameters.
Long Parameter List,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderLinkToPage,The method has 5 parameters.
Long Parameter List,Elmah,SqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlErrorLog.cs,BeginGetErrors,The method has 5 parameters.
Long Statement,Elmah,AboutPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AboutPage.cs,RenderContents,The length of the statement  "	writer.AddAttribute (HtmlTextWriterAttribute.Title' "Checks if your ELMAH version is up to date (requires Internet connection)"); " is 129.
Long Statement,Elmah,AboutPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AboutPage.cs,GetFileVersion,The length of the statement  "	AssemblyFileVersionAttribute version = (AssemblyFileVersionAttribute)Attribute.GetCustomAttribute (GetType ().Assembly' typeof(AssemblyFileVersionAttribute)); " is 158.
Long Statement,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,InitializeDatabase,The length of the statement  "					throw new Exception (string.Format ("The Microsoft Access database creation script took longer than the allocated time of {0} seconds to execute. " + "The script was terminated prematurely."' tolerance.TotalSeconds)); " is 217.
Long Statement,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,InitializeDatabase,The length of the statement  "					throw new Exception (string.Format ("The Microsoft Access database creation script failed with exit code {0}."' process.ExitCode)); " is 131.
Long Statement,Elmah,ConfigurationSectionHelper,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ConfigurationSectionHelper.cs,GetValueAsBoolean,The length of the statement  "		throw new ConfigurationException (string.Format ("Error in parsing the '{0}' attribute of the '{1}' element as a boolean value. Use either 1' 0' true or false (latter two being case-sensitive)."' attribute.Name' attribute.OwnerElement.Name)' e' attribute); " is 256.
Long Statement,Elmah,ConnectionStringHelper,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ConnectionStringHelper.cs,GetDataSourceFilePath,The length of the statement  "		throw new ArgumentException ("A 'Data Source' parameter was expected in the supplied connection string' but it was not found."); " is 128.
Long Statement,Elmah,ConnectionStringHelper,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ConnectionStringHelper.cs,ResolveDataSourceFilePath,The length of the statement  "	return Mask.NullString (baseDirectory).TrimEnd (_dirSeparators) + Path.DirectorySeparatorChar + path.Substring (dataDirectoryMacroString.Length).TrimStart (_dirSeparators); " is 172.
Long Statement,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,RenderError,The length of the statement  "	HtmlEncode (string.Format ("Logged on {0} at {1}"' error.Time.ToLongDateString ()' error.Time.ToLongTimeString ())' writer); " is 124.
Long Statement,Elmah,ErrorDigestRssHandler,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDigestRssHandler.cs,Render,The length of the statement  "	Uri baseUrl = new Uri (ErrorLogPageFactory.GetRequestUrl (_context).GetLeftPart (UriPartial.Authority) + Request.ServerVariables ["URL"]); " is 138.
Long Statement,Elmah,ErrorDigestRssHandler,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDigestRssHandler.cs,Render,The length of the statement  "				item.title = string.Format ("Digest for {0} ({1})"' runningDay.ToString ("yyyy-MM-dd")' runningDay.ToLongDateString ()); " is 120.
Long Statement,Elmah,ErrorDisplay,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDisplay.cs,HumaneExceptionErrorType,The length of the statement  "		if (string.Compare (type' suffixIndex' conventionalSuffix' 0' conventionalSuffix.Length' true' CultureInfo.InvariantCulture) == 0) { " is 132.
Long Statement,Elmah,ErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLog.cs,BeginGetErrors,The length of the statement  "	return BeginSyncImpl (asyncCallback' asyncState' new GetErrorsHandler (GetErrors)' pageIndex' pageSize' errorEntryList); " is 120.
Long Statement,Elmah,ErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLog.cs,EndSyncImpl,The length of the statement  "		throw new ArgumentException ("IAsyncResult object did not come from the corresponding async method on this type."' "asyncResult"); " is 130.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,OnLoad,The length of the statement  "	this.PageTitle = string.Format (hostName.Length > 0 ? "Error log for {0} on {2} (Page #{1})" : "Error log for {0} (Page #{1})"' this.ApplicationName' (_pageIndex + 1).ToString ("N0")' hostName); " is 194.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderContents,The length of the statement  "	SpeedBar.Render (writer' SpeedBar.RssFeed.Format (BasePageName)' SpeedBar.RssDigestFeed.Format (BasePageName)' SpeedBar.DownloadLog.Format (BasePageName)' SpeedBar.Help' SpeedBar.About.Format (BasePageName)); " is 208.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderStats,The length of the statement  "	writer.Write ("Errors {0} to {1} of total {2} (page {3} of {4}). "' firstErrorNumber.ToString ("N0")' lastErrorNumber.ToString ("N0")' _totalCount.ToString ("N0")' (_pageIndex + 1).ToString ("N0")' totalPages.ToString ("N0")); " is 226.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderTitle,The length of the statement  "	if (string.Compare (simpleName' this.Request.ServerVariables ["APPL_MD_PATH"]' true' CultureInfo.InvariantCulture) == 0) { " is 122.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The length of the statement  "		bodyRow.Cells.Add (FormatCell (new TableCell ()' error.StatusCode.ToString ()' "code-col"' Mask.NullString (HttpWorkerRequest.GetStatusDescription (error.StatusCode)))); " is 169.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The length of the statement  "		bodyRow.Cells.Add (FormatCell (new TableCell ()' ErrorDisplay.HumaneExceptionErrorType (error)' "type-col"' error.Type)); " is 121.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The length of the statement  "		bodyRow.Cells.Add (FormatCell (new TableCell ()' error.Time.ToShortDateString ()' "date-col"' error.Time.ToLongDateString ())); " is 127.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The length of the statement  "		bodyRow.Cells.Add (FormatCell (new TableCell ()' error.Time.ToShortTimeString ()' "time-col"' error.Time.ToLongTimeString ())); " is 127.
Long Statement,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderLinkToPage,The length of the statement  "	string href = string.Format ("{0}?page={1}&size={2}"' BasePageName' (pageIndex + 1).ToString (CultureInfo.InvariantCulture)' pageSize.ToString (CultureInfo.InvariantCulture)); " is 175.
Long Statement,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The length of the statement  "	string resource = context.Request.PathInfo.Length == 0 ? string.Empty : context.Request.PathInfo.Substring (1).ToLower (CultureInfo.InvariantCulture); " is 150.
Long Statement,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The length of the statement  "	if (authorized == 0 || (authorized < 0 && !HttpRequestSecurity.IsLocal (context.Request) && !SecurityConfiguration.Default.AllowRemoteAccess)) { " is 144.
Long Statement,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The length of the statement  "	if (resource != "stylesheet" && resource != "login" && SecurityConfiguration.Default.RequireLogin && !HttpRequestSecurity.LoggedOnUsername (context.Request).Equals (SecurityConfiguration.Default.UserName' StringComparison.CurrentCultureIgnoreCase)) { " is 250.
Long Statement,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,IsAuthorized,The length of the statement  "		if (HttpRequestSecurity.LoggedOnUsername (context.Request) == SecurityConfiguration.Default.UserName && SecurityConfiguration.Default.RequireLogin == true) " is 155.
Long Statement,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetAuthorizationHandlers,The length of the statement  "		context.Items [key] = handlers = ArrayList.ReadOnly (list != null ? list.ToArray (typeof(IRequestAuthorizationHandler)) : _zeroAuthorizationHandlers); " is 150.
Long Statement,Elmah,ErrorMailModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorMailModule.cs,OnInit,The length of the statement  "	MailPriority mailPriority = (MailPriority)Enum.Parse (typeof(MailPriority)' GetSetting (config' "priority"' MailPriority.Normal.ToString ())' true); " is 148.
Long Statement,Elmah,ErrorMailModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorMailModule.cs,ReportError,The length of the statement  "		throw new ApplicationException (string.Format ("The error mail module does not know how to handle the {1} media type that is created by the {0} formatter."' formatter.GetType ().FullName' formatter.MimeType)); " is 209.
Long Statement,Elmah,ErrorMailModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorMailModule.cs,GetSetting,The length of the statement  "			throw new ApplicationException (string.Format ("The required configuration setting '{0}' is missing for the error mailing module."' name)); " is 139.
Long Statement,Elmah,ErrorPageBase,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorPageBase.cs,RenderDocumentStart,The length of the statement  "	writer.WriteLine ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"); " is 147.
Long Statement,Elmah,ErrorPageBase,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorPageBase.cs,RenderDocumentEnd,The length of the statement  "	writer.Write (TimeZone.CurrentTimeZone.IsDaylightSavingTime (now) ? TimeZone.CurrentTimeZone.DaylightName : TimeZone.CurrentTimeZone.StandardName); " is 147.
Long Statement,Elmah,ErrorRssHandler,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorRssHandler.cs,ProcessRequest,The length of the statement  "	channel.link = ErrorLogPageFactory.GetRequestUrl (context).GetLeftPart (UriPartial.Authority) + context.Request.ServerVariables ["URL"]; " is 136.
Long Statement,Elmah,ErrorTweetModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorTweetModule.cs,OnInit,The length of the statement  "	int maxStatusLength = int.Parse (GetSetting (config' "maxStatusLength"' "140")' NumberStyles.None' CultureInfo.InvariantCulture); " is 129.
Long Statement,Elmah,ErrorTweetModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorTweetModule.cs,LogException,The length of the statement  "			status = trimmedStatusLength >= 0 ? status.Substring (0' trimmedStatusLength) + ellipsis : status.Substring (0' maxLength); " is 123.
Long Statement,Elmah,ErrorTweetModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorTweetModule.cs,LogException,The length of the statement  "		IAsyncResult ar = request.BeginGetRequestStream (new AsyncCallback (OnGetRequestStreamCompleted)' AsyncArgs (request' data)); " is 125.
Long Statement,Elmah,ErrorTweetModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorTweetModule.cs,GetSetting,The length of the statement  "			throw new ApplicationException (string.Format ("The required configuration setting '{0}' is missing for the error tweeting module."' name)); " is 140.
Long Statement,Elmah,ErrorXml,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorXml.cs,WriteXmlAttributes,The length of the statement  "		WriteXmlAttribute (writer' "time"' XmlConvert.ToString (error.Time.ToUniversalTime ()' @"yyyy-MM-dd\THH:mm:ss.fffffff\Z")); " is 123.
Long Statement,Elmah,FixIIS5xWildcardMappingModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\FixIIS5xWildcardMappingModule.cs,GetHandlerPath,The length of the statement  "	System.Web.Configuration.HttpHandlersSection handlersSection = System.Configuration.ConfigurationManager.GetSection ("system.web/httpHandlers") as System.Web.Configuration.HttpHandlersSection; " is 192.
Long Statement,Elmah,FixIIS5xWildcardMappingModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\FixIIS5xWildcardMappingModule.cs,OnBeginRequest,The length of the statement  "		context.RewritePath (path.Substring (0' handlerPosition + _handlerPathLength)' path.Substring (handlerPosition + _handlerPathLength)' context.Request.QueryString.ToString ()); " is 175.
Long Statement,Elmah,HttpRequestSecurity,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpRequestSecurity.cs,LoggedOnUsername,The length of the statement  "		return StrEncrypt.DecryptStringAES (userCookie.Value' SecurityConfiguration.Default.EncryptionSecret' SecurityConfiguration.Default.EncryptionSalt + SecurityConfiguration.Default.Password); " is 189.
Long Statement,Elmah,HttpRequestSecurity,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpRequestSecurity.cs,LogIn,The length of the statement  "	userCookie.Value = StrEncrypt.EncryptStringAES (username' SecurityConfiguration.Default.EncryptionSecret' SecurityConfiguration.Default.EncryptionSalt + SecurityConfiguration.Default.Password); " is 193.
Long Statement,Elmah,MySqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\MySqlErrorLog.cs,Log,The length of the statement  "		using (MySqlCommand command = Commands.LogError (id' ApplicationName' error.HostName' error.Type' error.Source' error.Message' error.User' error.StatusCode' error.Time.ToUniversalTime ()' errorXml)) { " is 200.
Long Statement,Elmah,PgsqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\PgsqlErrorLog.cs,Log,The length of the statement  "		using (NpgsqlCommand command = Commands.LogError (id' this.ApplicationName' error.HostName' error.Type' error.Source' error.Message' error.User' error.StatusCode' error.Time' errorXml)) { " is 187.
Long Statement,Elmah,SqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlErrorLog.cs,Log,The length of the statement  "		using (SqlCommand command = Commands.LogError (id' this.ApplicationName' error.HostName' error.Type' error.Source' error.Message' error.User' error.StatusCode' error.Time.ToUniversalTime ()' errorXml)) { " is 203.
Long Statement,Elmah,SynchronousAsyncResult,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SynchronousAsyncResult.cs,End,The length of the statement  "		throw new InvalidOperationException (string.Format ("End{0} can only be called once for each asynchronous operation."' _syncMethodName)); " is 137.
Long Statement,Elmah,XmlFileErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\XmlFileErrorLog.cs,Log,The length of the statement  "	string fileName = string.Format (CultureInfo.InvariantCulture' @"error-{0:yyyy-MM-ddHHmmssZ}-{1}.xml"' /* 0 */timeStamp.ToUniversalTime ()' /* 1 */errorId); " is 156.
Long Statement,Elmah,ErrorLoginPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLoginPage.cs,OnLoad,The length of the statement  "		Response.Redirect (Request.Url.AbsolutePath.Remove (Request.Url.AbsolutePath.LastIndexOf ("/login"' StringComparison.CurrentCultureIgnoreCase))' true); " is 151.
Long Statement,Elmah,ErrorLoginPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLoginPage.cs,OnLoad,The length of the statement  "		if (Request.UrlReferrer == Request.Url && !string.IsNullOrEmpty (Request ["username"]) && !string.IsNullOrEmpty (Request ["password"])) { " is 137.
Long Statement,Elmah,ErrorLoginPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLoginPage.cs,OnLoad,The length of the statement  "			if (Request ["username"].Equals (SecurityConfiguration.Default.UserName' StringComparison.CurrentCultureIgnoreCase) && Request ["password"].Equals (SecurityConfiguration.Default.Password)) { " is 190.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,assert_jscript,The length of the statement  "	return new JScriptAssertion (expression' DeserializeStringArray (config' "assemblies"' "assembly"' "name")' DeserializeStringArray (config' "imports"' "import"' "namespace")); " is 175.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,CreateImpl,The length of the statement  "		if (!DecodeClrTypeNamespaceFromXmlNamespace (xmlns' out ns' out assemblyName) || ns.Length == 0 || assemblyName.Length == 0) { " is 126.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,CreateImpl,The length of the statement  "			throw new ConfigurationException (string.Format ("Error decoding CLR type namespace and assembly from the XML namespace '{0}'."' xmlns)); " is 137.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,CreateImpl,The length of the statement  "		throw new MissingMemberException (string.Format ("{0} does not have a method named {1}. " + "Ensure that the method is named correctly and that it is public and static."' factoryType' name)); " is 191.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,CreateImpl,The length of the statement  "	if (parameters.Length == 1 && parameters [0].ParameterType == typeof(XmlElement) && method.ReturnType == typeof(IAssertion)) { " is 126.
Long Statement,Elmah.Assertions,AssertionFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\AssertionFactory.cs,CreateImpl,The length of the statement  "		AssertionFactoryHandler handler = (AssertionFactoryHandler)Delegate.CreateDelegate (typeof(AssertionFactoryHandler)' factoryType' name); " is 136.
Long Statement,Elmah.Assertions,JScriptAssertion,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\JScriptAssertion.cs,ProcessDirectives,The length of the statement  "				throw new ArgumentException (string.Format ("Error processing directives section (lead comment) of the JScript expression (see line {0}). {1}"' lineNumber.ToString ("N0")' e.Message)' "expression"); " is 198.
Long Statement,Elmah.Assertions,TypeAssertion,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\TypeAssertion.cs,MaskNullExpression,The length of the statement  "	return expression != null ? expression : new DelegatedContextExpression (new ContextExpressionEvaluationHandler (EvaluateToException)); " is 135.
Complex Conditional,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The conditional expression  "authorized == 0 || (authorized < 0 && !HttpRequestSecurity.IsLocal (context.Request) && !SecurityConfiguration.Default.AllowRemoteAccess)"  is complex.
Complex Conditional,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The conditional expression  "resource != "stylesheet" && resource != "login" && SecurityConfiguration.Default.RequireLogin && !HttpRequestSecurity.LoggedOnUsername (context.Request).Equals (SecurityConfiguration.Default.UserName' StringComparison.CurrentCultureIgnoreCase)"  is complex.
Complex Conditional,Elmah,JsonTextWriter,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\JsonTextWriter.cs,WriteImpl,The conditional expression  "Depth == 0 && (text.Length > 1 || (text [0] != '{' && text [0] != '['))"  is complex.
Empty Catch Block,Elmah,Environment,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,Environment,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,Environment,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,HttpModuleRegistry,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpModuleRegistry.cs,GetModules,The method has an empty catch block.
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection (this.ConnectionString))  	using (OleDbCommand command = connection.CreateCommand ()) {  		connection.Open ();  		command.CommandType = CommandType.Text;  		command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  		command.CommandType = CommandType.Text;  		OleDbParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  		parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  		command.ExecuteNonQuery ();  		using (OleDbCommand identityCommand = connection.CreateCommand ()) {  			identityCommand.CommandType = CommandType.Text;  			identityCommand.CommandText = "SELECT @@IDENTITY";  			return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  		}  	}  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection (this.ConnectionString))  	using (OleDbCommand command = connection.CreateCommand ()) {  		connection.Open ();  		command.CommandType = CommandType.Text;  		command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  		command.CommandType = CommandType.Text;  		OleDbParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  		parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  		command.ExecuteNonQuery ();  		using (OleDbCommand identityCommand = connection.CreateCommand ()) {  			identityCommand.CommandType = CommandType.Text;  			identityCommand.CommandText = "SELECT @@IDENTITY";  			return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  		}  	}  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection (this.ConnectionString))  	using (OleDbCommand command = connection.CreateCommand ()) {  		connection.Open ();  		command.CommandType = CommandType.Text;  		command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  		command.CommandType = CommandType.Text;  		OleDbParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  		parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  		command.ExecuteNonQuery ();  		using (OleDbCommand identityCommand = connection.CreateCommand ()) {  			identityCommand.CommandType = CommandType.Text;  			identityCommand.CommandText = "SELECT @@IDENTITY";  			return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  		}  	}  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection (this.ConnectionString))  	using (OleDbCommand command = connection.CreateCommand ()) {  		connection.Open ();  		command.CommandType = CommandType.Text;  		command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  		command.CommandType = CommandType.Text;  		OleDbParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  		parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  		command.ExecuteNonQuery ();  		using (OleDbCommand identityCommand = connection.CreateCommand ()) {  			identityCommand.CommandType = CommandType.Text;  			identityCommand.CommandText = "SELECT @@IDENTITY";  			return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  		}  	}  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbCommand command = connection.CreateCommand ()) {  	connection.Open ();  	command.CommandType = CommandType.Text;  	command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  	command.CommandType = CommandType.Text;  	OleDbParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  	parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  	command.ExecuteNonQuery ();  	using (OleDbCommand identityCommand = connection.CreateCommand ()) {  		identityCommand.CommandType = CommandType.Text;  		identityCommand.CommandText = "SELECT @@IDENTITY";  		return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbCommand command = connection.CreateCommand ()) {  	connection.Open ();  	command.CommandType = CommandType.Text;  	command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  	command.CommandType = CommandType.Text;  	OleDbParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  	parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  	command.ExecuteNonQuery ();  	using (OleDbCommand identityCommand = connection.CreateCommand ()) {  		identityCommand.CommandType = CommandType.Text;  		identityCommand.CommandText = "SELECT @@IDENTITY";  		return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbCommand command = connection.CreateCommand ()) {  	connection.Open ();  	command.CommandType = CommandType.Text;  	command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  	command.CommandType = CommandType.Text;  	OleDbParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  	parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  	command.ExecuteNonQuery ();  	using (OleDbCommand identityCommand = connection.CreateCommand ()) {  		identityCommand.CommandType = CommandType.Text;  		identityCommand.CommandText = "SELECT @@IDENTITY";  		return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbCommand command = connection.CreateCommand ()) {  	connection.Open ();  	command.CommandType = CommandType.Text;  	command.CommandText = @"INSERT INTO ELMAH_Error                                             (Application' Host' Type' Source'                                              Message' UserName' StatusCode' TimeUtc' AllXml)                                         VALUES                                             (@Application' @Host' @Type' @Source'                                              @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";  	command.CommandType = CommandType.Text;  	OleDbParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;  	parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;  	command.ExecuteNonQuery ();  	using (OleDbCommand identityCommand = connection.CreateCommand ()) {  		identityCommand.CommandType = CommandType.Text;  		identityCommand.CommandText = "SELECT @@IDENTITY";  		return Convert.ToString (identityCommand.ExecuteScalar ()' CultureInfo.InvariantCulture);  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Host"' OleDbType.VarChar' 30).Value = error.HostName;  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Type"' OleDbType.VarChar' 100).Value = error.Type;  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Source"' OleDbType.VarChar' 60).Value = error.Source;  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@User"' OleDbType.VarChar' 50).Value = error.User;  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,GetErrors,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection (this.ConnectionString))  	using (OleDbCommand command = connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = "SELECT COUNT(*) FROM ELMAH_Error";  		connection.Open ();  		int totalCount = (int)command.ExecuteScalar ();  		if (errorEntryList != null && pageIndex * pageSize < totalCount) {  			int maxRecords = pageSize * (pageIndex + 1);  			if (maxRecords > totalCount) {  				maxRecords = totalCount;  				pageSize = totalCount - pageSize * (totalCount / pageSize);  			}  			StringBuilder sql = new StringBuilder (1000);  			sql.Append ("SELECT e.* FROM (");  			sql.Append ("SELECT TOP ");  			sql.Append (pageSize.ToString (CultureInfo.InvariantCulture));  			sql.Append (" TimeUtc' ErrorId FROM (");  			sql.Append ("SELECT TOP ");  			sql.Append (maxRecords.ToString (CultureInfo.InvariantCulture));  			sql.Append (" TimeUtc' ErrorId FROM ELMAH_Error ");  			sql.Append ("ORDER BY TimeUtc DESC' ErrorId DESC) ");  			sql.Append ("ORDER BY TimeUtc ASC' ErrorId ASC) AS i ");  			sql.Append ("INNER JOIN Elmah_Error AS e ON i.ErrorId = e.ErrorId ");  			sql.Append ("ORDER BY e.TimeUtc DESC' e.ErrorId DESC");  			command.CommandText = sql.ToString ();  			using (OleDbDataReader reader = command.ExecuteReader ()) {  				Debug.Assert (reader != null);  				while (reader.Read ()) {  					string id = Convert.ToString (reader ["ErrorId"]' CultureInfo.InvariantCulture);  					Error error = new Error ();  					error.ApplicationName = reader ["Application"].ToString ();  					error.HostName = reader ["Host"].ToString ();  					error.Type = reader ["Type"].ToString ();  					error.Source = reader ["Source"].ToString ();  					error.Message = reader ["Message"].ToString ();  					error.User = reader ["UserName"].ToString ();  					error.StatusCode = Convert.ToInt32 (reader ["StatusCode"]);  					error.Time = Convert.ToDateTime (reader ["TimeUtc"]).ToLocalTime ();  					errorEntryList.Add (new ErrorLogEntry (this' id' error));  				}  				reader.Close ();  			}  		}  		return totalCount;  	}  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,GetErrors,The following statement contains a magic number: using (OleDbCommand command = connection.CreateCommand ()) {  	command.CommandType = CommandType.Text;  	command.CommandText = "SELECT COUNT(*) FROM ELMAH_Error";  	connection.Open ();  	int totalCount = (int)command.ExecuteScalar ();  	if (errorEntryList != null && pageIndex * pageSize < totalCount) {  		int maxRecords = pageSize * (pageIndex + 1);  		if (maxRecords > totalCount) {  			maxRecords = totalCount;  			pageSize = totalCount - pageSize * (totalCount / pageSize);  		}  		StringBuilder sql = new StringBuilder (1000);  		sql.Append ("SELECT e.* FROM (");  		sql.Append ("SELECT TOP ");  		sql.Append (pageSize.ToString (CultureInfo.InvariantCulture));  		sql.Append (" TimeUtc' ErrorId FROM (");  		sql.Append ("SELECT TOP ");  		sql.Append (maxRecords.ToString (CultureInfo.InvariantCulture));  		sql.Append (" TimeUtc' ErrorId FROM ELMAH_Error ");  		sql.Append ("ORDER BY TimeUtc DESC' ErrorId DESC) ");  		sql.Append ("ORDER BY TimeUtc ASC' ErrorId ASC) AS i ");  		sql.Append ("INNER JOIN Elmah_Error AS e ON i.ErrorId = e.ErrorId ");  		sql.Append ("ORDER BY e.TimeUtc DESC' e.ErrorId DESC");  		command.CommandText = sql.ToString ();  		using (OleDbDataReader reader = command.ExecuteReader ()) {  			Debug.Assert (reader != null);  			while (reader.Read ()) {  				string id = Convert.ToString (reader ["ErrorId"]' CultureInfo.InvariantCulture);  				Error error = new Error ();  				error.ApplicationName = reader ["Application"].ToString ();  				error.HostName = reader ["Host"].ToString ();  				error.Type = reader ["Type"].ToString ();  				error.Source = reader ["Source"].ToString ();  				error.Message = reader ["Message"].ToString ();  				error.User = reader ["UserName"].ToString ();  				error.StatusCode = Convert.ToInt32 (reader ["StatusCode"]);  				error.Time = Convert.ToDateTime (reader ["TimeUtc"]).ToLocalTime ();  				errorEntryList.Add (new ErrorLogEntry (this' id' error));  			}  			reader.Close ();  		}  	}  	return totalCount;  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,GetErrors,The following statement contains a magic number: if (errorEntryList != null && pageIndex * pageSize < totalCount) {  	int maxRecords = pageSize * (pageIndex + 1);  	if (maxRecords > totalCount) {  		maxRecords = totalCount;  		pageSize = totalCount - pageSize * (totalCount / pageSize);  	}  	StringBuilder sql = new StringBuilder (1000);  	sql.Append ("SELECT e.* FROM (");  	sql.Append ("SELECT TOP ");  	sql.Append (pageSize.ToString (CultureInfo.InvariantCulture));  	sql.Append (" TimeUtc' ErrorId FROM (");  	sql.Append ("SELECT TOP ");  	sql.Append (maxRecords.ToString (CultureInfo.InvariantCulture));  	sql.Append (" TimeUtc' ErrorId FROM ELMAH_Error ");  	sql.Append ("ORDER BY TimeUtc DESC' ErrorId DESC) ");  	sql.Append ("ORDER BY TimeUtc ASC' ErrorId ASC) AS i ");  	sql.Append ("INNER JOIN Elmah_Error AS e ON i.ErrorId = e.ErrorId ");  	sql.Append ("ORDER BY e.TimeUtc DESC' e.ErrorId DESC");  	command.CommandText = sql.ToString ();  	using (OleDbDataReader reader = command.ExecuteReader ()) {  		Debug.Assert (reader != null);  		while (reader.Read ()) {  			string id = Convert.ToString (reader ["ErrorId"]' CultureInfo.InvariantCulture);  			Error error = new Error ();  			error.ApplicationName = reader ["Application"].ToString ();  			error.HostName = reader ["Host"].ToString ();  			error.Type = reader ["Type"].ToString ();  			error.Source = reader ["Source"].ToString ();  			error.Message = reader ["Message"].ToString ();  			error.User = reader ["UserName"].ToString ();  			error.StatusCode = Convert.ToInt32 (reader ["StatusCode"]);  			error.Time = Convert.ToDateTime (reader ["TimeUtc"]).ToLocalTime ();  			errorEntryList.Add (new ErrorLogEntry (this' id' error));  		}  		reader.Close ();  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,InitializeDatabase,The following statement contains a magic number: lock (_mdbInitializationLock) {  	//  	// Just double-check that no other thread has created the database while  	// we were waiting for the lock.  	//  	if (File.Exists (dbFilePath))  		return;  	//  	// Create a temporary copy of the mkmdb.vbs script.  	// We do this in the same directory as the resulting database for security permission purposes.  	//  	string scriptPath = Path.Combine (Path.GetDirectoryName (dbFilePath)' _scriptResourceName);  	using (FileStream scriptStream = new FileStream (scriptPath' FileMode.Create' FileAccess.Write' FileShare.None)) {  		ManifestResourceHelper.WriteResourceToStream (scriptStream' _scriptResourceName);  	}  	//  	// Run the script file to create the database using batch   	// mode (//B)' which suppresses script errors and prompts   	// from displaying.  	//  	ProcessStartInfo psi = new ProcessStartInfo ("cscript"' "\"" + scriptPath + "\" \"" + dbFilePath + "\" //B //NoLogo");  	psi.UseShellExecute = false;  	// i.e. CreateProcess  	psi.CreateNoWindow = true;  	// Stay lean' stay mean  	try {  		using (Process process = Process.Start (psi)) {  			//  			// A few seconds should be plenty of time to create the database.  			//  			TimeSpan tolerance = TimeSpan.FromSeconds (2);  			if (!process.WaitForExit ((int)tolerance.TotalMilliseconds)) {  				//  				// but it wasn't' so clean up and throw an exception!  				// Realistically' I don't expect to ever get here!  				//  				process.Kill ();  				throw new Exception (string.Format ("The Microsoft Access database creation script took longer than the allocated time of {0} seconds to execute. " + "The script was terminated prematurely."' tolerance.TotalSeconds));  			}  			if (process.ExitCode != 0) {  				throw new Exception (string.Format ("The Microsoft Access database creation script failed with exit code {0}."' process.ExitCode));  			}  		}  	}  	finally {  		//  		// Clean up after ourselves!!  		//  		File.Delete (scriptPath);  	}  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,InitializeDatabase,The following statement contains a magic number: try {  	using (Process process = Process.Start (psi)) {  		//  		// A few seconds should be plenty of time to create the database.  		//  		TimeSpan tolerance = TimeSpan.FromSeconds (2);  		if (!process.WaitForExit ((int)tolerance.TotalMilliseconds)) {  			//  			// but it wasn't' so clean up and throw an exception!  			// Realistically' I don't expect to ever get here!  			//  			process.Kill ();  			throw new Exception (string.Format ("The Microsoft Access database creation script took longer than the allocated time of {0} seconds to execute. " + "The script was terminated prematurely."' tolerance.TotalSeconds));  		}  		if (process.ExitCode != 0) {  			throw new Exception (string.Format ("The Microsoft Access database creation script failed with exit code {0}."' process.ExitCode));  		}  	}  }  finally {  	//  	// Clean up after ourselves!!  	//  	File.Delete (scriptPath);  }  
Magic Number,Elmah,AccessErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\AccessErrorLog.cs,InitializeDatabase,The following statement contains a magic number: using (Process process = Process.Start (psi)) {  	//  	// A few seconds should be plenty of time to create the database.  	//  	TimeSpan tolerance = TimeSpan.FromSeconds (2);  	if (!process.WaitForExit ((int)tolerance.TotalMilliseconds)) {  		//  		// but it wasn't' so clean up and throw an exception!  		// Realistically' I don't expect to ever get here!  		//  		process.Kill ();  		throw new Exception (string.Format ("The Microsoft Access database creation script took longer than the allocated time of {0} seconds to execute. " + "The script was terminated prematurely."' tolerance.TotalSeconds));  	}  	if (process.ExitCode != 0) {  		throw new Exception (string.Format ("The Microsoft Access database creation script failed with exit code {0}."' process.ExitCode));  	}  }  
Magic Number,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,RenderCollection,The following statement contains a magic number: for (int keyIndex = 0; keyIndex < keys.Length; keyIndex++) {  	string key = keys [keyIndex];  	TableRow bodyRow = new TableRow ();  	bodyRow.CssClass = keyIndex % 2 == 0 ? "even-row" : "odd-row";  	TableCell cell;  	//  	// Create the key column.  	//  	cell = new TableCell ();  	cell.Text = HtmlEncode (key);  	cell.CssClass = "key-col";  	bodyRow.Cells.Add (cell);  	//  	// Create the value column.  	//  	cell = new TableCell ();  	cell.Text = HtmlEncode (collection [key]);  	cell.CssClass = "value-col";  	bodyRow.Cells.Add (cell);  	table.Rows.Add (bodyRow);  }  
Magic Number,Elmah,ErrorDetailPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorDetailPage.cs,RenderCollection,The following statement contains a magic number: bodyRow.CssClass = keyIndex % 2 == 0 ? "even-row" : "odd-row";  
Magic Number,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The following statement contains a magic number: for (int errorIndex = 0; errorIndex < _errorEntryList.Count; errorIndex++) {  	ErrorLogEntry errorEntry = (ErrorLogEntry)_errorEntryList [errorIndex];  	Error error = errorEntry.Error;  	TableRow bodyRow = new TableRow ();  	bodyRow.CssClass = errorIndex % 2 == 0 ? "even-row" : "odd-row";  	//  	// Format host and status code cells.  	//  	bodyRow.Cells.Add (FormatCell (new TableCell ()' error.HostName' "host-col"));  	bodyRow.Cells.Add (FormatCell (new TableCell ()' error.StatusCode.ToString ()' "code-col"' Mask.NullString (HttpWorkerRequest.GetStatusDescription (error.StatusCode))));  	bodyRow.Cells.Add (FormatCell (new TableCell ()' ErrorDisplay.HumaneExceptionErrorType (error)' "type-col"' error.Type));  	//  	// Format the message cell' which contains the message   	// text and a details link pointing to the page where  	// all error details can be viewed.  	//  	TableCell messageCell = new TableCell ();  	messageCell.CssClass = "error-col";  	Label messageLabel = new Label ();  	messageLabel.Text = this.Server.HtmlEncode (error.Message);  	HyperLink detailsLink = new HyperLink ();  	detailsLink.NavigateUrl = BasePageName + "/detail?id=" + HttpUtility.UrlEncode (errorEntry.Id);  	detailsLink.Text = "Details&hellip;";  	messageCell.Controls.Add (messageLabel);  	messageCell.Controls.Add (new LiteralControl (" "));  	messageCell.Controls.Add (detailsLink);  	bodyRow.Cells.Add (messageCell);  	//  	// Format the user' date and time cells.  	//  	bodyRow.Cells.Add (FormatCell (new TableCell ()' error.User' "user-col"));  	bodyRow.Cells.Add (FormatCell (new TableCell ()' error.Time.ToShortDateString ()' "date-col"' error.Time.ToLongDateString ()));  	bodyRow.Cells.Add (FormatCell (new TableCell ()' error.Time.ToShortTimeString ()' "time-col"' error.Time.ToLongTimeString ()));  	//  	// Finally' add the row to the table.  	//  	table.Rows.Add (bodyRow);  }  
Magic Number,Elmah,ErrorLogPage,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPage.cs,RenderErrors,The following statement contains a magic number: bodyRow.CssClass = errorIndex % 2 == 0 ? "even-row" : "odd-row";  
Magic Number,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The following statement contains a magic number: if (handler == null)  	throw new HttpException (404' "Resource not found.");  
Magic Number,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetHandler,The following statement contains a magic number: throw new HttpException (404' "Resource not found.");  
Magic Number,Elmah,ErrorLogPageFactory,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorLogPageFactory.cs,GetAuthorizationHandlers,The following statement contains a magic number: if (handlers == null) {  	const int capacity = 4;  	ArrayList list = null;  	HttpApplication application = context.ApplicationInstance;  	if (application is IRequestAuthorizationHandler) {  		list = new ArrayList (capacity);  		list.Add (application);  	}  	foreach (IHttpModule module in HttpModuleRegistry.GetModules (application)) {  		if (module is IRequestAuthorizationHandler) {  			if (list == null)  				list = new ArrayList (capacity);  			list.Add (module);  		}  	}  	context.Items [key] = handlers = ArrayList.ReadOnly (list != null ? list.ToArray (typeof(IRequestAuthorizationHandler)) : _zeroAuthorizationHandlers);  }  
Magic Number,Elmah,ErrorTweetModule,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ErrorTweetModule.cs,OnInit,The following statement contains a magic number: _requests = ArrayList.Synchronized (new ArrayList (4));  
Magic Number,Elmah,HttpModuleRegistry,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpModuleRegistry.cs,RegisterInPartialTrust,The following statement contains a magic number: lock (_lock) {  	//  	// On-demand allocate a map of modules per application.  	//  	if (_moduleListByApp == null)  		_moduleListByApp = new Hashtable ();  	//  	// Get the list of modules for the application. If this is  	// the first registration for the supplied application object  	// then setup a new and empty list.  	//  	IList moduleList = (IList)_moduleListByApp [application];  	if (moduleList == null) {  		moduleList = new ArrayList (4);  		_moduleListByApp.Add (application' moduleList);  	}  	else if (moduleList.Contains (module))  		throw new ApplicationException ("Duplicate module registration.");  	//  	// Add the module to list of registered modules for the   	// given application object.  	//  	moduleList.Add (module);  }  
Magic Number,Elmah,HttpModuleRegistry,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpModuleRegistry.cs,RegisterInPartialTrust,The following statement contains a magic number: if (moduleList == null) {  	moduleList = new ArrayList (4);  	_moduleListByApp.Add (application' moduleList);  }  else if (moduleList.Contains (module))  	throw new ApplicationException ("Duplicate module registration.");  
Magic Number,Elmah,HttpModuleRegistry,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpModuleRegistry.cs,RegisterInPartialTrust,The following statement contains a magic number: moduleList = new ArrayList (4);  
Magic Number,Elmah,HttpStatus,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpStatus.cs,HttpStatus,The following statement contains a magic number: Debug.Assert (code >= 100);  
Magic Number,Elmah,HttpStatus,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\HttpStatus.cs,HttpStatus,The following statement contains a magic number: Debug.Assert (code < 1000);  
Magic Number,Elmah,ManifestResourceHelper,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\ManifestResourceHelper.cs,WriteResourceToStream,The following statement contains a magic number: using (Stream inputStream = thisType.Assembly.GetManifestResourceStream (thisType' resourceName)) {  	//  	// Allocate a buffer for reading the stream. The maximum size  	// of this buffer is fixed to 4 KB.  	//  	byte[] buffer = new byte[Math.Min (inputStream.Length' 4096)];  	//  	// Finally' write out the bytes!  	//  	int readLength = inputStream.Read (buffer' 0' buffer.Length);  	while (readLength > 0) {  		outputStream.Write (buffer' 0' readLength);  		readLength = inputStream.Read (buffer' 0' buffer.Length);  	}  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		connection.Open ();  		using (OracleTransaction transaction = connection.BeginTransaction ()) {  			// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  			// so first we've got to operate within a transaction  			command.Transaction = transaction;  			// then we need to create a temporary lob on the database server  			command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  			command.CommandType = CommandType.Text;  			OracleParameterCollection parameters = command.Parameters;  			parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			// now we can get a handle to the NClob  			OracleLob xmlLob = (OracleLob)parameters [0].Value;  			// create a temporary buffer in which to store the XML  			byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  			// and finally we can write to it!  			xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			xmlLob.Write (tempbuff' 0' tempbuff.Length);  			xmlLob.EndBatch ();  			command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  			command.CommandType = CommandType.StoredProcedure;  			parameters.Clear ();  			parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  			parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  			parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  			parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  			parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  			parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  			parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  			parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  			parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  			parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  			command.ExecuteNonQuery ();  			transaction.Commit ();  		}  		return id.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	connection.Open ();  	using (OracleTransaction transaction = connection.BeginTransaction ()) {  		// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  		// so first we've got to operate within a transaction  		command.Transaction = transaction;  		// then we need to create a temporary lob on the database server  		command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  		command.CommandType = CommandType.Text;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		// now we can get a handle to the NClob  		OracleLob xmlLob = (OracleLob)parameters [0].Value;  		// create a temporary buffer in which to store the XML  		byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  		// and finally we can write to it!  		xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		xmlLob.Write (tempbuff' 0' tempbuff.Length);  		xmlLob.EndBatch ();  		command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  		command.CommandType = CommandType.StoredProcedure;  		parameters.Clear ();  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  		parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  		parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  		parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  		parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  		parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  		parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  		command.ExecuteNonQuery ();  		transaction.Commit ();  	}  	return id.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleTransaction transaction = connection.BeginTransaction ()) {  	// because we are storing the XML data in a NClob' we need to jump through a few hoops!!  	// so first we've got to operate within a transaction  	command.Transaction = transaction;  	// then we need to create a temporary lob on the database server  	command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";  	command.CommandType = CommandType.Text;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	// now we can get a handle to the NClob  	OracleLob xmlLob = (OracleLob)parameters [0].Value;  	// create a temporary buffer in which to store the XML  	byte[] tempbuff = Encoding.Unicode.GetBytes (errorXml);  	// and finally we can write to it!  	xmlLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	xmlLob.Write (tempbuff' 0' tempbuff.Length);  	xmlLob.EndBatch ();  	command.CommandText = SchemaOwner + "pkg_elmah$log_error.LogError";  	command.CommandType = CommandType.StoredProcedure;  	parameters.Clear ();  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  	parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  	parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  	parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  	parameters.Add ("v_AllXml"' OracleType.NClob).Value = xmlLob;  	parameters.Add ("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;  	parameters.Add ("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime ();  	command.ExecuteNonQuery ();  	transaction.Commit ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString ("N");  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_Type"' OracleType.NVarChar' 100).Value = error.Type;  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_Source"' OracleType.NVarChar' 60).Value = error.Source;  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_Message"' OracleType.NVarChar' 500).Value = error.Message;  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("v_User"' OracleType.NVarChar' 50).Value = error.User;  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		command.CommandText = SchemaOwner + "pkg_elmah$get_error.GetErrorXml";  		command.CommandType = CommandType.StoredProcedure;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString ("N");  		parameters.Add ("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;  		connection.Open ();  		command.ExecuteNonQuery ();  		OracleLob xmlLob = (OracleLob)command.Parameters ["v_AllXml"].Value;  		StreamReader streamreader = new StreamReader (xmlLob' Encoding.Unicode);  		char[] cbuffer = new char[1000];  		int actual;  		StringBuilder sb = new StringBuilder ();  		while ((actual = streamreader.Read (cbuffer' 0' cbuffer.Length)) > 0)  			sb.Append (cbuffer' 0' actual);  		errorXml = sb.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection (this.ConnectionString))  	using (OracleCommand command = connection.CreateCommand ()) {  		command.CommandText = SchemaOwner + "pkg_elmah$get_error.GetErrorXml";  		command.CommandType = CommandType.StoredProcedure;  		OracleParameterCollection parameters = command.Parameters;  		parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  		parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString ("N");  		parameters.Add ("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;  		connection.Open ();  		command.ExecuteNonQuery ();  		OracleLob xmlLob = (OracleLob)command.Parameters ["v_AllXml"].Value;  		StreamReader streamreader = new StreamReader (xmlLob' Encoding.Unicode);  		char[] cbuffer = new char[1000];  		int actual;  		StringBuilder sb = new StringBuilder ();  		while ((actual = streamreader.Read (cbuffer' 0' cbuffer.Length)) > 0)  			sb.Append (cbuffer' 0' actual);  		errorXml = sb.ToString ();  	}  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	command.CommandText = SchemaOwner + "pkg_elmah$get_error.GetErrorXml";  	command.CommandType = CommandType.StoredProcedure;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString ("N");  	parameters.Add ("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;  	connection.Open ();  	command.ExecuteNonQuery ();  	OracleLob xmlLob = (OracleLob)command.Parameters ["v_AllXml"].Value;  	StreamReader streamreader = new StreamReader (xmlLob' Encoding.Unicode);  	char[] cbuffer = new char[1000];  	int actual;  	StringBuilder sb = new StringBuilder ();  	while ((actual = streamreader.Read (cbuffer' 0' cbuffer.Length)) > 0)  		sb.Append (cbuffer' 0' actual);  	errorXml = sb.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleCommand command = connection.CreateCommand ()) {  	command.CommandText = SchemaOwner + "pkg_elmah$get_error.GetErrorXml";  	command.CommandType = CommandType.StoredProcedure;  	OracleParameterCollection parameters = command.Parameters;  	parameters.Add ("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;  	parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString ("N");  	parameters.Add ("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;  	connection.Open ();  	command.ExecuteNonQuery ();  	OracleLob xmlLob = (OracleLob)command.Parameters ["v_AllXml"].Value;  	StreamReader streamreader = new StreamReader (xmlLob' Encoding.Unicode);  	char[] cbuffer = new char[1000];  	int actual;  	StringBuilder sb = new StringBuilder ();  	while ((actual = streamreader.Read (cbuffer' 0' cbuffer.Length)) > 0)  		sb.Append (cbuffer' 0' actual);  	errorXml = sb.ToString ();  }  
Magic Number,Elmah,OracleErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: parameters.Add ("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString ("N");  
Magic Number,Elmah,SecurityConfiguration,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SecurityConfiguration.cs,SecurityConfiguration,The following statement contains a magic number: if (_blockFailedAttempts == 0)  	_blockFailedAttempts = 3;  
Magic Number,Elmah,SecurityConfiguration,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SecurityConfiguration.cs,SecurityConfiguration,The following statement contains a magic number: _blockFailedAttempts = 3;  
Magic Number,Elmah,SqlErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlErrorLog.cs,ReadSingleXmlStringResult,The following statement contains a magic number: using (reader) {  	if (!reader.Read ())  		return null;  	//  	// See following MS KB article why the XML string is read   	// and reconstructed in chunks:  	//  	// The XML data row is truncated at 2'033 characters when you use the SqlDataReader object  	// http://support.microsoft.com/kb/310378  	//   	// When you read XML data from Microsoft SQL Server by using   	// the SqlDataReader object' the XML in the first column of   	// the first row is truncated at 2'033 characters. You   	// expect all of the contents of the XML data to be   	// contained in a single row and column. This behavior   	// occurs because' for XML results greater than 2'033   	// characters in length' SQL Server returns the XML in   	// multiple rows of 2'033 characters each.   	//  	// See also comment 18 in issue 129:  	// http://code.google.com/p/elmah/issues/detail?id=129#c18  	//  	StringBuilder sb = new StringBuilder (/* capacity */2033);  	do {  		sb.Append (reader.GetString (0));  	}  	while (reader.Read ());  	return sb.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  		parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  		parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  		parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  		parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  		parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  		command.Connection = connection;  		connection.Open ();  		command.ExecuteNonQuery ();  		return id.ToString ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (query' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  	parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  	parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  	parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  	parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  	parameters.Add ("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' SqlDbType.NText).Value = errorXml;  	command.Connection = connection;  	connection.Open ();  	command.ExecuteNonQuery ();  	return id.ToString ();  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@User"' SqlDbType.NVarChar' 50).Value = error.User;  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,GetErrors,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection (ConnectionString)) {  	connection.Open ();  	using (SqlCeCommand command = new SqlCeCommand (sql' connection)) {  		SqlCeParameterCollection parameters = command.Parameters;  		parameters.Add ("@PageIndex"' SqlDbType.Int).Value = pageIndex;  		parameters.Add ("@PageSize"' SqlDbType.Int).Value = pageSize;  		parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  		using (SqlCeDataReader reader = command.ExecuteReader ()) {  			if (errorEntryList != null) {  				while (reader.Read ()) {  					string id = reader ["ErrorId"].ToString ();  					Elmah.Error error = new Elmah.Error ();  					error.ApplicationName = reader ["Application"].ToString ();  					error.HostName = reader ["Host"].ToString ();  					error.Type = reader ["Type"].ToString ();  					error.Source = reader ["Source"].ToString ();  					error.Message = reader ["Message"].ToString ();  					error.User = reader ["User"].ToString ();  					error.StatusCode = Convert.ToInt32 (reader ["StatusCode"]);  					error.Time = Convert.ToDateTime (reader ["TimeUtc"]).ToLocalTime ();  					errorEntryList.Add (new ErrorLogEntry (this' id' error));  				}  			}  		}  	}  	using (SqlCeCommand command = new SqlCeCommand (getCount' connection)) {  		return (int)command.ExecuteScalar ();  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,GetErrors,The following statement contains a magic number: using (SqlCeCommand command = new SqlCeCommand (sql' connection)) {  	SqlCeParameterCollection parameters = command.Parameters;  	parameters.Add ("@PageIndex"' SqlDbType.Int).Value = pageIndex;  	parameters.Add ("@PageSize"' SqlDbType.Int).Value = pageSize;  	parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  	using (SqlCeDataReader reader = command.ExecuteReader ()) {  		if (errorEntryList != null) {  			while (reader.Read ()) {  				string id = reader ["ErrorId"].ToString ();  				Elmah.Error error = new Elmah.Error ();  				error.ApplicationName = reader ["Application"].ToString ();  				error.HostName = reader ["Host"].ToString ();  				error.Type = reader ["Type"].ToString ();  				error.Source = reader ["Source"].ToString ();  				error.Message = reader ["Message"].ToString ();  				error.User = reader ["User"].ToString ();  				error.StatusCode = Convert.ToInt32 (reader ["StatusCode"]);  				error.Time = Convert.ToDateTime (reader ["TimeUtc"]).ToLocalTime ();  				errorEntryList.Add (new ErrorLogEntry (this' id' error));  			}  		}  	}  }  
Magic Number,Elmah,SqlServerCompactErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SqlServerCompactErrorLog.cs,GetErrors,The following statement contains a magic number: parameters.Add ("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection (ConnectionString))  	using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  		SQLiteParameterCollection parameters = command.Parameters;  		parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  		parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  		parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  		parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  		parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  		parameters.Add ("@User"' DbType.String' 50).Value = error.User;  		parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  		parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  		parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  		connection.Open ();  		return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  	}  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteCommand command = new SQLiteCommand (query' connection)) {  	SQLiteParameterCollection parameters = command.Parameters;  	parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  	parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  	parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  	parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  	parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  	parameters.Add ("@User"' DbType.String' 50).Value = error.User;  	parameters.Add ("@StatusCode"' DbType.Int64).Value = error.StatusCode;  	parameters.Add ("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime ();  	parameters.Add ("@AllXml"' DbType.String).Value = errorXml;  	connection.Open ();  	return Convert.ToInt64 (command.ExecuteScalar ()).ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Application"' DbType.String' 60).Value = ApplicationName;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Host"' DbType.String' 30).Value = error.HostName;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Type"' DbType.String' 100).Value = error.Type;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Source"' DbType.String' 60).Value = error.Source;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@Message"' DbType.String' 500).Value = error.Message;  
Magic Number,Elmah,SQLiteErrorLog,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: parameters.Add ("@User"' DbType.String' 50).Value = error.User;  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,EncryptStringAES,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	Rfc2898DeriveBytes key = new Rfc2898DeriveBytes (sharedSecret' _salt);  	// Create a RijndaelManaged object  	// with the specified key and IV.  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  	// Create a decrytor to perform the stream transform.  	ICryptoTransform encryptor = aesAlg.CreateEncryptor (aesAlg.Key' aesAlg.IV);  	// Create the streams used for encryption.  	using (MemoryStream msEncrypt = new MemoryStream ()) {  		using (CryptoStream csEncrypt = new CryptoStream (msEncrypt' encryptor' CryptoStreamMode.Write)) {  			using (StreamWriter swEncrypt = new StreamWriter (csEncrypt)) {  				//Write all data to the stream.  				swEncrypt.Write (plainText);  			}  		}  		outStr = Convert.ToBase64String (msEncrypt.ToArray ());  	}  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,EncryptStringAES,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	Rfc2898DeriveBytes key = new Rfc2898DeriveBytes (sharedSecret' _salt);  	// Create a RijndaelManaged object  	// with the specified key and IV.  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  	// Create a decrytor to perform the stream transform.  	ICryptoTransform encryptor = aesAlg.CreateEncryptor (aesAlg.Key' aesAlg.IV);  	// Create the streams used for encryption.  	using (MemoryStream msEncrypt = new MemoryStream ()) {  		using (CryptoStream csEncrypt = new CryptoStream (msEncrypt' encryptor' CryptoStreamMode.Write)) {  			using (StreamWriter swEncrypt = new StreamWriter (csEncrypt)) {  				//Write all data to the stream.  				swEncrypt.Write (plainText);  			}  		}  		outStr = Convert.ToBase64String (msEncrypt.ToArray ());  	}  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,EncryptStringAES,The following statement contains a magic number: aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,EncryptStringAES,The following statement contains a magic number: aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,DecryptStringAES,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	Rfc2898DeriveBytes key = new Rfc2898DeriveBytes (sharedSecret' _salt);  	// Create a RijndaelManaged object  	// with the specified key and IV.  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  	// Create a decrytor to perform the stream transform.  	ICryptoTransform decryptor = aesAlg.CreateDecryptor (aesAlg.Key' aesAlg.IV);  	// Create the streams used for decryption.                  	byte[] bytes = Convert.FromBase64String (cipherText);  	using (MemoryStream msDecrypt = new MemoryStream (bytes)) {  		using (CryptoStream csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  			using (StreamReader srDecrypt = new StreamReader (csDecrypt))  				// Read the decrypted bytes from the decrypting stream  				// and place them in a string.  				plaintext = srDecrypt.ReadToEnd ();  		}  	}  }  catch {  	plaintext = string.Empty;  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,DecryptStringAES,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	Rfc2898DeriveBytes key = new Rfc2898DeriveBytes (sharedSecret' _salt);  	// Create a RijndaelManaged object  	// with the specified key and IV.  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  	// Create a decrytor to perform the stream transform.  	ICryptoTransform decryptor = aesAlg.CreateDecryptor (aesAlg.Key' aesAlg.IV);  	// Create the streams used for decryption.                  	byte[] bytes = Convert.FromBase64String (cipherText);  	using (MemoryStream msDecrypt = new MemoryStream (bytes)) {  		using (CryptoStream csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  			using (StreamReader srDecrypt = new StreamReader (csDecrypt))  				// Read the decrypted bytes from the decrypting stream  				// and place them in a string.  				plaintext = srDecrypt.ReadToEnd ();  		}  	}  }  catch {  	plaintext = string.Empty;  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,DecryptStringAES,The following statement contains a magic number: aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  
Magic Number,Elmah,StrEncrypt,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\StrEncrypt.cs,DecryptStringAES,The following statement contains a magic number: aesAlg.IV = key.GetBytes (aesAlg.BlockSize / 8);  
Magic Number,Elmah.Assertions,JScriptAssertion,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\JScriptAssertion.cs,AddDirectiveParameter,The following statement contains a magic number: if (list == null) {  	list = new ArrayList (/* capacity */(inits != null ? inits.Length : 0) + 4);  	if (inits != null)  		list.AddRange (inits);  }  
Magic Number,Elmah.Assertions,JScriptAssertion,C:\repos\ockertv_Elmah\src\Solutions\2012\..\..\Elmah\Assertions\JScriptAssertion.cs,AddDirectiveParameter,The following statement contains a magic number: list = new ArrayList (/* capacity */(inits != null ? inits.Length : 0) + 4);  
